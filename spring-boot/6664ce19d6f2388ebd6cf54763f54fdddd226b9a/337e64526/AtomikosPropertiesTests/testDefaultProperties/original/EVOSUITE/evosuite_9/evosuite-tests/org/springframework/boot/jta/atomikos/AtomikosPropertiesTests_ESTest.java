/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 04 10:08:10 GMT 2021
 */

package org.springframework.boot.jta.atomikos;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Properties;
import org.assertj.core.data.MapEntry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jcp.xml.dsig.internal.dom.XMLDSigRI;
import org.junit.ComparisonFailure;
import org.junit.runner.RunWith;
import org.springframework.boot.jta.atomikos.AtomikosLoggingLevel;
import org.springframework.boot.jta.atomikos.AtomikosProperties;
import org.springframework.boot.jta.atomikos.AtomikosPropertiesTests;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AtomikosPropertiesTests_ESTest extends AtomikosPropertiesTests_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertFalse(properties0.isEmpty());
      assertEquals(21, properties0.size());
      
      atomikosPropertiesTests0.setproperties(atomikosPropertiesTests0.properties);
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      String[] stringArray0 = new String[1];
      String string0 = "w";
      stringArray0[0] = string0;
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertNotNull(mapEntryArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, mapEntryArray0.length);
      assertFalse(properties0.isEmpty());
      assertEquals(21, properties0.size());
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string0, string0);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      String string0 = "!STARTED: ";
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string0, string0);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties0);
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertEquals(21, properties0.size());
      assertFalse(properties0.isEmpty());
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties1);
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getOutputDir());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertNull(atomikosProperties1.getService());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertSame(atomikosProperties1, atomikosProperties0);
      
      boolean boolean0 = false;
      atomikosPropertiesTests0.properties.setEnableLogging(boolean0);
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties1);
      assertTrue(properties1.equals((Object)properties0));
      assertFalse(properties1.isEmpty());
      assertEquals(21, properties1.size());
      assertNotSame(properties1, properties0);
      
      atomikosPropertiesTests0.properties = atomikosProperties1;
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertFalse(atomikosPropertiesTests0.properties.isEnableLogging());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      
      int int0 = 18;
      atomikosProperties1.setMaxActives(int0);
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getOutputDir());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertNull(atomikosProperties1.getService());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(18, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertFalse(atomikosProperties1.isEnableLogging());
      assertSame(atomikosProperties1, atomikosProperties0);
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties2);
      assertNull(atomikosProperties2.getOutputDir());
      assertEquals((-1), atomikosProperties2.getConsoleFileLimit());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties2.isAllowSubTransactions());
      assertNull(atomikosProperties2.getService());
      assertEquals("tm.out", atomikosProperties2.getConsoleFileName());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertEquals(1, atomikosProperties2.getConsoleFileCount());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertEquals(18, atomikosProperties2.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties2.getConsoleLogLevel());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertFalse(atomikosProperties2.isEnableLogging());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertSame(atomikosProperties2, atomikosProperties1);
      assertSame(atomikosProperties2, atomikosProperties0);
      
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.jta.atomikos.AtomikosPropertiesTests", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.jta.atomikos.AtomikosPropertiesTests", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertEquals(21, properties0.size());
      assertFalse(properties0.isEmpty());
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties0);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      String[] stringArray0 = new String[0];
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertNotNull(mapEntryArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, mapEntryArray0.length);
      assertEquals(21, properties0.size());
      assertFalse(properties0.isEmpty());
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      String[] stringArray0 = new String[1];
      String string0 = "}ar\\HrT";
      stringArray0[0] = string0;
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertNotNull(mapEntryArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, mapEntryArray0.length);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertFalse(properties0.isEmpty());
      assertEquals(21, properties0.size());
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties1);
      assertTrue(properties1.equals((Object)properties0));
      assertFalse(properties1.isEmpty());
      assertEquals(21, properties1.size());
      assertNotSame(properties1, properties0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties0);
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      
      String string0 = "org/eclipse/jetty/xml/configure_9_0.dtd";
      String string1 = "";
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.properties;
      assertNotNull(atomikosProperties1);
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertNull(atomikosProperties1.getService());
      assertNull(atomikosProperties1.getOutputDir());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertSame(atomikosProperties1, atomikosProperties0);
      
      atomikosPropertiesTests0.properties = atomikosProperties1;
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertNull(atomikosProperties1.getService());
      assertNull(atomikosProperties1.getOutputDir());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      
      int int0 = 509;
      atomikosProperties1.setConsoleFileCount(int0);
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertNull(atomikosProperties1.getService());
      assertNull(atomikosProperties1.getOutputDir());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(509, atomikosProperties1.getConsoleFileCount());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertSame(atomikosProperties1, atomikosProperties0);
      
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string0, string1);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = null;
      String[] stringArray0 = new String[5];
      String string0 = "~Ytp+y=k}<$a[AK";
      stringArray0[0] = string0;
      String string1 = "";
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.properties;
      assertNotNull(atomikosProperties0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      
      stringArray0[1] = string1;
      String string2 = "r]=|YNo0G!bI4fc";
      stringArray0[2] = string2;
      String string3 = "Processing ";
      stringArray0[3] = string3;
      String string4 = "4KY]#Y,Wb3a";
      stringArray0[4] = string4;
      boolean boolean0 = true;
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.jta.atomikos.AtomikosPropertiesTests", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.properties;
      assertNotNull(atomikosProperties0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = properties0.put(object1, object0);
      assertNull(object2);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      
      Object object4 = properties0.remove(object3);
      assertNull(object4);
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotSame(object3, object0);
      assertNotSame(object3, object1);
      
      Object object5 = properties0.put(atomikosProperties0, object0);
      assertNull(object5);
      assertFalse(object0.equals((Object)object3));
      assertFalse(object0.equals((Object)object1));
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(2, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotSame(object0, object3);
      assertNotSame(object0, object1);
      
      String[] stringArray0 = new String[0];
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertNotNull(mapEntryArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, mapEntryArray0.length);
      assertEquals(2, properties0.size());
      assertFalse(properties0.isEmpty());
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties1);
      assertNull(atomikosProperties1.getOutputDir());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertNull(atomikosProperties1.getService());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertSame(atomikosProperties1, atomikosProperties0);
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties2);
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertEquals("tm.out", atomikosProperties2.getConsoleFileName());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties2.isAllowSubTransactions());
      assertEquals(1, atomikosProperties2.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertNull(atomikosProperties2.getOutputDir());
      assertNull(atomikosProperties2.getService());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties2.getConsoleLogLevel());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertEquals((-1), atomikosProperties2.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertSame(atomikosProperties2, atomikosProperties1);
      assertSame(atomikosProperties2, atomikosProperties0);
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertSame(atomikosProperties0, atomikosProperties2);
      assertSame(atomikosProperties0, atomikosProperties1);
      
      AtomikosProperties atomikosProperties3 = atomikosPropertiesTests0.properties;
      assertNotNull(atomikosProperties3);
      assertEquals(10000L, atomikosProperties3.getDefaultJtaTimeout());
      assertNull(atomikosProperties3.getOutputDir());
      assertTrue(atomikosProperties3.isEnableLogging());
      assertEquals(1, atomikosProperties3.getConsoleFileCount());
      assertTrue(atomikosProperties3.isAllowSubTransactions());
      assertTrue(atomikosProperties3.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties3.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties3.getLogBaseName());
      assertEquals(50, atomikosProperties3.getMaxActives());
      assertEquals("tm.out", atomikosProperties3.getConsoleFileName());
      assertEquals(500L, atomikosProperties3.getCheckpointInterval());
      assertNull(atomikosProperties3.getLogBaseDir());
      assertEquals((-1), atomikosProperties3.getConsoleFileLimit());
      assertNull(atomikosProperties3.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties3.getConsoleLogLevel());
      assertFalse(atomikosProperties3.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties3.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties3.getService());
      assertSame(atomikosProperties3, atomikosProperties2);
      assertSame(atomikosProperties3, atomikosProperties0);
      assertSame(atomikosProperties3, atomikosProperties1);
      
      atomikosPropertiesTests0.setproperties(atomikosProperties3);
      assertEquals(10000L, atomikosProperties3.getDefaultJtaTimeout());
      assertNull(atomikosProperties3.getOutputDir());
      assertTrue(atomikosProperties3.isEnableLogging());
      assertEquals(1, atomikosProperties3.getConsoleFileCount());
      assertTrue(atomikosProperties3.isAllowSubTransactions());
      assertTrue(atomikosProperties3.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties3.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties3.getLogBaseName());
      assertEquals(50, atomikosProperties3.getMaxActives());
      assertEquals("tm.out", atomikosProperties3.getConsoleFileName());
      assertEquals(500L, atomikosProperties3.getCheckpointInterval());
      assertNull(atomikosProperties3.getLogBaseDir());
      assertEquals((-1), atomikosProperties3.getConsoleFileLimit());
      assertNull(atomikosProperties3.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties3.getConsoleLogLevel());
      assertFalse(atomikosProperties3.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties3.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties3.getService());
      assertSame(atomikosProperties3, atomikosProperties2);
      assertSame(atomikosProperties3, atomikosProperties0);
      assertSame(atomikosProperties3, atomikosProperties1);
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties1);
      assertFalse(properties1.equals((Object)properties0));
      assertEquals(21, properties1.size());
      assertFalse(properties1.isEmpty());
      assertNotSame(properties1, properties0);
      
      String string0 = "1$qS";
      atomikosProperties1.setLogBaseDir(string0);
      assertNull(atomikosProperties1.getOutputDir());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertNull(atomikosProperties1.getService());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals("1$qS", atomikosProperties1.getLogBaseDir());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertSame(atomikosProperties1, atomikosProperties0);
      assertSame(atomikosProperties1, atomikosProperties2);
      assertSame(atomikosProperties1, atomikosProperties3);
      
      String string1 = null;
      long long0 = (-2195L);
      atomikosProperties0.setCheckpointInterval(long0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("1$qS", atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-2195L), atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertSame(atomikosProperties0, atomikosProperties2);
      assertSame(atomikosProperties0, atomikosProperties3);
      assertSame(atomikosProperties0, atomikosProperties1);
      
      String string2 = "";
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string1, string2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertFalse(properties0.isEmpty());
      assertEquals(21, properties0.size());
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      boolean boolean0 = false;
      atomikosProperties0.setAllowSubTransactions(boolean0);
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      atomikosProperties0.setForceShutdownOnVmExit(boolean0);
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties1);
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertFalse(atomikosProperties1.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getOutputDir());
      assertNull(atomikosProperties1.getService());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertSame(atomikosProperties1, atomikosProperties0);
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties2);
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties2.getService());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertEquals("tm.out", atomikosProperties2.getConsoleFileName());
      assertFalse(atomikosProperties2.isAllowSubTransactions());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertEquals((-1), atomikosProperties2.getConsoleFileLimit());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties2.getConsoleLogLevel());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertNull(atomikosProperties2.getOutputDir());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertEquals(1, atomikosProperties2.getConsoleFileCount());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertSame(atomikosProperties2, atomikosProperties0);
      assertSame(atomikosProperties2, atomikosProperties1);
      
      AtomikosProperties atomikosProperties3 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties3);
      assertTrue(atomikosProperties3.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties3.getMaxActives());
      assertEquals("tm.out", atomikosProperties3.getConsoleFileName());
      assertFalse(atomikosProperties3.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties3.getConsoleLogLevel());
      assertTrue(atomikosProperties3.isEnableLogging());
      assertEquals("tmlog", atomikosProperties3.getLogBaseName());
      assertEquals(500L, atomikosProperties3.getCheckpointInterval());
      assertEquals((-1), atomikosProperties3.getConsoleFileLimit());
      assertNull(atomikosProperties3.getLogBaseDir());
      assertNull(atomikosProperties3.getService());
      assertEquals(1, atomikosProperties3.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties3.getDefaultJtaTimeout());
      assertFalse(atomikosProperties3.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties3.isAllowSubTransactions());
      assertNull(atomikosProperties3.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties3.getMaxTimeout());
      assertNull(atomikosProperties3.getOutputDir());
      assertSame(atomikosProperties3, atomikosProperties2);
      assertSame(atomikosProperties3, atomikosProperties0);
      assertSame(atomikosProperties3, atomikosProperties1);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.properties;
      assertNotNull(atomikosProperties0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      
      String string0 = null;
      atomikosProperties0.setLogBaseDir(string0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      
      boolean boolean0 = false;
      atomikosProperties0.setAllowSubTransactions(boolean0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      
      int int0 = (-939);
      boolean boolean1 = true;
      atomikosProperties0.setEnableLogging(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      
      atomikosProperties0.setConsoleFileCount(int0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-939), atomikosProperties0.getConsoleFileCount());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-939), atomikosProperties0.getConsoleFileCount());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertFalse(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertEquals((-939), atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties1);
      assertEquals((-939), atomikosProperties1.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getService());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getOutputDir());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertFalse(atomikosProperties1.isAllowSubTransactions());
      assertSame(atomikosProperties1, atomikosProperties0);
      
      boolean boolean2 = false;
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean2);
      assertFalse(boolean2 == boolean1);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-939), atomikosProperties0.getConsoleFileCount());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertSame(atomikosProperties0, atomikosProperties1);
      
      String string1 = "3000";
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean1);
      assertFalse(boolean1 == boolean2);
      assertFalse(boolean1 == boolean0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-939), atomikosProperties0.getConsoleFileCount());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertSame(atomikosProperties0, atomikosProperties1);
      
      String string2 = "";
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string1, string2);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertFalse(properties0.isEmpty());
      assertEquals(21, properties0.size());
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties0);
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      
      String string0 = ":9W$h&reD6^Cs!96e*";
      String string1 = "clazz";
      atomikosPropertiesTests0.properties.setOutputDir(string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("clazz", atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals("clazz", atomikosPropertiesTests0.properties.getOutputDir());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      
      String string2 = null;
      atomikosPropertiesTests0.assertProperty(string0, string2);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties1);
      assertTrue(properties1.equals((Object)properties0));
      assertEquals(21, properties1.size());
      assertFalse(properties1.isEmpty());
      assertNotSame(properties1, properties0);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertFalse(properties0.isEmpty());
      assertEquals(21, properties0.size());
      
      AtomikosProperties atomikosProperties0 = null;
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties1);
      assertTrue(properties1.equals((Object)properties0));
      assertEquals(21, properties1.size());
      assertFalse(properties1.isEmpty());
      assertNotSame(properties1, properties0);
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNull(atomikosProperties1);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      boolean boolean0 = true;
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      
      String[] stringArray0 = new String[0];
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertNotNull(mapEntryArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, mapEntryArray0.length);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties1);
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertNull(atomikosProperties1.getOutputDir());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getService());
      assertTrue(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertSame(atomikosProperties1, atomikosProperties0);
      
      String string0 = "";
      String string1 = ";e{_";
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string0, string1);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.properties;
      assertNotNull(atomikosProperties0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      
      int int0 = 461;
      atomikosProperties0.setMaxTimeout(int0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(461L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      
      atomikosProperties0.setConsoleFileLimit(int0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(461, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(461L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(50, atomikosProperties0.getMaxActives());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(461, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(461L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(50, atomikosProperties0.getMaxActives());
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertFalse(properties0.isEmpty());
      assertEquals(21, properties0.size());
      
      String[] stringArray0 = new String[9];
      String string0 = "persistentManager.loading";
      stringArray0[0] = string0;
      String string1 = "";
      stringArray0[1] = string1;
      String string2 = "";
      stringArray0[2] = string2;
      String string3 = "zJ)|IS";
      stringArray0[3] = string3;
      String string4 = "m+";
      stringArray0[4] = string4;
      String string5 = "[k#o";
      stringArray0[5] = string5;
      String string6 = "4,to:'~v$9<E~cE";
      stringArray0[6] = string6;
      String string7 = "reactor.core.publisher.Flux";
      stringArray0[7] = string7;
      String string8 = "2w.IsV|$Dj,M`";
      stringArray0[8] = string8;
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertNotNull(mapEntryArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(9, mapEntryArray0.length);
      assertFalse(properties0.isEmpty());
      assertEquals(21, properties0.size());
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties1);
      assertTrue(properties1.equals((Object)properties0));
      assertFalse(properties1.isEmpty());
      assertEquals(21, properties1.size());
      assertNotSame(properties1, properties0);
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties1);
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getService());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertNull(atomikosProperties1.getOutputDir());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals(461L, atomikosProperties1.getMaxTimeout());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(461, atomikosProperties1.getConsoleFileLimit());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertSame(atomikosProperties1, atomikosProperties0);
      
      MapEntry<?, ?>[] mapEntryArray1 = atomikosPropertiesTests0.defaultOf(properties1, stringArray0);
      assertNotNull(mapEntryArray1);
      assertTrue(properties1.equals((Object)properties0));
      assertFalse(mapEntryArray1.equals((Object)mapEntryArray0));
      assertEquals(9, stringArray0.length);
      assertEquals(9, mapEntryArray1.length);
      assertFalse(properties1.isEmpty());
      assertEquals(21, properties1.size());
      assertNotSame(properties1, properties0);
      assertNotSame(mapEntryArray1, mapEntryArray0);
      
      Properties properties2 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties2);
      assertTrue(properties2.equals((Object)properties1));
      assertTrue(properties2.equals((Object)properties0));
      assertEquals(21, properties2.size());
      assertFalse(properties2.isEmpty());
      assertNotSame(properties2, properties1);
      assertNotSame(properties2, properties0);
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = null;
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      AtomikosProperties atomikosProperties1 = new AtomikosProperties();
      assertNotNull(atomikosProperties1);
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertNull(atomikosProperties1.getService());
      assertNull(atomikosProperties1.getOutputDir());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      
      int int0 = 195;
      atomikosProperties1.setMaxActives(int0);
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertNull(atomikosProperties1.getService());
      assertNull(atomikosProperties1.getOutputDir());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(195, atomikosProperties1.getMaxActives());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      
      long long0 = (-858L);
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertFalse(properties0.isEmpty());
      assertEquals(21, properties0.size());
      
      String string0 = "TLS_DHE_PSK_WITH_AES_128_CBC_SHA256";
      atomikosProperties1.setService(string0);
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals("TLS_DHE_PSK_WITH_AES_128_CBC_SHA256", atomikosProperties1.getService());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertNull(atomikosProperties1.getOutputDir());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(195, atomikosProperties1.getMaxActives());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      
      atomikosProperties1.setDefaultJtaTimeout(long0);
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals("TLS_DHE_PSK_WITH_AES_128_CBC_SHA256", atomikosProperties1.getService());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertNull(atomikosProperties1.getOutputDir());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals((-858L), atomikosProperties1.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(195, atomikosProperties1.getMaxActives());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      
      boolean boolean0 = false;
      boolean boolean1 = true;
      atomikosProperties1.setEnableLogging(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals("TLS_DHE_PSK_WITH_AES_128_CBC_SHA256", atomikosProperties1.getService());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertNull(atomikosProperties1.getOutputDir());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals((-858L), atomikosProperties1.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(195, atomikosProperties1.getMaxActives());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      
      atomikosProperties1.setForceShutdownOnVmExit(boolean0);
      assertFalse(boolean0 == boolean1);
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals("TLS_DHE_PSK_WITH_AES_128_CBC_SHA256", atomikosProperties1.getService());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertNull(atomikosProperties1.getOutputDir());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals((-858L), atomikosProperties1.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(195, atomikosProperties1.getMaxActives());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties1);
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals("TLS_DHE_PSK_WITH_AES_128_CBC_SHA256", atomikosProperties1.getService());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertNull(atomikosProperties1.getOutputDir());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals((-858L), atomikosProperties1.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(195, atomikosProperties1.getMaxActives());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties2);
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertEquals("tm.out", atomikosProperties2.getConsoleFileName());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertEquals("TLS_DHE_PSK_WITH_AES_128_CBC_SHA256", atomikosProperties2.getService());
      assertEquals((-1), atomikosProperties2.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties2.getConsoleLogLevel());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties2.isAllowSubTransactions());
      assertEquals(1, atomikosProperties2.getConsoleFileCount());
      assertEquals(195, atomikosProperties2.getMaxActives());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertNull(atomikosProperties2.getOutputDir());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertEquals((-858L), atomikosProperties2.getDefaultJtaTimeout());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertSame(atomikosProperties2, atomikosProperties1);
      
      atomikosPropertiesTests0.properties = atomikosProperties2;
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertEquals("tm.out", atomikosProperties2.getConsoleFileName());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertEquals("TLS_DHE_PSK_WITH_AES_128_CBC_SHA256", atomikosProperties2.getService());
      assertEquals((-1), atomikosProperties2.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties2.getConsoleLogLevel());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties2.isAllowSubTransactions());
      assertEquals(1, atomikosProperties2.getConsoleFileCount());
      assertEquals(195, atomikosProperties2.getMaxActives());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertNull(atomikosProperties2.getOutputDir());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertEquals((-858L), atomikosProperties2.getDefaultJtaTimeout());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertEquals((-858L), atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertEquals("TLS_DHE_PSK_WITH_AES_128_CBC_SHA256", atomikosPropertiesTests0.properties.getService());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertEquals(195, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      
      AtomikosProperties atomikosProperties3 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties3);
      assertTrue(atomikosProperties3.isEnableLogging());
      assertTrue(atomikosProperties3.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties3.getConsoleFileName());
      assertEquals(300000L, atomikosProperties3.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties3.getLogBaseName());
      assertEquals(500L, atomikosProperties3.getCheckpointInterval());
      assertEquals(195, atomikosProperties3.getMaxActives());
      assertEquals(1, atomikosProperties3.getConsoleFileCount());
      assertNull(atomikosProperties3.getTransactionManagerUniqueName());
      assertEquals((-858L), atomikosProperties3.getDefaultJtaTimeout());
      assertNull(atomikosProperties3.getOutputDir());
      assertFalse(atomikosProperties3.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties3.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties3.getConsoleLogLevel());
      assertFalse(atomikosProperties3.isForceShutdownOnVmExit());
      assertEquals("TLS_DHE_PSK_WITH_AES_128_CBC_SHA256", atomikosProperties3.getService());
      assertNull(atomikosProperties3.getLogBaseDir());
      assertEquals((-1), atomikosProperties3.getConsoleFileLimit());
      assertSame(atomikosProperties3, atomikosProperties1);
      assertSame(atomikosProperties3, atomikosProperties2);
      
      AtomikosProperties atomikosProperties4 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties4);
      assertEquals(500L, atomikosProperties4.getCheckpointInterval());
      assertTrue(atomikosProperties4.isEnableLogging());
      assertEquals("tm.out", atomikosProperties4.getConsoleFileName());
      assertTrue(atomikosProperties4.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties4.getLogBaseName());
      assertFalse(atomikosProperties4.isThreadedTwoPhaseCommit());
      assertEquals((-858L), atomikosProperties4.getDefaultJtaTimeout());
      assertNull(atomikosProperties4.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties4.isAllowSubTransactions());
      assertEquals(195, atomikosProperties4.getMaxActives());
      assertEquals(1, atomikosProperties4.getConsoleFileCount());
      assertNull(atomikosProperties4.getOutputDir());
      assertEquals(300000L, atomikosProperties4.getMaxTimeout());
      assertNull(atomikosProperties4.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties4.getConsoleLogLevel());
      assertFalse(atomikosProperties4.isForceShutdownOnVmExit());
      assertEquals("TLS_DHE_PSK_WITH_AES_128_CBC_SHA256", atomikosProperties4.getService());
      assertEquals((-1), atomikosProperties4.getConsoleFileLimit());
      assertSame(atomikosProperties4, atomikosProperties3);
      assertSame(atomikosProperties4, atomikosProperties2);
      assertSame(atomikosProperties4, atomikosProperties1);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      
      String string0 = "";
      boolean boolean0 = false;
      atomikosProperties0.setSerialJtaTransactions(boolean0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      
      int int0 = 0;
      XMLDSigRI xMLDSigRI0 = new XMLDSigRI();
      assertNotNull(xMLDSigRI0);
      assertEquals("XMLDSig version 1.8", xMLDSigRI0.toString());
      assertEquals("XMLDSig (DOM XMLSignatureFactory; DOM KeyInfoFactory; C14N 1.0, C14N 1.1, Exclusive C14N, Base64, Enveloped, XPath, XPath2, XSLT TransformServices)", xMLDSigRI0.getInfo());
      assertFalse(xMLDSigRI0.isEmpty());
      assertEquals(37, xMLDSigRI0.size());
      assertEquals("XMLDSig", xMLDSigRI0.getName());
      assertEquals(1.8, xMLDSigRI0.getVersion(), 0.01);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(xMLDSigRI0, stringArray0);
      assertNotNull(mapEntryArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, mapEntryArray0.length);
      assertEquals("XMLDSig version 1.8", xMLDSigRI0.toString());
      assertEquals("XMLDSig (DOM XMLSignatureFactory; DOM KeyInfoFactory; C14N 1.0, C14N 1.1, Exclusive C14N, Base64, Enveloped, XPath, XPath2, XSLT TransformServices)", xMLDSigRI0.getInfo());
      assertFalse(xMLDSigRI0.isEmpty());
      assertEquals(37, xMLDSigRI0.size());
      assertEquals("XMLDSig", xMLDSigRI0.getName());
      assertEquals(1.8, xMLDSigRI0.getVersion(), 0.01);
      
      atomikosProperties0.setConsoleFileLimit(int0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      
      int int1 = (-231);
      atomikosProperties0.setConsoleFileCount(int1);
      assertFalse(int1 == int0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-231), atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertFalse(properties0.isEmpty());
      assertEquals(21, properties0.size());
      
      atomikosProperties0.setLogBaseDir(string0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals((-231), atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      
      atomikosProperties0.setLogBaseName(string0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals((-231), atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals((-231), atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals((-231), atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties1);
      assertTrue(properties1.equals((Object)properties0));
      assertEquals(21, properties1.size());
      assertFalse(properties1.isEmpty());
      assertNotSame(properties1, properties0);
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties1);
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertFalse(atomikosProperties1.isSerialJtaTransactions());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getOutputDir());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals("", atomikosProperties1.getLogBaseDir());
      assertEquals((-231), atomikosProperties1.getConsoleFileCount());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(0, atomikosProperties1.getConsoleFileLimit());
      assertEquals("", atomikosProperties1.getLogBaseName());
      assertNull(atomikosProperties1.getService());
      assertSame(atomikosProperties1, atomikosProperties0);
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals((-231), atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertSame(atomikosProperties0, atomikosProperties1);
      
      atomikosPropertiesTests0.setproperties(atomikosProperties1);
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertFalse(atomikosProperties1.isSerialJtaTransactions());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getOutputDir());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals("", atomikosProperties1.getLogBaseDir());
      assertEquals((-231), atomikosProperties1.getConsoleFileCount());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(0, atomikosProperties1.getConsoleFileLimit());
      assertEquals("", atomikosProperties1.getLogBaseName());
      assertNull(atomikosProperties1.getService());
      assertSame(atomikosProperties1, atomikosProperties0);
      
      atomikosPropertiesTests0.setproperties(atomikosProperties1);
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertFalse(atomikosProperties1.isSerialJtaTransactions());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getOutputDir());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals("", atomikosProperties1.getLogBaseDir());
      assertEquals((-231), atomikosProperties1.getConsoleFileCount());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(0, atomikosProperties1.getConsoleFileLimit());
      assertEquals("", atomikosProperties1.getLogBaseName());
      assertNull(atomikosProperties1.getService());
      assertSame(atomikosProperties1, atomikosProperties0);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = null;
      String string0 = "~Ytp+y=k}<$a[AK";
      String string1 = "";
      atomikosPropertiesTests0.properties = atomikosPropertiesTests0.properties;
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      
      String string2 = "Processing ";
      String string3 = "4KY]#Y,Wb3a";
      boolean boolean0 = true;
      atomikosPropertiesTests0.properties.setThreadedTwoPhaseCommit(boolean0);
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties0);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      
      long long0 = 0L;
      atomikosProperties0.setCheckpointInterval(long0);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties1);
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getOutputDir());
      assertNull(atomikosProperties1.getService());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals(0L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertTrue(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertSame(atomikosProperties1, atomikosProperties0);
      
      boolean boolean1 = false;
      atomikosProperties1.setForceShutdownOnVmExit(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getOutputDir());
      assertNull(atomikosProperties1.getService());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals(0L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertTrue(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertSame(atomikosProperties1, atomikosProperties0);
      
      atomikosPropertiesTests0.setproperties(atomikosProperties1);
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getOutputDir());
      assertNull(atomikosProperties1.getService());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals(0L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertTrue(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertSame(atomikosProperties1, atomikosProperties0);
      
      atomikosPropertiesTests0.setproperties(atomikosPropertiesTests0.properties);
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertSame(atomikosProperties0, atomikosProperties1);
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      long long0 = 0L;
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      boolean boolean1 = false;
      boolean boolean2 = false;
      boolean boolean3 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean1, boolean2);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      System.setCurrentTimeMillis(long0);
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      boolean boolean4 = false;
      boolean boolean5 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean4);
      assertTrue(boolean0 == boolean3);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertTrue(boolean0 == boolean4);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5);
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      
      atomikosProperties0.setForceShutdownOnVmExit(boolean0);
      assertTrue(boolean0 == boolean5);
      assertTrue(boolean0 == boolean3);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertTrue(boolean0 == boolean4);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      atomikosProperties0.setMaxTimeout(long0);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertFalse(properties0.isEmpty());
      assertEquals(21, properties0.size());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties1);
      assertTrue(atomikosProperties1.isEnableLogging());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(0L, atomikosProperties1.getMaxTimeout());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getOutputDir());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertNull(atomikosProperties1.getService());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertSame(atomikosProperties1, atomikosProperties0);
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties1);
      assertTrue(properties1.equals((Object)properties0));
      assertEquals(21, properties1.size());
      assertFalse(properties1.isEmpty());
      assertNotSame(properties1, properties0);
      
      XMLDSigRI xMLDSigRI0 = new XMLDSigRI();
      assertNotNull(xMLDSigRI0);
      assertFalse(xMLDSigRI0.isEmpty());
      assertEquals("XMLDSig (DOM XMLSignatureFactory; DOM KeyInfoFactory; C14N 1.0, C14N 1.1, Exclusive C14N, Base64, Enveloped, XPath, XPath2, XSLT TransformServices)", xMLDSigRI0.getInfo());
      assertEquals("XMLDSig version 1.8", xMLDSigRI0.toString());
      assertEquals(1.8, xMLDSigRI0.getVersion(), 0.01);
      assertEquals(37, xMLDSigRI0.size());
      assertEquals("XMLDSig", xMLDSigRI0.getName());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      stringArray0[6] = string0;
      stringArray0[7] = string0;
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(xMLDSigRI0, stringArray0);
      assertNotNull(mapEntryArray0);
      assertEquals(8, stringArray0.length);
      assertEquals(8, mapEntryArray0.length);
      assertFalse(xMLDSigRI0.isEmpty());
      assertEquals("XMLDSig (DOM XMLSignatureFactory; DOM KeyInfoFactory; C14N 1.0, C14N 1.1, Exclusive C14N, Base64, Enveloped, XPath, XPath2, XSLT TransformServices)", xMLDSigRI0.getInfo());
      assertEquals("XMLDSig version 1.8", xMLDSigRI0.toString());
      assertEquals(1.8, xMLDSigRI0.getVersion(), 0.01);
      assertEquals(37, xMLDSigRI0.size());
      assertEquals("XMLDSig", xMLDSigRI0.getName());
      
      System.setCurrentTimeMillis(long0);
      Properties properties2 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties2);
      assertTrue(properties2.equals((Object)properties1));
      assertTrue(properties2.equals((Object)properties0));
      assertEquals(21, properties2.size());
      assertFalse(properties2.isEmpty());
      assertNotSame(properties2, properties1);
      assertNotSame(properties2, properties0);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertFalse(properties0.isEmpty());
      assertEquals(21, properties0.size());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties1);
      assertTrue(properties1.equals((Object)properties0));
      assertFalse(properties1.isEmpty());
      assertEquals(21, properties1.size());
      assertNotSame(properties1, properties0);
      
      Properties properties2 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties2);
      assertTrue(properties2.equals((Object)properties0));
      assertTrue(properties2.equals((Object)properties1));
      assertFalse(properties2.isEmpty());
      assertEquals(21, properties2.size());
      assertNotSame(properties2, properties0);
      assertNotSame(properties2, properties1);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      
      long long0 = 0L;
      atomikosProperties0.setDefaultJtaTimeout(long0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      
      Properties properties3 = atomikosProperties0.asProperties();
      assertNotNull(properties3);
      assertFalse(properties3.equals((Object)properties0));
      assertFalse(properties3.equals((Object)properties2));
      assertFalse(properties3.equals((Object)properties1));
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(18, properties3.size());
      assertFalse(properties3.isEmpty());
      assertNotSame(properties3, properties0);
      assertNotSame(properties3, properties2);
      assertNotSame(properties3, properties1);
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties1);
      assertNull(atomikosProperties1.getService());
      assertNull(atomikosProperties1.getOutputDir());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(0L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertSame(atomikosProperties1, atomikosProperties0);
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties2);
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties2.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties2.getConsoleFileName());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertEquals((-1), atomikosProperties2.getConsoleFileLimit());
      assertNull(atomikosProperties2.getService());
      assertTrue(atomikosProperties2.isAllowSubTransactions());
      assertEquals(1, atomikosProperties2.getConsoleFileCount());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertNull(atomikosProperties2.getOutputDir());
      assertEquals(0L, atomikosProperties2.getDefaultJtaTimeout());
      assertSame(atomikosProperties2, atomikosProperties1);
      assertSame(atomikosProperties2, atomikosProperties0);
      
      String[] stringArray0 = new String[5];
      String string0 = "";
      stringArray0[0] = string0;
      String string1 = "";
      String string2 = "D7Jp*P=C";
      Object object0 = properties1.setProperty(stringArray0[0], string2);
      assertNull(object0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(properties1.equals((Object)properties0));
      assertFalse(properties1.equals((Object)properties2));
      assertFalse(properties1.equals((Object)properties3));
      assertEquals(5, stringArray0.length);
      assertFalse(properties1.isEmpty());
      assertEquals(22, properties1.size());
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(properties1, properties0);
      assertNotSame(properties1, properties2);
      assertNotSame(properties1, properties3);
      
      stringArray0[1] = string1;
      String string3 = "h-";
      stringArray0[2] = string3;
      String string4 = "T+sM";
      stringArray0[3] = string4;
      String string5 = "";
      stringArray0[4] = string5;
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties1, stringArray0);
      assertNotNull(mapEntryArray0);
      assertFalse(properties1.equals((Object)properties0));
      assertFalse(properties1.equals((Object)properties2));
      assertFalse(properties1.equals((Object)properties3));
      assertEquals(5, mapEntryArray0.length);
      assertEquals(5, stringArray0.length);
      assertFalse(properties1.isEmpty());
      assertEquals(22, properties1.size());
      assertNotSame(properties1, properties0);
      assertNotSame(properties1, properties2);
      assertNotSame(properties1, properties3);
      
      long long1 = 0L;
      System.setCurrentTimeMillis(long1);
      long long2 = 0L;
      System.setCurrentTimeMillis(long2);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      long long0 = 3325L;
      System.setCurrentTimeMillis(long0);
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.properties;
      assertNotNull(atomikosProperties0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      
      XMLDSigRI xMLDSigRI0 = new XMLDSigRI();
      assertNotNull(xMLDSigRI0);
      assertEquals("XMLDSig (DOM XMLSignatureFactory; DOM KeyInfoFactory; C14N 1.0, C14N 1.1, Exclusive C14N, Base64, Enveloped, XPath, XPath2, XSLT TransformServices)", xMLDSigRI0.getInfo());
      assertEquals("XMLDSig version 1.8", xMLDSigRI0.toString());
      assertFalse(xMLDSigRI0.isEmpty());
      assertEquals(1.8, xMLDSigRI0.getVersion(), 0.01);
      assertEquals(37, xMLDSigRI0.size());
      assertEquals("XMLDSig", xMLDSigRI0.getName());
      
      String[] stringArray0 = new String[6];
      String string0 = "com.atomikos.icatch.max_timeout";
      stringArray0[0] = string0;
      String string1 = "/post-construct";
      stringArray0[1] = string1;
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      
      String string2 = ".-6(c4(<";
      stringArray0[2] = string2;
      String string3 = "VN+>Q`f|Q*Zv,n~/$";
      stringArray0[3] = string3;
      String string4 = "Z+>/:\\bFH.\"{#8n!PpP";
      stringArray0[4] = string4;
      String string5 = "";
      boolean boolean0 = false;
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      
      boolean boolean1 = true;
      atomikosProperties0.setForceShutdownOnVmExit(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      
      stringArray0[5] = string5;
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(xMLDSigRI0, stringArray0);
      assertNotNull(mapEntryArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(6, mapEntryArray0.length);
      assertEquals("XMLDSig (DOM XMLSignatureFactory; DOM KeyInfoFactory; C14N 1.0, C14N 1.1, Exclusive C14N, Base64, Enveloped, XPath, XPath2, XSLT TransformServices)", xMLDSigRI0.getInfo());
      assertEquals("XMLDSig version 1.8", xMLDSigRI0.toString());
      assertFalse(xMLDSigRI0.isEmpty());
      assertEquals(1.8, xMLDSigRI0.getVersion(), 0.01);
      assertEquals(37, xMLDSigRI0.size());
      assertEquals("XMLDSig", xMLDSigRI0.getName());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties1);
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertTrue(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getService());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertNull(atomikosProperties1.getOutputDir());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertSame(atomikosProperties1, atomikosProperties0);
      
      MapEntry<?, ?>[] mapEntryArray1 = atomikosPropertiesTests0.defaultOf(xMLDSigRI0, stringArray0);
      assertNotNull(mapEntryArray1);
      assertFalse(mapEntryArray1.equals((Object)mapEntryArray0));
      assertEquals(6, stringArray0.length);
      assertEquals(6, mapEntryArray1.length);
      assertEquals("XMLDSig (DOM XMLSignatureFactory; DOM KeyInfoFactory; C14N 1.0, C14N 1.1, Exclusive C14N, Base64, Enveloped, XPath, XPath2, XSLT TransformServices)", xMLDSigRI0.getInfo());
      assertEquals("XMLDSig version 1.8", xMLDSigRI0.toString());
      assertFalse(xMLDSigRI0.isEmpty());
      assertEquals(1.8, xMLDSigRI0.getVersion(), 0.01);
      assertEquals(37, xMLDSigRI0.size());
      assertEquals("XMLDSig", xMLDSigRI0.getName());
      assertNotSame(mapEntryArray1, mapEntryArray0);
      
      System.setCurrentTimeMillis(long0);
      System.setCurrentTimeMillis(long0);
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties2);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties2.getConsoleLogLevel());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties2.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertEquals((-1), atomikosProperties2.getConsoleFileLimit());
      assertTrue(atomikosProperties2.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertNull(atomikosProperties2.getService());
      assertTrue(atomikosProperties2.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertNull(atomikosProperties2.getOutputDir());
      assertEquals(1, atomikosProperties2.getConsoleFileCount());
      assertSame(atomikosProperties2, atomikosProperties0);
      assertSame(atomikosProperties2, atomikosProperties1);
      
      AtomikosProperties atomikosProperties3 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties3);
      assertEquals("tmlog", atomikosProperties3.getLogBaseName());
      assertNull(atomikosProperties3.getLogBaseDir());
      assertEquals(50, atomikosProperties3.getMaxActives());
      assertTrue(atomikosProperties3.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties3.getConsoleFileName());
      assertNull(atomikosProperties3.getOutputDir());
      assertTrue(atomikosProperties3.isSerialJtaTransactions());
      assertNull(atomikosProperties3.getService());
      assertEquals(1, atomikosProperties3.getConsoleFileCount());
      assertEquals(500L, atomikosProperties3.getCheckpointInterval());
      assertNull(atomikosProperties3.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties3.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties3.getMaxTimeout());
      assertTrue(atomikosProperties3.isAllowSubTransactions());
      assertTrue(atomikosProperties3.isEnableLogging());
      assertEquals((-1), atomikosProperties3.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties3.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties3.getDefaultJtaTimeout());
      assertSame(atomikosProperties3, atomikosProperties2);
      assertSame(atomikosProperties3, atomikosProperties1);
      assertSame(atomikosProperties3, atomikosProperties0);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      boolean boolean0 = false;
      atomikosProperties0.setSerialJtaTransactions(boolean0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      boolean boolean1 = true;
      atomikosProperties0.setAllowSubTransactions(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      int int0 = (-1294);
      atomikosProperties0.setMaxActives(int0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1294), atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      String string0 = "false";
      atomikosProperties0.setOutputDir(string0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("false", atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1294), atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("false", atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1294), atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertEquals("false", atomikosPropertiesTests0.properties.getOutputDir());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertEquals((-1294), atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertFalse(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertEquals(21, properties0.size());
      assertFalse(properties0.isEmpty());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties1);
      assertEquals((-1294), atomikosProperties1.getMaxActives());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertFalse(atomikosProperties1.isSerialJtaTransactions());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals("false", atomikosProperties1.getOutputDir());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertSame(atomikosProperties1, atomikosProperties0);
      
      boolean boolean2 = true;
      atomikosProperties1.setForceShutdownOnVmExit(boolean2);
      assertFalse(boolean2 == boolean0);
      assertEquals((-1294), atomikosProperties1.getMaxActives());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertFalse(atomikosProperties1.isSerialJtaTransactions());
      assertTrue(atomikosProperties1.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals("false", atomikosProperties1.getOutputDir());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertSame(atomikosProperties1, atomikosProperties0);
      
      long long0 = 2L;
      atomikosProperties1.setService(string0);
      assertEquals((-1294), atomikosProperties1.getMaxActives());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertFalse(atomikosProperties1.isSerialJtaTransactions());
      assertTrue(atomikosProperties1.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals("false", atomikosProperties1.getOutputDir());
      assertEquals("false", atomikosProperties1.getService());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertSame(atomikosProperties1, atomikosProperties0);
      
      System.setCurrentTimeMillis(long0);
      atomikosProperties1.setLogBaseName(string0);
      assertEquals((-1294), atomikosProperties1.getMaxActives());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals("false", atomikosProperties1.getLogBaseName());
      assertFalse(atomikosProperties1.isSerialJtaTransactions());
      assertTrue(atomikosProperties1.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals("false", atomikosProperties1.getOutputDir());
      assertEquals("false", atomikosProperties1.getService());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertSame(atomikosProperties1, atomikosProperties0);
      
      long long1 = 3000L;
      System.setCurrentTimeMillis(long1);
      assertFalse(long1 == long0);
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties1);
      assertTrue(properties1.equals((Object)properties0));
      assertFalse(properties1.isEmpty());
      assertEquals(21, properties1.size());
      assertNotSame(properties1, properties0);
      
      String[] stringArray0 = new String[6];
      atomikosPropertiesTests0.setproperties(atomikosProperties1);
      assertEquals((-1294), atomikosProperties1.getMaxActives());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals("false", atomikosProperties1.getLogBaseName());
      assertFalse(atomikosProperties1.isSerialJtaTransactions());
      assertTrue(atomikosProperties1.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals("false", atomikosProperties1.getOutputDir());
      assertEquals("false", atomikosProperties1.getService());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertSame(atomikosProperties1, atomikosProperties0);
      
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties1, stringArray0);
      assertNotNull(mapEntryArray0);
      assertTrue(properties1.equals((Object)properties0));
      assertEquals(6, stringArray0.length);
      assertEquals(6, mapEntryArray0.length);
      assertFalse(properties1.isEmpty());
      assertEquals(21, properties1.size());
      assertNotSame(properties1, properties0);
      
      Properties properties2 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties2);
      assertTrue(properties2.equals((Object)properties1));
      assertTrue(properties2.equals((Object)properties0));
      assertFalse(properties2.isEmpty());
      assertEquals(21, properties2.size());
      assertNotSame(properties2, properties1);
      assertNotSame(properties2, properties0);
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties2);
      assertEquals("false", atomikosProperties2.getOutputDir());
      assertTrue(atomikosProperties2.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties2.getConsoleFileLimit());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertEquals(1, atomikosProperties2.getConsoleFileCount());
      assertEquals("false", atomikosProperties2.getService());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertTrue(atomikosProperties2.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties2.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties2.getConsoleLogLevel());
      assertEquals("false", atomikosProperties2.getLogBaseName());
      assertEquals((-1294), atomikosProperties2.getMaxActives());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties2.getConsoleFileName());
      assertSame(atomikosProperties2, atomikosProperties0);
      assertSame(atomikosProperties2, atomikosProperties1);
      
      AtomikosProperties atomikosProperties3 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties3);
      assertEquals(300000L, atomikosProperties3.getMaxTimeout());
      assertFalse(atomikosProperties3.isSerialJtaTransactions());
      assertTrue(atomikosProperties3.isEnableLogging());
      assertEquals("false", atomikosProperties3.getOutputDir());
      assertEquals(10000L, atomikosProperties3.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties3.getConsoleFileLimit());
      assertEquals((-1294), atomikosProperties3.getMaxActives());
      assertNull(atomikosProperties3.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties3.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties3.getCheckpointInterval());
      assertTrue(atomikosProperties3.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties3.getConsoleFileName());
      assertFalse(atomikosProperties3.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties3.isAllowSubTransactions());
      assertNull(atomikosProperties3.getTransactionManagerUniqueName());
      assertEquals("false", atomikosProperties3.getLogBaseName());
      assertEquals("false", atomikosProperties3.getService());
      assertEquals(1, atomikosProperties3.getConsoleFileCount());
      assertSame(atomikosProperties3, atomikosProperties0);
      assertSame(atomikosProperties3, atomikosProperties1);
      assertSame(atomikosProperties3, atomikosProperties2);
      
      AtomikosProperties atomikosProperties4 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties4);
      assertEquals(500L, atomikosProperties4.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties4.getConsoleLogLevel());
      assertEquals("false", atomikosProperties4.getLogBaseName());
      assertEquals((-1294), atomikosProperties4.getMaxActives());
      assertNull(atomikosProperties4.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties4.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties4.getConsoleFileName());
      assertEquals(1, atomikosProperties4.getConsoleFileCount());
      assertEquals("false", atomikosProperties4.getOutputDir());
      assertEquals(10000L, atomikosProperties4.getDefaultJtaTimeout());
      assertTrue(atomikosProperties4.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties4.getMaxTimeout());
      assertEquals((-1), atomikosProperties4.getConsoleFileLimit());
      assertEquals("false", atomikosProperties4.getService());
      assertNull(atomikosProperties4.getLogBaseDir());
      assertFalse(atomikosProperties4.isSerialJtaTransactions());
      assertTrue(atomikosProperties4.isEnableLogging());
      assertTrue(atomikosProperties4.isForceShutdownOnVmExit());
      assertSame(atomikosProperties4, atomikosProperties0);
      assertSame(atomikosProperties4, atomikosProperties3);
      assertSame(atomikosProperties4, atomikosProperties1);
      assertSame(atomikosProperties4, atomikosProperties2);
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      String string0 = "";
      boolean boolean1 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.properties;
      assertNotNull(atomikosProperties0);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.properties;
      assertNotNull(atomikosProperties1);
      assertNull(atomikosProperties1.getOutputDir());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getService());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertSame(atomikosProperties1, atomikosProperties0);
      
      atomikosPropertiesTests0.properties = atomikosProperties1;
      assertNull(atomikosProperties1.getOutputDir());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getService());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertNull(atomikosProperties1.getOutputDir());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getService());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      
      String string1 = "";
      Properties properties0 = atomikosProperties0.asProperties();
      assertNotNull(properties0);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(properties0.isEmpty());
      assertEquals(18, properties0.size());
      assertSame(atomikosProperties0, atomikosProperties1);
      
      atomikosProperties0.setService(string1);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("", atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertSame(atomikosProperties0, atomikosProperties1);
      assertSame(string1, string0);
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties2);
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties2.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties2.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties2.getConsoleFileLimit());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertNull(atomikosProperties2.getOutputDir());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertTrue(atomikosProperties2.isAllowSubTransactions());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertEquals(1, atomikosProperties2.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties2.getService());
      assertSame(atomikosProperties2, atomikosProperties1);
      assertSame(atomikosProperties2, atomikosProperties0);
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties1);
      assertFalse(properties1.equals((Object)properties0));
      assertFalse(properties1.isEmpty());
      assertEquals(21, properties1.size());
      assertNotSame(properties1, properties0);
      
      Properties properties2 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties2);
      assertFalse(properties2.equals((Object)properties0));
      assertTrue(properties2.equals((Object)properties1));
      assertFalse(properties2.isEmpty());
      assertEquals(21, properties2.size());
      assertNotSame(properties2, properties0);
      assertNotSame(properties2, properties1);
      
      atomikosPropertiesTests0.properties = atomikosProperties2;
      assertNull(atomikosProperties1.getOutputDir());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties1.getService());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertEquals("", atomikosPropertiesTests0.properties.getService());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      
      long long0 = (-2257L);
      atomikosProperties0.setCheckpointInterval(long0);
      assertEquals((-2257L), atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertSame(atomikosProperties0, atomikosProperties2);
      assertSame(atomikosProperties0, atomikosProperties1);
      
      boolean boolean2 = false;
      atomikosPropertiesTests0.properties.setEnableLogging(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertFalse(atomikosPropertiesTests0.properties.isEnableLogging());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertEquals((-2257L), atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertEquals("", atomikosPropertiesTests0.properties.getService());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties2.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties2.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties2.getConsoleFileLimit());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertNull(atomikosProperties2.getOutputDir());
      assertTrue(atomikosProperties2.isAllowSubTransactions());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertFalse(atomikosProperties2.isEnableLogging());
      assertEquals(1, atomikosProperties2.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties2.getService());
      assertEquals((-2257L), atomikosProperties2.getCheckpointInterval());
      assertSame(atomikosPropertiesTests0.properties, atomikosProperties2);
      assertSame(atomikosPropertiesTests0.properties, atomikosProperties1);
      assertSame(atomikosPropertiesTests0.properties, atomikosProperties0);
      assertSame(atomikosProperties2, atomikosProperties1);
      assertSame(atomikosProperties2, atomikosProperties0);
      
      AtomikosProperties atomikosProperties3 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties3);
      assertEquals(1, atomikosProperties3.getConsoleFileCount());
      assertFalse(atomikosProperties3.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties3.getConsoleFileLimit());
      assertNull(atomikosProperties3.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties3.getDefaultJtaTimeout());
      assertNull(atomikosProperties3.getOutputDir());
      assertTrue(atomikosProperties3.isSerialJtaTransactions());
      assertTrue(atomikosProperties3.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties3.getMaxTimeout());
      assertEquals(50, atomikosProperties3.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties3.getConsoleLogLevel());
      assertFalse(atomikosProperties3.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties3.getLogBaseName());
      assertFalse(atomikosProperties3.isEnableLogging());
      assertNull(atomikosProperties3.getLogBaseDir());
      assertEquals("tm.out", atomikosProperties3.getConsoleFileName());
      assertEquals((-2257L), atomikosProperties3.getCheckpointInterval());
      assertEquals("", atomikosProperties3.getService());
      assertSame(atomikosProperties3, atomikosProperties0);
      assertSame(atomikosProperties3, atomikosProperties1);
      assertSame(atomikosProperties3, atomikosProperties2);
      
      long long1 = 3600000L;
      atomikosProperties0.setMaxTimeout(long1);
      assertFalse(long1 == long0);
      assertEquals((-2257L), atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(3600000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertSame(atomikosProperties0, atomikosProperties2);
      assertSame(atomikosProperties0, atomikosProperties3);
      assertSame(atomikosProperties0, atomikosProperties1);
      
      System.setCurrentTimeMillis(long1);
      assertFalse(long1 == long0);
      
      AtomikosProperties atomikosProperties4 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties4);
      assertEquals(3600000L, atomikosProperties4.getMaxTimeout());
      assertTrue(atomikosProperties4.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties4.getConsoleFileName());
      assertEquals(1, atomikosProperties4.getConsoleFileCount());
      assertEquals("tmlog", atomikosProperties4.getLogBaseName());
      assertNull(atomikosProperties4.getTransactionManagerUniqueName());
      assertNull(atomikosProperties4.getLogBaseDir());
      assertEquals((-1), atomikosProperties4.getConsoleFileLimit());
      assertNull(atomikosProperties4.getOutputDir());
      assertFalse(atomikosProperties4.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties4.isAllowSubTransactions());
      assertEquals("", atomikosProperties4.getService());
      assertEquals((-2257L), atomikosProperties4.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties4.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties4.getMaxActives());
      assertFalse(atomikosProperties4.isEnableLogging());
      assertFalse(atomikosProperties4.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties4.getConsoleLogLevel());
      assertSame(atomikosProperties4, atomikosProperties0);
      assertSame(atomikosProperties4, atomikosProperties2);
      assertSame(atomikosProperties4, atomikosProperties1);
      assertSame(atomikosProperties4, atomikosProperties3);
      
      long long2 = 0L;
      System.setCurrentTimeMillis(long2);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      
      System.setCurrentTimeMillis(long1);
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      boolean boolean1 = true;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      AtomikosLoggingLevel atomikosLoggingLevel0 = AtomikosLoggingLevel.DEBUG;
      boolean boolean3 = false;
      long long0 = 65535L;
      atomikosProperties0.setDefaultJtaTimeout(long0);
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(65535L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      atomikosProperties0.setSerialJtaTransactions(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(65535L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      String string0 = "o8%wo_]P$MHg1?*.{el";
      boolean boolean4 = false;
      long long1 = (-1925L);
      atomikosProperties0.setMaxTimeout(long1);
      assertFalse(long1 == long0);
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(65535L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1925L), atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      atomikosProperties0.setSerialJtaTransactions(boolean4);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(65535L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1925L), atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      atomikosProperties0.setService(string0);
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("o8%wo_]P$MHg1?*.{el", atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(65535L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1925L), atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      atomikosProperties0.setConsoleFileName(string0);
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("o8%wo_]P$MHg1?*.{el", atomikosProperties0.getConsoleFileName());
      assertEquals("o8%wo_]P$MHg1?*.{el", atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(65535L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1925L), atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel0);
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("o8%wo_]P$MHg1?*.{el", atomikosProperties0.getConsoleFileName());
      assertEquals("o8%wo_]P$MHg1?*.{el", atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(65535L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1925L), atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("o8%wo_]P$MHg1?*.{el", atomikosProperties0.getConsoleFileName());
      assertEquals("o8%wo_]P$MHg1?*.{el", atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(65535L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1925L), atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties1);
      assertEquals("o8%wo_]P$MHg1?*.{el", atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isSerialJtaTransactions());
      assertEquals("o8%wo_]P$MHg1?*.{el", atomikosProperties1.getConsoleFileName());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertNull(atomikosProperties1.getOutputDir());
      assertEquals(65535L, atomikosProperties1.getDefaultJtaTimeout());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals((-1925L), atomikosProperties1.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties1.getConsoleLogLevel());
      assertSame(atomikosProperties1, atomikosProperties0);
      
      long long2 = 0L;
      System.setCurrentTimeMillis(long2);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertFalse(properties0.isEmpty());
      assertEquals(21, properties0.size());
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties1);
      assertTrue(properties1.equals((Object)properties0));
      assertFalse(properties1.isEmpty());
      assertEquals(21, properties1.size());
      assertNotSame(properties1, properties0);
      
      Properties properties2 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties2);
      assertTrue(properties2.equals((Object)properties0));
      assertTrue(properties2.equals((Object)properties1));
      assertFalse(properties2.isEmpty());
      assertEquals(21, properties2.size());
      assertNotSame(properties2, properties1);
      assertNotSame(properties2, properties0);
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties2);
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertFalse(atomikosProperties2.isSerialJtaTransactions());
      assertEquals((-1), atomikosProperties2.getConsoleFileLimit());
      assertEquals((-1925L), atomikosProperties2.getMaxTimeout());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties2.getConsoleLogLevel());
      assertTrue(atomikosProperties2.isAllowSubTransactions());
      assertEquals("o8%wo_]P$MHg1?*.{el", atomikosProperties2.getService());
      assertEquals("o8%wo_]P$MHg1?*.{el", atomikosProperties2.getConsoleFileName());
      assertNull(atomikosProperties2.getOutputDir());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertEquals(65535L, atomikosProperties2.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties2.getConsoleFileCount());
      assertSame(atomikosProperties2, atomikosProperties1);
      assertSame(atomikosProperties2, atomikosProperties0);
      
      System.setCurrentTimeMillis(long2);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      
      long long3 = 0L;
      System.setCurrentTimeMillis(long3);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      
      AtomikosProperties atomikosProperties3 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties3);
      assertEquals(50, atomikosProperties3.getMaxActives());
      assertFalse(atomikosProperties3.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties3.getCheckpointInterval());
      assertEquals(65535L, atomikosProperties3.getDefaultJtaTimeout());
      assertNull(atomikosProperties3.getLogBaseDir());
      assertNull(atomikosProperties3.getOutputDir());
      assertFalse(atomikosProperties3.isSerialJtaTransactions());
      assertEquals((-1), atomikosProperties3.getConsoleFileLimit());
      assertEquals("o8%wo_]P$MHg1?*.{el", atomikosProperties3.getConsoleFileName());
      assertTrue(atomikosProperties3.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties3.getConsoleLogLevel());
      assertEquals("o8%wo_]P$MHg1?*.{el", atomikosProperties3.getService());
      assertTrue(atomikosProperties3.isAllowSubTransactions());
      assertEquals(1, atomikosProperties3.getConsoleFileCount());
      assertNull(atomikosProperties3.getTransactionManagerUniqueName());
      assertEquals((-1925L), atomikosProperties3.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties3.getLogBaseName());
      assertFalse(atomikosProperties3.isThreadedTwoPhaseCommit());
      assertSame(atomikosProperties3, atomikosProperties1);
      assertSame(atomikosProperties3, atomikosProperties2);
      assertSame(atomikosProperties3, atomikosProperties0);
      
      Properties properties3 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties3);
      assertTrue(properties3.equals((Object)properties1));
      assertTrue(properties3.equals((Object)properties2));
      assertTrue(properties3.equals((Object)properties0));
      assertEquals(21, properties3.size());
      assertFalse(properties3.isEmpty());
      assertNotSame(properties3, properties2);
      assertNotSame(properties3, properties0);
      assertNotSame(properties3, properties1);
      
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)65;
      byteArray0[0] = byte0;
      byte byte1 = (byte)65;
      byteArray0[1] = byte1;
      byte byte2 = (byte)107;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-75);
      byteArray0[3] = byte3;
      byte byte4 = (byte)5;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-45);
      byteArray0[5] = byte5;
      byte byte6 = (byte)90;
      byteArray0[6] = byte6;
      boolean boolean5 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertEquals(7, byteArray0.length);
      assertFalse(boolean5);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)107, (byte) (-75), (byte)5, (byte) (-45), (byte)90}, byteArray0);
      
      long long4 = 581L;
      System.setCurrentTimeMillis(long4);
      assertFalse(long4 == long0);
      assertFalse(long4 == long3);
      assertFalse(long4 == long2);
      assertFalse(long4 == long1);
      
      AtomikosProperties atomikosProperties4 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties4);
      assertTrue(atomikosProperties4.isAllowSubTransactions());
      assertEquals("o8%wo_]P$MHg1?*.{el", atomikosProperties4.getService());
      assertEquals("o8%wo_]P$MHg1?*.{el", atomikosProperties4.getConsoleFileName());
      assertEquals(1, atomikosProperties4.getConsoleFileCount());
      assertFalse(atomikosProperties4.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties4.getConsoleFileLimit());
      assertNull(atomikosProperties4.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties4.getConsoleLogLevel());
      assertEquals((-1925L), atomikosProperties4.getMaxTimeout());
      assertEquals(50, atomikosProperties4.getMaxActives());
      assertFalse(atomikosProperties4.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties4.isEnableLogging());
      assertEquals("tmlog", atomikosProperties4.getLogBaseName());
      assertEquals(500L, atomikosProperties4.getCheckpointInterval());
      assertFalse(atomikosProperties4.isSerialJtaTransactions());
      assertEquals(65535L, atomikosProperties4.getDefaultJtaTimeout());
      assertNull(atomikosProperties4.getTransactionManagerUniqueName());
      assertNull(atomikosProperties4.getOutputDir());
      assertSame(atomikosProperties4, atomikosProperties1);
      assertSame(atomikosProperties4, atomikosProperties0);
      assertSame(atomikosProperties4, atomikosProperties2);
      assertSame(atomikosProperties4, atomikosProperties3);
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertEquals(21, properties0.size());
      assertFalse(properties0.isEmpty());
      
      String[] stringArray0 = new String[2];
      String string0 = "3";
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties1);
      assertTrue(properties1.equals((Object)properties0));
      assertEquals(21, properties1.size());
      assertFalse(properties1.isEmpty());
      assertNotSame(properties1, properties0);
      
      stringArray0[0] = string0;
      String string1 = "Ozv";
      stringArray0[1] = string1;
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertNotNull(mapEntryArray0);
      assertTrue(properties0.equals((Object)properties1));
      assertEquals(2, stringArray0.length);
      assertEquals(2, mapEntryArray0.length);
      assertEquals(21, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotSame(properties0, properties1);
      
      String string2 = "</trong></fot>";
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string2, string2);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.properties;
      assertNotNull(atomikosProperties0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      atomikosProperties0.setEnableLogging(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isEnableLogging());
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertFalse(properties0.isEmpty());
      assertEquals(21, properties0.size());
      
      String[] stringArray0 = new String[5];
      String string0 = "";
      stringArray0[0] = string0;
      String string1 = "WOSR$'{'S2*8|/Ih";
      stringArray0[1] = string1;
      String string2 = "";
      stringArray0[2] = string2;
      String string3 = "Found SingleSignOn Valve at ";
      stringArray0[3] = string3;
      String string4 = "5qR~a:@s";
      stringArray0[4] = string4;
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertNotNull(mapEntryArray0);
      assertEquals(5, mapEntryArray0.length);
      assertEquals(5, stringArray0.length);
      assertFalse(properties0.isEmpty());
      assertEquals(21, properties0.size());
      
      String string5 = "";
      int int0 = 0;
      atomikosProperties0.setConsoleFileCount(int0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isEnableLogging());
      
      atomikosProperties0.setLogBaseName(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNotSame(string5, string4);
      assertSame(string5, string2);
      assertSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string1);
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isEnableLogging());
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties1);
      assertTrue(properties1.equals((Object)properties0));
      assertEquals(21, properties1.size());
      assertFalse(properties1.isEmpty());
      assertNotSame(properties1, properties0);
      
      Properties properties2 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties2);
      assertTrue(properties2.equals((Object)properties0));
      assertTrue(properties2.equals((Object)properties1));
      assertEquals(21, properties2.size());
      assertFalse(properties2.isEmpty());
      assertNotSame(properties2, properties1);
      assertNotSame(properties2, properties0);
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties1);
      assertEquals("", atomikosProperties1.getLogBaseName());
      assertFalse(atomikosProperties1.isEnableLogging());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getOutputDir());
      assertEquals(0, atomikosProperties1.getConsoleFileCount());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertNull(atomikosProperties1.getService());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertSame(atomikosProperties1, atomikosProperties0);
      
      long long0 = 1L;
      System.setCurrentTimeMillis(long0);
      int int1 = 147;
      Random.setNextRandom(int1);
      assertFalse(int1 == int0);
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties2);
      assertEquals(0, atomikosProperties2.getConsoleFileCount());
      assertTrue(atomikosProperties2.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties2.getConsoleFileLimit());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertNull(atomikosProperties2.getService());
      assertEquals("", atomikosProperties2.getLogBaseName());
      assertFalse(atomikosProperties2.isEnableLogging());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertEquals("tm.out", atomikosProperties2.getConsoleFileName());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties2.getConsoleLogLevel());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertNull(atomikosProperties2.getOutputDir());
      assertSame(atomikosProperties2, atomikosProperties1);
      assertSame(atomikosProperties2, atomikosProperties0);
      
      String[] stringArray1 = new String[1];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string6 = "u\\t7#kY~;>=:#";
      stringArray1[0] = string6;
      MapEntry<?, ?>[] mapEntryArray1 = atomikosPropertiesTests0.defaultOf(properties2, stringArray1);
      assertNotNull(mapEntryArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(mapEntryArray1.equals((Object)mapEntryArray0));
      assertTrue(properties2.equals((Object)properties0));
      assertTrue(properties2.equals((Object)properties1));
      assertEquals(1, stringArray1.length);
      assertEquals(1, mapEntryArray1.length);
      assertEquals(21, properties2.size());
      assertFalse(properties2.isEmpty());
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(mapEntryArray1, mapEntryArray0);
      assertNotSame(properties2, properties1);
      assertNotSame(properties2, properties0);
      
      int int2 = 7;
      Random.setNextRandom(int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.properties;
      assertNotNull(atomikosProperties0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      String string0 = "";
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string0, string0);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }
}
