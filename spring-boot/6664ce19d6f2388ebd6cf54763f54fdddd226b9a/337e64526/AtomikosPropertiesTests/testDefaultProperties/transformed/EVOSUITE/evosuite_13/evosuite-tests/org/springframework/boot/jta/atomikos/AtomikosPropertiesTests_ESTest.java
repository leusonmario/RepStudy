/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 04 14:29:24 GMT 2021
 */

package org.springframework.boot.jta.atomikos;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Enumeration;
import java.util.Properties;
import java.util.function.BiFunction;
import org.assertj.core.data.MapEntry;
import org.eclipse.jetty.security.AbstractLoginService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jcp.xml.dsig.internal.dom.XMLDSigRI;
import org.junit.ComparisonFailure;
import org.junit.runner.RunWith;
import org.springframework.boot.jta.atomikos.AtomikosLoggingLevel;
import org.springframework.boot.jta.atomikos.AtomikosProperties;
import org.springframework.boot.jta.atomikos.AtomikosPropertiesTests;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AtomikosPropertiesTests_ESTest extends AtomikosPropertiesTests_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      XMLDSigRI xMLDSigRI0 = new XMLDSigRI();
      assertNotNull(xMLDSigRI0);
      assertEquals(37, xMLDSigRI0.size());
      assertEquals(1.8, xMLDSigRI0.getVersion(), 0.01);
      assertEquals("XMLDSig", xMLDSigRI0.getName());
      assertFalse(xMLDSigRI0.isEmpty());
      assertEquals("XMLDSig version 1.8", xMLDSigRI0.toString());
      assertEquals("XMLDSig (DOM XMLSignatureFactory; DOM KeyInfoFactory; C14N 1.0, C14N 1.1, Exclusive C14N, Base64, Enveloped, XPath, XPath2, XSLT TransformServices)", xMLDSigRI0.getInfo());
      
      String[] stringArray0 = new String[0];
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(xMLDSigRI0, stringArray0);
      assertNotNull(mapEntryArray0);
      assertEquals(37, xMLDSigRI0.size());
      assertEquals(1.8, xMLDSigRI0.getVersion(), 0.01);
      assertEquals("XMLDSig", xMLDSigRI0.getName());
      assertFalse(xMLDSigRI0.isEmpty());
      assertEquals("XMLDSig version 1.8", xMLDSigRI0.toString());
      assertEquals("XMLDSig (DOM XMLSignatureFactory; DOM KeyInfoFactory; C14N 1.0, C14N 1.1, Exclusive C14N, Base64, Enveloped, XPath, XPath2, XSLT TransformServices)", xMLDSigRI0.getInfo());
      assertEquals(0, stringArray0.length);
      assertEquals(0, mapEntryArray0.length);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[24];
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertNotNull(atomikosProperties0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      
      atomikosPropertiesTests0.assertProperty(atomikosProperties0.consoleFileName, atomikosProperties0.transactionManagerUniqueName);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      
      atomikosPropertiesTests0.setproperties(atomikosPropertiesTests0.properties);
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertEquals(21, properties0.size());
      assertFalse(properties0.isEmpty());
      
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertFalse(properties0.isEmpty());
      assertEquals(21, properties0.size());
      
      String[] stringArray0 = new String[1];
      String string0 = "";
      stringArray0[0] = string0;
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertNotNull(mapEntryArray0);
      assertFalse(properties0.isEmpty());
      assertEquals(21, properties0.size());
      assertEquals(1, stringArray0.length);
      assertEquals(1, mapEntryArray0.length);
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(properties1, properties0);
      assertTrue(properties1.equals((Object)properties0));
      assertNotNull(properties1);
      assertEquals(21, properties1.size());
      assertFalse(properties1.isEmpty());
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNotNull(atomikosProperties0);
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties1, atomikosProperties0);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertEquals(1, atomikosProperties1.consoleFileCount);
      assertEquals(50, atomikosProperties1.maxActives);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertTrue(atomikosProperties1.enableLogging);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertNotNull(atomikosProperties1);
      assertNull(atomikosProperties1.getOutputDir());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getService());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getLogBaseDir());
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertNotNull(atomikosProperties0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      String string0 = "call servlet {}";
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string0, string0);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = atomikosPropertiesTests0.properties.asProperties();
      assertNotNull(properties0);
      assertEquals(18, properties0.size());
      assertFalse(properties0.isEmpty());
      
      String string0 = "";
      Object object0 = properties0.put(atomikosPropertiesTests0, string0);
      assertNull(object0);
      assertEquals(19, properties0.size());
      assertFalse(properties0.isEmpty());
      
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.jta.atomikos.AtomikosPropertiesTests", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      String string0 = ":";
      XMLDSigRI xMLDSigRI0 = new XMLDSigRI();
      assertNotNull(xMLDSigRI0);
      assertEquals("XMLDSig (DOM XMLSignatureFactory; DOM KeyInfoFactory; C14N 1.0, C14N 1.1, Exclusive C14N, Base64, Enveloped, XPath, XPath2, XSLT TransformServices)", xMLDSigRI0.getInfo());
      assertEquals(37, xMLDSigRI0.size());
      assertEquals(1.8, xMLDSigRI0.getVersion(), 0.01);
      assertEquals("XMLDSig", xMLDSigRI0.getName());
      assertEquals("XMLDSig version 1.8", xMLDSigRI0.toString());
      assertFalse(xMLDSigRI0.isEmpty());
      
      String[] stringArray0 = new String[1];
      int int0 = 0;
      Integer integer0 = new Integer(int0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Object object0 = xMLDSigRI0.put(atomikosPropertiesTests0, integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNull(object0);
      assertEquals("XMLDSig (DOM XMLSignatureFactory; DOM KeyInfoFactory; C14N 1.0, C14N 1.1, Exclusive C14N, Base64, Enveloped, XPath, XPath2, XSLT TransformServices)", xMLDSigRI0.getInfo());
      assertEquals(38, xMLDSigRI0.size());
      assertEquals(1.8, xMLDSigRI0.getVersion(), 0.01);
      assertEquals("XMLDSig", xMLDSigRI0.getName());
      assertEquals("XMLDSig version 1.8", xMLDSigRI0.toString());
      assertFalse(xMLDSigRI0.isEmpty());
      
      stringArray0[0] = string0;
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(xMLDSigRI0, stringArray0);
      assertNotNull(mapEntryArray0);
      assertEquals("XMLDSig (DOM XMLSignatureFactory; DOM KeyInfoFactory; C14N 1.0, C14N 1.1, Exclusive C14N, Base64, Enveloped, XPath, XPath2, XSLT TransformServices)", xMLDSigRI0.getInfo());
      assertEquals(38, xMLDSigRI0.size());
      assertEquals(1.8, xMLDSigRI0.getVersion(), 0.01);
      assertEquals("XMLDSig", xMLDSigRI0.getName());
      assertEquals("XMLDSig version 1.8", xMLDSigRI0.toString());
      assertFalse(xMLDSigRI0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertEquals(1, mapEntryArray0.length);
      
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string0, string0);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      String string0 = "com.atomikos.icatch.oltp_max_retries";
      String string1 = "org.apache.catalina.session.StandardSession.ACTIVITY_CHECK";
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string0, string1);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = atomikosPropertiesTests0.properties.asProperties();
      assertNotNull(properties0);
      assertFalse(properties0.isEmpty());
      assertEquals(18, properties0.size());
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.properties;
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNotNull(atomikosProperties0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      
      String[] stringArray0 = new String[1];
      String string0 = "";
      stringArray0[0] = string0;
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertNotNull(mapEntryArray0);
      assertFalse(properties0.isEmpty());
      assertEquals(18, properties0.size());
      assertEquals(1, stringArray0.length);
      assertEquals(1, mapEntryArray0.length);
      
      AtomikosProperties atomikosProperties1 = new AtomikosProperties();
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertEquals(50, atomikosProperties1.maxActives);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertTrue(atomikosProperties1.enableLogging);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals(1, atomikosProperties1.consoleFileCount);
      assertFalse(atomikosProperties1.equals((Object)atomikosProperties0));
      assertNotNull(atomikosProperties1);
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertNull(atomikosProperties1.getOutputDir());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties1);
      assertNotSame(atomikosProperties1, atomikosProperties0);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertEquals(50, atomikosProperties1.maxActives);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertTrue(atomikosProperties1.enableLogging);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals(1, atomikosProperties1.consoleFileCount);
      assertFalse(atomikosProperties1.equals((Object)atomikosProperties0));
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertNull(atomikosProperties1.getOutputDir());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties2, atomikosProperties1);
      assertNotSame(atomikosProperties2, atomikosProperties0);
      assertEquals(1, atomikosProperties2.consoleFileCount);
      assertTrue(atomikosProperties2.allowSubTransactions);
      assertFalse(atomikosProperties2.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties2.enableLogging);
      assertFalse(atomikosProperties2.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties2.maxActives);
      assertEquals((-1), atomikosProperties2.consoleFileLimit);
      assertEquals(10000L, atomikosProperties2.defaultJtaTimeout);
      assertTrue(atomikosProperties2.serialJtaTransactions);
      assertEquals(500L, atomikosProperties2.checkpointInterval);
      assertEquals(300000L, atomikosProperties2.maxTimeout);
      assertFalse(atomikosProperties2.equals((Object)atomikosProperties0));
      assertNotNull(atomikosProperties2);
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties2.getConsoleFileName());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertNull(atomikosProperties2.getService());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties2.getConsoleFileLimit());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties2.getConsoleLogLevel());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertTrue(atomikosProperties2.isAllowSubTransactions());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertNull(atomikosProperties2.getOutputDir());
      assertEquals(1, atomikosProperties2.getConsoleFileCount());
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = null;
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertEquals(21, properties0.size());
      assertFalse(properties0.isEmpty());
      
      String string0 = null;
      String string1 = "";
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string0, string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.jta.atomikos.AtomikosPropertiesTests", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNotNull(atomikosProperties0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      
      boolean boolean0 = false;
      atomikosProperties0.setAllowSubTransactions(boolean0);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.allowSubTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.allowSubTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertEquals(21, properties0.size());
      assertFalse(properties0.isEmpty());
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(properties1, properties0);
      assertTrue(properties1.equals((Object)properties0));
      assertNotNull(properties1);
      assertFalse(properties1.isEmpty());
      assertEquals(21, properties1.size());
      
      Properties properties2 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(properties2, properties0);
      assertNotSame(properties2, properties1);
      assertTrue(properties2.equals((Object)properties1));
      assertTrue(properties2.equals((Object)properties0));
      assertNotNull(properties2);
      assertFalse(properties2.isEmpty());
      assertEquals(21, properties2.size());
      
      Properties properties3 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(properties3, properties2);
      assertNotSame(properties3, properties1);
      assertNotSame(properties3, properties0);
      assertTrue(properties3.equals((Object)properties0));
      assertTrue(properties3.equals((Object)properties1));
      assertTrue(properties3.equals((Object)properties2));
      assertNotNull(properties3);
      assertEquals(21, properties3.size());
      assertFalse(properties3.isEmpty());
      
      Properties properties4 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(properties4, properties2);
      assertNotSame(properties4, properties3);
      assertNotSame(properties4, properties1);
      assertNotSame(properties4, properties0);
      assertTrue(properties4.equals((Object)properties3));
      assertTrue(properties4.equals((Object)properties0));
      assertTrue(properties4.equals((Object)properties2));
      assertTrue(properties4.equals((Object)properties1));
      assertNotNull(properties4);
      assertFalse(properties4.isEmpty());
      assertEquals(21, properties4.size());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertEquals(50, atomikosProperties1.maxActives);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals(1, atomikosProperties1.consoleFileCount);
      assertFalse(atomikosProperties1.allowSubTransactions);
      assertTrue(atomikosProperties1.enableLogging);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertNotNull(atomikosProperties1);
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertFalse(atomikosProperties1.isAllowSubTransactions());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertNull(atomikosProperties1.getOutputDir());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertEquals(21, properties0.size());
      assertFalse(properties0.isEmpty());
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.properties;
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertNotNull(atomikosProperties0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      
      boolean boolean0 = true;
      atomikosProperties0.threadedTwoPhaseCommit = boolean0;
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      
      atomikosPropertiesTests0.assertProperty(atomikosProperties0.logBaseName, atomikosProperties0.logBaseDir);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(properties1, properties0);
      assertTrue(properties1.equals((Object)properties0));
      assertNotNull(properties1);
      assertFalse(properties1.isEmpty());
      assertEquals(21, properties1.size());
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertFalse(properties0.isEmpty());
      assertEquals(21, properties0.size());
      
      AtomikosPropertiesTests atomikosPropertiesTests1 = new AtomikosPropertiesTests();
      assertFalse(atomikosPropertiesTests1.equals((Object)atomikosPropertiesTests0));
      assertNotNull(atomikosPropertiesTests1);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests1.properties;
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertNotNull(atomikosProperties0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      
      String string0 = null;
      atomikosProperties0.service = string0;
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      
      long long0 = (-439L);
      atomikosProperties0.setDefaultJtaTimeout(long0);
      assertNotSame(atomikosPropertiesTests1, atomikosPropertiesTests0);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-439L), atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosPropertiesTests1.equals((Object)atomikosPropertiesTests0));
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-439L), atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      
      atomikosPropertiesTests1.properties = atomikosProperties0;
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-439L), atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(1, atomikosPropertiesTests1.properties.getConsoleFileCount());
      assertEquals((-439L), atomikosPropertiesTests1.properties.getDefaultJtaTimeout());
      assertTrue(atomikosPropertiesTests1.properties.isAllowSubTransactions());
      assertFalse(atomikosPropertiesTests1.properties.isThreadedTwoPhaseCommit());
      assertNull(atomikosPropertiesTests1.properties.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosPropertiesTests1.properties.getMaxTimeout());
      assertNull(atomikosPropertiesTests1.properties.getOutputDir());
      assertTrue(atomikosPropertiesTests1.properties.isSerialJtaTransactions());
      assertEquals(50, atomikosPropertiesTests1.properties.getMaxActives());
      assertEquals("tm.out", atomikosPropertiesTests1.properties.getConsoleFileName());
      assertTrue(atomikosPropertiesTests1.properties.isEnableLogging());
      assertFalse(atomikosPropertiesTests1.properties.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosPropertiesTests1.properties.getLogBaseName());
      assertEquals(500L, atomikosPropertiesTests1.properties.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests1.properties.getConsoleLogLevel());
      assertEquals((-1), atomikosPropertiesTests1.properties.getConsoleFileLimit());
      assertNull(atomikosPropertiesTests1.properties.getLogBaseDir());
      assertNull(atomikosPropertiesTests1.properties.getService());
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-439L), atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertEquals((-439L), atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(atomikosPropertiesTests0, atomikosPropertiesTests1);
      assertNotSame(properties1, properties0);
      assertFalse(atomikosPropertiesTests0.equals((Object)atomikosPropertiesTests1));
      assertTrue(properties1.equals((Object)properties0));
      assertNotNull(properties1);
      assertEquals(21, properties1.size());
      assertFalse(properties1.isEmpty());
      
      Properties properties2 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(atomikosPropertiesTests0, atomikosPropertiesTests1);
      assertNotSame(properties2, properties1);
      assertNotSame(properties2, properties0);
      assertFalse(atomikosPropertiesTests0.equals((Object)atomikosPropertiesTests1));
      assertTrue(properties2.equals((Object)properties0));
      assertTrue(properties2.equals((Object)properties1));
      assertNotNull(properties2);
      assertFalse(properties2.isEmpty());
      assertEquals(21, properties2.size());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNotSame(atomikosPropertiesTests0, atomikosPropertiesTests1);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertTrue(atomikosProperties1.enableLogging);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertEquals(1, atomikosProperties1.consoleFileCount);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertEquals(50, atomikosProperties1.maxActives);
      assertEquals((-439L), atomikosProperties1.defaultJtaTimeout);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertFalse(atomikosPropertiesTests0.equals((Object)atomikosPropertiesTests1));
      assertNotNull(atomikosProperties1);
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getOutputDir());
      assertEquals((-439L), atomikosProperties1.getDefaultJtaTimeout());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      
      Properties properties3 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(atomikosPropertiesTests0, atomikosPropertiesTests1);
      assertNotSame(properties3, properties2);
      assertNotSame(properties3, properties1);
      assertNotSame(properties3, properties0);
      assertFalse(atomikosPropertiesTests0.equals((Object)atomikosPropertiesTests1));
      assertTrue(properties3.equals((Object)properties1));
      assertTrue(properties3.equals((Object)properties0));
      assertTrue(properties3.equals((Object)properties2));
      assertNotNull(properties3);
      assertFalse(properties3.isEmpty());
      assertEquals(21, properties3.size());
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests1.getproperties();
      assertNotSame(atomikosPropertiesTests1, atomikosPropertiesTests0);
      assertSame(atomikosProperties2, atomikosProperties0);
      assertSame(atomikosProperties2, atomikosProperties1);
      assertFalse(atomikosProperties2.forceShutdownOnVmExit);
      assertEquals((-439L), atomikosProperties2.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties2.maxTimeout);
      assertEquals((-1), atomikosProperties2.consoleFileLimit);
      assertEquals(500L, atomikosProperties2.checkpointInterval);
      assertTrue(atomikosProperties2.enableLogging);
      assertTrue(atomikosProperties2.allowSubTransactions);
      assertEquals(1, atomikosProperties2.consoleFileCount);
      assertTrue(atomikosProperties2.serialJtaTransactions);
      assertFalse(atomikosProperties2.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties2.maxActives);
      assertFalse(atomikosPropertiesTests1.equals((Object)atomikosPropertiesTests0));
      assertNotNull(atomikosProperties2);
      assertTrue(atomikosProperties2.isEnableLogging());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertEquals("tm.out", atomikosProperties2.getConsoleFileName());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties2.getConsoleLogLevel());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties2.getOutputDir());
      assertEquals(1, atomikosProperties2.getConsoleFileCount());
      assertEquals((-439L), atomikosProperties2.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertTrue(atomikosProperties2.isAllowSubTransactions());
      assertNull(atomikosProperties2.getService());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertEquals((-1), atomikosProperties2.getConsoleFileLimit());
      
      String string1 = "N2l!727zF2Z";
      String string2 = "&hpMI#^^U@r'p";
      // Undeclared exception!
      try { 
        atomikosPropertiesTests1.assertProperty(string1, string2);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosPropertiesTests atomikosPropertiesTests1 = new AtomikosPropertiesTests();
      assertFalse(atomikosPropertiesTests1.equals((Object)atomikosPropertiesTests0));
      assertNotNull(atomikosPropertiesTests1);
      
      atomikosPropertiesTests1.properties = atomikosPropertiesTests0.properties;
      assertEquals(500L, atomikosPropertiesTests1.properties.getCheckpointInterval());
      assertTrue(atomikosPropertiesTests1.properties.isSerialJtaTransactions());
      assertEquals(50, atomikosPropertiesTests1.properties.getMaxActives());
      assertEquals("tm.out", atomikosPropertiesTests1.properties.getConsoleFileName());
      assertFalse(atomikosPropertiesTests1.properties.isForceShutdownOnVmExit());
      assertNull(atomikosPropertiesTests1.properties.getTransactionManagerUniqueName());
      assertFalse(atomikosPropertiesTests1.properties.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosPropertiesTests1.properties.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests1.properties.getConsoleLogLevel());
      assertEquals(10000L, atomikosPropertiesTests1.properties.getDefaultJtaTimeout());
      assertEquals(1, atomikosPropertiesTests1.properties.getConsoleFileCount());
      assertEquals(300000L, atomikosPropertiesTests1.properties.getMaxTimeout());
      assertNull(atomikosPropertiesTests1.properties.getService());
      assertNull(atomikosPropertiesTests1.properties.getOutputDir());
      assertTrue(atomikosPropertiesTests1.properties.isAllowSubTransactions());
      assertNull(atomikosPropertiesTests1.properties.getLogBaseDir());
      assertEquals((-1), atomikosPropertiesTests1.properties.getConsoleFileLimit());
      assertTrue(atomikosPropertiesTests1.properties.isEnableLogging());
      
      long long0 = (-3296L);
      atomikosPropertiesTests1.properties.defaultJtaTimeout = atomikosPropertiesTests1.properties.checkpointInterval;
      int int0 = 0;
      atomikosPropertiesTests1.properties.setMaxActives(int0);
      assertNotSame(atomikosPropertiesTests1, atomikosPropertiesTests0);
      assertFalse(atomikosPropertiesTests1.equals((Object)atomikosPropertiesTests0));
      
      atomikosPropertiesTests1.properties.setMaxTimeout(long0);
      assertNotSame(atomikosPropertiesTests1, atomikosPropertiesTests0);
      assertFalse(atomikosPropertiesTests1.equals((Object)atomikosPropertiesTests0));
      
      atomikosPropertiesTests1.properties = atomikosPropertiesTests0.properties;
      assertEquals(500L, atomikosPropertiesTests1.properties.getCheckpointInterval());
      assertEquals((-3296L), atomikosPropertiesTests1.properties.getMaxTimeout());
      assertTrue(atomikosPropertiesTests1.properties.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosPropertiesTests1.properties.getConsoleFileName());
      assertFalse(atomikosPropertiesTests1.properties.isForceShutdownOnVmExit());
      assertNull(atomikosPropertiesTests1.properties.getTransactionManagerUniqueName());
      assertFalse(atomikosPropertiesTests1.properties.isThreadedTwoPhaseCommit());
      assertEquals(0, atomikosPropertiesTests1.properties.getMaxActives());
      assertEquals("tmlog", atomikosPropertiesTests1.properties.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests1.properties.getConsoleLogLevel());
      assertEquals(500L, atomikosPropertiesTests1.properties.getDefaultJtaTimeout());
      assertEquals(1, atomikosPropertiesTests1.properties.getConsoleFileCount());
      assertNull(atomikosPropertiesTests1.properties.getService());
      assertNull(atomikosPropertiesTests1.properties.getOutputDir());
      assertTrue(atomikosPropertiesTests1.properties.isAllowSubTransactions());
      assertNull(atomikosPropertiesTests1.properties.getLogBaseDir());
      assertEquals((-1), atomikosPropertiesTests1.properties.getConsoleFileLimit());
      assertTrue(atomikosPropertiesTests1.properties.isEnableLogging());
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests1.properties;
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-3296L), atomikosProperties0.maxTimeout);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertNotNull(atomikosProperties0);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(500L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-3296L), atomikosProperties0.getMaxTimeout());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      
      atomikosProperties0.threadedTwoPhaseCommit = atomikosPropertiesTests1.properties.forceShutdownOnVmExit;
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(500L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-3296L), atomikosProperties0.getMaxTimeout());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertNotSame(atomikosPropertiesTests0, atomikosPropertiesTests1);
      assertNotSame(atomikosPropertiesTests1, atomikosPropertiesTests0);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-3296L), atomikosProperties0.maxTimeout);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosPropertiesTests0.equals((Object)atomikosPropertiesTests1));
      assertFalse(atomikosPropertiesTests1.equals((Object)atomikosPropertiesTests0));
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(500L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-3296L), atomikosProperties0.getMaxTimeout());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNotSame(atomikosPropertiesTests0, atomikosPropertiesTests1);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals((-3296L), atomikosProperties1.maxTimeout);
      assertEquals(0, atomikosProperties1.maxActives);
      assertEquals(500L, atomikosProperties1.defaultJtaTimeout);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties1.consoleFileCount);
      assertTrue(atomikosProperties1.enableLogging);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertFalse(atomikosPropertiesTests0.equals((Object)atomikosPropertiesTests1));
      assertNotNull(atomikosProperties1);
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals((-3296L), atomikosProperties1.getMaxTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertNull(atomikosProperties1.getOutputDir());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertEquals(0, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertNull(atomikosProperties1.getService());
      assertEquals(500L, atomikosProperties1.getDefaultJtaTimeout());
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(atomikosPropertiesTests0, atomikosPropertiesTests1);
      assertFalse(atomikosPropertiesTests0.equals((Object)atomikosPropertiesTests1));
      assertNotNull(properties0);
      assertFalse(properties0.isEmpty());
      assertEquals(21, properties0.size());
      
      atomikosPropertiesTests0.properties = atomikosProperties1;
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals((-3296L), atomikosProperties1.getMaxTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertNull(atomikosProperties1.getOutputDir());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertEquals(0, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertNull(atomikosProperties1.getService());
      assertEquals(500L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals(0, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertEquals((-3296L), atomikosPropertiesTests0.properties.getMaxTimeout());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertNotSame(atomikosPropertiesTests0, atomikosPropertiesTests1);
      assertSame(atomikosProperties2, atomikosProperties0);
      assertSame(atomikosProperties2, atomikosProperties1);
      assertTrue(atomikosProperties2.allowSubTransactions);
      assertFalse(atomikosProperties2.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties2.defaultJtaTimeout);
      assertTrue(atomikosProperties2.serialJtaTransactions);
      assertEquals((-3296L), atomikosProperties2.maxTimeout);
      assertEquals(500L, atomikosProperties2.checkpointInterval);
      assertTrue(atomikosProperties2.enableLogging);
      assertEquals((-1), atomikosProperties2.consoleFileLimit);
      assertEquals(0, atomikosProperties2.maxActives);
      assertEquals(1, atomikosProperties2.consoleFileCount);
      assertFalse(atomikosProperties2.forceShutdownOnVmExit);
      assertFalse(atomikosPropertiesTests0.equals((Object)atomikosPropertiesTests1));
      assertNotNull(atomikosProperties2);
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertEquals((-3296L), atomikosProperties2.getMaxTimeout());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertEquals((-1), atomikosProperties2.getConsoleFileLimit());
      assertNull(atomikosProperties2.getOutputDir());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertTrue(atomikosProperties2.isAllowSubTransactions());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals(0, atomikosProperties2.getMaxActives());
      assertEquals(1, atomikosProperties2.getConsoleFileCount());
      assertNull(atomikosProperties2.getService());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties2.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties2.getDefaultJtaTimeout());
      assertEquals("tm.out", atomikosProperties2.getConsoleFileName());
      
      Properties properties1 = atomikosPropertiesTests1.loadDefaultSettings();
      assertNotSame(properties1, properties0);
      assertNotSame(atomikosPropertiesTests1, atomikosPropertiesTests0);
      assertTrue(properties1.equals((Object)properties0));
      assertFalse(atomikosPropertiesTests1.equals((Object)atomikosPropertiesTests0));
      assertNotNull(properties1);
      assertEquals(21, properties1.size());
      assertFalse(properties1.isEmpty());
      
      String string0 = "<b>View level: ";
      atomikosPropertiesTests1.assertProperty(string0, atomikosPropertiesTests0.properties.transactionManagerUniqueName);
      assertNotSame(atomikosPropertiesTests0, atomikosPropertiesTests1);
      assertNotSame(atomikosPropertiesTests1, atomikosPropertiesTests0);
      assertFalse(atomikosPropertiesTests0.equals((Object)atomikosPropertiesTests1));
      assertFalse(atomikosPropertiesTests1.equals((Object)atomikosPropertiesTests0));
      
      AtomikosProperties atomikosProperties3 = atomikosPropertiesTests0.getproperties();
      assertNotSame(atomikosPropertiesTests0, atomikosPropertiesTests1);
      assertSame(atomikosProperties3, atomikosProperties2);
      assertSame(atomikosProperties3, atomikosProperties0);
      assertSame(atomikosProperties3, atomikosProperties1);
      assertEquals(1, atomikosProperties3.consoleFileCount);
      assertTrue(atomikosProperties3.enableLogging);
      assertTrue(atomikosProperties3.serialJtaTransactions);
      assertFalse(atomikosProperties3.threadedTwoPhaseCommit);
      assertEquals(0, atomikosProperties3.maxActives);
      assertEquals((-3296L), atomikosProperties3.maxTimeout);
      assertFalse(atomikosProperties3.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties3.consoleFileLimit);
      assertEquals(500L, atomikosProperties3.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties3.checkpointInterval);
      assertTrue(atomikosProperties3.allowSubTransactions);
      assertFalse(atomikosPropertiesTests0.equals((Object)atomikosPropertiesTests1));
      assertNotNull(atomikosProperties3);
      assertEquals("tmlog", atomikosProperties3.getLogBaseName());
      assertNull(atomikosProperties3.getLogBaseDir());
      assertFalse(atomikosProperties3.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties3.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties3.getConsoleFileName());
      assertFalse(atomikosProperties3.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties3.getService());
      assertEquals((-1), atomikosProperties3.getConsoleFileLimit());
      assertEquals((-3296L), atomikosProperties3.getMaxTimeout());
      assertEquals(0, atomikosProperties3.getMaxActives());
      assertEquals(500L, atomikosProperties3.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties3.getConsoleLogLevel());
      assertTrue(atomikosProperties3.isEnableLogging());
      assertTrue(atomikosProperties3.isAllowSubTransactions());
      assertTrue(atomikosProperties3.isSerialJtaTransactions());
      assertNull(atomikosProperties3.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties3.getConsoleFileCount());
      assertNull(atomikosProperties3.getOutputDir());
      
      atomikosProperties1.logBaseDir = atomikosProperties0.logBaseName;
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(500L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-3296L), atomikosProperties0.getMaxTimeout());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals((-3296L), atomikosProperties1.getMaxTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertNull(atomikosProperties1.getOutputDir());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertEquals(0, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getService());
      assertEquals(500L, atomikosProperties1.getDefaultJtaTimeout());
      
      AtomikosProperties atomikosProperties4 = atomikosPropertiesTests0.getproperties();
      assertNotSame(atomikosPropertiesTests0, atomikosPropertiesTests1);
      assertSame(atomikosProperties4, atomikosProperties0);
      assertSame(atomikosProperties4, atomikosProperties2);
      assertSame(atomikosProperties4, atomikosProperties3);
      assertSame(atomikosProperties4, atomikosProperties1);
      assertTrue(atomikosProperties4.allowSubTransactions);
      assertEquals(0, atomikosProperties4.maxActives);
      assertEquals(1, atomikosProperties4.consoleFileCount);
      assertTrue(atomikosProperties4.enableLogging);
      assertFalse(atomikosProperties4.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties4.consoleFileLimit);
      assertEquals(500L, atomikosProperties4.checkpointInterval);
      assertEquals((-3296L), atomikosProperties4.maxTimeout);
      assertEquals(500L, atomikosProperties4.defaultJtaTimeout);
      assertTrue(atomikosProperties4.serialJtaTransactions);
      assertFalse(atomikosProperties4.threadedTwoPhaseCommit);
      assertFalse(atomikosPropertiesTests0.equals((Object)atomikosPropertiesTests1));
      assertNotNull(atomikosProperties4);
      assertEquals((-3296L), atomikosProperties4.getMaxTimeout());
      assertEquals("tm.out", atomikosProperties4.getConsoleFileName());
      assertEquals(500L, atomikosProperties4.getCheckpointInterval());
      assertTrue(atomikosProperties4.isSerialJtaTransactions());
      assertEquals((-1), atomikosProperties4.getConsoleFileLimit());
      assertTrue(atomikosProperties4.isEnableLogging());
      assertFalse(atomikosProperties4.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties4.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties4.getConsoleFileCount());
      assertTrue(atomikosProperties4.isAllowSubTransactions());
      assertEquals("tmlog", atomikosProperties4.getLogBaseDir());
      assertNull(atomikosProperties4.getService());
      assertFalse(atomikosProperties4.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties4.getConsoleLogLevel());
      assertNull(atomikosProperties4.getTransactionManagerUniqueName());
      assertNull(atomikosProperties4.getOutputDir());
      assertEquals("tmlog", atomikosProperties4.getLogBaseName());
      assertEquals(0, atomikosProperties4.getMaxActives());
      
      int int1 = 0;
      atomikosProperties4.consoleFileLimit = int1;
      assertEquals((-3296L), atomikosProperties4.getMaxTimeout());
      assertEquals("tm.out", atomikosProperties4.getConsoleFileName());
      assertEquals(500L, atomikosProperties4.getCheckpointInterval());
      assertTrue(atomikosProperties4.isSerialJtaTransactions());
      assertEquals(0, atomikosProperties4.getConsoleFileLimit());
      assertTrue(atomikosProperties4.isEnableLogging());
      assertFalse(atomikosProperties4.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties4.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties4.getConsoleFileCount());
      assertTrue(atomikosProperties4.isAllowSubTransactions());
      assertEquals("tmlog", atomikosProperties4.getLogBaseDir());
      assertNull(atomikosProperties4.getService());
      assertFalse(atomikosProperties4.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties4.getConsoleLogLevel());
      assertNull(atomikosProperties4.getTransactionManagerUniqueName());
      assertNull(atomikosProperties4.getOutputDir());
      assertEquals("tmlog", atomikosProperties4.getLogBaseName());
      assertEquals(0, atomikosProperties4.getMaxActives());
      
      String string1 = "";
      // Undeclared exception!
      try { 
        atomikosPropertiesTests1.assertProperty(atomikosProperties4.service, string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = atomikosPropertiesTests0.properties.asProperties();
      assertNotNull(properties0);
      assertEquals(18, properties0.size());
      assertFalse(properties0.isEmpty());
      
      AtomikosPropertiesTests atomikosPropertiesTests1 = new AtomikosPropertiesTests();
      assertFalse(atomikosPropertiesTests1.equals((Object)atomikosPropertiesTests0));
      assertNotNull(atomikosPropertiesTests1);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests1.properties;
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertNotNull(atomikosProperties0);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      
      atomikosPropertiesTests1.setproperties(atomikosProperties0);
      assertNotSame(atomikosPropertiesTests1, atomikosPropertiesTests0);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosPropertiesTests1.equals((Object)atomikosPropertiesTests0));
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      
      String[] stringArray0 = new String[5];
      String string0 = "";
      stringArray0[0] = string0;
      String string1 = "AWSM5@K!*=@P$pgIW\\";
      stringArray0[1] = string1;
      String string2 = "io.netty.channel.ChannelDuplexHandler";
      stringArray0[2] = string2;
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(atomikosPropertiesTests0, atomikosPropertiesTests1);
      assertNotSame(properties1, properties0);
      assertFalse(atomikosPropertiesTests0.equals((Object)atomikosPropertiesTests1));
      assertFalse(properties1.equals((Object)properties0));
      assertNotNull(properties1);
      assertEquals(21, properties1.size());
      assertFalse(properties1.isEmpty());
      
      String string3 = ")0Jl4~Y .q9Z";
      stringArray0[3] = string3;
      String string4 = "";
      int int0 = 22;
      atomikosProperties0.consoleFileLimit = int0;
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(22, atomikosProperties0.getConsoleFileLimit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      
      stringArray0[4] = string4;
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertNotSame(atomikosPropertiesTests0, atomikosPropertiesTests1);
      assertNotSame(properties0, properties1);
      assertFalse(atomikosPropertiesTests0.equals((Object)atomikosPropertiesTests1));
      assertFalse(properties0.equals((Object)properties1));
      assertNotNull(mapEntryArray0);
      assertEquals(18, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(5, mapEntryArray0.length);
      assertEquals(5, stringArray0.length);
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNotSame(atomikosPropertiesTests0, atomikosPropertiesTests1);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertEquals(50, atomikosProperties1.maxActives);
      assertEquals(1, atomikosProperties1.consoleFileCount);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties1.enableLogging);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertEquals(22, atomikosProperties1.consoleFileLimit);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertFalse(atomikosPropertiesTests0.equals((Object)atomikosPropertiesTests1));
      assertNotNull(atomikosProperties1);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(22, atomikosProperties1.getConsoleFileLimit());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getOutputDir());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertNotSame(atomikosPropertiesTests0, atomikosPropertiesTests1);
      assertSame(atomikosProperties2, atomikosProperties1);
      assertSame(atomikosProperties2, atomikosProperties0);
      assertEquals(1, atomikosProperties2.consoleFileCount);
      assertEquals(50, atomikosProperties2.maxActives);
      assertEquals(500L, atomikosProperties2.checkpointInterval);
      assertEquals(22, atomikosProperties2.consoleFileLimit);
      assertFalse(atomikosProperties2.forceShutdownOnVmExit);
      assertTrue(atomikosProperties2.serialJtaTransactions);
      assertFalse(atomikosProperties2.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties2.enableLogging);
      assertEquals(10000L, atomikosProperties2.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties2.maxTimeout);
      assertTrue(atomikosProperties2.allowSubTransactions);
      assertFalse(atomikosPropertiesTests0.equals((Object)atomikosPropertiesTests1));
      assertNotNull(atomikosProperties2);
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertEquals(22, atomikosProperties2.getConsoleFileLimit());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertNull(atomikosProperties2.getService());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertEquals("tm.out", atomikosProperties2.getConsoleFileName());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties2.getConsoleLogLevel());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties2.isAllowSubTransactions());
      assertEquals(1, atomikosProperties2.getConsoleFileCount());
      assertNull(atomikosProperties2.getOutputDir());
      
      Properties properties2 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(atomikosPropertiesTests0, atomikosPropertiesTests1);
      assertNotSame(properties2, properties0);
      assertNotSame(properties2, properties1);
      assertFalse(atomikosPropertiesTests0.equals((Object)atomikosPropertiesTests1));
      assertFalse(properties2.equals((Object)properties0));
      assertTrue(properties2.equals((Object)properties1));
      assertNotNull(properties2);
      assertFalse(properties2.isEmpty());
      assertEquals(21, properties2.size());
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertEquals(21, properties0.size());
      assertFalse(properties0.isEmpty());
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertNotNull(atomikosProperties0);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      String string0 = null;
      atomikosProperties0.outputDir = string0;
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      atomikosProperties0.setSerialJtaTransactions(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals(1, atomikosProperties1.consoleFileCount);
      assertTrue(atomikosProperties1.enableLogging);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertFalse(atomikosProperties1.serialJtaTransactions);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertEquals(50, atomikosProperties1.maxActives);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertNotNull(atomikosProperties1);
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getOutputDir());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertFalse(atomikosProperties1.isSerialJtaTransactions());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertNull(atomikosProperties1.getService());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNotNull(atomikosProperties0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertEquals(50, atomikosProperties1.maxActives);
      assertTrue(atomikosProperties1.enableLogging);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties1.consoleFileCount);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertNotNull(atomikosProperties1);
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertNull(atomikosProperties1.getOutputDir());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getService());
      
      long long0 = 10L;
      atomikosProperties1.setCheckpointInterval(long0);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertEquals(10L, atomikosProperties1.checkpointInterval);
      assertEquals(50, atomikosProperties1.maxActives);
      assertTrue(atomikosProperties1.enableLogging);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties1.consoleFileCount);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertNull(atomikosProperties1.getOutputDir());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertEquals(10L, atomikosProperties1.getCheckpointInterval());
      assertNull(atomikosProperties1.getService());
      
      boolean boolean0 = false;
      atomikosProperties1.setEnableLogging(boolean0);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertEquals(10L, atomikosProperties1.checkpointInterval);
      assertFalse(atomikosProperties1.enableLogging);
      assertEquals(50, atomikosProperties1.maxActives);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties1.consoleFileCount);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertNull(atomikosProperties1.getOutputDir());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertFalse(atomikosProperties1.isEnableLogging());
      assertEquals(10L, atomikosProperties1.getCheckpointInterval());
      assertNull(atomikosProperties1.getService());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties1);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertEquals(10L, atomikosProperties1.checkpointInterval);
      assertFalse(atomikosProperties1.enableLogging);
      assertEquals(50, atomikosProperties1.maxActives);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties1.consoleFileCount);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertNull(atomikosProperties1.getOutputDir());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertFalse(atomikosProperties1.isEnableLogging());
      assertEquals(10L, atomikosProperties1.getCheckpointInterval());
      assertNull(atomikosProperties1.getService());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties1);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertEquals(10L, atomikosProperties1.checkpointInterval);
      assertFalse(atomikosProperties1.enableLogging);
      assertEquals(50, atomikosProperties1.maxActives);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties1.consoleFileCount);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertNull(atomikosProperties1.getOutputDir());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertFalse(atomikosProperties1.isEnableLogging());
      assertEquals(10L, atomikosProperties1.getCheckpointInterval());
      assertNull(atomikosProperties1.getService());
      
      atomikosProperties1.service = atomikosPropertiesTests0.properties.service;
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertNull(atomikosProperties1.getOutputDir());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertFalse(atomikosProperties1.isEnableLogging());
      assertEquals(10L, atomikosProperties1.getCheckpointInterval());
      assertNull(atomikosProperties1.getService());
      
      Properties properties0 = atomikosProperties1.asProperties();
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertEquals(10L, atomikosProperties1.checkpointInterval);
      assertFalse(atomikosProperties1.enableLogging);
      assertEquals(50, atomikosProperties1.maxActives);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties1.consoleFileCount);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertNotNull(properties0);
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertNull(atomikosProperties1.getOutputDir());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertFalse(atomikosProperties1.isEnableLogging());
      assertEquals(10L, atomikosProperties1.getCheckpointInterval());
      assertNull(atomikosProperties1.getService());
      assertEquals(18, properties0.size());
      assertFalse(properties0.isEmpty());
      
      Integer integer0 = new Integer(atomikosProperties1.consoleFileCount);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertEquals(10L, atomikosProperties1.checkpointInterval);
      assertFalse(atomikosProperties1.enableLogging);
      assertEquals(50, atomikosProperties1.maxActives);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties1.consoleFileCount);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = "com.atomikos.icatch.default_jta_timeout";
      Integer integer1 = Integer.getInteger(string0);
      assertNull(integer1);
      
      Enumeration<?> enumeration0 = properties0.propertyNames();
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertEquals(10L, atomikosProperties1.checkpointInterval);
      assertFalse(atomikosProperties1.enableLogging);
      assertEquals(50, atomikosProperties1.maxActives);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties1.consoleFileCount);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertNotNull(enumeration0);
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertNull(atomikosProperties1.getOutputDir());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertFalse(atomikosProperties1.isEnableLogging());
      assertEquals(10L, atomikosProperties1.getCheckpointInterval());
      assertNull(atomikosProperties1.getService());
      assertEquals(18, properties0.size());
      assertFalse(properties0.isEmpty());
      
      Object object0 = properties0.put(atomikosProperties0, integer0);
      assertSame(atomikosProperties0, atomikosProperties1);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(10L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertEquals(10L, atomikosProperties1.checkpointInterval);
      assertFalse(atomikosProperties1.enableLogging);
      assertEquals(50, atomikosProperties1.maxActives);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties1.consoleFileCount);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertNull(object0);
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertNull(atomikosProperties1.getOutputDir());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertFalse(atomikosProperties1.isEnableLogging());
      assertEquals(10L, atomikosProperties1.getCheckpointInterval());
      assertNull(atomikosProperties1.getService());
      assertEquals(19, properties0.size());
      assertFalse(properties0.isEmpty());
      
      atomikosProperties1.maxTimeout = atomikosPropertiesTests0.properties.checkpointInterval;
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals(10L, atomikosProperties1.getMaxTimeout());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getOutputDir());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertFalse(atomikosProperties1.isEnableLogging());
      assertEquals(10L, atomikosProperties1.getCheckpointInterval());
      assertNull(atomikosProperties1.getService());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = atomikosProperties1.consoleFileName;
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertEquals(10L, atomikosProperties1.maxTimeout);
      assertEquals(10L, atomikosProperties1.checkpointInterval);
      assertFalse(atomikosProperties1.enableLogging);
      assertEquals(50, atomikosProperties1.maxActives);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties1.consoleFileCount);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertNotNull(mapEntryArray0);
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals(10L, atomikosProperties1.getMaxTimeout());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getOutputDir());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertFalse(atomikosProperties1.isEnableLogging());
      assertEquals(10L, atomikosProperties1.getCheckpointInterval());
      assertNull(atomikosProperties1.getService());
      assertEquals(19, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertEquals(1, mapEntryArray0.length);
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties2, atomikosProperties0);
      assertSame(atomikosProperties2, atomikosProperties1);
      assertFalse(atomikosProperties2.forceShutdownOnVmExit);
      assertTrue(atomikosProperties2.serialJtaTransactions);
      assertFalse(atomikosProperties2.threadedTwoPhaseCommit);
      assertEquals(10000L, atomikosProperties2.defaultJtaTimeout);
      assertTrue(atomikosProperties2.allowSubTransactions);
      assertFalse(atomikosProperties2.enableLogging);
      assertEquals((-1), atomikosProperties2.consoleFileLimit);
      assertEquals(1, atomikosProperties2.consoleFileCount);
      assertEquals(50, atomikosProperties2.maxActives);
      assertEquals(10L, atomikosProperties2.maxTimeout);
      assertEquals(10L, atomikosProperties2.checkpointInterval);
      assertNotNull(atomikosProperties2);
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties2.getConsoleFileLimit());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertNull(atomikosProperties2.getService());
      assertTrue(atomikosProperties2.isAllowSubTransactions());
      assertEquals(10L, atomikosProperties2.getCheckpointInterval());
      assertEquals(1, atomikosProperties2.getConsoleFileCount());
      assertNull(atomikosProperties2.getOutputDir());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties2.getConsoleLogLevel());
      assertEquals(10L, atomikosProperties2.getMaxTimeout());
      assertFalse(atomikosProperties2.isEnableLogging());
      assertEquals("tm.out", atomikosProperties2.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      
      AtomikosProperties atomikosProperties3 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties3, atomikosProperties2);
      assertSame(atomikosProperties3, atomikosProperties1);
      assertSame(atomikosProperties3, atomikosProperties0);
      assertFalse(atomikosProperties3.forceShutdownOnVmExit);
      assertFalse(atomikosProperties3.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties3.maxActives);
      assertTrue(atomikosProperties3.serialJtaTransactions);
      assertEquals(10L, atomikosProperties3.maxTimeout);
      assertFalse(atomikosProperties3.enableLogging);
      assertTrue(atomikosProperties3.allowSubTransactions);
      assertEquals(10L, atomikosProperties3.checkpointInterval);
      assertEquals(10000L, atomikosProperties3.defaultJtaTimeout);
      assertEquals(1, atomikosProperties3.consoleFileCount);
      assertEquals((-1), atomikosProperties3.consoleFileLimit);
      assertNotNull(atomikosProperties3);
      assertEquals(10L, atomikosProperties3.getCheckpointInterval());
      assertNull(atomikosProperties3.getOutputDir());
      assertNull(atomikosProperties3.getService());
      assertEquals((-1), atomikosProperties3.getConsoleFileLimit());
      assertFalse(atomikosProperties3.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties3.getLogBaseDir());
      assertEquals(10000L, atomikosProperties3.getDefaultJtaTimeout());
      assertNull(atomikosProperties3.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties3.getConsoleFileCount());
      assertTrue(atomikosProperties3.isAllowSubTransactions());
      assertTrue(atomikosProperties3.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties3.getConsoleLogLevel());
      assertEquals(10L, atomikosProperties3.getMaxTimeout());
      assertFalse(atomikosProperties3.isEnableLogging());
      assertFalse(atomikosProperties3.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties3.getMaxActives());
      assertEquals("tm.out", atomikosProperties3.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties3.getLogBaseName());
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(properties1, properties0);
      assertFalse(properties1.equals((Object)properties0));
      assertNotNull(properties1);
      assertEquals(21, properties1.size());
      assertFalse(properties1.isEmpty());
      
      Properties properties2 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(properties2, properties0);
      assertNotSame(properties2, properties1);
      assertFalse(properties2.equals((Object)properties0));
      assertTrue(properties2.equals((Object)properties1));
      assertNotNull(properties2);
      assertFalse(properties2.isEmpty());
      assertEquals(21, properties2.size());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties1);
      assertSame(atomikosProperties1, atomikosProperties2);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertSame(atomikosProperties1, atomikosProperties3);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertEquals(10L, atomikosProperties1.maxTimeout);
      assertEquals(10L, atomikosProperties1.checkpointInterval);
      assertFalse(atomikosProperties1.enableLogging);
      assertEquals(50, atomikosProperties1.maxActives);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties1.consoleFileCount);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals(10L, atomikosProperties1.getMaxTimeout());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getOutputDir());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertFalse(atomikosProperties1.isEnableLogging());
      assertEquals(10L, atomikosProperties1.getCheckpointInterval());
      assertNull(atomikosProperties1.getService());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties1);
      assertSame(atomikosProperties1, atomikosProperties2);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertSame(atomikosProperties1, atomikosProperties3);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertEquals(10L, atomikosProperties1.maxTimeout);
      assertEquals(10L, atomikosProperties1.checkpointInterval);
      assertFalse(atomikosProperties1.enableLogging);
      assertEquals(50, atomikosProperties1.maxActives);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties1.consoleFileCount);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals(10L, atomikosProperties1.getMaxTimeout());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getOutputDir());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertFalse(atomikosProperties1.isEnableLogging());
      assertEquals(10L, atomikosProperties1.getCheckpointInterval());
      assertNull(atomikosProperties1.getService());
      
      Properties properties3 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(properties3, properties1);
      assertNotSame(properties3, properties0);
      assertNotSame(properties3, properties2);
      assertFalse(properties3.equals((Object)properties0));
      assertTrue(properties3.equals((Object)properties1));
      assertTrue(properties3.equals((Object)properties2));
      assertNotNull(properties3);
      assertFalse(properties3.isEmpty());
      assertEquals(21, properties3.size());
      
      Properties properties4 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(properties4, properties1);
      assertNotSame(properties4, properties2);
      assertNotSame(properties4, properties0);
      assertNotSame(properties4, properties3);
      assertFalse(properties4.equals((Object)properties0));
      assertTrue(properties4.equals((Object)properties2));
      assertTrue(properties4.equals((Object)properties3));
      assertTrue(properties4.equals((Object)properties1));
      assertNotNull(properties4);
      assertFalse(properties4.isEmpty());
      assertEquals(21, properties4.size());
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertNotNull(atomikosProperties0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      int int0 = 0;
      atomikosProperties0.consoleFileCount = int0;
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      String string0 = "";
      atomikosPropertiesTests0.assertProperty(string0, atomikosProperties0.service);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(0, atomikosProperties0.consoleFileCount);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      String string1 = "";
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertEquals(21, properties0.size());
      assertFalse(properties0.isEmpty());
      
      atomikosProperties0.service = string1;
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("", atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      long long0 = 2305843009213693952L;
      atomikosProperties0.setDefaultJtaTimeout(long0);
      assertEquals(2305843009213693952L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(0, atomikosProperties0.consoleFileCount);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertEquals("", atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(2305843009213693952L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      AtomikosLoggingLevel atomikosLoggingLevel0 = AtomikosLoggingLevel.DEBUG;
      atomikosProperties0.consoleLogLevel = atomikosLoggingLevel0;
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertEquals("", atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(2305843009213693952L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertEquals("", atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(2305843009213693952L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertEquals("", atomikosPropertiesTests0.properties.getService());
      assertEquals(2305843009213693952L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertEquals(0, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertEquals(2305843009213693952L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(0, atomikosProperties0.consoleFileCount);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertEquals("", atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(2305843009213693952L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertEquals(50, atomikosProperties1.maxActives);
      assertEquals(2305843009213693952L, atomikosProperties1.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertTrue(atomikosProperties1.enableLogging);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals(0, atomikosProperties1.consoleFileCount);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertNotNull(atomikosProperties1);
      assertEquals(0, atomikosProperties1.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties1.getConsoleLogLevel());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(2305843009213693952L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getOutputDir());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals("", atomikosProperties1.getService());
      
      String string2 = "Wa}yE?C(2C";
      atomikosProperties1.setLogBaseDir(string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertEquals(50, atomikosProperties1.maxActives);
      assertEquals(2305843009213693952L, atomikosProperties1.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertTrue(atomikosProperties1.enableLogging);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals(0, atomikosProperties1.consoleFileCount);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(0, atomikosProperties1.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals("Wa}yE?C(2C", atomikosProperties1.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties1.getConsoleLogLevel());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(2305843009213693952L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getOutputDir());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertEquals("", atomikosProperties1.getService());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties1);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertEquals(50, atomikosProperties1.maxActives);
      assertEquals(2305843009213693952L, atomikosProperties1.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertTrue(atomikosProperties1.enableLogging);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals(0, atomikosProperties1.consoleFileCount);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertEquals(0, atomikosProperties1.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals("Wa}yE?C(2C", atomikosProperties1.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties1.getConsoleLogLevel());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(2305843009213693952L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getOutputDir());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertEquals("", atomikosProperties1.getService());
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(properties1, properties0);
      assertTrue(properties1.equals((Object)properties0));
      assertNotNull(properties1);
      assertFalse(properties1.isEmpty());
      assertEquals(21, properties1.size());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertSame(atomikosProperties0, atomikosProperties1);
      assertEquals(2305843009213693952L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(0, atomikosProperties0.consoleFileCount);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertEquals("", atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("Wa}yE?C(2C", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(2305843009213693952L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = atomikosProperties1.service;
      stringArray0[1] = atomikosPropertiesTests0.properties.logBaseDir;
      stringArray0[2] = atomikosProperties1.outputDir;
      boolean boolean0 = false;
      atomikosProperties1.allowSubTransactions = boolean0;
      assertEquals(0, atomikosProperties1.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals("Wa}yE?C(2C", atomikosProperties1.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties1.getConsoleLogLevel());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(2305843009213693952L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getOutputDir());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertFalse(atomikosProperties1.isAllowSubTransactions());
      assertEquals("", atomikosProperties1.getService());
      
      stringArray0[3] = atomikosProperties1.service;
      stringArray0[4] = atomikosPropertiesTests0.properties.service;
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = properties1.remove((Object) stringArray0[0], object0);
      assertNotSame(properties1, properties0);
      assertFalse(boolean1);
      assertTrue(properties1.equals((Object)properties0));
      assertTrue(boolean1 == boolean0);
      assertFalse(properties1.isEmpty());
      assertEquals(21, properties1.size());
      assertEquals(6, stringArray0.length);
      
      BiFunction<Object, Object, AbstractLoginService.UserPrincipal> biFunction0 = (BiFunction<Object, Object, AbstractLoginService.UserPrincipal>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = properties1.compute(stringArray0[0], biFunction0);
      assertNotSame(properties1, properties0);
      assertTrue(properties1.equals((Object)properties0));
      assertNull(object1);
      assertFalse(properties1.isEmpty());
      assertEquals(21, properties1.size());
      assertEquals(6, stringArray0.length);
      
      stringArray0[5] = string0;
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.defaultOf(properties1, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = atomikosPropertiesTests0.properties.asProperties();
      assertNotNull(properties0);
      assertEquals(18, properties0.size());
      assertFalse(properties0.isEmpty());
      
      String[] stringArray0 = new String[9];
      String string0 = "";
      stringArray0[0] = string0;
      String string1 = "com.atomikos.icatch.force_shutdown_on_vm_exit";
      stringArray0[1] = string1;
      String string2 = "";
      stringArray0[2] = string2;
      String string3 = "";
      stringArray0[3] = string3;
      String string4 = "%:5lM!\"b$134";
      stringArray0[4] = string4;
      String string5 = "";
      stringArray0[5] = string5;
      String string6 = "uri=";
      stringArray0[6] = string6;
      String string7 = "";
      stringArray0[7] = string7;
      String string8 = "^F5 4foVpQm+6@3s;yI";
      stringArray0[8] = string8;
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertNotNull(mapEntryArray0);
      assertEquals(18, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(9, stringArray0.length);
      assertEquals(9, mapEntryArray0.length);
      
      AtomikosProperties atomikosProperties0 = null;
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(properties1, properties0);
      assertFalse(properties1.equals((Object)properties0));
      assertNotNull(properties1);
      assertEquals(21, properties1.size());
      assertFalse(properties1.isEmpty());
      
      Properties properties2 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(properties2, properties1);
      assertNotSame(properties2, properties0);
      assertTrue(properties2.equals((Object)properties1));
      assertFalse(properties2.equals((Object)properties0));
      assertNotNull(properties2);
      assertFalse(properties2.isEmpty());
      assertEquals(21, properties2.size());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNull(atomikosProperties1);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertNotNull(atomikosProperties0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      
      int int0 = (-114);
      atomikosProperties0.maxActives = int0;
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-114), atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals((-114), atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-114), atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties1, atomikosProperties0);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertTrue(atomikosProperties1.enableLogging);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertEquals(1, atomikosProperties1.consoleFileCount);
      assertEquals((-114), atomikosProperties1.maxActives);
      assertNotNull(atomikosProperties1);
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getOutputDir());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals((-114), atomikosProperties1.getMaxActives());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      
      XMLDSigRI xMLDSigRI0 = new XMLDSigRI();
      assertNotNull(xMLDSigRI0);
      assertEquals("XMLDSig (DOM XMLSignatureFactory; DOM KeyInfoFactory; C14N 1.0, C14N 1.1, Exclusive C14N, Base64, Enveloped, XPath, XPath2, XSLT TransformServices)", xMLDSigRI0.getInfo());
      assertEquals("XMLDSig version 1.8", xMLDSigRI0.toString());
      assertEquals("XMLDSig", xMLDSigRI0.getName());
      assertEquals(1.8, xMLDSigRI0.getVersion(), 0.01);
      assertEquals(37, xMLDSigRI0.size());
      assertFalse(xMLDSigRI0.isEmpty());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = atomikosProperties0.consoleFileName;
      stringArray0[1] = atomikosProperties1.transactionManagerUniqueName;
      stringArray0[2] = atomikosProperties0.consoleFileName;
      stringArray0[3] = atomikosProperties1.logBaseDir;
      stringArray0[4] = atomikosProperties0.outputDir;
      stringArray0[5] = atomikosProperties1.logBaseDir;
      stringArray0[6] = atomikosProperties0.service;
      String string0 = "";
      stringArray0[7] = string0;
      stringArray0[8] = atomikosProperties0.outputDir;
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.defaultOf(xMLDSigRI0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = atomikosPropertiesTests0.properties.asProperties();
      assertNotNull(properties0);
      assertFalse(properties0.isEmpty());
      assertEquals(18, properties0.size());
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertNotNull(atomikosProperties0);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      long long0 = 0L;
      atomikosProperties0.setMaxTimeout(long0);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(0L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertEquals(0L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      
      String[] stringArray0 = new String[0];
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertNotNull(mapEntryArray0);
      assertFalse(properties0.isEmpty());
      assertEquals(18, properties0.size());
      assertEquals(0, stringArray0.length);
      assertEquals(0, mapEntryArray0.length);
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties1, atomikosProperties0);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertEquals(0L, atomikosProperties1.maxTimeout);
      assertTrue(atomikosProperties1.enableLogging);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties1.consoleFileCount);
      assertEquals(50, atomikosProperties1.maxActives);
      assertNotNull(atomikosProperties1);
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals(0L, atomikosProperties1.getMaxTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertNull(atomikosProperties1.getService());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getOutputDir());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "#FY; *J04tB";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.properties;
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertNotNull(atomikosProperties0);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      
      int int0 = 2548;
      long long0 = (-949L);
      atomikosProperties0.setCheckpointInterval(long0);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals((-949L), atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-949L), atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      
      atomikosProperties0.setConsoleFileCount(int0);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals((-949L), atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(2548, atomikosProperties0.consoleFileCount);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(2548, atomikosProperties0.getConsoleFileCount());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-949L), atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.properties;
      assertSame(atomikosProperties1, atomikosProperties0);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertEquals((-949L), atomikosProperties1.checkpointInterval);
      assertTrue(atomikosProperties1.enableLogging);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(2548, atomikosProperties1.consoleFileCount);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertEquals(50, atomikosProperties1.maxActives);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertNotNull(atomikosProperties1);
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getOutputDir());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(2548, atomikosProperties1.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals((-949L), atomikosProperties1.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      
      int int1 = (-6615);
      atomikosProperties1.consoleFileCount = int1;
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getOutputDir());
      assertNull(atomikosProperties1.getService());
      assertEquals((-6615), atomikosProperties1.getConsoleFileCount());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals((-949L), atomikosProperties1.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      
      long long1 = 3015L;
      atomikosProperties1.defaultJtaTimeout = long1;
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getOutputDir());
      assertNull(atomikosProperties1.getService());
      assertEquals((-6615), atomikosProperties1.getConsoleFileCount());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(3015L, atomikosProperties1.getDefaultJtaTimeout());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals((-949L), atomikosProperties1.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      
      atomikosProperties1.threadedTwoPhaseCommit = boolean0;
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getOutputDir());
      assertNull(atomikosProperties1.getService());
      assertEquals((-6615), atomikosProperties1.getConsoleFileCount());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(3015L, atomikosProperties1.getDefaultJtaTimeout());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals((-949L), atomikosProperties1.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties1);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertEquals((-949L), atomikosProperties1.checkpointInterval);
      assertTrue(atomikosProperties1.enableLogging);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(3015L, atomikosProperties1.defaultJtaTimeout);
      assertEquals((-6615), atomikosProperties1.consoleFileCount);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertEquals(50, atomikosProperties1.maxActives);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getOutputDir());
      assertNull(atomikosProperties1.getService());
      assertEquals((-6615), atomikosProperties1.getConsoleFileCount());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(3015L, atomikosProperties1.getDefaultJtaTimeout());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals((-949L), atomikosProperties1.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertEquals((-949L), atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertEquals((-6615), atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertEquals(3015L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(3015L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals((-6615), atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-949L), atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      
      atomikosProperties0.enableLogging = atomikosPropertiesTests0.properties.serialJtaTransactions;
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(3015L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals((-6615), atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-949L), atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertFalse(properties0.isEmpty());
      assertEquals(21, properties0.size());
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(properties1, properties0);
      assertTrue(properties1.equals((Object)properties0));
      assertNotNull(properties1);
      assertEquals(21, properties1.size());
      assertFalse(properties1.isEmpty());
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties2, atomikosProperties0);
      assertSame(atomikosProperties2, atomikosProperties1);
      assertEquals(50, atomikosProperties2.maxActives);
      assertEquals((-1), atomikosProperties2.consoleFileLimit);
      assertEquals(3015L, atomikosProperties2.defaultJtaTimeout);
      assertEquals((-6615), atomikosProperties2.consoleFileCount);
      assertTrue(atomikosProperties2.allowSubTransactions);
      assertEquals((-949L), atomikosProperties2.checkpointInterval);
      assertEquals(300000L, atomikosProperties2.maxTimeout);
      assertTrue(atomikosProperties2.enableLogging);
      assertFalse(atomikosProperties2.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties2.serialJtaTransactions);
      assertFalse(atomikosProperties2.forceShutdownOnVmExit);
      assertNotNull(atomikosProperties2);
      assertTrue(atomikosProperties2.isAllowSubTransactions());
      assertNull(atomikosProperties2.getService());
      assertNull(atomikosProperties2.getOutputDir());
      assertEquals((-1), atomikosProperties2.getConsoleFileLimit());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertEquals("tm.out", atomikosProperties2.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties2.getConsoleLogLevel());
      assertEquals((-949L), atomikosProperties2.getCheckpointInterval());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertEquals((-6615), atomikosProperties2.getConsoleFileCount());
      assertEquals(3015L, atomikosProperties2.getDefaultJtaTimeout());
      assertTrue(atomikosProperties2.isEnableLogging());
      
      AtomikosProperties atomikosProperties3 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties3, atomikosProperties0);
      assertSame(atomikosProperties3, atomikosProperties2);
      assertSame(atomikosProperties3, atomikosProperties1);
      assertFalse(atomikosProperties3.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties3.maxActives);
      assertFalse(atomikosProperties3.forceShutdownOnVmExit);
      assertEquals(3015L, atomikosProperties3.defaultJtaTimeout);
      assertTrue(atomikosProperties3.serialJtaTransactions);
      assertTrue(atomikosProperties3.enableLogging);
      assertEquals(300000L, atomikosProperties3.maxTimeout);
      assertEquals((-1), atomikosProperties3.consoleFileLimit);
      assertEquals((-949L), atomikosProperties3.checkpointInterval);
      assertEquals((-6615), atomikosProperties3.consoleFileCount);
      assertTrue(atomikosProperties3.allowSubTransactions);
      assertNotNull(atomikosProperties3);
      assertEquals(300000L, atomikosProperties3.getMaxTimeout());
      assertNull(atomikosProperties3.getService());
      assertEquals((-6615), atomikosProperties3.getConsoleFileCount());
      assertEquals((-1), atomikosProperties3.getConsoleFileLimit());
      assertNull(atomikosProperties3.getLogBaseDir());
      assertEquals(50, atomikosProperties3.getMaxActives());
      assertEquals("tm.out", atomikosProperties3.getConsoleFileName());
      assertFalse(atomikosProperties3.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties3.getLogBaseName());
      assertFalse(atomikosProperties3.isThreadedTwoPhaseCommit());
      assertEquals((-949L), atomikosProperties3.getCheckpointInterval());
      assertTrue(atomikosProperties3.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties3.getConsoleLogLevel());
      assertEquals(3015L, atomikosProperties3.getDefaultJtaTimeout());
      assertNull(atomikosProperties3.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties3.isSerialJtaTransactions());
      assertTrue(atomikosProperties3.isAllowSubTransactions());
      assertNull(atomikosProperties3.getOutputDir());
      
      AtomikosProperties atomikosProperties4 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties4, atomikosProperties1);
      assertSame(atomikosProperties4, atomikosProperties0);
      assertSame(atomikosProperties4, atomikosProperties2);
      assertSame(atomikosProperties4, atomikosProperties3);
      assertEquals(300000L, atomikosProperties4.maxTimeout);
      assertEquals((-1), atomikosProperties4.consoleFileLimit);
      assertEquals(50, atomikosProperties4.maxActives);
      assertEquals(3015L, atomikosProperties4.defaultJtaTimeout);
      assertEquals((-6615), atomikosProperties4.consoleFileCount);
      assertTrue(atomikosProperties4.allowSubTransactions);
      assertEquals((-949L), atomikosProperties4.checkpointInterval);
      assertTrue(atomikosProperties4.enableLogging);
      assertTrue(atomikosProperties4.serialJtaTransactions);
      assertFalse(atomikosProperties4.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties4.forceShutdownOnVmExit);
      assertNotNull(atomikosProperties4);
      assertTrue(atomikosProperties4.isSerialJtaTransactions());
      assertFalse(atomikosProperties4.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties4.getMaxActives());
      assertNull(atomikosProperties4.getLogBaseDir());
      assertEquals((-1), atomikosProperties4.getConsoleFileLimit());
      assertTrue(atomikosProperties4.isEnableLogging());
      assertEquals((-6615), atomikosProperties4.getConsoleFileCount());
      assertEquals(3015L, atomikosProperties4.getDefaultJtaTimeout());
      assertTrue(atomikosProperties4.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties4.getMaxTimeout());
      assertNull(atomikosProperties4.getService());
      assertNull(atomikosProperties4.getOutputDir());
      assertNull(atomikosProperties4.getTransactionManagerUniqueName());
      assertEquals("tm.out", atomikosProperties4.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties4.getLogBaseName());
      assertFalse(atomikosProperties4.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties4.getConsoleLogLevel());
      assertEquals((-949L), atomikosProperties4.getCheckpointInterval());
      
      AtomikosProperties atomikosProperties5 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties5, atomikosProperties2);
      assertSame(atomikosProperties5, atomikosProperties0);
      assertSame(atomikosProperties5, atomikosProperties3);
      assertSame(atomikosProperties5, atomikosProperties1);
      assertSame(atomikosProperties5, atomikosProperties4);
      assertFalse(atomikosProperties5.forceShutdownOnVmExit);
      assertTrue(atomikosProperties5.serialJtaTransactions);
      assertEquals((-949L), atomikosProperties5.checkpointInterval);
      assertEquals(3015L, atomikosProperties5.defaultJtaTimeout);
      assertTrue(atomikosProperties5.allowSubTransactions);
      assertEquals((-1), atomikosProperties5.consoleFileLimit);
      assertTrue(atomikosProperties5.enableLogging);
      assertEquals((-6615), atomikosProperties5.consoleFileCount);
      assertEquals(300000L, atomikosProperties5.maxTimeout);
      assertFalse(atomikosProperties5.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties5.maxActives);
      assertNotNull(atomikosProperties5);
      assertEquals((-6615), atomikosProperties5.getConsoleFileCount());
      assertFalse(atomikosProperties5.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties5.getOutputDir());
      assertNull(atomikosProperties5.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties5.getConsoleFileLimit());
      assertNull(atomikosProperties5.getLogBaseDir());
      assertTrue(atomikosProperties5.isAllowSubTransactions());
      assertNull(atomikosProperties5.getService());
      assertEquals("tm.out", atomikosProperties5.getConsoleFileName());
      assertEquals((-949L), atomikosProperties5.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties5.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties5.getConsoleLogLevel());
      assertEquals(3015L, atomikosProperties5.getDefaultJtaTimeout());
      assertTrue(atomikosProperties5.isEnableLogging());
      assertTrue(atomikosProperties5.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties5.getMaxTimeout());
      assertEquals(50, atomikosProperties5.getMaxActives());
      assertFalse(atomikosProperties5.isForceShutdownOnVmExit());
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNotNull(atomikosProperties0);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      boolean boolean0 = true;
      atomikosProperties0.setForceShutdownOnVmExit(boolean0);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertTrue(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertEquals(21, properties0.size());
      assertFalse(properties0.isEmpty());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties1, atomikosProperties0);
      assertTrue(atomikosProperties1.enableLogging);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertEquals(1, atomikosProperties1.consoleFileCount);
      assertTrue(atomikosProperties1.forceShutdownOnVmExit);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertEquals(50, atomikosProperties1.maxActives);
      assertNotNull(atomikosProperties1);
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertTrue(atomikosProperties1.isForceShutdownOnVmExit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getOutputDir());
      assertNull(atomikosProperties1.getService());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertTrue(atomikosProperties1.isEnableLogging());
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties2, atomikosProperties0);
      assertSame(atomikosProperties2, atomikosProperties1);
      assertTrue(atomikosProperties2.forceShutdownOnVmExit);
      assertTrue(atomikosProperties2.allowSubTransactions);
      assertEquals((-1), atomikosProperties2.consoleFileLimit);
      assertTrue(atomikosProperties2.enableLogging);
      assertEquals(10000L, atomikosProperties2.defaultJtaTimeout);
      assertEquals(1, atomikosProperties2.consoleFileCount);
      assertEquals(50, atomikosProperties2.maxActives);
      assertEquals(500L, atomikosProperties2.checkpointInterval);
      assertEquals(300000L, atomikosProperties2.maxTimeout);
      assertTrue(atomikosProperties2.serialJtaTransactions);
      assertFalse(atomikosProperties2.threadedTwoPhaseCommit);
      assertNotNull(atomikosProperties2);
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertTrue(atomikosProperties2.isAllowSubTransactions());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties2.getConsoleLogLevel());
      assertNull(atomikosProperties2.getOutputDir());
      assertEquals(1, atomikosProperties2.getConsoleFileCount());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertTrue(atomikosProperties2.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties2.getConsoleFileName());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertNull(atomikosProperties2.getService());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties2.getConsoleFileLimit());
      
      int int0 = (-260);
      atomikosProperties2.consoleFileCount = int0;
      assertEquals((-260), atomikosProperties2.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertTrue(atomikosProperties2.isAllowSubTransactions());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties2.getConsoleLogLevel());
      assertNull(atomikosProperties2.getOutputDir());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertTrue(atomikosProperties2.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties2.getConsoleFileName());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertNull(atomikosProperties2.getService());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties2.getConsoleFileLimit());
      
      System.setCurrentTimeMillis(atomikosProperties2.consoleFileCount);
      assertSame(atomikosProperties2, atomikosProperties0);
      assertSame(atomikosProperties2, atomikosProperties1);
      assertTrue(atomikosProperties2.forceShutdownOnVmExit);
      assertTrue(atomikosProperties2.allowSubTransactions);
      assertEquals((-1), atomikosProperties2.consoleFileLimit);
      assertTrue(atomikosProperties2.enableLogging);
      assertEquals(10000L, atomikosProperties2.defaultJtaTimeout);
      assertEquals(50, atomikosProperties2.maxActives);
      assertEquals((-260), atomikosProperties2.consoleFileCount);
      assertEquals(500L, atomikosProperties2.checkpointInterval);
      assertEquals(300000L, atomikosProperties2.maxTimeout);
      assertTrue(atomikosProperties2.serialJtaTransactions);
      assertFalse(atomikosProperties2.threadedTwoPhaseCommit);
      assertEquals((-260), atomikosProperties2.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertTrue(atomikosProperties2.isAllowSubTransactions());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties2.getConsoleLogLevel());
      assertNull(atomikosProperties2.getOutputDir());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertTrue(atomikosProperties2.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties2.getConsoleFileName());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertNull(atomikosProperties2.getService());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties2.getConsoleFileLimit());
      
      String[] stringArray0 = null;
      int int1 = (-1);
      atomikosProperties0.maxActives = int1;
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals((-1), atomikosProperties0.getMaxActives());
      assertEquals((-260), atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.jta.atomikos.AtomikosPropertiesTests", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      long long0 = 3211L;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      System.setCurrentTimeMillis(long0);
      System.setCurrentTimeMillis(long0);
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertNotNull(atomikosProperties0);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties1, atomikosProperties0);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties1.maxActives);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertEquals(1, atomikosProperties1.consoleFileCount);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertTrue(atomikosProperties1.enableLogging);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertNotNull(atomikosProperties1);
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertNull(atomikosProperties1.getOutputDir());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertNull(atomikosProperties1.getService());
      
      atomikosPropertiesTests0.properties = atomikosProperties1;
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      
      String string0 = "6";
      atomikosProperties0.setTransactionManagerUniqueName(string0);
      assertSame(atomikosProperties0, atomikosProperties1);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("6", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties2, atomikosProperties1);
      assertSame(atomikosProperties2, atomikosProperties0);
      assertEquals((-1), atomikosProperties2.consoleFileLimit);
      assertEquals(300000L, atomikosProperties2.maxTimeout);
      assertFalse(atomikosProperties2.forceShutdownOnVmExit);
      assertTrue(atomikosProperties2.allowSubTransactions);
      assertEquals(500L, atomikosProperties2.checkpointInterval);
      assertTrue(atomikosProperties2.enableLogging);
      assertEquals(10000L, atomikosProperties2.defaultJtaTimeout);
      assertTrue(atomikosProperties2.serialJtaTransactions);
      assertFalse(atomikosProperties2.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties2.consoleFileCount);
      assertEquals(50, atomikosProperties2.maxActives);
      assertNotNull(atomikosProperties2);
      assertEquals(1, atomikosProperties2.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertNull(atomikosProperties2.getOutputDir());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertEquals("6", atomikosProperties2.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties2.isAllowSubTransactions());
      assertNull(atomikosProperties2.getService());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertEquals((-1), atomikosProperties2.getConsoleFileLimit());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertEquals("tm.out", atomikosProperties2.getConsoleFileName());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties2.getConsoleLogLevel());
      
      atomikosProperties0.threadedTwoPhaseCommit = atomikosProperties1.allowSubTransactions;
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("6", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertNull(atomikosProperties1.getOutputDir());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertTrue(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals("6", atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getService());
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertEquals(21, properties0.size());
      assertFalse(properties0.isEmpty());
      
      String[] stringArray0 = new String[0];
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertNotNull(mapEntryArray0);
      assertEquals(21, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(0, stringArray0.length);
      assertEquals(0, mapEntryArray0.length);
      
      atomikosProperties0.setEnableLogging(boolean0);
      assertSame(atomikosProperties0, atomikosProperties2);
      assertSame(atomikosProperties0, atomikosProperties1);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("6", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      Properties properties1 = null;
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      MapEntry<?, ?>[] mapEntryArray1 = atomikosPropertiesTests0.defaultOf(properties1, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(mapEntryArray1, mapEntryArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(mapEntryArray1.equals((Object)mapEntryArray0));
      assertNotNull(mapEntryArray1);
      assertEquals(0, stringArray1.length);
      assertEquals(0, mapEntryArray1.length);
      
      AtomikosProperties atomikosProperties3 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties3, atomikosProperties0);
      assertSame(atomikosProperties3, atomikosProperties2);
      assertSame(atomikosProperties3, atomikosProperties1);
      assertTrue(atomikosProperties3.enableLogging);
      assertTrue(atomikosProperties3.allowSubTransactions);
      assertEquals(500L, atomikosProperties3.checkpointInterval);
      assertTrue(atomikosProperties3.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties3.consoleFileCount);
      assertFalse(atomikosProperties3.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties3.maxActives);
      assertEquals(10000L, atomikosProperties3.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties3.maxTimeout);
      assertEquals((-1), atomikosProperties3.consoleFileLimit);
      assertTrue(atomikosProperties3.serialJtaTransactions);
      assertNotNull(atomikosProperties3);
      assertEquals("tmlog", atomikosProperties3.getLogBaseName());
      assertEquals("tm.out", atomikosProperties3.getConsoleFileName());
      assertNull(atomikosProperties3.getService());
      assertTrue(atomikosProperties3.isSerialJtaTransactions());
      assertTrue(atomikosProperties3.isThreadedTwoPhaseCommit());
      assertEquals(50, atomikosProperties3.getMaxActives());
      assertFalse(atomikosProperties3.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties3.getDefaultJtaTimeout());
      assertNull(atomikosProperties3.getLogBaseDir());
      assertEquals((-1), atomikosProperties3.getConsoleFileLimit());
      assertEquals(300000L, atomikosProperties3.getMaxTimeout());
      assertEquals("6", atomikosProperties3.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties3.isEnableLogging());
      assertTrue(atomikosProperties3.isAllowSubTransactions());
      assertEquals(1, atomikosProperties3.getConsoleFileCount());
      assertEquals(500L, atomikosProperties3.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties3.getConsoleLogLevel());
      assertNull(atomikosProperties3.getOutputDir());
      
      MapEntry<?, ?>[] mapEntryArray2 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertNotSame(mapEntryArray2, mapEntryArray1);
      assertNotSame(mapEntryArray2, mapEntryArray0);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(mapEntryArray2.equals((Object)mapEntryArray1));
      assertFalse(mapEntryArray2.equals((Object)mapEntryArray0));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotNull(mapEntryArray2);
      assertEquals(21, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(0, mapEntryArray2.length);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      long long0 = 769L;
      System.setCurrentTimeMillis(long0);
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertFalse(properties0.isEmpty());
      assertEquals(21, properties0.size());
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertNotNull(atomikosProperties0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      
      long long1 = 0L;
      boolean boolean0 = true;
      atomikosProperties0.allowSubTransactions = boolean0;
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      
      atomikosProperties0.setDefaultJtaTimeout(long1);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(long1 == long0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      
      System.setCurrentTimeMillis(atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(properties1, properties0);
      assertTrue(properties1.equals((Object)properties0));
      assertNotNull(properties1);
      assertFalse(properties1.isEmpty());
      assertEquals(21, properties1.size());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertEquals(50, atomikosProperties1.maxActives);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties1.enableLogging);
      assertEquals(1, atomikosProperties1.consoleFileCount);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertEquals(0L, atomikosProperties1.defaultJtaTimeout);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertNotNull(atomikosProperties1);
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertEquals(0L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getOutputDir());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getService());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      
      Properties properties2 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(properties2, properties0);
      assertNotSame(properties2, properties1);
      assertTrue(properties2.equals((Object)properties1));
      assertTrue(properties2.equals((Object)properties0));
      assertNotNull(properties2);
      assertEquals(21, properties2.size());
      assertFalse(properties2.isEmpty());
      
      long long2 = 0L;
      System.setCurrentTimeMillis(long2);
      assertFalse(long2 == long0);
      
      Properties properties3 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(properties3, properties2);
      assertNotSame(properties3, properties0);
      assertNotSame(properties3, properties1);
      assertTrue(properties3.equals((Object)properties2));
      assertTrue(properties3.equals((Object)properties1));
      assertTrue(properties3.equals((Object)properties0));
      assertNotNull(properties3);
      assertEquals(21, properties3.size());
      assertFalse(properties3.isEmpty());
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.properties;
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertNotNull(atomikosProperties0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      
      long long0 = 0L;
      boolean boolean0 = true;
      atomikosProperties0.setForceShutdownOnVmExit(boolean0);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      
      boolean boolean1 = false;
      atomikosProperties0.setForceShutdownOnVmExit(boolean1);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(boolean1 == boolean0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      
      AtomikosLoggingLevel atomikosLoggingLevel0 = AtomikosLoggingLevel.INFO;
      atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel0);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      
      String string0 = "c2\"Q~M(CtpRuUANf";
      atomikosProperties0.setConsoleFileName(string0);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("c2\"Q~M(CtpRuUANf", atomikosProperties0.getConsoleFileName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      
      atomikosProperties0.checkpointInterval = long0;
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("c2\"Q~M(CtpRuUANf", atomikosProperties0.getConsoleFileName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("c2\"Q~M(CtpRuUANf", atomikosProperties0.getConsoleFileName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean2 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties1, atomikosProperties0);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertTrue(atomikosProperties1.enableLogging);
      assertEquals(1, atomikosProperties1.consoleFileCount);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertEquals(50, atomikosProperties1.maxActives);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertEquals(0L, atomikosProperties1.checkpointInterval);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertNotNull(atomikosProperties1);
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getOutputDir());
      assertNull(atomikosProperties1.getService());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals("c2\"Q~M(CtpRuUANf", atomikosProperties1.getConsoleFileName());
      assertEquals(0L, atomikosProperties1.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties1.getConsoleLogLevel());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertNull(atomikosProperties1.getLogBaseDir());
      
      atomikosPropertiesTests0.properties = atomikosProperties1;
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getOutputDir());
      assertNull(atomikosProperties1.getService());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals("c2\"Q~M(CtpRuUANf", atomikosProperties1.getConsoleFileName());
      assertEquals(0L, atomikosProperties1.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties1.getConsoleLogLevel());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals("c2\"Q~M(CtpRuUANf", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertEquals(0L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertEquals(21, properties0.size());
      assertFalse(properties0.isEmpty());
      
      long long1 = (-173L);
      System.setCurrentTimeMillis(long1);
      assertFalse(long1 == long0);
      
      boolean boolean3 = false;
      atomikosProperties1.allowSubTransactions = boolean3;
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getOutputDir());
      assertFalse(atomikosProperties1.isAllowSubTransactions());
      assertNull(atomikosProperties1.getService());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals("c2\"Q~M(CtpRuUANf", atomikosProperties1.getConsoleFileName());
      assertEquals(0L, atomikosProperties1.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties1.getConsoleLogLevel());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertNull(atomikosProperties1.getLogBaseDir());
      
      long long2 = 2534L;
      String string1 = null;
      atomikosProperties1.transactionManagerUniqueName = string1;
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getOutputDir());
      assertFalse(atomikosProperties1.isAllowSubTransactions());
      assertNull(atomikosProperties1.getService());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals("c2\"Q~M(CtpRuUANf", atomikosProperties1.getConsoleFileName());
      assertEquals(0L, atomikosProperties1.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties1.getConsoleLogLevel());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertNull(atomikosProperties1.getLogBaseDir());
      
      System.setCurrentTimeMillis(long2);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties2, atomikosProperties1);
      assertSame(atomikosProperties2, atomikosProperties0);
      assertEquals((-1), atomikosProperties2.consoleFileLimit);
      assertEquals(50, atomikosProperties2.maxActives);
      assertEquals(10000L, atomikosProperties2.defaultJtaTimeout);
      assertFalse(atomikosProperties2.forceShutdownOnVmExit);
      assertEquals(1, atomikosProperties2.consoleFileCount);
      assertFalse(atomikosProperties2.allowSubTransactions);
      assertTrue(atomikosProperties2.serialJtaTransactions);
      assertFalse(atomikosProperties2.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties2.enableLogging);
      assertEquals(0L, atomikosProperties2.checkpointInterval);
      assertEquals(300000L, atomikosProperties2.maxTimeout);
      assertNotNull(atomikosProperties2);
      assertEquals(1, atomikosProperties2.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertEquals(0L, atomikosProperties2.getCheckpointInterval());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties2.getConsoleLogLevel());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertFalse(atomikosProperties2.isAllowSubTransactions());
      assertNull(atomikosProperties2.getService());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertEquals((-1), atomikosProperties2.getConsoleFileLimit());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertNull(atomikosProperties2.getOutputDir());
      assertEquals("c2\"Q~M(CtpRuUANf", atomikosProperties2.getConsoleFileName());
      
      long long3 = 0L;
      System.setCurrentTimeMillis(long3);
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      
      AtomikosProperties atomikosProperties3 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties3, atomikosProperties2);
      assertSame(atomikosProperties3, atomikosProperties1);
      assertSame(atomikosProperties3, atomikosProperties0);
      assertFalse(atomikosProperties3.allowSubTransactions);
      assertEquals(50, atomikosProperties3.maxActives);
      assertEquals(10000L, atomikosProperties3.defaultJtaTimeout);
      assertEquals(0L, atomikosProperties3.checkpointInterval);
      assertEquals(300000L, atomikosProperties3.maxTimeout);
      assertTrue(atomikosProperties3.serialJtaTransactions);
      assertFalse(atomikosProperties3.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties3.consoleFileCount);
      assertFalse(atomikosProperties3.forceShutdownOnVmExit);
      assertTrue(atomikosProperties3.enableLogging);
      assertEquals((-1), atomikosProperties3.consoleFileLimit);
      assertNotNull(atomikosProperties3);
      assertEquals(1, atomikosProperties3.getConsoleFileCount());
      assertEquals("c2\"Q~M(CtpRuUANf", atomikosProperties3.getConsoleFileName());
      assertNull(atomikosProperties3.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties3.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties3.getDefaultJtaTimeout());
      assertEquals(0L, atomikosProperties3.getCheckpointInterval());
      assertFalse(atomikosProperties3.isAllowSubTransactions());
      assertNull(atomikosProperties3.getOutputDir());
      assertEquals(300000L, atomikosProperties3.getMaxTimeout());
      assertTrue(atomikosProperties3.isSerialJtaTransactions());
      assertTrue(atomikosProperties3.isEnableLogging());
      assertEquals(50, atomikosProperties3.getMaxActives());
      assertFalse(atomikosProperties3.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties3.getLogBaseName());
      assertNull(atomikosProperties3.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties3.getConsoleLogLevel());
      assertFalse(atomikosProperties3.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties3.getService());
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertNotNull(atomikosProperties0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      
      int int0 = 0;
      atomikosProperties0.consoleFileLimit = int0;
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      
      String string0 = "tDQC~QD";
      atomikosPropertiesTests0.assertProperty(string0, atomikosProperties0.outputDir);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(0, atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(0, atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertEquals(0, atomikosProperties1.consoleFileLimit);
      assertEquals(50, atomikosProperties1.maxActives);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties1.consoleFileCount);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertTrue(atomikosProperties1.enableLogging);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertNotNull(atomikosProperties1);
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals(0, atomikosProperties1.getConsoleFileLimit());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getService());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertNull(atomikosProperties1.getOutputDir());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
  }
}
