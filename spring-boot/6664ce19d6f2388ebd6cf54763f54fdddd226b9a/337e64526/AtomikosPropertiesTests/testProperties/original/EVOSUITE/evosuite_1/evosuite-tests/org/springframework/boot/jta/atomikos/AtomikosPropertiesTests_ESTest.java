/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 04 01:04:41 GMT 2021
 */

package org.springframework.boot.jta.atomikos;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.security.KeyStore;
import java.security.NoSuchProviderException;
import java.security.Provider;
import java.util.Properties;
import javax.persistence.MapKeyJoinColumn;
import org.assertj.core.data.MapEntry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hibernate.cfg.annotations.MapKeyJoinColumnDelegator;
import org.jcp.xml.dsig.internal.dom.XMLDSigRI;
import org.junit.ComparisonFailure;
import org.junit.runner.RunWith;
import org.springframework.boot.jta.atomikos.AtomikosLoggingLevel;
import org.springframework.boot.jta.atomikos.AtomikosProperties;
import org.springframework.boot.jta.atomikos.AtomikosPropertiesTests;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AtomikosPropertiesTests_ESTest extends AtomikosPropertiesTests_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      String string0 = "J:(T";
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertEquals(21, properties0.size());
      assertFalse(properties0.isEmpty());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, mapEntryArray0.length);
      assertNotNull(mapEntryArray0);
      assertEquals(21, properties0.size());
      assertFalse(properties0.isEmpty());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string0, string0);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertEquals(21, properties0.size());
      assertFalse(properties0.isEmpty());
      
      String[] stringArray0 = new String[0];
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, mapEntryArray0.length);
      assertNotNull(mapEntryArray0);
      assertEquals(21, properties0.size());
      assertFalse(properties0.isEmpty());
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = atomikosPropertiesTests0.properties.asProperties();
      assertNotNull(properties0);
      assertEquals(18, properties0.size());
      assertFalse(properties0.isEmpty());
      
      String[] stringArray0 = new String[1];
      String string0 = "";
      stringArray0[0] = string0;
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, mapEntryArray0.length);
      assertNotNull(mapEntryArray0);
      assertEquals(18, properties0.size());
      assertFalse(properties0.isEmpty());
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string0, string0);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.properties;
      assertNotNull(atomikosProperties0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties0);
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties1, atomikosProperties0);
      assertNotNull(atomikosProperties1);
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertNull(atomikosProperties1.getOutputDir());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getService());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      
      int int0 = 1580;
      atomikosPropertiesTests0.properties.setMaxActives(int0);
      long long0 = (-327L);
      String string0 = "";
      atomikosProperties1.setOutputDir(string0);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals("", atomikosProperties1.getOutputDir());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getService());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(1580, atomikosProperties1.getMaxActives());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      
      atomikosProperties1.setMaxTimeout(long0);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals((-327L), atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals("", atomikosProperties1.getOutputDir());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getService());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(1580, atomikosProperties1.getMaxActives());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      
      atomikosPropertiesTests0.properties = atomikosProperties1;
      assertEquals("", atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals((-327L), atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1580, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertEquals((-327L), atomikosPropertiesTests0.properties.getMaxTimeout());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosPropertiesTests0.properties.getOutputDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertEquals(1580, atomikosPropertiesTests0.properties.getMaxActives());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      
      boolean boolean0 = true;
      atomikosProperties1.setEnableLogging(boolean0);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals((-327L), atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals("", atomikosProperties1.getOutputDir());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getService());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(1580, atomikosProperties1.getMaxActives());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      
      atomikosPropertiesTests0.properties = atomikosProperties1;
      assertEquals("", atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals((-327L), atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1580, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertEquals((-327L), atomikosPropertiesTests0.properties.getMaxTimeout());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosPropertiesTests0.properties.getOutputDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertEquals(1580, atomikosPropertiesTests0.properties.getMaxActives());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertFalse(properties0.isEmpty());
      assertEquals(21, properties0.size());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties1);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals((-327L), atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals("", atomikosProperties1.getOutputDir());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getService());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(1580, atomikosProperties1.getMaxActives());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties1);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals((-327L), atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals("", atomikosProperties1.getOutputDir());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getService());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(1580, atomikosProperties1.getMaxActives());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties2, atomikosProperties0);
      assertSame(atomikosProperties2, atomikosProperties1);
      assertNotNull(atomikosProperties2);
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties2.getConsoleFileCount());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertEquals("", atomikosProperties2.getOutputDir());
      assertTrue(atomikosProperties2.isAllowSubTransactions());
      assertEquals(1580, atomikosProperties2.getMaxActives());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties2.getConsoleLogLevel());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertEquals((-1), atomikosProperties2.getConsoleFileLimit());
      assertNull(atomikosProperties2.getService());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties2.getConsoleFileName());
      assertEquals((-327L), atomikosProperties2.getMaxTimeout());
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(properties1, properties0);
      assertTrue(properties1.equals((Object)properties0));
      assertNotNull(properties1);
      assertFalse(properties1.isEmpty());
      assertEquals(21, properties1.size());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      atomikosPropertiesTests0.setproperties(atomikosProperties2);
      assertSame(atomikosProperties2, atomikosProperties0);
      assertSame(atomikosProperties2, atomikosProperties1);
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties2.getConsoleFileCount());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertEquals("", atomikosProperties2.getOutputDir());
      assertTrue(atomikosProperties2.isAllowSubTransactions());
      assertEquals(1580, atomikosProperties2.getMaxActives());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties2.getConsoleLogLevel());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertEquals((-1), atomikosProperties2.getConsoleFileLimit());
      assertNull(atomikosProperties2.getService());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties2.getConsoleFileName());
      assertEquals((-327L), atomikosProperties2.getMaxTimeout());
      
      stringArray0[3] = string0;
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertNotSame(properties0, properties1);
      assertTrue(properties0.equals((Object)properties1));
      assertEquals(4, stringArray0.length);
      assertEquals(4, mapEntryArray0.length);
      assertNotNull(mapEntryArray0);
      assertFalse(properties0.isEmpty());
      assertEquals(21, properties0.size());
      
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(stringArray0[0], string0);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      
      int int0 = 312;
      atomikosPropertiesTests0.properties.setConsoleFileLimit(int0);
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(312, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertEquals(312, atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      
      String string0 = null;
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertFalse(properties0.isEmpty());
      assertEquals(21, properties0.size());
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(properties1, properties0);
      assertTrue(properties1.equals((Object)properties0));
      assertNotNull(properties1);
      assertEquals(21, properties1.size());
      assertFalse(properties1.isEmpty());
      
      int int1 = (-576);
      atomikosPropertiesTests0.properties.setMaxActives(int1);
      assertSame(atomikosPropertiesTests0.properties, atomikosProperties0);
      assertFalse(int1 == int0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(312, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-576), atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertEquals((-576), atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertEquals(312, atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      
      String string1 = "text/css";
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(312, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-576), atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertEquals(312, atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertEquals((-576), atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string0, string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      String string0 = "N<vAD~1B.4h>i6|";
      String string1 = "";
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string0, string1);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      String string0 = "H+Ej2W";
      String string1 = null;
      atomikosPropertiesTests0.assertProperty(string0, string1);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = null;
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertFalse(properties0.isEmpty());
      assertEquals(21, properties0.size());
      
      String[] stringArray0 = new String[9];
      String string0 = "}NUVcI&`Eo5YUr77 ";
      stringArray0[0] = string0;
      String string1 = "Could not instantiate ";
      stringArray0[1] = string1;
      String string2 = "";
      MapKeyJoinColumn mapKeyJoinColumn0 = mock(MapKeyJoinColumn.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(mapKeyJoinColumn0).updatable();
      MapKeyJoinColumnDelegator mapKeyJoinColumnDelegator0 = new MapKeyJoinColumnDelegator(mapKeyJoinColumn0);
      assertNotNull(mapKeyJoinColumnDelegator0);
      
      boolean boolean0 = mapKeyJoinColumnDelegator0.updatable();
      assertFalse(boolean0);
      
      Object object0 = properties0.put(mapKeyJoinColumnDelegator0, atomikosPropertiesTests0);
      assertNull(object0);
      assertEquals(22, properties0.size());
      assertFalse(properties0.isEmpty());
      
      stringArray0[2] = string2;
      String string3 = "";
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties0);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      
      int int0 = 5000;
      atomikosProperties0.setConsoleFileLimit(int0);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(5000, atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(5000, atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties1, atomikosProperties0);
      assertNotNull(atomikosProperties1);
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getService());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getOutputDir());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals(5000, atomikosProperties1.getConsoleFileLimit());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      
      boolean boolean0 = false;
      atomikosProperties1.setAllowSubTransactions(boolean0);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertFalse(atomikosProperties1.isAllowSubTransactions());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getService());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getOutputDir());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals(5000, atomikosProperties1.getConsoleFileLimit());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      
      atomikosProperties1.setThreadedTwoPhaseCommit(boolean0);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertFalse(atomikosProperties1.isAllowSubTransactions());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getService());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getOutputDir());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals(5000, atomikosProperties1.getConsoleFileLimit());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties1);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertFalse(atomikosProperties1.isAllowSubTransactions());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getService());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getOutputDir());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals(5000, atomikosProperties1.getConsoleFileLimit());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties2, atomikosProperties1);
      assertSame(atomikosProperties2, atomikosProperties0);
      assertNotNull(atomikosProperties2);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties2.getConsoleLogLevel());
      assertEquals(5000, atomikosProperties2.getConsoleFileLimit());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertFalse(atomikosProperties2.isAllowSubTransactions());
      assertEquals(1, atomikosProperties2.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertNull(atomikosProperties2.getOutputDir());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertNull(atomikosProperties2.getService());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertEquals("tm.out", atomikosProperties2.getConsoleFileName());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertFalse(properties0.isEmpty());
      assertEquals(21, properties0.size());
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(properties1, properties0);
      assertTrue(properties1.equals((Object)properties0));
      assertNotNull(properties1);
      assertEquals(21, properties1.size());
      assertFalse(properties1.isEmpty());
      
      String string0 = "com.atomikos.icatch.force_shutdown_on_vm_exit";
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string0, string0);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertEquals(21, properties0.size());
      assertFalse(properties0.isEmpty());
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(properties1, properties0);
      assertTrue(properties1.equals((Object)properties0));
      assertNotNull(properties1);
      assertEquals(21, properties1.size());
      assertFalse(properties1.isEmpty());
      
      String[] stringArray0 = new String[5];
      String string0 = "logBaseDir";
      stringArray0[0] = string0;
      String string1 = "ClwiL<5";
      stringArray0[1] = string1;
      String string2 = "false";
      stringArray0[2] = string2;
      String string3 = "7vH6lJz";
      stringArray0[3] = string3;
      String string4 = "E\\%s[Dgb";
      stringArray0[4] = string4;
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertNotSame(properties0, properties1);
      assertTrue(properties0.equals((Object)properties1));
      assertEquals(5, stringArray0.length);
      assertEquals(5, mapEntryArray0.length);
      assertNotNull(mapEntryArray0);
      assertEquals(21, properties0.size());
      assertFalse(properties0.isEmpty());
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      
      long long0 = 4219L;
      atomikosProperties0.setCheckpointInterval(long0);
      assertEquals(4219L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      
      String string5 = "\"S`\\wCK.,u";
      atomikosProperties0.setOutputDir(string5);
      assertNotSame(string5, string4);
      assertNotSame(string5, string3);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string0);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals(4219L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("\"S`\\wCK.,u", atomikosProperties0.getOutputDir());
      
      int int0 = 0;
      atomikosProperties0.setConsoleFileLimit(int0);
      assertEquals(4219L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("\"S`\\wCK.,u", atomikosProperties0.getOutputDir());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertEquals(4219L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("\"S`\\wCK.,u", atomikosProperties0.getOutputDir());
      
      Properties properties2 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(properties2, properties1);
      assertNotSame(properties2, properties0);
      assertTrue(properties2.equals((Object)properties1));
      assertTrue(properties2.equals((Object)properties0));
      assertNotNull(properties2);
      assertFalse(properties2.isEmpty());
      assertEquals(21, properties2.size());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertEquals(4219L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("\"S`\\wCK.,u", atomikosProperties0.getOutputDir());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertEquals(4219L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("\"S`\\wCK.,u", atomikosProperties0.getOutputDir());
      
      Properties properties3 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(properties3, properties1);
      assertNotSame(properties3, properties2);
      assertNotSame(properties3, properties0);
      assertTrue(properties3.equals((Object)properties2));
      assertTrue(properties3.equals((Object)properties0));
      assertTrue(properties3.equals((Object)properties1));
      assertNotNull(properties3);
      assertFalse(properties3.isEmpty());
      assertEquals(21, properties3.size());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties1, atomikosProperties0);
      assertNotNull(atomikosProperties1);
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(0, atomikosProperties1.getConsoleFileLimit());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals("\"S`\\wCK.,u", atomikosProperties1.getOutputDir());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertNull(atomikosProperties1.getService());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals(4219L, atomikosProperties1.getCheckpointInterval());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      
      String string6 = "r1V'Lb-%l^%-8nr";
      atomikosProperties0.setLogBaseName(string5);
      assertNotSame(string5, string4);
      assertNotSame(string5, string3);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string0);
      assertNotSame(string5, string6);
      assertSame(atomikosProperties0, atomikosProperties1);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string6));
      assertEquals(4219L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("\"S`\\wCK.,u", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("\"S`\\wCK.,u", atomikosProperties0.getOutputDir());
      
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string6, string6);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties1, atomikosProperties0);
      assertNotNull(atomikosProperties1);
      assertTrue(atomikosProperties1.isEnableLogging());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getOutputDir());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getService());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      
      boolean boolean0 = true;
      atomikosProperties1.setForceShutdownOnVmExit(boolean0);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertTrue(atomikosProperties1.isEnableLogging());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getOutputDir());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getService());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties1.isForceShutdownOnVmExit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties1);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertTrue(atomikosProperties1.isEnableLogging());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getOutputDir());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getService());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties1.isForceShutdownOnVmExit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      
      AtomikosLoggingLevel atomikosLoggingLevel0 = AtomikosLoggingLevel.WARN;
      atomikosProperties1.setConsoleLogLevel(atomikosLoggingLevel0);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertTrue(atomikosProperties1.isEnableLogging());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getOutputDir());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getService());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties1.isForceShutdownOnVmExit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties2, atomikosProperties0);
      assertSame(atomikosProperties2, atomikosProperties1);
      assertNotNull(atomikosProperties2);
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertEquals("tm.out", atomikosProperties2.getConsoleFileName());
      assertTrue(atomikosProperties2.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties2.getConsoleFileLimit());
      assertNull(atomikosProperties2.getService());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertTrue(atomikosProperties2.isAllowSubTransactions());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties2.getOutputDir());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties2.getConsoleLogLevel());
      assertEquals(1, atomikosProperties2.getConsoleFileCount());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties1);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertSame(atomikosProperties1, atomikosProperties2);
      assertTrue(atomikosProperties1.isEnableLogging());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getOutputDir());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getService());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties1.isForceShutdownOnVmExit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      
      AtomikosProperties atomikosProperties3 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties3, atomikosProperties1);
      assertSame(atomikosProperties3, atomikosProperties0);
      assertSame(atomikosProperties3, atomikosProperties2);
      assertNotNull(atomikosProperties3);
      assertTrue(atomikosProperties3.isForceShutdownOnVmExit());
      assertNull(atomikosProperties3.getLogBaseDir());
      assertNull(atomikosProperties3.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties3.getConsoleFileLimit());
      assertEquals(50, atomikosProperties3.getMaxActives());
      assertNull(atomikosProperties3.getOutputDir());
      assertNull(atomikosProperties3.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties3.getConsoleLogLevel());
      assertEquals(1, atomikosProperties3.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties3.getConsoleFileName());
      assertFalse(atomikosProperties3.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties3.getLogBaseName());
      assertEquals(500L, atomikosProperties3.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties3.getMaxTimeout());
      assertTrue(atomikosProperties3.isAllowSubTransactions());
      assertTrue(atomikosProperties3.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties3.getDefaultJtaTimeout());
      assertTrue(atomikosProperties3.isEnableLogging());
      
      XMLDSigRI xMLDSigRI0 = new XMLDSigRI();
      assertNotNull(xMLDSigRI0);
      assertEquals("XMLDSig", xMLDSigRI0.getName());
      assertEquals(1.8, xMLDSigRI0.getVersion(), 0.01);
      assertEquals("XMLDSig (DOM XMLSignatureFactory; DOM KeyInfoFactory; C14N 1.0, C14N 1.1, Exclusive C14N, Base64, Enveloped, XPath, XPath2, XSLT TransformServices)", xMLDSigRI0.getInfo());
      assertEquals(37, xMLDSigRI0.size());
      assertEquals("XMLDSig version 1.8", xMLDSigRI0.toString());
      assertFalse(xMLDSigRI0.isEmpty());
      
      String[] stringArray0 = new String[2];
      String string0 = "pGk";
      stringArray0[0] = string0;
      String string1 = "com.atomikos.icatch.threaded_2pc";
      stringArray0[1] = string1;
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(xMLDSigRI0, stringArray0);
      assertEquals(2, mapEntryArray0.length);
      assertEquals(2, stringArray0.length);
      assertNotNull(mapEntryArray0);
      assertEquals("XMLDSig", xMLDSigRI0.getName());
      assertEquals(1.8, xMLDSigRI0.getVersion(), 0.01);
      assertEquals("XMLDSig (DOM XMLSignatureFactory; DOM KeyInfoFactory; C14N 1.0, C14N 1.1, Exclusive C14N, Base64, Enveloped, XPath, XPath2, XSLT TransformServices)", xMLDSigRI0.getInfo());
      assertEquals(37, xMLDSigRI0.size());
      assertEquals("XMLDSig version 1.8", xMLDSigRI0.toString());
      assertFalse(xMLDSigRI0.isEmpty());
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.properties;
      assertNotNull(atomikosProperties0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      
      long long0 = 391L;
      atomikosProperties0.setDefaultJtaTimeout(long0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(391L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      
      String string0 = "b_&|7kxKsWmUAEi";
      atomikosProperties0.setLogBaseName(string0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(391L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("b_&|7kxKsWmUAEi", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertEquals(21, properties0.size());
      assertFalse(properties0.isEmpty());
      
      boolean boolean0 = true;
      boolean boolean1 = false;
      atomikosProperties0.setEnableLogging(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(391L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("b_&|7kxKsWmUAEi", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      
      boolean boolean2 = true;
      atomikosProperties0.setConsoleFileName(string0);
      assertEquals(391L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("b_&|7kxKsWmUAEi", atomikosProperties0.getLogBaseName());
      assertEquals("b_&|7kxKsWmUAEi", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean2);
      assertFalse(boolean2 == boolean1);
      assertEquals(391L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("b_&|7kxKsWmUAEi", atomikosProperties0.getLogBaseName());
      assertEquals("b_&|7kxKsWmUAEi", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      
      long long1 = (-1L);
      atomikosProperties0.setDefaultJtaTimeout(long1);
      assertFalse(long1 == long0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1L), atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("b_&|7kxKsWmUAEi", atomikosProperties0.getLogBaseName());
      assertEquals("b_&|7kxKsWmUAEi", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      
      atomikosProperties0.setForceShutdownOnVmExit(boolean0);
      assertFalse(boolean0 == boolean1);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1L), atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("b_&|7kxKsWmUAEi", atomikosProperties0.getLogBaseName());
      assertEquals("b_&|7kxKsWmUAEi", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1L), atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("b_&|7kxKsWmUAEi", atomikosProperties0.getLogBaseName());
      assertEquals("b_&|7kxKsWmUAEi", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(properties1, properties0);
      assertTrue(properties1.equals((Object)properties0));
      assertNotNull(properties1);
      assertFalse(properties1.isEmpty());
      assertEquals(21, properties1.size());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties1, atomikosProperties0);
      assertNotNull(atomikosProperties1);
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals((-1L), atomikosProperties1.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals("b_&|7kxKsWmUAEi", atomikosProperties1.getLogBaseName());
      assertEquals("b_&|7kxKsWmUAEi", atomikosProperties1.getConsoleFileName());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getService());
      assertTrue(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertFalse(atomikosProperties1.isEnableLogging());
      assertNull(atomikosProperties1.getOutputDir());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertTrue(atomikosProperties1.isForceShutdownOnVmExit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties2, atomikosProperties0);
      assertSame(atomikosProperties2, atomikosProperties1);
      assertNotNull(atomikosProperties2);
      assertEquals("b_&|7kxKsWmUAEi", atomikosProperties2.getConsoleFileName());
      assertFalse(atomikosProperties2.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties2.getConsoleLogLevel());
      assertEquals(1, atomikosProperties2.getConsoleFileCount());
      assertTrue(atomikosProperties2.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertEquals((-1L), atomikosProperties2.getDefaultJtaTimeout());
      assertTrue(atomikosProperties2.isForceShutdownOnVmExit());
      assertNull(atomikosProperties2.getOutputDir());
      assertEquals("b_&|7kxKsWmUAEi", atomikosProperties2.getLogBaseName());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties2.getConsoleFileLimit());
      assertTrue(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertNull(atomikosProperties2.getService());
      
      String string1 = "";
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string1, string1);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertFalse(properties0.isEmpty());
      assertEquals(21, properties0.size());
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(properties1, properties0);
      assertTrue(properties1.equals((Object)properties0));
      assertNotNull(properties1);
      assertEquals(21, properties1.size());
      assertFalse(properties1.isEmpty());
      
      String[] stringArray0 = new String[0];
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertNotSame(properties0, properties1);
      assertTrue(properties0.equals((Object)properties1));
      assertEquals(0, stringArray0.length);
      assertEquals(0, mapEntryArray0.length);
      assertNotNull(mapEntryArray0);
      assertFalse(properties0.isEmpty());
      assertEquals(21, properties0.size());
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      AtomikosProperties atomikosProperties1 = null;
      atomikosPropertiesTests0.setproperties(atomikosProperties1);
      Properties properties0 = atomikosProperties0.asProperties();
      assertNotNull(properties0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(18, properties0.size());
      assertFalse(properties0.isEmpty());
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertNull(atomikosProperties2);
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      String string0 = "";
      String string1 = "a=+";
      boolean boolean0 = false;
      atomikosProperties0.setAllowSubTransactions(boolean0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      try { 
        KeyStore.getInstance(string0, string1);
        fail("Expecting exception: NoSuchProviderException");
      
      } catch(NoSuchProviderException e) {
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties1, atomikosProperties0);
      assertNotNull(atomikosProperties1);
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertNull(atomikosProperties1.getService());
      assertNull(atomikosProperties1.getOutputDir());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      
      long long0 = 0L;
      atomikosProperties1.setCheckpointInterval(long0);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertNull(atomikosProperties1.getService());
      assertNull(atomikosProperties1.getOutputDir());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(0L, atomikosProperties1.getCheckpointInterval());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertFalse(properties0.isEmpty());
      assertEquals(21, properties0.size());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties1);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertNull(atomikosProperties1.getService());
      assertNull(atomikosProperties1.getOutputDir());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(0L, atomikosProperties1.getCheckpointInterval());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      
      int int0 = 99;
      atomikosProperties0.setConsoleFileCount(int0);
      assertSame(atomikosProperties0, atomikosProperties1);
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(99, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties2, atomikosProperties1);
      assertSame(atomikosProperties2, atomikosProperties0);
      assertNotNull(atomikosProperties2);
      assertEquals(0L, atomikosProperties2.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties2.getConsoleLogLevel());
      assertEquals(99, atomikosProperties2.getConsoleFileCount());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertNull(atomikosProperties2.getOutputDir());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertTrue(atomikosProperties2.isAllowSubTransactions());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties2.getConsoleFileLimit());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties2.getConsoleFileName());
      assertNull(atomikosProperties2.getService());
      
      AtomikosProperties atomikosProperties3 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties3, atomikosProperties1);
      assertSame(atomikosProperties3, atomikosProperties2);
      assertSame(atomikosProperties3, atomikosProperties0);
      assertNotNull(atomikosProperties3);
      assertTrue(atomikosProperties3.isAllowSubTransactions());
      assertEquals(99, atomikosProperties3.getConsoleFileCount());
      assertNull(atomikosProperties3.getOutputDir());
      assertEquals(300000L, atomikosProperties3.getMaxTimeout());
      assertNull(atomikosProperties3.getService());
      assertEquals(0L, atomikosProperties3.getCheckpointInterval());
      assertNull(atomikosProperties3.getLogBaseDir());
      assertEquals(50, atomikosProperties3.getMaxActives());
      assertFalse(atomikosProperties3.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties3.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties3.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties3.getConsoleLogLevel());
      assertTrue(atomikosProperties3.isEnableLogging());
      assertEquals("tm.out", atomikosProperties3.getConsoleFileName());
      assertTrue(atomikosProperties3.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties3.getLogBaseName());
      assertFalse(atomikosProperties3.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties3.getTransactionManagerUniqueName());
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties0);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      
      String string0 = "aPy6%MaOkb7ILF$?";
      String string1 = "";
      int int0 = (-242);
      atomikosProperties0.setMaxActives(int0);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-242), atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertFalse(properties0.isEmpty());
      assertEquals(21, properties0.size());
      
      long long0 = 771L;
      atomikosProperties0.setDefaultJtaTimeout(long0);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(771L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-242), atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(771L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-242), atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties1, atomikosProperties0);
      assertNotNull(atomikosProperties1);
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertNull(atomikosProperties1.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals((-242), atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(771L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getOutputDir());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertTrue(atomikosProperties1.isEnableLogging());
      
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.jta.atomikos.AtomikosPropertiesTests", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties1, atomikosProperties0);
      assertNotNull(atomikosProperties1);
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertNull(atomikosProperties1.getOutputDir());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      
      int int0 = 1580;
      atomikosPropertiesTests0.properties.setMaxActives(int0);
      long long0 = (-327L);
      String string0 = "";
      boolean boolean0 = false;
      atomikosPropertiesTests0.properties.setSerialJtaTransactions(boolean0);
      assertSame(atomikosProperties0, atomikosProperties1);
      assertSame(atomikosPropertiesTests0.properties, atomikosProperties0);
      assertSame(atomikosPropertiesTests0.properties, atomikosProperties1);
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(1580, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertFalse(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertEquals(1580, atomikosPropertiesTests0.properties.getMaxActives());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      
      atomikosProperties1.setOutputDir(string0);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertFalse(atomikosProperties1.isSerialJtaTransactions());
      assertEquals("", atomikosProperties1.getOutputDir());
      assertEquals(1580, atomikosProperties1.getMaxActives());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      
      atomikosProperties1.setMaxTimeout(long0);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals((-327L), atomikosProperties1.getMaxTimeout());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertFalse(atomikosProperties1.isSerialJtaTransactions());
      assertEquals("", atomikosProperties1.getOutputDir());
      assertEquals(1580, atomikosProperties1.getMaxActives());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      
      atomikosPropertiesTests0.properties = atomikosProperties1;
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-327L), atomikosProperties0.getMaxTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(1580, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-327L), atomikosPropertiesTests0.properties.getMaxTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertFalse(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertEquals("", atomikosPropertiesTests0.properties.getOutputDir());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertEquals(1580, atomikosPropertiesTests0.properties.getMaxActives());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      
      Properties properties0 = atomikosProperties0.asProperties();
      assertSame(atomikosProperties0, atomikosProperties1);
      assertNotNull(properties0);
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-327L), atomikosProperties0.getMaxTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(1580, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(properties0.isEmpty());
      assertEquals(19, properties0.size());
      
      String[] stringArray0 = new String[2];
      String string1 = "com.atomikos.icatch.default_jta_timeout";
      stringArray0[0] = string1;
      stringArray0[1] = string0;
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertSame(atomikosProperties0, atomikosProperties1);
      assertEquals(2, mapEntryArray0.length);
      assertEquals(2, stringArray0.length);
      assertNotNull(mapEntryArray0);
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-327L), atomikosProperties0.getMaxTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(1580, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(properties0.isEmpty());
      assertEquals(19, properties0.size());
      
      boolean boolean1 = true;
      atomikosProperties1.setEnableLogging(boolean1);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals((-327L), atomikosProperties1.getMaxTimeout());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertFalse(atomikosProperties1.isSerialJtaTransactions());
      assertEquals("", atomikosProperties1.getOutputDir());
      assertEquals(1580, atomikosProperties1.getMaxActives());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      
      atomikosPropertiesTests0.properties = atomikosProperties1;
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-327L), atomikosProperties0.getMaxTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(1580, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-327L), atomikosPropertiesTests0.properties.getMaxTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertFalse(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertEquals("", atomikosPropertiesTests0.properties.getOutputDir());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertEquals(1580, atomikosPropertiesTests0.properties.getMaxActives());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(properties1, properties0);
      assertFalse(properties1.equals((Object)properties0));
      assertNotNull(properties1);
      assertFalse(properties1.isEmpty());
      assertEquals(21, properties1.size());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties1);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals((-327L), atomikosProperties1.getMaxTimeout());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertFalse(atomikosProperties1.isSerialJtaTransactions());
      assertEquals("", atomikosProperties1.getOutputDir());
      assertEquals(1580, atomikosProperties1.getMaxActives());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties1);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals((-327L), atomikosProperties1.getMaxTimeout());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertFalse(atomikosProperties1.isSerialJtaTransactions());
      assertEquals("", atomikosProperties1.getOutputDir());
      assertEquals(1580, atomikosProperties1.getMaxActives());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties2, atomikosProperties1);
      assertSame(atomikosProperties2, atomikosProperties0);
      assertNotNull(atomikosProperties2);
      assertEquals((-327L), atomikosProperties2.getMaxTimeout());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertFalse(atomikosProperties2.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties2.getConsoleLogLevel());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties2.getConsoleFileName());
      assertNull(atomikosProperties2.getService());
      assertEquals("", atomikosProperties2.getOutputDir());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertEquals(1, atomikosProperties2.getConsoleFileCount());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties2.getConsoleFileLimit());
      assertEquals(1580, atomikosProperties2.getMaxActives());
      assertTrue(atomikosProperties2.isAllowSubTransactions());
      
      Properties properties2 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(properties2, properties0);
      assertNotSame(properties2, properties1);
      assertTrue(properties2.equals((Object)properties1));
      assertFalse(properties2.equals((Object)properties0));
      assertNotNull(properties2);
      assertEquals(21, properties2.size());
      assertFalse(properties2.isEmpty());
      
      String[] stringArray1 = new String[4];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = string0;
      stringArray1[1] = string0;
      stringArray1[2] = string0;
      atomikosPropertiesTests0.setproperties(atomikosProperties2);
      assertSame(atomikosProperties2, atomikosProperties1);
      assertSame(atomikosProperties2, atomikosProperties0);
      assertEquals((-327L), atomikosProperties2.getMaxTimeout());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertFalse(atomikosProperties2.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties2.getConsoleLogLevel());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties2.getConsoleFileName());
      assertNull(atomikosProperties2.getService());
      assertEquals("", atomikosProperties2.getOutputDir());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertEquals(1, atomikosProperties2.getConsoleFileCount());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties2.getConsoleFileLimit());
      assertEquals(1580, atomikosProperties2.getMaxActives());
      assertTrue(atomikosProperties2.isAllowSubTransactions());
      
      stringArray1[3] = string0;
      MapEntry<?, ?>[] mapEntryArray1 = atomikosPropertiesTests0.defaultOf(properties1, stringArray1);
      assertNotSame(mapEntryArray1, mapEntryArray0);
      assertNotSame(properties1, properties0);
      assertNotSame(properties1, properties2);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(mapEntryArray1.equals((Object)mapEntryArray0));
      assertFalse(properties1.equals((Object)properties0));
      assertTrue(properties1.equals((Object)properties2));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(4, mapEntryArray1.length);
      assertEquals(4, stringArray1.length);
      assertNotNull(mapEntryArray1);
      assertFalse(properties1.isEmpty());
      assertEquals(21, properties1.size());
      
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(stringArray1[0], string0);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties0);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      
      long long0 = 0L;
      atomikosPropertiesTests0.properties.setDefaultJtaTimeout(long0);
      assertSame(atomikosPropertiesTests0.properties, atomikosProperties0);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertEquals(0L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties1, atomikosProperties0);
      assertNotNull(atomikosProperties1);
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(0L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertNull(atomikosProperties1.getOutputDir());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      
      int int0 = 1580;
      atomikosPropertiesTests0.properties.setMaxActives(int0);
      long long1 = (-327L);
      String string0 = "";
      atomikosProperties1.setOutputDir(string0);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(0L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals("", atomikosProperties1.getOutputDir());
      assertEquals(1580, atomikosProperties1.getMaxActives());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      
      atomikosProperties1.setMaxTimeout(long1);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertFalse(long1 == long0);
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(0L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals((-327L), atomikosProperties1.getMaxTimeout());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals("", atomikosProperties1.getOutputDir());
      assertEquals(1580, atomikosProperties1.getMaxActives());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      
      atomikosPropertiesTests0.properties = atomikosProperties1;
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1580, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals((-327L), atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertEquals((-327L), atomikosPropertiesTests0.properties.getMaxTimeout());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertEquals("", atomikosPropertiesTests0.properties.getOutputDir());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertEquals(1580, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals(0L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      
      boolean boolean0 = true;
      atomikosProperties1.setEnableLogging(boolean0);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(0L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals((-327L), atomikosProperties1.getMaxTimeout());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals("", atomikosProperties1.getOutputDir());
      assertEquals(1580, atomikosProperties1.getMaxActives());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      
      atomikosPropertiesTests0.properties = atomikosProperties1;
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1580, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals((-327L), atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertEquals((-327L), atomikosPropertiesTests0.properties.getMaxTimeout());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertEquals("", atomikosPropertiesTests0.properties.getOutputDir());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertEquals(1580, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals(0L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertFalse(properties0.isEmpty());
      assertEquals(21, properties0.size());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties1);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(0L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals((-327L), atomikosProperties1.getMaxTimeout());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals("", atomikosProperties1.getOutputDir());
      assertEquals(1580, atomikosProperties1.getMaxActives());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties1);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(0L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals((-327L), atomikosProperties1.getMaxTimeout());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals("", atomikosProperties1.getOutputDir());
      assertEquals(1580, atomikosProperties1.getMaxActives());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties2, atomikosProperties0);
      assertSame(atomikosProperties2, atomikosProperties1);
      assertNotNull(atomikosProperties2);
      assertTrue(atomikosProperties2.isAllowSubTransactions());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertEquals(1580, atomikosProperties2.getMaxActives());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties2.getConsoleFileLimit());
      assertNull(atomikosProperties2.getService());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertEquals(0L, atomikosProperties2.getDefaultJtaTimeout());
      assertEquals("", atomikosProperties2.getOutputDir());
      assertEquals(1, atomikosProperties2.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties2.getConsoleLogLevel());
      assertEquals((-327L), atomikosProperties2.getMaxTimeout());
      assertEquals("tm.out", atomikosProperties2.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(properties1, properties0);
      assertTrue(properties1.equals((Object)properties0));
      assertNotNull(properties1);
      assertFalse(properties1.isEmpty());
      assertEquals(21, properties1.size());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      atomikosPropertiesTests0.setproperties(atomikosProperties2);
      assertSame(atomikosProperties2, atomikosProperties0);
      assertSame(atomikosProperties2, atomikosProperties1);
      assertTrue(atomikosProperties2.isAllowSubTransactions());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertEquals(1580, atomikosProperties2.getMaxActives());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties2.getConsoleFileLimit());
      assertNull(atomikosProperties2.getService());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertEquals(0L, atomikosProperties2.getDefaultJtaTimeout());
      assertEquals("", atomikosProperties2.getOutputDir());
      assertEquals(1, atomikosProperties2.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties2.getConsoleLogLevel());
      assertEquals((-327L), atomikosProperties2.getMaxTimeout());
      assertEquals("tm.out", atomikosProperties2.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      
      stringArray0[3] = string0;
      long long2 = 4L;
      System.setCurrentTimeMillis(long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertNotSame(properties0, properties1);
      assertTrue(properties0.equals((Object)properties1));
      assertEquals(4, stringArray0.length);
      assertEquals(4, mapEntryArray0.length);
      assertNotNull(mapEntryArray0);
      assertFalse(properties0.isEmpty());
      assertEquals(21, properties0.size());
      
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(stringArray0[0], string0);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties1, atomikosProperties0);
      assertNotNull(atomikosProperties1);
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertNull(atomikosProperties1.getOutputDir());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      
      int int0 = 1580;
      atomikosPropertiesTests0.properties.setMaxActives(int0);
      long long0 = (-327L);
      String string0 = "";
      atomikosProperties1.setOutputDir(string0);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals("", atomikosProperties1.getOutputDir());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(1580, atomikosProperties1.getMaxActives());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      
      atomikosProperties1.setMaxTimeout(long0);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals((-327L), atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals("", atomikosProperties1.getOutputDir());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(1580, atomikosProperties1.getMaxActives());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      
      atomikosPropertiesTests0.properties = atomikosProperties1;
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertEquals(1580, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-327L), atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertEquals(1580, atomikosPropertiesTests0.properties.getMaxActives());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertEquals("", atomikosPropertiesTests0.properties.getOutputDir());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals((-327L), atomikosPropertiesTests0.properties.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      
      boolean boolean0 = true;
      atomikosProperties1.setEnableLogging(boolean0);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals((-327L), atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals("", atomikosProperties1.getOutputDir());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(1580, atomikosProperties1.getMaxActives());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      
      atomikosPropertiesTests0.properties = atomikosProperties1;
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertEquals(1580, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-327L), atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertEquals(1580, atomikosPropertiesTests0.properties.getMaxActives());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertEquals("", atomikosPropertiesTests0.properties.getOutputDir());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals((-327L), atomikosPropertiesTests0.properties.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertFalse(properties0.isEmpty());
      assertEquals(21, properties0.size());
      
      long long1 = 0L;
      atomikosPropertiesTests0.properties.setMaxTimeout(long1);
      assertSame(atomikosProperties0, atomikosProperties1);
      assertSame(atomikosPropertiesTests0.properties, atomikosProperties0);
      assertSame(atomikosPropertiesTests0.properties, atomikosProperties1);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertFalse(long1 == long0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertEquals(1580, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertEquals(1580, atomikosPropertiesTests0.properties.getMaxActives());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertEquals(0L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertEquals("", atomikosPropertiesTests0.properties.getOutputDir());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals("", atomikosProperties1.getOutputDir());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(1580, atomikosProperties1.getMaxActives());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertEquals(0L, atomikosProperties1.getMaxTimeout());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties1);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals("", atomikosProperties1.getOutputDir());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(1580, atomikosProperties1.getMaxActives());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertEquals(0L, atomikosProperties1.getMaxTimeout());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties1);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals("", atomikosProperties1.getOutputDir());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(1580, atomikosProperties1.getMaxActives());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertEquals(0L, atomikosProperties1.getMaxTimeout());
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties2, atomikosProperties0);
      assertSame(atomikosProperties2, atomikosProperties1);
      assertNotNull(atomikosProperties2);
      assertEquals(1580, atomikosProperties2.getMaxActives());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties2.getConsoleFileLimit());
      assertEquals("", atomikosProperties2.getOutputDir());
      assertNull(atomikosProperties2.getService());
      assertTrue(atomikosProperties2.isAllowSubTransactions());
      assertEquals(1, atomikosProperties2.getConsoleFileCount());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties2.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties2.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals(0L, atomikosProperties2.getMaxTimeout());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(properties1, properties0);
      assertTrue(properties1.equals((Object)properties0));
      assertNotNull(properties1);
      assertFalse(properties1.isEmpty());
      assertEquals(21, properties1.size());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      atomikosPropertiesTests0.setproperties(atomikosProperties2);
      assertSame(atomikosProperties2, atomikosProperties0);
      assertSame(atomikosProperties2, atomikosProperties1);
      assertEquals(1580, atomikosProperties2.getMaxActives());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties2.getConsoleFileLimit());
      assertEquals("", atomikosProperties2.getOutputDir());
      assertNull(atomikosProperties2.getService());
      assertTrue(atomikosProperties2.isAllowSubTransactions());
      assertEquals(1, atomikosProperties2.getConsoleFileCount());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties2.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties2.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals(0L, atomikosProperties2.getMaxTimeout());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      
      stringArray0[3] = string0;
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertNotSame(properties0, properties1);
      assertTrue(properties0.equals((Object)properties1));
      assertEquals(4, stringArray0.length);
      assertEquals(4, mapEntryArray0.length);
      assertNotNull(mapEntryArray0);
      assertFalse(properties0.isEmpty());
      assertEquals(21, properties0.size());
      
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(stringArray0[0], string0);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties1, atomikosProperties0);
      assertNotNull(atomikosProperties1);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getService());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getOutputDir());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      
      long long0 = (-327L);
      long long1 = (-841L);
      atomikosProperties0.setCheckpointInterval(long1);
      assertSame(atomikosProperties0, atomikosProperties1);
      assertFalse(long1 == long0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals((-841L), atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      
      String string0 = "";
      atomikosProperties1.setMaxTimeout(long0);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertFalse(long0 == long1);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals((-327L), atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getService());
      assertEquals((-841L), atomikosProperties1.getCheckpointInterval());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getOutputDir());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      
      boolean boolean0 = true;
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertEquals(21, properties0.size());
      assertFalse(properties0.isEmpty());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties1);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals((-327L), atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getService());
      assertEquals((-841L), atomikosProperties1.getCheckpointInterval());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getOutputDir());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties1);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals((-327L), atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getService());
      assertEquals((-841L), atomikosProperties1.getCheckpointInterval());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getOutputDir());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties2, atomikosProperties0);
      assertSame(atomikosProperties2, atomikosProperties1);
      assertNotNull(atomikosProperties2);
      assertEquals(1, atomikosProperties2.getConsoleFileCount());
      assertNull(atomikosProperties2.getOutputDir());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties2.getConsoleFileLimit());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertEquals((-841L), atomikosProperties2.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertTrue(atomikosProperties2.isAllowSubTransactions());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals((-327L), atomikosProperties2.getMaxTimeout());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties2.getConsoleLogLevel());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertEquals("tm.out", atomikosProperties2.getConsoleFileName());
      assertNull(atomikosProperties2.getService());
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(properties1, properties0);
      assertTrue(properties1.equals((Object)properties0));
      assertNotNull(properties1);
      assertEquals(21, properties1.size());
      assertFalse(properties1.isEmpty());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties2);
      assertSame(atomikosProperties2, atomikosProperties0);
      assertSame(atomikosProperties2, atomikosProperties1);
      assertEquals(1, atomikosProperties2.getConsoleFileCount());
      assertNull(atomikosProperties2.getOutputDir());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties2.getConsoleFileLimit());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertEquals((-841L), atomikosProperties2.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertTrue(atomikosProperties2.isAllowSubTransactions());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals((-327L), atomikosProperties2.getMaxTimeout());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties2.getConsoleLogLevel());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertEquals("tm.out", atomikosProperties2.getConsoleFileName());
      assertNull(atomikosProperties2.getService());
      
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string0, string0);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties0);
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      
      String string0 = "=";
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertEquals(21, properties0.size());
      assertFalse(properties0.isEmpty());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = stringArray0[1];
      stringArray0[3] = string0;
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, mapEntryArray0.length);
      assertNotNull(mapEntryArray0);
      assertEquals(21, properties0.size());
      assertFalse(properties0.isEmpty());
      
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(stringArray0[2], stringArray0[2]);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.properties;
      assertNotNull(atomikosProperties0);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      
      int int0 = (-1319);
      atomikosProperties0.setConsoleFileCount(int0);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1319), atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      
      atomikosProperties0.setEnableLogging(boolean0);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1319), atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1319), atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertEquals((-1319), atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties1, atomikosProperties0);
      assertNotNull(atomikosProperties1);
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals((-1319), atomikosProperties1.getConsoleFileCount());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getService());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getOutputDir());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties2, atomikosProperties0);
      assertSame(atomikosProperties2, atomikosProperties1);
      assertNotNull(atomikosProperties2);
      assertTrue(atomikosProperties2.isEnableLogging());
      assertEquals((-1319), atomikosProperties2.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties2.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertTrue(atomikosProperties2.isAllowSubTransactions());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertNull(atomikosProperties2.getService());
      assertNull(atomikosProperties2.getOutputDir());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties2.getConsoleFileLimit());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertEquals("tm.out", atomikosProperties2.getConsoleFileName());
      
      Properties properties0 = null;
      String[] stringArray0 = new String[9];
      String string0 = "transactions-defaults.properties";
      stringArray0[0] = string0;
      String string1 = "";
      stringArray0[1] = string1;
      String string2 = "ny[Mb";
      stringArray0[2] = string2;
      String string3 = "svg";
      stringArray0[3] = string3;
      String string4 = "RSmw,=B'IyQvKG";
      stringArray0[4] = string4;
      String string5 = "";
      stringArray0[5] = string5;
      String string6 = "-wrSw7";
      stringArray0[6] = string6;
      String string7 = "";
      stringArray0[7] = string7;
      String string8 = "2000";
      stringArray0[8] = string8;
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.jta.atomikos.AtomikosPropertiesTests", e);
      }
  }
}
