/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 04 05:31:48 GMT 2021
 */

package org.springframework.boot.jta.atomikos;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.EmptyByteBuf;
import io.netty.buffer.UnpooledByteBufAllocator;
import java.io.File;
import java.io.ObjectInputStream;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.function.BiFunction;
import org.assertj.core.data.MapEntry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.ComparisonFailure;
import org.junit.runner.RunWith;
import org.springframework.boot.jta.atomikos.AtomikosLoggingLevel;
import org.springframework.boot.jta.atomikos.AtomikosProperties;
import org.springframework.boot.jta.atomikos.AtomikosPropertiesTests;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AtomikosPropertiesTests_ESTest extends AtomikosPropertiesTests_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = "org.apache.catalina.realm.DataSourceRealm";
      stringArray0[0] = string0;
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertFalse(properties0.isEmpty());
      assertEquals(21, properties0.size());
      assertNotNull(properties0);
      
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertFalse(properties0.isEmpty());
      assertEquals(21, properties0.size());
      assertNotNull(mapEntryArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, mapEntryArray0.length);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      atomikosPropertiesTests0.setproperties(atomikosPropertiesTests0.properties);
      atomikosPropertiesTests0.assertProperty(atomikosPropertiesTests0.properties.consoleFileName, atomikosPropertiesTests0.properties.outputDir);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNotNull(atomikosProperties0);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      
      boolean boolean0 = true;
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertFalse(properties0.isEmpty());
      assertEquals(21, properties0.size());
      assertNotNull(properties0);
      
      atomikosProperties0.setSerialJtaTransactions(boolean0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      
      int int0 = 23;
      atomikosProperties0.setConsoleFileLimit(int0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(23, atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(23, atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(23, atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(23, atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      
      String string0 = "+BfBZBS2|?)Wj?v%%_";
      atomikosProperties0.setConsoleFileName(string0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("+BfBZBS2|?)Wj?v%%_", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(23, atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(23, atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      
      EvoSuiteFile evoSuiteFile0 = null;
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("+BfBZBS2|?)Wj?v%%_", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(23, atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertEquals("+BfBZBS2|?)Wj?v%%_", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertEquals(23, atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Properties properties1 = null;
      String[] stringArray0 = new String[0];
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties1, stringArray0);
      assertNotNull(mapEntryArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, mapEntryArray0.length);
      
      Properties properties2 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(properties2, properties0);
      assertTrue(properties2.equals((Object)properties0));
      assertEquals(21, properties2.size());
      assertFalse(properties2.isEmpty());
      assertNotNull(properties2);
      
      BiFunction<Object, Object, Throwable> biFunction0 = (BiFunction<Object, Object, Throwable>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      // Undeclared exception!
      try { 
        properties2.replaceAll(biFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = null;
      String[] stringArray0 = new String[0];
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertNotNull(mapEntryArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, mapEntryArray0.length);
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertEquals(21, properties1.size());
      assertFalse(properties1.isEmpty());
      assertNotNull(properties1);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      String string0 = "`=<nGN%O=-?R3c";
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string0, string0);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNotNull(atomikosProperties0);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertFalse(properties0.isEmpty());
      assertEquals(21, properties0.size());
      assertNotNull(properties0);
      
      String[] stringArray0 = new String[0];
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertFalse(properties0.isEmpty());
      assertEquals(21, properties0.size());
      assertNotNull(mapEntryArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, mapEntryArray0.length);
      
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(atomikosProperties0.logBaseDir, atomikosProperties0.logBaseName);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNotNull(atomikosProperties0);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(50, atomikosProperties0.maxActives);
      
      Properties properties0 = atomikosProperties0.asProperties();
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(18, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotNull(properties0);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(50, atomikosProperties0.maxActives);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = atomikosProperties0.logBaseName;
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(18, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotNull(mapEntryArray0);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(1, stringArray0.length);
      assertEquals(1, mapEntryArray0.length);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNotNull(atomikosProperties0);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      
      Properties properties0 = atomikosProperties0.asProperties();
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(18, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotNull(properties0);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = atomikosProperties0.logBaseName;
      stringArray0[1] = atomikosProperties0.consoleFileName;
      stringArray0[2] = atomikosProperties0.consoleFileName;
      stringArray0[3] = atomikosProperties0.service;
      stringArray0[4] = atomikosProperties0.logBaseName;
      stringArray0[5] = atomikosProperties0.logBaseName;
      stringArray0[6] = atomikosProperties0.transactionManagerUniqueName;
      stringArray0[7] = atomikosProperties0.consoleFileName;
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      String string0 = "";
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)properties0.entrySet();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      String[] stringArray0 = new String[0];
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(properties1, properties0);
      assertFalse(properties1.equals((Object)properties0));
      assertFalse(properties1.isEmpty());
      assertEquals(21, properties1.size());
      assertNotNull(properties1);
      
      Object object0 = properties0.put(string0, string0);
      assertNotSame(properties0, properties1);
      assertFalse(properties0.equals((Object)properties1));
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNull(object0);
      
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertNotSame(properties0, properties1);
      assertFalse(properties0.equals((Object)properties1));
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotNull(mapEntryArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, mapEntryArray0.length);
      
      MapEntry<?, ?>[] mapEntryArray1 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertNotSame(properties0, properties1);
      assertNotSame(mapEntryArray1, mapEntryArray0);
      assertFalse(properties0.equals((Object)properties1));
      assertFalse(mapEntryArray1.equals((Object)mapEntryArray0));
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotNull(mapEntryArray1);
      assertEquals(0, stringArray0.length);
      assertEquals(0, mapEntryArray1.length);
      
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string0, string0);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertEquals(21, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotNull(properties0);
      
      String[] stringArray0 = new String[2];
      String string0 = "H/=7Z9Y .2pI=";
      stringArray0[0] = string0;
      String string1 = "";
      stringArray0[1] = string1;
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertEquals(21, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotNull(mapEntryArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, mapEntryArray0.length);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNotNull(atomikosProperties0);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      String string0 = "org.eclipse.jetty.server.HttpChannelState$AsyncRead";
      String string1 = "VqZZ`*";
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string0, string1);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNotNull(atomikosProperties0);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      
      boolean boolean0 = false;
      atomikosProperties0.setEnableLogging(boolean0);
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      
      long long0 = 493L;
      atomikosProperties0.checkpointInterval = long0;
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertEquals(493L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      atomikosProperties0.setDefaultJtaTimeout(long0);
      assertEquals(493L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertEquals(493L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(493L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(493L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      
      int int0 = 522;
      atomikosProperties0.consoleFileCount = int0;
      assertEquals(493L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(522, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertEquals(493L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      long long1 = (-1132L);
      atomikosProperties0.setMaxTimeout(long1);
      assertFalse(long1 == long0);
      assertEquals((-1132L), atomikosProperties0.getMaxTimeout());
      assertEquals(493L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(522, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertEquals(493L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(493L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(522, atomikosProperties0.consoleFileCount);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals((-1132L), atomikosProperties0.maxTimeout);
      assertEquals(493L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertEquals(21, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotNull(properties0);
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertEquals((-1132L), atomikosProperties0.getMaxTimeout());
      assertEquals(493L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(522, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertEquals(493L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(493L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(522, atomikosProperties0.consoleFileCount);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals((-1132L), atomikosProperties0.maxTimeout);
      assertEquals(493L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties1, atomikosProperties0);
      assertNull(atomikosProperties1.getOutputDir());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(493L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(522, atomikosProperties1.getConsoleFileCount());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertEquals(493L, atomikosProperties1.getDefaultJtaTimeout());
      assertFalse(atomikosProperties1.isEnableLogging());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals((-1132L), atomikosProperties1.getMaxTimeout());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNotNull(atomikosProperties1);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(493L, atomikosProperties1.defaultJtaTimeout);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals(522, atomikosProperties1.consoleFileCount);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertFalse(atomikosProperties1.enableLogging);
      assertEquals(493L, atomikosProperties1.checkpointInterval);
      assertEquals((-1132L), atomikosProperties1.maxTimeout);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertEquals(50, atomikosProperties1.maxActives);
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties2, atomikosProperties1);
      assertSame(atomikosProperties2, atomikosProperties0);
      assertEquals(493L, atomikosProperties2.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties2.getConsoleLogLevel());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertFalse(atomikosProperties2.isEnableLogging());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties2.getConsoleFileLimit());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertEquals(493L, atomikosProperties2.getCheckpointInterval());
      assertNull(atomikosProperties2.getOutputDir());
      assertEquals(522, atomikosProperties2.getConsoleFileCount());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties2.getService());
      assertTrue(atomikosProperties2.isAllowSubTransactions());
      assertEquals("tm.out", atomikosProperties2.getConsoleFileName());
      assertEquals((-1132L), atomikosProperties2.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertNotNull(atomikosProperties2);
      assertTrue(atomikosProperties2.serialJtaTransactions);
      assertFalse(atomikosProperties2.threadedTwoPhaseCommit);
      assertEquals(493L, atomikosProperties2.defaultJtaTimeout);
      assertEquals(522, atomikosProperties2.consoleFileCount);
      assertTrue(atomikosProperties2.allowSubTransactions);
      assertEquals(493L, atomikosProperties2.checkpointInterval);
      assertEquals(50, atomikosProperties2.maxActives);
      assertEquals((-1), atomikosProperties2.consoleFileLimit);
      assertFalse(atomikosProperties2.forceShutdownOnVmExit);
      assertFalse(atomikosProperties2.enableLogging);
      assertEquals((-1132L), atomikosProperties2.maxTimeout);
      
      int int1 = 391;
      String string0 = "J>`r(:0VX1\"pNU1q=j+";
      AtomikosLoggingLevel atomikosLoggingLevel0 = AtomikosLoggingLevel.INFO;
      atomikosProperties1.setConsoleLogLevel(atomikosLoggingLevel0);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertSame(atomikosProperties1, atomikosProperties2);
      assertNull(atomikosProperties1.getOutputDir());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(493L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(522, atomikosProperties1.getConsoleFileCount());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertEquals(493L, atomikosProperties1.getDefaultJtaTimeout());
      assertFalse(atomikosProperties1.isEnableLogging());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals((-1132L), atomikosProperties1.getMaxTimeout());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties1.getConsoleLogLevel());
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(493L, atomikosProperties1.defaultJtaTimeout);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals(522, atomikosProperties1.consoleFileCount);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertFalse(atomikosProperties1.enableLogging);
      assertEquals(493L, atomikosProperties1.checkpointInterval);
      assertEquals((-1132L), atomikosProperties1.maxTimeout);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertEquals(50, atomikosProperties1.maxActives);
      
      atomikosProperties1.logBaseName = string0;
      assertNull(atomikosProperties1.getOutputDir());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(493L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(522, atomikosProperties1.getConsoleFileCount());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertEquals(493L, atomikosProperties1.getDefaultJtaTimeout());
      assertFalse(atomikosProperties1.isEnableLogging());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals("J>`r(:0VX1\"pNU1q=j+", atomikosProperties1.getLogBaseName());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals((-1132L), atomikosProperties1.getMaxTimeout());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties1.getConsoleLogLevel());
      
      atomikosProperties1.consoleFileCount = atomikosProperties0.maxActives;
      assertEquals((-1132L), atomikosProperties0.getMaxTimeout());
      assertEquals(493L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(50, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals(493L, atomikosProperties0.getCheckpointInterval());
      assertEquals("J>`r(:0VX1\"pNU1q=j+", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties1.getOutputDir());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(493L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties1.getConsoleFileCount());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertEquals(493L, atomikosProperties1.getDefaultJtaTimeout());
      assertFalse(atomikosProperties1.isEnableLogging());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals("J>`r(:0VX1\"pNU1q=j+", atomikosProperties1.getLogBaseName());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals((-1132L), atomikosProperties1.getMaxTimeout());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties1.getConsoleLogLevel());
      
      atomikosProperties1.setConsoleFileCount(int1);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertSame(atomikosProperties1, atomikosProperties2);
      assertFalse(int1 == int0);
      assertNull(atomikosProperties1.getOutputDir());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(493L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(391, atomikosProperties1.getConsoleFileCount());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertEquals(493L, atomikosProperties1.getDefaultJtaTimeout());
      assertFalse(atomikosProperties1.isEnableLogging());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals("J>`r(:0VX1\"pNU1q=j+", atomikosProperties1.getLogBaseName());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals((-1132L), atomikosProperties1.getMaxTimeout());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties1.getConsoleLogLevel());
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(493L, atomikosProperties1.defaultJtaTimeout);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertFalse(atomikosProperties1.enableLogging);
      assertEquals(493L, atomikosProperties1.checkpointInterval);
      assertEquals(391, atomikosProperties1.consoleFileCount);
      assertEquals((-1132L), atomikosProperties1.maxTimeout);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertEquals(50, atomikosProperties1.maxActives);
      
      AtomikosProperties atomikosProperties3 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties3, atomikosProperties2);
      assertSame(atomikosProperties3, atomikosProperties1);
      assertSame(atomikosProperties3, atomikosProperties0);
      assertFalse(atomikosProperties3.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties3.getConsoleFileName());
      assertEquals(50, atomikosProperties3.getMaxActives());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties3.getConsoleLogLevel());
      assertNull(atomikosProperties3.getLogBaseDir());
      assertNull(atomikosProperties3.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties3.getConsoleFileLimit());
      assertFalse(atomikosProperties3.isThreadedTwoPhaseCommit());
      assertEquals(493L, atomikosProperties3.getCheckpointInterval());
      assertNull(atomikosProperties3.getService());
      assertEquals(493L, atomikosProperties3.getDefaultJtaTimeout());
      assertFalse(atomikosProperties3.isEnableLogging());
      assertEquals((-1132L), atomikosProperties3.getMaxTimeout());
      assertEquals("J>`r(:0VX1\"pNU1q=j+", atomikosProperties3.getLogBaseName());
      assertNull(atomikosProperties3.getOutputDir());
      assertEquals(391, atomikosProperties3.getConsoleFileCount());
      assertTrue(atomikosProperties3.isAllowSubTransactions());
      assertTrue(atomikosProperties3.isSerialJtaTransactions());
      assertNotNull(atomikosProperties3);
      assertFalse(atomikosProperties3.enableLogging);
      assertEquals(493L, atomikosProperties3.checkpointInterval);
      assertEquals(391, atomikosProperties3.consoleFileCount);
      assertEquals((-1), atomikosProperties3.consoleFileLimit);
      assertFalse(atomikosProperties3.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties3.maxActives);
      assertEquals((-1132L), atomikosProperties3.maxTimeout);
      assertTrue(atomikosProperties3.serialJtaTransactions);
      assertFalse(atomikosProperties3.threadedTwoPhaseCommit);
      assertEquals(493L, atomikosProperties3.defaultJtaTimeout);
      assertTrue(atomikosProperties3.allowSubTransactions);
      
      atomikosPropertiesTests0.setproperties(atomikosProperties1);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertSame(atomikosProperties1, atomikosProperties3);
      assertSame(atomikosProperties1, atomikosProperties2);
      assertNull(atomikosProperties1.getOutputDir());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(493L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(391, atomikosProperties1.getConsoleFileCount());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertEquals(493L, atomikosProperties1.getDefaultJtaTimeout());
      assertFalse(atomikosProperties1.isEnableLogging());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals("J>`r(:0VX1\"pNU1q=j+", atomikosProperties1.getLogBaseName());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals((-1132L), atomikosProperties1.getMaxTimeout());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties1.getConsoleLogLevel());
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(493L, atomikosProperties1.defaultJtaTimeout);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertFalse(atomikosProperties1.enableLogging);
      assertEquals(493L, atomikosProperties1.checkpointInterval);
      assertEquals(391, atomikosProperties1.consoleFileCount);
      assertEquals((-1132L), atomikosProperties1.maxTimeout);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertEquals(50, atomikosProperties1.maxActives);
      
      AtomikosProperties atomikosProperties4 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties4, atomikosProperties2);
      assertSame(atomikosProperties4, atomikosProperties3);
      assertSame(atomikosProperties4, atomikosProperties0);
      assertSame(atomikosProperties4, atomikosProperties1);
      assertTrue(atomikosProperties4.isAllowSubTransactions());
      assertNull(atomikosProperties4.getOutputDir());
      assertNull(atomikosProperties4.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties4.getConsoleFileLimit());
      assertFalse(atomikosProperties4.isEnableLogging());
      assertNull(atomikosProperties4.getLogBaseDir());
      assertEquals(391, atomikosProperties4.getConsoleFileCount());
      assertTrue(atomikosProperties4.isSerialJtaTransactions());
      assertFalse(atomikosProperties4.isForceShutdownOnVmExit());
      assertEquals("J>`r(:0VX1\"pNU1q=j+", atomikosProperties4.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties4.getConsoleLogLevel());
      assertEquals(493L, atomikosProperties4.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties4.getMaxActives());
      assertEquals((-1132L), atomikosProperties4.getMaxTimeout());
      assertEquals(493L, atomikosProperties4.getCheckpointInterval());
      assertNull(atomikosProperties4.getService());
      assertFalse(atomikosProperties4.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties4.getConsoleFileName());
      assertNotNull(atomikosProperties4);
      assertFalse(atomikosProperties4.forceShutdownOnVmExit);
      assertFalse(atomikosProperties4.enableLogging);
      assertEquals((-1132L), atomikosProperties4.maxTimeout);
      assertTrue(atomikosProperties4.serialJtaTransactions);
      assertEquals(391, atomikosProperties4.consoleFileCount);
      assertEquals(493L, atomikosProperties4.checkpointInterval);
      assertEquals(50, atomikosProperties4.maxActives);
      assertTrue(atomikosProperties4.allowSubTransactions);
      assertFalse(atomikosProperties4.threadedTwoPhaseCommit);
      assertEquals(493L, atomikosProperties4.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties4.consoleFileLimit);
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(properties1, properties0);
      assertTrue(properties1.equals((Object)properties0));
      assertFalse(properties1.isEmpty());
      assertEquals(21, properties1.size());
      assertNotNull(properties1);
      
      Properties properties2 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(properties2, properties1);
      assertNotSame(properties2, properties0);
      assertTrue(properties2.equals((Object)properties0));
      assertTrue(properties2.equals((Object)properties1));
      assertFalse(properties2.isEmpty());
      assertEquals(21, properties2.size());
      assertNotNull(properties2);
      
      String string1 = "jB";
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(atomikosProperties3.consoleFileName, string1);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosPropertiesTests atomikosPropertiesTests1 = new AtomikosPropertiesTests();
      assertFalse(atomikosPropertiesTests1.equals((Object)atomikosPropertiesTests0));
      assertNotNull(atomikosPropertiesTests1);
      
      atomikosPropertiesTests0.properties = atomikosPropertiesTests1.properties;
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests1.getproperties();
      assertNotSame(atomikosPropertiesTests1, atomikosPropertiesTests0);
      assertFalse(atomikosPropertiesTests1.equals((Object)atomikosPropertiesTests0));
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertNotNull(atomikosProperties0);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      
      long long0 = 0L;
      atomikosPropertiesTests0.properties.setDefaultJtaTimeout(long0);
      assertNotSame(atomikosPropertiesTests0, atomikosPropertiesTests1);
      assertNotSame(atomikosPropertiesTests1, atomikosPropertiesTests0);
      assertSame(atomikosPropertiesTests0.properties, atomikosProperties0);
      assertFalse(atomikosPropertiesTests0.equals((Object)atomikosPropertiesTests1));
      assertFalse(atomikosPropertiesTests1.equals((Object)atomikosPropertiesTests0));
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertEquals(0L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosPropertiesTests0.properties.maxTimeout);
      assertEquals(0L, atomikosPropertiesTests0.properties.defaultJtaTimeout);
      assertFalse(atomikosPropertiesTests0.properties.threadedTwoPhaseCommit);
      assertEquals(50, atomikosPropertiesTests0.properties.maxActives);
      assertTrue(atomikosPropertiesTests0.properties.serialJtaTransactions);
      assertEquals(500L, atomikosPropertiesTests0.properties.checkpointInterval);
      assertTrue(atomikosPropertiesTests0.properties.allowSubTransactions);
      assertEquals(1, atomikosPropertiesTests0.properties.consoleFileCount);
      assertFalse(atomikosPropertiesTests0.properties.forceShutdownOnVmExit);
      assertTrue(atomikosPropertiesTests0.properties.enableLogging);
      assertEquals((-1), atomikosPropertiesTests0.properties.consoleFileLimit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      
      atomikosPropertiesTests0.properties.enableLogging = atomikosProperties0.allowSubTransactions;
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNotSame(atomikosPropertiesTests0, atomikosPropertiesTests1);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertFalse(atomikosPropertiesTests0.equals((Object)atomikosPropertiesTests1));
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertNull(atomikosProperties1.getService());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertNull(atomikosProperties1.getOutputDir());
      assertEquals(0L, atomikosProperties1.getDefaultJtaTimeout());
      assertNotNull(atomikosProperties1);
      assertEquals(0L, atomikosProperties1.defaultJtaTimeout);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertTrue(atomikosProperties1.enableLogging);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertEquals(1, atomikosProperties1.consoleFileCount);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties1.maxActives);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      
      atomikosPropertiesTests0.setproperties(atomikosPropertiesTests1.properties);
      assertNotSame(atomikosPropertiesTests0, atomikosPropertiesTests1);
      assertNotSame(atomikosPropertiesTests1, atomikosPropertiesTests0);
      assertFalse(atomikosPropertiesTests0.equals((Object)atomikosPropertiesTests1));
      assertFalse(atomikosPropertiesTests1.equals((Object)atomikosPropertiesTests0));
      
      Properties properties0 = atomikosPropertiesTests1.loadDefaultSettings();
      assertNotSame(atomikosPropertiesTests1, atomikosPropertiesTests0);
      assertFalse(atomikosPropertiesTests1.equals((Object)atomikosPropertiesTests0));
      assertFalse(properties0.isEmpty());
      assertEquals(21, properties0.size());
      assertNotNull(properties0);
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertNotSame(atomikosPropertiesTests0, atomikosPropertiesTests1);
      assertSame(atomikosProperties2, atomikosProperties0);
      assertSame(atomikosProperties2, atomikosProperties1);
      assertFalse(atomikosPropertiesTests0.equals((Object)atomikosPropertiesTests1));
      assertNull(atomikosProperties2.getLogBaseDir());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties2.getConsoleFileLimit());
      assertEquals("tm.out", atomikosProperties2.getConsoleFileName());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties2.getConsoleLogLevel());
      assertNull(atomikosProperties2.getService());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertTrue(atomikosProperties2.isAllowSubTransactions());
      assertEquals(1, atomikosProperties2.getConsoleFileCount());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertEquals(0L, atomikosProperties2.getDefaultJtaTimeout());
      assertNull(atomikosProperties2.getOutputDir());
      assertNotNull(atomikosProperties2);
      assertEquals(1, atomikosProperties2.consoleFileCount);
      assertEquals(0L, atomikosProperties2.defaultJtaTimeout);
      assertTrue(atomikosProperties2.allowSubTransactions);
      assertEquals(500L, atomikosProperties2.checkpointInterval);
      assertTrue(atomikosProperties2.enableLogging);
      assertFalse(atomikosProperties2.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties2.consoleFileLimit);
      assertEquals(50, atomikosProperties2.maxActives);
      assertEquals(300000L, atomikosProperties2.maxTimeout);
      assertTrue(atomikosProperties2.serialJtaTransactions);
      assertFalse(atomikosProperties2.threadedTwoPhaseCommit);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string0, atomikosProperties1.logBaseName);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNotNull(atomikosProperties0);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      
      atomikosProperties0.setThreadedTwoPhaseCommit(atomikosPropertiesTests0.properties.serialJtaTransactions);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      
      String string0 = "L>[qc'";
      atomikosPropertiesTests0.assertProperty(string0, atomikosProperties0.outputDir);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertEquals(21, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotNull(properties0);
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(properties1, properties0);
      assertTrue(properties1.equals((Object)properties0));
      assertEquals(21, properties1.size());
      assertFalse(properties1.isEmpty());
      assertNotNull(properties1);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNotNull(atomikosProperties0);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      
      atomikosProperties0.setConsoleFileLimit(atomikosPropertiesTests0.properties.consoleFileCount);
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertEquals(21, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotNull(properties0);
      
      String string0 = null;
      atomikosPropertiesTests0.assertProperty(atomikosProperties0.consoleFileName, string0);
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = properties0.put(object0, object0);
      assertFalse(properties0.isEmpty());
      assertEquals(22, properties0.size());
      assertNull(object1);
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties1, atomikosProperties0);
      assertNull(atomikosProperties1.getService());
      assertNull(atomikosProperties1.getOutputDir());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(1, atomikosProperties1.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNotNull(atomikosProperties1);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties1.consoleFileCount);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertTrue(atomikosProperties1.enableLogging);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertEquals(1, atomikosProperties1.consoleFileLimit);
      assertEquals(50, atomikosProperties1.maxActives);
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertSame(atomikosProperties0, atomikosProperties1);
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(properties1, properties0);
      assertFalse(properties1.equals((Object)properties0));
      assertEquals(21, properties1.size());
      assertFalse(properties1.isEmpty());
      assertNotNull(properties1);
      
      String[] stringArray0 = new String[2];
      String string1 = "";
      atomikosProperties0.consoleFileName = string1;
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      stringArray0[0] = atomikosProperties0.logBaseDir;
      stringArray0[1] = atomikosProperties1.logBaseName;
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNotNull(atomikosProperties0);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      
      int int0 = (-2546);
      String string0 = "(\"NXr,.SW4Q;ctSiqG";
      atomikosProperties0.setService(string0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("(\"NXr,.SW4Q;ctSiqG", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      
      atomikosProperties0.maxActives = int0;
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("(\"NXr,.SW4Q;ctSiqG", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-2546), atomikosProperties0.getMaxActives());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("(\"NXr,.SW4Q;ctSiqG", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-2546), atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-2546), atomikosProperties0.maxActives);
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties1, atomikosProperties0);
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals((-2546), atomikosProperties1.getMaxActives());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getOutputDir());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals("(\"NXr,.SW4Q;ctSiqG", atomikosProperties1.getService());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertNotNull(atomikosProperties1);
      assertEquals(1, atomikosProperties1.consoleFileCount);
      assertTrue(atomikosProperties1.enableLogging);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals((-2546), atomikosProperties1.maxActives);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      
      boolean boolean0 = false;
      atomikosProperties1.allowSubTransactions = boolean0;
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals((-2546), atomikosProperties1.getMaxActives());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getOutputDir());
      assertFalse(atomikosProperties1.isAllowSubTransactions());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals("(\"NXr,.SW4Q;ctSiqG", atomikosProperties1.getService());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      
      Properties properties0 = atomikosProperties1.asProperties();
      assertSame(atomikosProperties1, atomikosProperties0);
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals((-2546), atomikosProperties1.getMaxActives());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getOutputDir());
      assertFalse(atomikosProperties1.isAllowSubTransactions());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals("(\"NXr,.SW4Q;ctSiqG", atomikosProperties1.getService());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(19, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotNull(properties0);
      assertEquals(1, atomikosProperties1.consoleFileCount);
      assertTrue(atomikosProperties1.enableLogging);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals((-2546), atomikosProperties1.maxActives);
      assertFalse(atomikosProperties1.allowSubTransactions);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      
      atomikosPropertiesTests0.properties = atomikosProperties1;
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals((-2546), atomikosProperties1.getMaxActives());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getOutputDir());
      assertFalse(atomikosProperties1.isAllowSubTransactions());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals("(\"NXr,.SW4Q;ctSiqG", atomikosProperties1.getService());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals((-2546), atomikosPropertiesTests0.properties.getMaxActives());
      assertFalse(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertEquals("(\"NXr,.SW4Q;ctSiqG", atomikosPropertiesTests0.properties.getService());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(properties1, properties0);
      assertFalse(properties1.equals((Object)properties0));
      assertFalse(properties1.isEmpty());
      assertEquals(21, properties1.size());
      assertNotNull(properties1);
      
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(atomikosProperties1.logBaseDir, atomikosProperties1.transactionManagerUniqueName);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertEquals(21, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotNull(properties0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNotNull(atomikosProperties0);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      
      int int0 = (-2870);
      atomikosProperties0.checkpointInterval = (long) int0;
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-2870L), atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      atomikosProperties0.setConsoleFileCount(int0);
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-2870L), atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-2870), atomikosProperties0.getConsoleFileCount());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-2870), atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals((-2870L), atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-2870L), atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-2870), atomikosProperties0.getConsoleFileCount());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-2870), atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals((-2870L), atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals((-2870L), atomikosProperties1.getCheckpointInterval());
      assertNull(atomikosProperties1.getOutputDir());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-2870), atomikosProperties1.getConsoleFileCount());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertNull(atomikosProperties1.getService());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertNotNull(atomikosProperties1);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertTrue(atomikosProperties1.enableLogging);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertEquals((-2870), atomikosProperties1.consoleFileCount);
      assertEquals((-2870L), atomikosProperties1.checkpointInterval);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertEquals(50, atomikosProperties1.maxActives);
      
      atomikosProperties1.forceShutdownOnVmExit = atomikosProperties0.allowSubTransactions;
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-2870L), atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-2870), atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals((-2870L), atomikosProperties1.getCheckpointInterval());
      assertNull(atomikosProperties1.getOutputDir());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-2870), atomikosProperties1.getConsoleFileCount());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertNull(atomikosProperties1.getService());
      assertTrue(atomikosProperties1.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      
      atomikosProperties1.setService(atomikosProperties0.logBaseDir);
      assertSame(atomikosProperties0, atomikosProperties1);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-2870L), atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-2870), atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals((-2870L), atomikosProperties1.getCheckpointInterval());
      assertNull(atomikosProperties1.getOutputDir());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-2870), atomikosProperties1.getConsoleFileCount());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertNull(atomikosProperties1.getService());
      assertTrue(atomikosProperties1.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-2870), atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals((-2870L), atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertTrue(atomikosProperties1.enableLogging);
      assertTrue(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertEquals((-2870), atomikosProperties1.consoleFileCount);
      assertEquals((-2870L), atomikosProperties1.checkpointInterval);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertEquals(50, atomikosProperties1.maxActives);
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties2, atomikosProperties0);
      assertSame(atomikosProperties2, atomikosProperties1);
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertEquals("tm.out", atomikosProperties2.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties2.getConsoleLogLevel());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertEquals((-2870L), atomikosProperties2.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertEquals((-2870), atomikosProperties2.getConsoleFileCount());
      assertTrue(atomikosProperties2.isForceShutdownOnVmExit());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties2.getConsoleFileLimit());
      assertNull(atomikosProperties2.getService());
      assertNull(atomikosProperties2.getOutputDir());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertTrue(atomikosProperties2.isAllowSubTransactions());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertNotNull(atomikosProperties2);
      assertFalse(atomikosProperties2.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties2.enableLogging);
      assertTrue(atomikosProperties2.allowSubTransactions);
      assertEquals((-2870L), atomikosProperties2.checkpointInterval);
      assertTrue(atomikosProperties2.forceShutdownOnVmExit);
      assertTrue(atomikosProperties2.serialJtaTransactions);
      assertEquals((-2870), atomikosProperties2.consoleFileCount);
      assertEquals(50, atomikosProperties2.maxActives);
      assertEquals(300000L, atomikosProperties2.maxTimeout);
      assertEquals(10000L, atomikosProperties2.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties2.consoleFileLimit);
      
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(atomikosProperties1.transactionManagerUniqueName, atomikosProperties1.outputDir);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = null;
      atomikosPropertiesTests0.properties = atomikosProperties0;
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNull(atomikosProperties1);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertEquals(21, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotNull(properties0);
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(properties1, properties0);
      assertTrue(properties1.equals((Object)properties0));
      assertEquals(21, properties1.size());
      assertFalse(properties1.isEmpty());
      assertNotNull(properties1);
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertNotNull(atomikosProperties0);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      
      boolean boolean0 = false;
      atomikosProperties0.serialJtaTransactions = boolean0;
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties1, atomikosProperties0);
      assertTrue(atomikosProperties1.isEnableLogging());
      assertFalse(atomikosProperties1.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertNull(atomikosProperties1.getService());
      assertNull(atomikosProperties1.getOutputDir());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNotNull(atomikosProperties1);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertTrue(atomikosProperties1.enableLogging);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertFalse(atomikosProperties1.serialJtaTransactions);
      assertEquals(1, atomikosProperties1.consoleFileCount);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties1.maxActives);
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNotNull(atomikosProperties0);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      
      boolean boolean0 = false;
      boolean boolean1 = true;
      atomikosProperties0.threadedTwoPhaseCommit = boolean1;
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      
      atomikosProperties0.serialJtaTransactions = boolean0;
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertTrue(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getOutputDir());
      assertFalse(atomikosProperties1.isSerialJtaTransactions());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getService());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertNotNull(atomikosProperties1);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertTrue(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties1.maxActives);
      assertTrue(atomikosProperties1.enableLogging);
      assertEquals(1, atomikosProperties1.consoleFileCount);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertFalse(atomikosProperties1.serialJtaTransactions);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties2, atomikosProperties0);
      assertSame(atomikosProperties2, atomikosProperties1);
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertFalse(atomikosProperties2.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertEquals(1, atomikosProperties2.getConsoleFileCount());
      assertTrue(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertTrue(atomikosProperties2.isAllowSubTransactions());
      assertNull(atomikosProperties2.getOutputDir());
      assertEquals((-1), atomikosProperties2.getConsoleFileLimit());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertNull(atomikosProperties2.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties2.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties2.getConsoleFileName());
      assertNotNull(atomikosProperties2);
      assertFalse(atomikosProperties2.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties2.maxTimeout);
      assertTrue(atomikosProperties2.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties2.maxActives);
      assertEquals(1, atomikosProperties2.consoleFileCount);
      assertTrue(atomikosProperties2.allowSubTransactions);
      assertEquals(500L, atomikosProperties2.checkpointInterval);
      assertEquals((-1), atomikosProperties2.consoleFileLimit);
      assertTrue(atomikosProperties2.enableLogging);
      assertFalse(atomikosProperties2.serialJtaTransactions);
      assertEquals(10000L, atomikosProperties2.defaultJtaTimeout);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertEquals(21, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotNull(properties0);
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNotNull(atomikosProperties0);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      
      int int0 = 0;
      atomikosProperties0.setConsoleFileCount(int0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(properties1, properties0);
      assertTrue(properties1.equals((Object)properties0));
      assertEquals(21, properties1.size());
      assertFalse(properties1.isEmpty());
      assertNotNull(properties1);
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertEquals(0, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getOutputDir());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(0, atomikosProperties1.getConsoleFileCount());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getService());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNotNull(atomikosProperties1);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertTrue(atomikosProperties1.enableLogging);
      assertEquals(0, atomikosProperties1.consoleFileCount);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties1.maxActives);
      
      Properties properties2 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(properties2, properties0);
      assertNotSame(properties2, properties1);
      assertTrue(properties2.equals((Object)properties1));
      assertTrue(properties2.equals((Object)properties0));
      assertFalse(properties2.isEmpty());
      assertEquals(21, properties2.size());
      assertNotNull(properties2);
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties2, atomikosProperties1);
      assertSame(atomikosProperties2, atomikosProperties0);
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties2.getConsoleFileCount());
      assertNull(atomikosProperties2.getService());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertNull(atomikosProperties2.getOutputDir());
      assertTrue(atomikosProperties2.isAllowSubTransactions());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties2.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties2.getConsoleLogLevel());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertEquals((-1), atomikosProperties2.getConsoleFileLimit());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertNotNull(atomikosProperties2);
      assertEquals(50, atomikosProperties2.maxActives);
      assertEquals(10000L, atomikosProperties2.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties2.maxTimeout);
      assertEquals((-1), atomikosProperties2.consoleFileLimit);
      assertTrue(atomikosProperties2.serialJtaTransactions);
      assertTrue(atomikosProperties2.enableLogging);
      assertEquals(0, atomikosProperties2.consoleFileCount);
      assertFalse(atomikosProperties2.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties2.allowSubTransactions);
      assertEquals(500L, atomikosProperties2.checkpointInterval);
      assertFalse(atomikosProperties2.forceShutdownOnVmExit);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = atomikosProperties1.logBaseName;
      String string0 = "n?K!";
      stringArray0[1] = string0;
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties1, stringArray0);
      assertNotSame(properties1, properties0);
      assertNotSame(properties1, properties2);
      assertTrue(properties1.equals((Object)properties0));
      assertTrue(properties1.equals((Object)properties2));
      assertEquals(21, properties1.size());
      assertFalse(properties1.isEmpty());
      assertNotNull(mapEntryArray0);
      assertEquals(2, mapEntryArray0.length);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNotNull(atomikosProperties0);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      
      boolean boolean0 = true;
      atomikosProperties0.setForceShutdownOnVmExit(boolean0);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      
      boolean boolean1 = false;
      atomikosProperties0.setAllowSubTransactions(boolean1);
      assertFalse(boolean1 == boolean0);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertFalse(properties0.isEmpty());
      assertEquals(21, properties0.size());
      assertNotNull(properties0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile0, atomikosPropertiesTests0.properties.forceShutdownOnVmExit, atomikosPropertiesTests0.properties.threadedTwoPhaseCommit, atomikosProperties0.allowSubTransactions);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(boolean2);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(properties1, properties0);
      assertTrue(properties1.equals((Object)properties0));
      assertFalse(properties1.isEmpty());
      assertEquals(21, properties1.size());
      assertNotNull(properties1);
      
      Properties properties2 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(properties2, properties1);
      assertNotSame(properties2, properties0);
      assertTrue(properties2.equals((Object)properties0));
      assertTrue(properties2.equals((Object)properties1));
      assertFalse(properties2.isEmpty());
      assertEquals(21, properties2.size());
      assertNotNull(properties2);
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertNull(atomikosProperties1.getOutputDir());
      assertFalse(atomikosProperties1.isAllowSubTransactions());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertTrue(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertNotNull(atomikosProperties1);
      assertTrue(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertFalse(atomikosProperties1.allowSubTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties1.maxActives);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertEquals(1, atomikosProperties1.consoleFileCount);
      assertTrue(atomikosProperties1.enableLogging);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = atomikosProperties0.logBaseDir;
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.defaultOf(properties2, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNotNull(atomikosProperties0);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(50, atomikosProperties0.maxActives);
      
      long long0 = (-438L);
      atomikosProperties0.setDefaultJtaTimeout(long0);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-438L), atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals((-438L), atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(50, atomikosProperties0.maxActives);
      
      String string0 = "";
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertEquals(21, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotNull(properties0);
      
      atomikosProperties0.setOutputDir(string0);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-438L), atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals((-438L), atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(50, atomikosProperties0.maxActives);
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-438L), atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals((-438L), atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(50, atomikosProperties0.maxActives);
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertNull(atomikosProperties1.getService());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals((-438L), atomikosProperties1.getDefaultJtaTimeout());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals("", atomikosProperties1.getOutputDir());
      assertNotNull(atomikosProperties1);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertEquals(1, atomikosProperties1.consoleFileCount);
      assertTrue(atomikosProperties1.enableLogging);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertEquals(50, atomikosProperties1.maxActives);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals((-438L), atomikosProperties1.defaultJtaTimeout);
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(properties1, properties0);
      assertTrue(properties1.equals((Object)properties0));
      assertEquals(21, properties1.size());
      assertFalse(properties1.isEmpty());
      assertNotNull(properties1);
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties2, atomikosProperties0);
      assertSame(atomikosProperties2, atomikosProperties1);
      assertNull(atomikosProperties2.getService());
      assertTrue(atomikosProperties2.isAllowSubTransactions());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties2.getConsoleFileLimit());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertEquals(1, atomikosProperties2.getConsoleFileCount());
      assertEquals("", atomikosProperties2.getOutputDir());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertEquals((-438L), atomikosProperties2.getDefaultJtaTimeout());
      assertEquals("tm.out", atomikosProperties2.getConsoleFileName());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties2.getConsoleLogLevel());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertNotNull(atomikosProperties2);
      assertFalse(atomikosProperties2.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties2.checkpointInterval);
      assertEquals(300000L, atomikosProperties2.maxTimeout);
      assertEquals(50, atomikosProperties2.maxActives);
      assertTrue(atomikosProperties2.serialJtaTransactions);
      assertFalse(atomikosProperties2.threadedTwoPhaseCommit);
      assertEquals((-438L), atomikosProperties2.defaultJtaTimeout);
      assertTrue(atomikosProperties2.allowSubTransactions);
      assertTrue(atomikosProperties2.enableLogging);
      assertEquals(1, atomikosProperties2.consoleFileCount);
      assertEquals((-1), atomikosProperties2.consoleFileLimit);
      
      String string1 = "qrgUr";
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string1, atomikosProperties0.outputDir);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNotNull(atomikosProperties0);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(50, atomikosProperties0.maxActives);
      
      long long0 = 0L;
      atomikosProperties0.checkpointInterval = long0;
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      String string0 = "";
      atomikosProperties0.setOutputDir(string0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(50, atomikosProperties0.maxActives);
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(50, atomikosProperties0.maxActives);
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals("", atomikosProperties1.getOutputDir());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(0L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getService());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertNotNull(atomikosProperties1);
      assertEquals(0L, atomikosProperties1.checkpointInterval);
      assertEquals(50, atomikosProperties1.maxActives);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertEquals(1, atomikosProperties1.consoleFileCount);
      assertTrue(atomikosProperties1.enableLogging);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertTrue(atomikosProperties1.allowSubTransactions);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertFalse(properties0.isEmpty());
      assertEquals(21, properties0.size());
      assertNotNull(properties0);
      
      String string1 = "qrgUr";
      String[] stringArray0 = new String[1];
      String string2 = "2000";
      atomikosProperties1.setTransactionManagerUniqueName(string2);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals("", atomikosProperties1.getOutputDir());
      assertEquals("2000", atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(0L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getService());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals(0L, atomikosProperties1.checkpointInterval);
      assertEquals(50, atomikosProperties1.maxActives);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertEquals(1, atomikosProperties1.consoleFileCount);
      assertTrue(atomikosProperties1.enableLogging);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertTrue(atomikosProperties1.allowSubTransactions);
      
      stringArray0[0] = atomikosProperties1.service;
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      boolean boolean1 = true;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean1, boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertNotNull(atomikosProperties0);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      
      String string0 = "#,3m),s^R|eE";
      int int0 = 0;
      atomikosProperties0.setConsoleFileLimit(int0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(0, atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      
      atomikosProperties0.service = string0;
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("#,3m),s^R|eE", atomikosProperties0.getService());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      
      String string1 = "0p;";
      atomikosProperties0.service = string1;
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("0p;", atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("0p;", atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(0, atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertEquals(21, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotNull(properties0);
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties1, atomikosProperties0);
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertNull(atomikosProperties1.getOutputDir());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(0, atomikosProperties1.getConsoleFileLimit());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals("0p;", atomikosProperties1.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertNotNull(atomikosProperties1);
      assertEquals(1, atomikosProperties1.consoleFileCount);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertEquals(50, atomikosProperties1.maxActives);
      assertEquals(0, atomikosProperties1.consoleFileLimit);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertTrue(atomikosProperties1.enableLogging);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      
      String[] stringArray0 = new String[9];
      atomikosProperties1.forceShutdownOnVmExit = atomikosProperties0.enableLogging;
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("0p;", atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertTrue(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertNull(atomikosProperties1.getOutputDir());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(0, atomikosProperties1.getConsoleFileLimit());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals("0p;", atomikosProperties1.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      
      stringArray0[0] = atomikosProperties0.consoleFileName;
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-23);
      byteArray0[0] = byte0;
      byte byte1 = (byte)97;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-30);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-98);
      byteArray0[3] = byte3;
      byte byte4 = (byte)16;
      byteArray0[4] = byte4;
      boolean boolean3 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-23), (byte)97, (byte) (-30), (byte) (-98), (byte)16}, byteArray0);
      assertFalse(boolean3);
      assertEquals(5, byteArray0.length);
      
      String string2 = "logBaseDir";
      stringArray0[1] = string2;
      stringArray0[2] = atomikosProperties1.logBaseName;
      stringArray0[3] = atomikosProperties0.service;
      stringArray0[4] = atomikosProperties1.service;
      stringArray0[5] = atomikosProperties0.service;
      stringArray0[6] = atomikosProperties1.consoleFileName;
      stringArray0[7] = string1;
      stringArray0[8] = atomikosProperties1.service;
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertEquals(21, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotNull(mapEntryArray0);
      assertEquals(9, mapEntryArray0.length);
      assertEquals(9, stringArray0.length);
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(properties1, properties0);
      assertTrue(properties1.equals((Object)properties0));
      assertFalse(properties1.isEmpty());
      assertEquals(21, properties1.size());
      assertNotNull(properties1);
      
      Properties properties2 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(properties2, properties1);
      assertNotSame(properties2, properties0);
      assertTrue(properties2.equals((Object)properties1));
      assertTrue(properties2.equals((Object)properties0));
      assertEquals(21, properties2.size());
      assertFalse(properties2.isEmpty());
      assertNotNull(properties2);
      
      Properties properties3 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotSame(properties3, properties2);
      assertNotSame(properties3, properties1);
      assertNotSame(properties3, properties0);
      assertTrue(properties3.equals((Object)properties0));
      assertTrue(properties3.equals((Object)properties2));
      assertTrue(properties3.equals((Object)properties1));
      assertFalse(properties3.isEmpty());
      assertEquals(21, properties3.size());
      assertNotNull(properties3);
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      atomikosPropertiesTests0.setproperties(atomikosPropertiesTests0.properties);
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNotNull(atomikosProperties0);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      
      long long0 = 0L;
      atomikosProperties0.setMaxTimeout(long0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(0L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosPropertiesTests0.properties.isAllowSubTransactions());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertEquals((-1), atomikosPropertiesTests0.properties.getConsoleFileLimit());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosPropertiesTests0.properties.getConsoleFileName());
      assertEquals(0L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosPropertiesTests0.properties.getConsoleLogLevel());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertNull(atomikosPropertiesTests0.properties.getOutputDir());
      assertEquals(1, atomikosPropertiesTests0.properties.getConsoleFileCount());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals(0L, atomikosProperties1.getMaxTimeout());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getOutputDir());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getService());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertNotNull(atomikosProperties1);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertEquals(0L, atomikosProperties1.maxTimeout);
      assertEquals(50, atomikosProperties1.maxActives);
      assertTrue(atomikosProperties1.enableLogging);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties1.consoleFileCount);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      
      atomikosPropertiesTests0.assertProperty(atomikosPropertiesTests0.properties.consoleFileName, atomikosPropertiesTests0.properties.outputDir);
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.properties;
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNotNull(atomikosProperties0);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      
      int int0 = 0;
      atomikosProperties0.setMaxActives(int0);
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(0, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      
      String string0 = "M:_";
      atomikosProperties0.setOutputDir(string0);
      assertEquals("M:_", atomikosProperties0.getOutputDir());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(0, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      
      String string1 = "6!:oUP~Y";
      atomikosProperties0.outputDir = string0;
      assertEquals("M:_", atomikosProperties0.getOutputDir());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      
      boolean boolean0 = false;
      atomikosProperties0.threadedTwoPhaseCommit = boolean0;
      assertEquals("M:_", atomikosProperties0.getOutputDir());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      
      long long0 = (-435L);
      atomikosProperties0.setCheckpointInterval(long0);
      assertEquals("M:_", atomikosProperties0.getOutputDir());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-435L), atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals((-435L), atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      
      atomikosProperties0.setTransactionManagerUniqueName(string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("M:_", atomikosProperties0.getOutputDir());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-435L), atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("6!:oUP~Y", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals((-435L), atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertEquals("M:_", atomikosProperties0.getOutputDir());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-435L), atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("6!:oUP~Y", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals((-435L), atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties1, atomikosProperties0);
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals((-435L), atomikosProperties1.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertNull(atomikosProperties1.getService());
      assertEquals("M:_", atomikosProperties1.getOutputDir());
      assertEquals("6!:oUP~Y", atomikosProperties1.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(0, atomikosProperties1.getMaxActives());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertNotNull(atomikosProperties1);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertTrue(atomikosProperties1.enableLogging);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertEquals(0, atomikosProperties1.maxActives);
      assertEquals(1, atomikosProperties1.consoleFileCount);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals((-435L), atomikosProperties1.checkpointInterval);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertEquals(21, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotNull(properties0);
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties2, atomikosProperties1);
      assertSame(atomikosProperties2, atomikosProperties0);
      assertNull(atomikosProperties2.getService());
      assertTrue(atomikosProperties2.isAllowSubTransactions());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertEquals("6!:oUP~Y", atomikosProperties2.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties2.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertEquals("M:_", atomikosProperties2.getOutputDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties2.getConsoleLogLevel());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertEquals((-435L), atomikosProperties2.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties2.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertEquals(0, atomikosProperties2.getMaxActives());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertEquals(1, atomikosProperties2.getConsoleFileCount());
      assertNotNull(atomikosProperties2);
      assertFalse(atomikosProperties2.forceShutdownOnVmExit);
      assertEquals((-435L), atomikosProperties2.checkpointInterval);
      assertEquals(300000L, atomikosProperties2.maxTimeout);
      assertEquals((-1), atomikosProperties2.consoleFileLimit);
      assertTrue(atomikosProperties2.enableLogging);
      assertEquals(10000L, atomikosProperties2.defaultJtaTimeout);
      assertTrue(atomikosProperties2.allowSubTransactions);
      assertEquals(1, atomikosProperties2.consoleFileCount);
      assertTrue(atomikosProperties2.serialJtaTransactions);
      assertFalse(atomikosProperties2.threadedTwoPhaseCommit);
      assertEquals(0, atomikosProperties2.maxActives);
      
      AtomikosProperties atomikosProperties3 = atomikosPropertiesTests0.getproperties();
      assertSame(atomikosProperties3, atomikosProperties2);
      assertSame(atomikosProperties3, atomikosProperties1);
      assertSame(atomikosProperties3, atomikosProperties0);
      assertEquals((-435L), atomikosProperties3.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties3.getConsoleFileName());
      assertFalse(atomikosProperties3.isForceShutdownOnVmExit());
      assertNull(atomikosProperties3.getLogBaseDir());
      assertTrue(atomikosProperties3.isSerialJtaTransactions());
      assertTrue(atomikosProperties3.isEnableLogging());
      assertEquals((-1), atomikosProperties3.getConsoleFileLimit());
      assertEquals(300000L, atomikosProperties3.getMaxTimeout());
      assertEquals("M:_", atomikosProperties3.getOutputDir());
      assertEquals("6!:oUP~Y", atomikosProperties3.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties3.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties3.getMaxActives());
      assertEquals(1, atomikosProperties3.getConsoleFileCount());
      assertTrue(atomikosProperties3.isAllowSubTransactions());
      assertNull(atomikosProperties3.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties3.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties3.getLogBaseName());
      assertFalse(atomikosProperties3.isThreadedTwoPhaseCommit());
      assertNotNull(atomikosProperties3);
      assertEquals(300000L, atomikosProperties3.maxTimeout);
      assertTrue(atomikosProperties3.allowSubTransactions);
      assertEquals(0, atomikosProperties3.maxActives);
      assertTrue(atomikosProperties3.serialJtaTransactions);
      assertFalse(atomikosProperties3.threadedTwoPhaseCommit);
      assertEquals((-435L), atomikosProperties3.checkpointInterval);
      assertEquals(1, atomikosProperties3.consoleFileCount);
      assertEquals(10000L, atomikosProperties3.defaultJtaTimeout);
      assertTrue(atomikosProperties3.enableLogging);
      assertFalse(atomikosProperties3.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties3.consoleFileLimit);
      
      atomikosProperties3.logBaseDir = atomikosProperties2.service;
      assertNull(atomikosProperties2.getService());
      assertTrue(atomikosProperties2.isAllowSubTransactions());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertEquals("6!:oUP~Y", atomikosProperties2.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties2.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertEquals("M:_", atomikosProperties2.getOutputDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties2.getConsoleLogLevel());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertEquals((-435L), atomikosProperties2.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties2.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertEquals(0, atomikosProperties2.getMaxActives());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertEquals(1, atomikosProperties2.getConsoleFileCount());
      assertEquals((-435L), atomikosProperties3.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties3.getConsoleFileName());
      assertFalse(atomikosProperties3.isForceShutdownOnVmExit());
      assertNull(atomikosProperties3.getLogBaseDir());
      assertTrue(atomikosProperties3.isSerialJtaTransactions());
      assertTrue(atomikosProperties3.isEnableLogging());
      assertEquals((-1), atomikosProperties3.getConsoleFileLimit());
      assertEquals(300000L, atomikosProperties3.getMaxTimeout());
      assertEquals("M:_", atomikosProperties3.getOutputDir());
      assertEquals("6!:oUP~Y", atomikosProperties3.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties3.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties3.getMaxActives());
      assertEquals(1, atomikosProperties3.getConsoleFileCount());
      assertTrue(atomikosProperties3.isAllowSubTransactions());
      assertNull(atomikosProperties3.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties3.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties3.getLogBaseName());
      assertFalse(atomikosProperties3.isThreadedTwoPhaseCommit());
      
      String[] stringArray0 = new String[3];
      boolean boolean2 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      stringArray0[0] = atomikosProperties2.service;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = properties0.put(object0, atomikosProperties0);
      assertSame(atomikosProperties0, atomikosProperties3);
      assertSame(atomikosProperties0, atomikosProperties1);
      assertSame(atomikosProperties0, atomikosProperties2);
      assertEquals(22, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals("M:_", atomikosProperties0.getOutputDir());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-435L), atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("6!:oUP~Y", atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(object1);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals((-435L), atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      
      stringArray0[1] = atomikosProperties0.outputDir;
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertNotNull(unpooledByteBufAllocator0);
      
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.capacity());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertFalse(emptyByteBuf0.release());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertNotNull(emptyByteBuf0);
      
      int int1 = (-3931);
      // Undeclared exception!
      try { 
        emptyByteBuf0.setLongLE(int1, atomikosProperties1.checkpointInterval);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      atomikosPropertiesTests0.setproperties(atomikosPropertiesTests0.properties);
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNotNull(atomikosProperties0);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      
      atomikosPropertiesTests0.assertProperty(atomikosPropertiesTests0.properties.consoleFileName, atomikosPropertiesTests0.properties.outputDir);
  }
}
