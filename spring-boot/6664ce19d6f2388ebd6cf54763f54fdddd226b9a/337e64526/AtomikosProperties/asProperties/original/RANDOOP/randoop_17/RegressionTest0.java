import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test00001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00001");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.io.PrintWriter printWriter2 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printWriter2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00002");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.lang.String str4 = properties1.getProperty("");
        java.util.Properties properties5 = null;
        java.util.Properties properties6 = new java.util.Properties(properties5);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean8 = properties1.remove((java.lang.Object) properties5, (java.lang.Object) 10.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test00003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00003");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.io.OutputStream outputStream2 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(outputStream2, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00004");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Properties properties3 = new java.util.Properties(properties1);
        java.lang.Object obj4 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = properties1.containsValue(obj4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test00005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00005");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Properties properties3 = new java.util.Properties(properties1);
        java.io.InputStream inputStream4 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.load(inputStream4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test00006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00006");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Properties properties3 = new java.util.Properties(properties1);
        java.io.InputStream inputStream4 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(inputStream4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test00007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00007");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet3 = properties1.entrySet();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Object obj6 = properties1.replace((java.lang.Object) "hi!", obj5);
        java.io.OutputStream outputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.save(outputStream7, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEntrySet3);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test00008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00008");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int1 = recovery0.getMaxRetries();
        recovery0.setForgetOrphanedLogEntriesDelay((-1L));
        recovery0.setForgetOrphanedLogEntriesDelay((long) (-1));
        java.lang.Class<?> wildcardClass6 = recovery0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 5 + "'", int1 == 5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test00009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00009");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.lang.String str4 = properties1.getProperty("hi!");
        java.io.PrintStream printStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printStream5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test00010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00010");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        java.io.Writer writer6 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(writer6, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test00011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00011");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Enumeration<?> wildcardEnumeration9 = properties1.propertyNames();
        java.io.PrintStream printStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(wildcardEnumeration9);
    }

    @Test
    public void test00012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00012");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        java.io.Reader reader14 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(reader14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test00013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00013");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        properties1.clear();
        java.io.OutputStream outputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.save(outputStream7, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test00014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00014");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean13 = properties1.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean12);
        java.io.OutputStream outputStream14 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream14, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test00015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00015");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        java.util.Properties properties14 = null;
        java.util.Properties properties15 = new java.util.Properties(properties14);
        boolean boolean16 = properties15.isEmpty();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.io.Reader reader18 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(reader18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test00016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00016");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        boolean boolean3 = properties1.isEmpty();
        java.io.InputStream inputStream4 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.loadFromXML(inputStream4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test00017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00017");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Properties properties3 = new java.util.Properties(properties1);
        java.lang.Object obj6 = properties3.putIfAbsent((java.lang.Object) 10, (java.lang.Object) '#');
        java.io.Reader reader7 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.load(reader7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test00018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00018");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties7.elements();
        java.lang.String str10 = properties7.getProperty("");
        properties4.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.util.Properties properties13 = null;
        java.util.Properties properties14 = new java.util.Properties(properties13);
        boolean boolean15 = properties14.isEmpty();
        boolean boolean16 = properties4.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean15);
        boolean boolean17 = properties4.isEmpty();
        boolean boolean18 = properties0.replace((java.lang.Object) 100.0f, (java.lang.Object) true, (java.lang.Object) properties4);
        java.io.OutputStream outputStream19 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties4.save(outputStream19, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test00019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00019");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean13 = properties1.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean12);
        properties1.clear();
        java.lang.Class<?> wildcardClass15 = properties1.getClass();
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test00020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00020");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        properties1.clear();
        boolean boolean8 = properties1.containsKey((java.lang.Object) "hi!");
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        boolean boolean11 = properties10.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setCheckpointInterval((long) (byte) -1);
        atomikosProperties12.setConsoleFileName("");
        java.lang.String str17 = atomikosProperties12.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setCheckpointInterval((long) (byte) -1);
        atomikosProperties18.setThreadedTwoPhaseCommit(true);
        java.util.Properties properties23 = null;
        java.util.Properties properties24 = new java.util.Properties(properties23);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties24.elements();
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties27.elements();
        java.lang.String str30 = properties27.getProperty("");
        properties24.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj36 = properties24.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties33);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel37 = atomikosProperties33.getConsoleLogLevel();
        atomikosProperties18.setConsoleLogLevel(atomikosLoggingLevel37);
        atomikosProperties12.setConsoleLogLevel(atomikosLoggingLevel37);
        boolean boolean41 = properties1.replace((java.lang.Object) properties10, (java.lang.Object) atomikosProperties12, (java.lang.Object) 10.0d);
        java.io.Reader reader42 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties10.load(reader42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel37 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel37.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test00021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00021");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.io.OutputStream outputStream3 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream3, "tm.out", "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
    }

    @Test
    public void test00022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00022");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Properties properties3 = new java.util.Properties(properties1);
        java.lang.Object obj6 = properties3.putIfAbsent((java.lang.Object) 10, (java.lang.Object) '#');
        java.lang.String str7 = properties3.toString();
        java.io.OutputStream outputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.store(outputStream8, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{10=#}" + "'", str7, "{10=#}");
    }

    @Test
    public void test00023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00023");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.lang.String str4 = properties1.getProperty("hi!");
        java.util.Set<java.lang.Object> objSet5 = properties1.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str8 = atomikosProperties7.getLogBaseDir();
        java.lang.String str9 = atomikosProperties7.getLogBaseDir();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean10 = properties1.remove((java.lang.Object) 1.0f, (java.lang.Object) str9);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(objSet5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test00024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00024");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        properties1.clear();
        boolean boolean8 = properties1.containsKey((java.lang.Object) "hi!");
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        boolean boolean11 = properties10.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setCheckpointInterval((long) (byte) -1);
        atomikosProperties12.setConsoleFileName("");
        java.lang.String str17 = atomikosProperties12.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setCheckpointInterval((long) (byte) -1);
        atomikosProperties18.setThreadedTwoPhaseCommit(true);
        java.util.Properties properties23 = null;
        java.util.Properties properties24 = new java.util.Properties(properties23);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties24.elements();
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties27.elements();
        java.lang.String str30 = properties27.getProperty("");
        properties24.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj36 = properties24.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties33);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel37 = atomikosProperties33.getConsoleLogLevel();
        atomikosProperties18.setConsoleLogLevel(atomikosLoggingLevel37);
        atomikosProperties12.setConsoleLogLevel(atomikosLoggingLevel37);
        boolean boolean41 = properties1.replace((java.lang.Object) properties10, (java.lang.Object) atomikosProperties12, (java.lang.Object) 10.0d);
        java.util.Collection<java.lang.Object> objCollection42 = properties10.values();
        java.io.PrintWriter printWriter43 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties10.list(printWriter43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel37 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel37.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objCollection42);
    }

    @Test
    public void test00025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00025");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        properties1.clear();
        java.io.PrintStream printStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printStream7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test00026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00026");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties7.elements();
        java.lang.String str10 = properties7.getProperty("");
        properties4.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.util.Properties properties13 = null;
        java.util.Properties properties14 = new java.util.Properties(properties13);
        boolean boolean15 = properties14.isEmpty();
        boolean boolean16 = properties4.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean15);
        boolean boolean17 = properties4.isEmpty();
        boolean boolean18 = properties0.replace((java.lang.Object) 100.0f, (java.lang.Object) true, (java.lang.Object) properties4);
        java.io.InputStream inputStream19 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.load(inputStream19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test00027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00027");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        boolean boolean3 = properties1.isEmpty();
        java.util.Set<java.lang.String> strSet4 = properties1.stringPropertyNames();
        java.io.Writer writer5 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(writer5, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strSet4);
    }

    @Test
    public void test00028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00028");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean13 = properties1.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean12);
        boolean boolean14 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties1.keys();
        java.io.OutputStream outputStream16 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream16, "{10=#}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objEnumeration15);
    }

    @Test
    public void test00029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00029");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int1 = recovery0.getMaxRetries();
        recovery0.setForgetOrphanedLogEntriesDelay((-1L));
        recovery0.setForgetOrphanedLogEntriesDelay((long) (-1));
        recovery0.setForgetOrphanedLogEntriesDelay(100L);
        java.lang.Class<?> wildcardClass8 = recovery0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 5 + "'", int1 == 5);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test00030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00030");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Properties properties3 = new java.util.Properties(properties1);
        java.lang.Object obj6 = properties3.putIfAbsent((java.lang.Object) 10, (java.lang.Object) '#');
        java.io.InputStream inputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.loadFromXML(inputStream7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test00031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00031");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj1 = null;
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties3.elements();
        java.util.Properties properties5 = null;
        java.util.Properties properties6 = new java.util.Properties(properties5);
        java.util.Enumeration<java.lang.Object> objEnumeration7 = properties6.elements();
        java.lang.String str9 = properties6.getProperty("");
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties6);
        java.util.Set<java.lang.String> strSet11 = properties6.stringPropertyNames();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj12 = properties0.putIfAbsent(obj1, (java.lang.Object) strSet11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objEnumeration7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strSet11);
    }

    @Test
    public void test00032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00032");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) (byte) -1);
        atomikosProperties0.setConsoleFileName("");
        java.lang.String str5 = atomikosProperties0.getLogBaseName();
        long long6 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setForceShutdownOnVmExit(false);
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        java.io.OutputStream outputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties9.store(outputStream10, "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(properties9);
    }

    @Test
    public void test00033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00033");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties3.elements();
        java.util.Properties properties5 = null;
        java.util.Properties properties6 = new java.util.Properties(properties5);
        java.util.Enumeration<java.lang.Object> objEnumeration7 = properties6.elements();
        java.lang.String str9 = properties6.getProperty("");
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties6);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj15 = properties3.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties12);
        atomikosProperties12.setSerialJtaTransactions(false);
        boolean boolean18 = properties1.equals((java.lang.Object) false);
        java.io.OutputStream outputStream19 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream19, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objEnumeration7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test00034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00034");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        java.util.Properties properties14 = null;
        java.util.Properties properties15 = new java.util.Properties(properties14);
        boolean boolean16 = properties15.isEmpty();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setLogBaseDir("");
        atomikosProperties18.setForceShutdownOnVmExit(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int24 = atomikosProperties23.getMaxActives();
        java.lang.String str25 = atomikosProperties23.getTransactionManagerUniqueName();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = properties15.remove((java.lang.Object) false, (java.lang.Object) str25);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 50 + "'", int24 == 50);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test00035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00035");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        boolean boolean4 = properties1.contains((java.lang.Object) 1L);
        java.util.Set<java.lang.Object> objSet5 = properties1.keySet();
        java.io.Reader reader6 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(reader6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objSet5);
    }

    @Test
    public void test00036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00036");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = null;
        java.util.Properties properties2 = new java.util.Properties(properties1);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties5.elements();
        java.lang.String str8 = properties5.getProperty("");
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        boolean boolean13 = properties12.isEmpty();
        boolean boolean14 = properties2.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean13);
        boolean boolean15 = properties2.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setCheckpointInterval((long) (byte) -1);
        atomikosProperties17.setConsoleFileName("");
        java.lang.String str22 = atomikosProperties17.getLogBaseName();
        long long23 = atomikosProperties17.getCheckpointInterval();
        java.lang.String str24 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.setEnableLogging(true);
        java.lang.Object obj27 = properties0.putIfAbsent((java.lang.Object) objEnumeration16, (java.lang.Object) atomikosProperties17);
        java.util.Properties properties28 = null;
        java.util.Properties properties29 = new java.util.Properties(properties28);
        boolean boolean30 = properties29.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery31 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int32 = recovery31.getMaxRetries();
        boolean boolean33 = properties29.containsKey((java.lang.Object) recovery31);
        recovery31.setRetryInterval((long) (short) -1);
        recovery31.setDelay(10L);
        java.util.Properties properties38 = null;
        java.util.Properties properties39 = new java.util.Properties(properties38);
        boolean boolean40 = properties39.isEmpty();
        java.lang.Object obj41 = properties0.getOrDefault((java.lang.Object) recovery31, (java.lang.Object) properties39);
        java.io.OutputStream outputStream42 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties39.store(outputStream42, "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "{}");
    }

    @Test
    public void test00037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00037");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        boolean boolean3 = properties1.isEmpty();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        boolean boolean6 = properties5.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet7 = properties5.entrySet();
        java.lang.Object obj10 = properties5.setProperty("tm.out", "hi!");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj12 = properties1.getOrDefault(obj10, (java.lang.Object) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objEntrySet7);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test00038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00038");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.lang.String str4 = properties1.getProperty("hi!");
        boolean boolean6 = properties1.contains((java.lang.Object) 10.0f);
        java.util.Set<java.lang.Object> objSet7 = properties1.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties8.setCheckpointInterval((long) (byte) -1);
        atomikosProperties8.setThreadedTwoPhaseCommit(true);
        java.lang.String str13 = atomikosProperties8.getOutputDir();
        atomikosProperties8.setConsoleFileName("tmlog");
        boolean boolean16 = properties1.contains((java.lang.Object) "tmlog");
        java.io.Writer writer17 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(writer17, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test00039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00039");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties7.elements();
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties10.elements();
        java.lang.String str13 = properties10.getProperty("");
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj19 = properties7.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties16);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel20 = atomikosProperties16.getConsoleLogLevel();
        int int21 = atomikosProperties16.getConsoleFileCount();
        java.lang.Object obj22 = properties1.get((java.lang.Object) atomikosProperties16);
        java.io.OutputStream outputStream23 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream23, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel20 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel20.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNull(obj22);
    }

    @Test
    public void test00040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00040");
        java.util.Properties properties0 = new java.util.Properties();
        java.io.OutputStream outputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream1, "{10=#}", "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00041");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet3 = properties1.entrySet();
        java.io.OutputStream outputStream4 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.save(outputStream4, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEntrySet3);
    }

    @Test
    public void test00042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00042");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        java.util.Properties properties14 = null;
        java.util.Properties properties15 = new java.util.Properties(properties14);
        boolean boolean16 = properties15.isEmpty();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.io.Writer writer18 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(writer18, "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test00043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00043");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = null;
        java.util.Properties properties2 = new java.util.Properties(properties1);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties5.elements();
        java.lang.String str8 = properties5.getProperty("");
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        boolean boolean13 = properties12.isEmpty();
        boolean boolean14 = properties2.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean13);
        boolean boolean15 = properties2.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setCheckpointInterval((long) (byte) -1);
        atomikosProperties17.setConsoleFileName("");
        java.lang.String str22 = atomikosProperties17.getLogBaseName();
        long long23 = atomikosProperties17.getCheckpointInterval();
        java.lang.String str24 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.setEnableLogging(true);
        java.lang.Object obj27 = properties0.putIfAbsent((java.lang.Object) objEnumeration16, (java.lang.Object) atomikosProperties17);
        java.io.PrintStream printStream28 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.list(printStream28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(obj27);
    }

    @Test
    public void test00044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00044");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties7.elements();
        java.lang.String str10 = properties7.getProperty("");
        properties4.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.util.Properties properties13 = null;
        java.util.Properties properties14 = new java.util.Properties(properties13);
        boolean boolean15 = properties14.isEmpty();
        boolean boolean16 = properties4.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean15);
        boolean boolean17 = properties4.isEmpty();
        boolean boolean18 = properties0.replace((java.lang.Object) 100.0f, (java.lang.Object) true, (java.lang.Object) properties4);
        java.lang.String str21 = properties0.getProperty("", "");
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test00045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00045");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getMaxActives();
        java.lang.Class<?> wildcardClass2 = atomikosProperties0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 50 + "'", int1 == 50);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test00046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00046");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties1.elements();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet4 = properties1.entrySet();
        java.io.InputStream inputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(inputStream5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNotNull(objEntrySet4);
    }

    @Test
    public void test00047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00047");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Properties properties3 = new java.util.Properties(properties1);
        java.io.OutputStream outputStream4 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.storeToXML(outputStream4, "tmlog", "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test00048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00048");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        boolean boolean4 = properties1.containsKey((java.lang.Object) 10.0f);
        java.lang.String str7 = properties1.getProperty("{}", "{10=#}");
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{10=#}" + "'", str7, "{10=#}");
    }

    @Test
    public void test00049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00049");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        java.util.Properties properties14 = null;
        java.util.Properties properties15 = new java.util.Properties(properties14);
        boolean boolean16 = properties15.isEmpty();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.io.OutputStream outputStream18 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties15.storeToXML(outputStream18, "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test00050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00050");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        java.util.Properties properties14 = null;
        java.util.Properties properties15 = new java.util.Properties(properties14);
        boolean boolean16 = properties15.isEmpty();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration<?> wildcardEnumeration18 = properties1.propertyNames();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Double cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test00051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00051");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        boolean boolean4 = properties1.contains((java.lang.Object) 1L);
        java.util.Set<java.lang.Object> objSet5 = properties1.keySet();
        java.lang.Object obj8 = properties1.setProperty("", "");
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        boolean boolean11 = properties10.isEmpty();
        java.lang.String str13 = properties10.getProperty("hi!");
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        boolean boolean17 = properties16.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int19 = recovery18.getMaxRetries();
        boolean boolean20 = properties16.containsKey((java.lang.Object) recovery18);
        recovery18.setRetryInterval((long) (short) -1);
        recovery18.setRetryInterval((long) 0);
        recovery18.setMaxRetries((int) (byte) 10);
        java.lang.Class<?> wildcardClass27 = recovery18.getClass();
        java.lang.Object obj28 = properties10.replace((java.lang.Object) (byte) -1, (java.lang.Object) recovery18);
        java.util.Properties properties29 = null;
        java.util.Properties properties30 = new java.util.Properties(properties29);
        boolean boolean31 = properties30.isEmpty();
        java.lang.String str33 = properties30.getProperty("hi!");
        java.util.Set<java.lang.String> strSet34 = properties30.stringPropertyNames();
        java.lang.Object obj35 = new java.lang.Object();
        boolean boolean36 = properties1.replace((java.lang.Object) (byte) -1, (java.lang.Object) properties30, obj35);
        java.util.Properties properties37 = null;
        java.util.Properties properties38 = new java.util.Properties(properties37);
        java.util.Enumeration<java.lang.Object> objEnumeration39 = properties38.elements();
        java.util.Properties properties40 = null;
        java.util.Properties properties41 = new java.util.Properties(properties40);
        java.util.Enumeration<java.lang.Object> objEnumeration42 = properties41.elements();
        java.lang.String str44 = properties41.getProperty("");
        properties38.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties41);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties47.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj50 = properties38.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties47);
        atomikosProperties47.setSerialJtaTransactions(false);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel53 = atomikosProperties47.getConsoleLogLevel();
        boolean boolean54 = properties1.containsValue((java.lang.Object) atomikosProperties47);
        java.io.PrintWriter printWriter55 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printWriter55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objSet5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objEnumeration39);
        org.junit.Assert.assertNotNull(objEnumeration42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel53 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel53.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test00052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00052");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        boolean boolean3 = properties1.isEmpty();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        boolean boolean6 = properties5.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery7 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int8 = recovery7.getMaxRetries();
        boolean boolean9 = properties5.containsKey((java.lang.Object) recovery7);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        java.util.Enumeration<java.lang.Object> objEnumeration12 = properties11.elements();
        java.util.Properties properties13 = null;
        java.util.Properties properties14 = new java.util.Properties(properties13);
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties14.elements();
        java.lang.String str17 = properties14.getProperty("");
        properties11.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties14);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj23 = properties11.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties20);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel24 = atomikosProperties20.getConsoleLogLevel();
        int int25 = atomikosProperties20.getConsoleFileCount();
        java.lang.Object obj26 = properties5.get((java.lang.Object) atomikosProperties20);
        java.util.Properties properties27 = null;
        java.util.Properties properties28 = new java.util.Properties(properties27);
        boolean boolean29 = properties28.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery30 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int31 = recovery30.getMaxRetries();
        boolean boolean32 = properties28.containsKey((java.lang.Object) recovery30);
        properties28.clear();
        boolean boolean35 = properties28.containsKey((java.lang.Object) "hi!");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj36 = properties1.getOrDefault(obj26, (java.lang.Object) "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objEnumeration12);
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel24 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel24.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test00053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00053");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean13 = properties1.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean12);
        java.util.Properties properties14 = null;
        java.util.Properties properties15 = new java.util.Properties(properties14);
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties15.elements();
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        java.util.Enumeration<java.lang.Object> objEnumeration19 = properties18.elements();
        java.lang.String str21 = properties18.getProperty("");
        properties15.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties18);
        boolean boolean23 = properties1.contains((java.lang.Object) properties15);
        java.io.OutputStream outputStream24 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(outputStream24, "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNotNull(objEnumeration19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test00054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00054");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet3 = properties1.entrySet();
        java.lang.Object obj6 = properties1.setProperty("tm.out", "hi!");
        boolean boolean7 = properties1.isEmpty();
        java.io.Writer writer8 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(writer8, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEntrySet3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test00055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00055");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.lang.String str4 = properties1.getProperty("hi!");
        boolean boolean6 = properties1.contains((java.lang.Object) 10.0f);
        java.util.Set<java.lang.Object> objSet7 = properties1.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int9 = atomikosProperties8.getMaxActives();
        boolean boolean10 = properties1.equals((java.lang.Object) atomikosProperties8);
        java.io.OutputStream outputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.save(outputStream11, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test00056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00056");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties1.elements();
        java.lang.Object obj4 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = properties1.contains(obj4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEnumeration3);
    }

    @Test
    public void test00057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00057");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        properties1.clear();
        boolean boolean8 = properties1.containsKey((java.lang.Object) "hi!");
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        boolean boolean11 = properties10.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setCheckpointInterval((long) (byte) -1);
        atomikosProperties12.setConsoleFileName("");
        java.lang.String str17 = atomikosProperties12.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setCheckpointInterval((long) (byte) -1);
        atomikosProperties18.setThreadedTwoPhaseCommit(true);
        java.util.Properties properties23 = null;
        java.util.Properties properties24 = new java.util.Properties(properties23);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties24.elements();
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties27.elements();
        java.lang.String str30 = properties27.getProperty("");
        properties24.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj36 = properties24.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties33);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel37 = atomikosProperties33.getConsoleLogLevel();
        atomikosProperties18.setConsoleLogLevel(atomikosLoggingLevel37);
        atomikosProperties12.setConsoleLogLevel(atomikosLoggingLevel37);
        boolean boolean41 = properties1.replace((java.lang.Object) properties10, (java.lang.Object) atomikosProperties12, (java.lang.Object) 10.0d);
        java.util.Properties properties42 = new java.util.Properties(properties1);
        java.io.OutputStream outputStream43 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream43, "{10=#}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel37 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel37.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test00058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00058");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties1.elements();
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties1.keys();
        java.lang.String str7 = properties1.getProperty("{}", "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
    }

    @Test
    public void test00059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00059");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean13 = properties1.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean12);
        boolean boolean14 = properties1.isEmpty();
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties16.elements();
        boolean boolean19 = properties16.containsKey((java.lang.Object) 10.0f);
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties16);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.setCheckpointInterval((long) (byte) -1);
        atomikosProperties21.setConsoleFileName("");
        java.lang.String str26 = atomikosProperties21.getLogBaseName();
        long long27 = atomikosProperties21.getCheckpointInterval();
        java.lang.String str28 = atomikosProperties21.getLogBaseDir();
        atomikosProperties21.setEnableLogging(true);
        long long31 = atomikosProperties21.getDefaultJtaTimeout();
        boolean boolean32 = atomikosProperties21.isSerialJtaTransactions();
        java.lang.String str33 = atomikosProperties21.getOutputDir();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj34 = properties1.remove((java.lang.Object) str33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "tmlog" + "'", str26, "tmlog");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10000L + "'", long31 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test00060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00060");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.lang.String str4 = properties1.getProperty("hi!");
        boolean boolean6 = properties1.contains((java.lang.Object) 10.0f);
        java.io.PrintWriter printWriter7 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printWriter7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test00061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00061");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet3 = properties1.entrySet();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Object obj6 = properties1.replace((java.lang.Object) "hi!", obj5);
        boolean boolean8 = properties1.equals((java.lang.Object) 1.0f);
        java.util.Properties properties9 = new java.util.Properties(properties1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str11 = atomikosProperties10.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery12 = atomikosProperties10.getRecovery();
        atomikosProperties10.setEnableLogging(false);
        atomikosProperties10.setSerialJtaTransactions(true);
        java.lang.String str17 = atomikosProperties10.getOutputDir();
        java.lang.Object obj18 = properties1.get((java.lang.Object) atomikosProperties10);
        java.io.PrintWriter printWriter19 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printWriter19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEntrySet3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(recovery12);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(obj18);
    }

    @Test
    public void test00062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00062");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        boolean boolean3 = properties1.isEmpty();
        java.io.PrintWriter printWriter4 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printWriter4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test00063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00063");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        boolean boolean4 = properties1.containsKey((java.lang.Object) 10.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.getLogBaseDir();
        atomikosProperties5.setLogBaseDir("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int10 = atomikosProperties9.getMaxActives();
        java.lang.String str11 = atomikosProperties9.getTransactionManagerUniqueName();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean12 = properties1.remove((java.lang.Object) "", (java.lang.Object) str11);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test00064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00064");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = null;
        java.util.Properties properties2 = new java.util.Properties(properties1);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties5.elements();
        java.lang.String str8 = properties5.getProperty("");
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        boolean boolean13 = properties12.isEmpty();
        boolean boolean14 = properties2.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean13);
        boolean boolean15 = properties2.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setCheckpointInterval((long) (byte) -1);
        atomikosProperties17.setConsoleFileName("");
        java.lang.String str22 = atomikosProperties17.getLogBaseName();
        long long23 = atomikosProperties17.getCheckpointInterval();
        java.lang.String str24 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.setEnableLogging(true);
        java.lang.Object obj27 = properties0.putIfAbsent((java.lang.Object) objEnumeration16, (java.lang.Object) atomikosProperties17);
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties0.keys();
        java.io.Writer writer29 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(writer29, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(objEnumeration28);
    }

    @Test
    public void test00065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00065");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean13 = properties1.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean12);
        boolean boolean14 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setConsoleFileName("tm.out");
        java.util.Properties properties19 = new java.util.Properties();
        java.util.Properties properties22 = null;
        java.util.Properties properties23 = new java.util.Properties(properties22);
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties23.elements();
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties26.elements();
        java.lang.String str29 = properties26.getProperty("");
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        java.util.Properties properties32 = null;
        java.util.Properties properties33 = new java.util.Properties(properties32);
        boolean boolean34 = properties33.isEmpty();
        boolean boolean35 = properties23.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean34);
        boolean boolean36 = properties23.isEmpty();
        boolean boolean37 = properties19.replace((java.lang.Object) 100.0f, (java.lang.Object) true, (java.lang.Object) properties23);
        boolean boolean38 = properties1.replace((java.lang.Object) ' ', (java.lang.Object) "tm.out", (java.lang.Object) boolean37);
        java.io.OutputStream outputStream39 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream39, "tmlog", "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test00066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00066");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties7.elements();
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties10.elements();
        java.lang.String str13 = properties10.getProperty("");
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj19 = properties7.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties16);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel20 = atomikosProperties16.getConsoleLogLevel();
        int int21 = atomikosProperties16.getConsoleFileCount();
        java.lang.Object obj22 = properties1.get((java.lang.Object) atomikosProperties16);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties23.setCheckpointInterval((long) (byte) -1);
        atomikosProperties23.setConsoleFileName("");
        java.lang.String str28 = atomikosProperties23.getLogBaseName();
        long long29 = atomikosProperties23.getCheckpointInterval();
        java.lang.Object obj30 = properties1.get((java.lang.Object) atomikosProperties23);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str32 = atomikosProperties31.getLogBaseDir();
        java.lang.String str33 = atomikosProperties31.getLogBaseDir();
        java.lang.String str34 = atomikosProperties31.getService();
        java.util.Properties properties35 = null;
        java.util.Properties properties36 = new java.util.Properties(properties35);
        boolean boolean37 = properties36.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery38 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int39 = recovery38.getMaxRetries();
        boolean boolean40 = properties36.containsKey((java.lang.Object) recovery38);
        java.util.Properties properties41 = null;
        java.util.Properties properties42 = new java.util.Properties(properties41);
        java.util.Enumeration<java.lang.Object> objEnumeration43 = properties42.elements();
        java.util.Properties properties44 = null;
        java.util.Properties properties45 = new java.util.Properties(properties44);
        java.util.Enumeration<java.lang.Object> objEnumeration46 = properties45.elements();
        java.lang.String str48 = properties45.getProperty("");
        properties42.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties45);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties51.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj54 = properties42.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties51);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel55 = atomikosProperties51.getConsoleLogLevel();
        int int56 = atomikosProperties51.getConsoleFileCount();
        java.lang.Object obj57 = properties36.get((java.lang.Object) atomikosProperties51);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties58.setCheckpointInterval((long) (byte) -1);
        atomikosProperties58.setConsoleFileName("");
        java.lang.String str63 = atomikosProperties58.getLogBaseName();
        long long64 = atomikosProperties58.getCheckpointInterval();
        java.lang.String str65 = atomikosProperties58.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties66.setCheckpointInterval((long) (byte) -1);
        atomikosProperties66.setThreadedTwoPhaseCommit(true);
        java.util.Properties properties71 = null;
        java.util.Properties properties72 = new java.util.Properties(properties71);
        java.util.Enumeration<java.lang.Object> objEnumeration73 = properties72.elements();
        java.util.Properties properties74 = null;
        java.util.Properties properties75 = new java.util.Properties(properties74);
        java.util.Enumeration<java.lang.Object> objEnumeration76 = properties75.elements();
        java.lang.String str78 = properties75.getProperty("");
        properties72.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties75);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties81 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties81.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj84 = properties72.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties81);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel85 = atomikosProperties81.getConsoleLogLevel();
        atomikosProperties66.setConsoleLogLevel(atomikosLoggingLevel85);
        atomikosProperties58.setConsoleLogLevel(atomikosLoggingLevel85);
        atomikosProperties51.setConsoleLogLevel(atomikosLoggingLevel85);
        java.lang.String str89 = atomikosProperties51.getService();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean90 = properties1.remove((java.lang.Object) str34, (java.lang.Object) atomikosProperties51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel20 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel20.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objEnumeration43);
        org.junit.Assert.assertNotNull(objEnumeration46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel55 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel55.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "tmlog" + "'", str63, "tmlog");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-1L) + "'", long64 == (-1L));
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(objEnumeration73);
        org.junit.Assert.assertNotNull(objEnumeration76);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNull(obj84);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel85 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel85.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str89);
    }

    @Test
    public void test00067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00067");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        boolean boolean10 = properties1.contains((java.lang.Object) 0);
        java.io.OutputStream outputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream11, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test00068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00068");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) (byte) -1);
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.setOutputDir("");
        java.lang.String str9 = atomikosProperties0.getConsoleFileName();
        java.lang.String str10 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setConsoleFileCount((int) (byte) -1);
        java.util.Properties properties13 = atomikosProperties0.asProperties();
        java.io.OutputStream outputStream14 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties13.storeToXML(outputStream14, "tm.out", "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertNotNull(properties13);
    }

    @Test
    public void test00069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00069");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean13 = properties1.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean12);
        java.lang.String str16 = properties1.getProperty("{10=#}", "{}");
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
    }

    @Test
    public void test00070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00070");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet3 = properties1.entrySet();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Object obj6 = properties1.replace((java.lang.Object) "hi!", obj5);
        boolean boolean8 = properties1.equals((java.lang.Object) 1.0f);
        java.util.Properties properties9 = new java.util.Properties(properties1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str11 = atomikosProperties10.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery12 = atomikosProperties10.getRecovery();
        atomikosProperties10.setEnableLogging(false);
        atomikosProperties10.setSerialJtaTransactions(true);
        java.lang.String str17 = atomikosProperties10.getOutputDir();
        java.lang.Object obj18 = properties1.get((java.lang.Object) atomikosProperties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setCheckpointInterval((long) (byte) -1);
        atomikosProperties19.setThreadedTwoPhaseCommit(true);
        atomikosProperties19.setSerialJtaTransactions(false);
        java.lang.String str26 = atomikosProperties19.getLogBaseName();
        atomikosProperties19.setDefaultJtaTimeout((long) (short) 1);
        atomikosProperties19.setConsoleFileCount((int) (byte) -1);
        atomikosProperties19.setConsoleFileLimit((int) ' ');
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel33 = null;
        atomikosProperties19.setConsoleLogLevel(atomikosLoggingLevel33);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj35 = properties1.remove((java.lang.Object) atomikosLoggingLevel33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEntrySet3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(recovery12);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "tmlog" + "'", str26, "tmlog");
    }

    @Test
    public void test00071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00071");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        java.io.Writer writer6 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(writer6, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test00072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00072");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean13 = properties1.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean12);
        boolean boolean14 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties1.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.getLogBaseDir();
        atomikosProperties16.setLogBaseDir("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.setCheckpointInterval((long) (byte) -1);
        atomikosProperties20.setThreadedTwoPhaseCommit(true);
        atomikosProperties20.setSerialJtaTransactions(false);
        java.lang.String str27 = atomikosProperties20.getLogBaseName();
        atomikosProperties20.setAllowSubTransactions(false);
        atomikosProperties20.setLogBaseName("{10=#}");
        java.lang.Object obj32 = properties1.putIfAbsent((java.lang.Object) atomikosProperties16, (java.lang.Object) "{10=#}");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration<?> wildcardEnumeration33 = properties1.propertyNames();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.springframework.boot.jta.atomikos.AtomikosProperties cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertNull(obj32);
    }

    @Test
    public void test00073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00073");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) (byte) -1);
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.setOutputDir("");
        java.lang.String str9 = atomikosProperties0.getConsoleFileName();
        java.lang.String str10 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setConsoleFileCount((int) (byte) -1);
        boolean boolean13 = atomikosProperties0.isSerialJtaTransactions();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test00074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00074");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        boolean boolean4 = properties1.contains((java.lang.Object) 1L);
        boolean boolean5 = properties1.isEmpty();
        java.io.OutputStream outputStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream6, "{10=#}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test00075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00075");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        boolean boolean4 = properties1.contains((java.lang.Object) 1L);
        java.util.Set<java.lang.Object> objSet5 = properties1.keySet();
        java.lang.Object obj8 = properties1.setProperty("", "");
        int int9 = properties1.size();
        java.io.PrintStream printStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objSet5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test00076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00076");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        boolean boolean4 = properties1.contains((java.lang.Object) 1L);
        java.util.Set<java.lang.Object> objSet5 = properties1.keySet();
        java.io.InputStream inputStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(inputStream6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objSet5);
    }

    @Test
    public void test00077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00077");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        boolean boolean3 = properties1.isEmpty();
        java.util.Set<java.lang.String> strSet4 = properties1.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties5.setCheckpointInterval((long) (byte) -1);
        atomikosProperties5.setThreadedTwoPhaseCommit(true);
        java.lang.String str10 = atomikosProperties5.getOutputDir();
        java.util.Properties properties11 = atomikosProperties5.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setCheckpointInterval((long) (byte) -1);
        atomikosProperties12.setThreadedTwoPhaseCommit(true);
        atomikosProperties12.setSerialJtaTransactions(false);
        atomikosProperties12.setOutputDir("");
        java.lang.String str21 = atomikosProperties12.getConsoleFileName();
        java.lang.String str22 = atomikosProperties12.getLogBaseName();
        atomikosProperties12.setDefaultJtaTimeout(0L);
        java.lang.Object obj25 = properties1.putIfAbsent((java.lang.Object) atomikosProperties5, (java.lang.Object) atomikosProperties12);
        java.io.PrintWriter printWriter26 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printWriter26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tm.out" + "'", str21, "tm.out");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertNull(obj25);
    }

    @Test
    public void test00078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00078");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties7.elements();
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties10.elements();
        java.lang.String str13 = properties10.getProperty("");
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj19 = properties7.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties16);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel20 = atomikosProperties16.getConsoleLogLevel();
        int int21 = atomikosProperties16.getConsoleFileCount();
        java.lang.Object obj22 = properties1.get((java.lang.Object) atomikosProperties16);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties23.setCheckpointInterval((long) (byte) -1);
        atomikosProperties23.setConsoleFileName("");
        java.lang.String str28 = atomikosProperties23.getLogBaseName();
        long long29 = atomikosProperties23.getCheckpointInterval();
        java.lang.Object obj30 = properties1.get((java.lang.Object) atomikosProperties23);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties31.setCheckpointInterval((long) (byte) -1);
        atomikosProperties31.setThreadedTwoPhaseCommit(true);
        java.lang.String str36 = atomikosProperties31.getOutputDir();
        java.lang.String str37 = atomikosProperties31.getTransactionManagerUniqueName();
        int int38 = atomikosProperties31.getConsoleFileCount();
        boolean boolean39 = atomikosProperties31.isThreadedTwoPhaseCommit();
        java.lang.Object obj41 = properties1.put((java.lang.Object) boolean39, (java.lang.Object) 0L);
        java.lang.String str44 = properties1.getProperty("hi!", "");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel20 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel20.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
    }

    @Test
    public void test00079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00079");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        properties1.clear();
        boolean boolean8 = properties1.containsKey((java.lang.Object) "hi!");
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        boolean boolean11 = properties10.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setCheckpointInterval((long) (byte) -1);
        atomikosProperties12.setConsoleFileName("");
        java.lang.String str17 = atomikosProperties12.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setCheckpointInterval((long) (byte) -1);
        atomikosProperties18.setThreadedTwoPhaseCommit(true);
        java.util.Properties properties23 = null;
        java.util.Properties properties24 = new java.util.Properties(properties23);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties24.elements();
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties27.elements();
        java.lang.String str30 = properties27.getProperty("");
        properties24.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj36 = properties24.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties33);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel37 = atomikosProperties33.getConsoleLogLevel();
        atomikosProperties18.setConsoleLogLevel(atomikosLoggingLevel37);
        atomikosProperties12.setConsoleLogLevel(atomikosLoggingLevel37);
        boolean boolean41 = properties1.replace((java.lang.Object) properties10, (java.lang.Object) atomikosProperties12, (java.lang.Object) 10.0d);
        java.util.Properties properties42 = new java.util.Properties(properties1);
        java.io.InputStream inputStream43 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties42.load(inputStream43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel37 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel37.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test00080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00080");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        boolean boolean4 = properties1.contains((java.lang.Object) 1L);
        java.util.Set<java.lang.Object> objSet5 = properties1.keySet();
        java.lang.Object obj8 = properties1.setProperty("", "");
        java.io.Reader reader9 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(reader9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objSet5);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test00081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00081");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.io.OutputStream outputStream2 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream2, "tm.out", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00082");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        boolean boolean4 = properties1.contains((java.lang.Object) 1L);
        java.util.Set<java.lang.Object> objSet5 = properties1.keySet();
        java.lang.Object obj8 = properties1.setProperty("", "");
        java.io.Writer writer9 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(writer9, "{10=#}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objSet5);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test00083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00083");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet3 = properties1.entrySet();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Object obj6 = properties1.replace((java.lang.Object) "hi!", obj5);
        boolean boolean8 = properties1.equals((java.lang.Object) 1.0f);
        java.io.OutputStream outputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.save(outputStream9, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEntrySet3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test00084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00084");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean13 = properties1.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean12);
        boolean boolean14 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties1.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.getLogBaseDir();
        atomikosProperties16.setLogBaseDir("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.setCheckpointInterval((long) (byte) -1);
        atomikosProperties20.setThreadedTwoPhaseCommit(true);
        atomikosProperties20.setSerialJtaTransactions(false);
        java.lang.String str27 = atomikosProperties20.getLogBaseName();
        atomikosProperties20.setAllowSubTransactions(false);
        atomikosProperties20.setLogBaseName("{10=#}");
        java.lang.Object obj32 = properties1.putIfAbsent((java.lang.Object) atomikosProperties16, (java.lang.Object) "{10=#}");
        java.lang.Object obj33 = null;
        java.util.Properties properties34 = null;
        java.util.Properties properties35 = new java.util.Properties(properties34);
        java.util.Enumeration<java.lang.Object> objEnumeration36 = properties35.elements();
        java.util.Properties properties37 = null;
        java.util.Properties properties38 = new java.util.Properties(properties37);
        java.util.Enumeration<java.lang.Object> objEnumeration39 = properties38.elements();
        java.lang.String str41 = properties38.getProperty("");
        properties35.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties38);
        java.util.Properties properties44 = null;
        java.util.Properties properties45 = new java.util.Properties(properties44);
        boolean boolean46 = properties45.isEmpty();
        boolean boolean47 = properties35.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean46);
        boolean boolean48 = properties35.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj49 = properties1.putIfAbsent(obj33, (java.lang.Object) properties35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(objEnumeration36);
        org.junit.Assert.assertNotNull(objEnumeration39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test00085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00085");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        java.util.Properties properties14 = null;
        java.util.Properties properties15 = new java.util.Properties(properties14);
        boolean boolean16 = properties15.isEmpty();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.lang.Object obj18 = properties1.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery21 = atomikosProperties19.getRecovery();
        atomikosProperties19.setEnableLogging(false);
        boolean boolean24 = properties1.equals((java.lang.Object) atomikosProperties19);
        java.io.PrintStream printStream25 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printStream25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(recovery21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test00086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00086");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        properties1.clear();
        boolean boolean8 = properties1.containsKey((java.lang.Object) "hi!");
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        boolean boolean11 = properties10.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setCheckpointInterval((long) (byte) -1);
        atomikosProperties12.setConsoleFileName("");
        java.lang.String str17 = atomikosProperties12.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setCheckpointInterval((long) (byte) -1);
        atomikosProperties18.setThreadedTwoPhaseCommit(true);
        java.util.Properties properties23 = null;
        java.util.Properties properties24 = new java.util.Properties(properties23);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties24.elements();
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties27.elements();
        java.lang.String str30 = properties27.getProperty("");
        properties24.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj36 = properties24.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties33);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel37 = atomikosProperties33.getConsoleLogLevel();
        atomikosProperties18.setConsoleLogLevel(atomikosLoggingLevel37);
        atomikosProperties12.setConsoleLogLevel(atomikosLoggingLevel37);
        boolean boolean41 = properties1.replace((java.lang.Object) properties10, (java.lang.Object) atomikosProperties12, (java.lang.Object) 10.0d);
        java.util.Properties properties42 = new java.util.Properties(properties1);
        java.lang.String str45 = properties42.getProperty("{}", "");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel37 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel37.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
    }

    @Test
    public void test00087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00087");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        recovery3.setRetryInterval((long) (short) -1);
        recovery3.setDelay(10L);
        recovery3.setMaxRetries(5);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test00088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00088");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.lang.Object obj4 = properties1.setProperty("{10=#}", "tm.out");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet5 = properties1.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties6.getRecovery();
        atomikosProperties6.setEnableLogging(false);
        long long11 = atomikosProperties6.getMaxTimeout();
        java.util.Properties properties12 = null;
        java.util.Properties properties13 = new java.util.Properties(properties12);
        java.util.Enumeration<java.lang.Object> objEnumeration14 = properties13.elements();
        java.lang.String str16 = properties13.getProperty("");
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        boolean boolean19 = properties18.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet20 = properties18.entrySet();
        java.lang.Object obj22 = new java.lang.Object();
        java.lang.Object obj23 = properties18.replace((java.lang.Object) "hi!", obj22);
        boolean boolean25 = properties18.equals((java.lang.Object) 1.0f);
        boolean boolean26 = properties13.containsKey((java.lang.Object) boolean25);
        java.lang.Object obj27 = properties1.put((java.lang.Object) atomikosProperties6, (java.lang.Object) properties13);
        java.io.PrintWriter printWriter28 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties13.list(printWriter28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(objEntrySet5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertNotNull(objEnumeration14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objEntrySet20);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(obj27);
    }

    @Test
    public void test00089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00089");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        java.io.Writer writer14 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(writer14, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test00090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00090");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet3 = properties1.entrySet();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Object obj6 = properties1.replace((java.lang.Object) "hi!", obj5);
        boolean boolean8 = properties1.equals((java.lang.Object) 1.0f);
        java.io.InputStream inputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.loadFromXML(inputStream9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEntrySet3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test00091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00091");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        boolean boolean3 = properties1.isEmpty();
        java.util.Set<java.lang.String> strSet4 = properties1.stringPropertyNames();
        java.util.Properties properties5 = null;
        java.util.Properties properties6 = new java.util.Properties(properties5);
        boolean boolean7 = properties6.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int9 = recovery8.getMaxRetries();
        boolean boolean10 = properties6.containsKey((java.lang.Object) recovery8);
        recovery8.setRetryInterval((long) (short) -1);
        recovery8.setRetryInterval((long) 0);
        recovery8.setMaxRetries((int) (byte) 10);
        java.lang.Class<?> wildcardClass17 = recovery8.getClass();
        boolean boolean18 = properties1.contains((java.lang.Object) recovery8);
        java.lang.String str21 = properties1.getProperty("{10=#}", "{}");
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{}" + "'", str21, "{}");
    }

    @Test
    public void test00092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00092");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean13 = properties1.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean12);
        boolean boolean14 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties1.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.getLogBaseDir();
        atomikosProperties16.setLogBaseDir("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.setCheckpointInterval((long) (byte) -1);
        atomikosProperties20.setThreadedTwoPhaseCommit(true);
        atomikosProperties20.setSerialJtaTransactions(false);
        java.lang.String str27 = atomikosProperties20.getLogBaseName();
        atomikosProperties20.setAllowSubTransactions(false);
        atomikosProperties20.setLogBaseName("{10=#}");
        java.lang.Object obj32 = properties1.putIfAbsent((java.lang.Object) atomikosProperties16, (java.lang.Object) "{10=#}");
        boolean boolean34 = properties1.containsKey((java.lang.Object) (byte) -1);
        java.io.OutputStream outputStream35 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream35, "{10=#}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test00093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00093");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet6 = properties1.entrySet();
        java.io.Writer writer7 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(writer7, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objEntrySet6);
    }

    @Test
    public void test00094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00094");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        atomikosProperties10.setSerialJtaTransactions(false);
        boolean boolean16 = atomikosProperties10.isForceShutdownOnVmExit();
        java.util.Properties properties17 = atomikosProperties10.asProperties();
        java.lang.String str20 = properties17.getProperty("tm.out", "");
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test00095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00095");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties7.elements();
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties10.elements();
        java.lang.String str13 = properties10.getProperty("");
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj19 = properties7.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties16);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel20 = atomikosProperties16.getConsoleLogLevel();
        int int21 = atomikosProperties16.getConsoleFileCount();
        java.lang.Object obj22 = properties1.get((java.lang.Object) atomikosProperties16);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties23.setCheckpointInterval((long) (byte) -1);
        atomikosProperties23.setConsoleFileName("");
        java.lang.String str28 = atomikosProperties23.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setCheckpointInterval((long) (byte) -1);
        atomikosProperties29.setThreadedTwoPhaseCommit(true);
        java.util.Properties properties34 = null;
        java.util.Properties properties35 = new java.util.Properties(properties34);
        java.util.Enumeration<java.lang.Object> objEnumeration36 = properties35.elements();
        java.util.Properties properties37 = null;
        java.util.Properties properties38 = new java.util.Properties(properties37);
        java.util.Enumeration<java.lang.Object> objEnumeration39 = properties38.elements();
        java.lang.String str41 = properties38.getProperty("");
        properties35.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj47 = properties35.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties44);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel48 = atomikosProperties44.getConsoleLogLevel();
        atomikosProperties29.setConsoleLogLevel(atomikosLoggingLevel48);
        atomikosProperties23.setConsoleLogLevel(atomikosLoggingLevel48);
        atomikosProperties23.setConsoleFileCount(5);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery53 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery53.setMaxRetries((-1));
        long long56 = recovery53.getRetryInterval();
        java.lang.Object obj57 = properties1.replace((java.lang.Object) 5, (java.lang.Object) long56);
        java.lang.Object obj58 = properties1.clone();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet59 = properties1.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery60 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery60.setMaxRetries((-1));
        java.lang.Object obj63 = properties1.remove((java.lang.Object) (-1));
        java.io.InputStream inputStream64 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.loadFromXML(inputStream64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel20 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel20.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertNotNull(objEnumeration36);
        org.junit.Assert.assertNotNull(objEnumeration39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel48 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel48.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 10000L + "'", long56 == 10000L);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "{}");
        org.junit.Assert.assertNotNull(objEntrySet59);
        org.junit.Assert.assertNull(obj63);
    }

    @Test
    public void test00096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00096");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        boolean boolean3 = properties1.isEmpty();
        java.io.PrintStream printStream4 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printStream4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test00097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00097");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.lang.String str4 = properties1.getProperty("hi!");
        java.io.OutputStream outputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream5, "{}", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test00098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00098");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        java.util.Properties properties14 = null;
        java.util.Properties properties15 = new java.util.Properties(properties14);
        boolean boolean16 = properties15.isEmpty();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.lang.Object obj18 = properties1.clone();
        java.util.Properties properties19 = null;
        java.util.Properties properties20 = new java.util.Properties(properties19);
        boolean boolean21 = properties20.isEmpty();
        java.lang.String str23 = properties20.getProperty("hi!");
        boolean boolean25 = properties20.contains((java.lang.Object) 10.0f);
        java.util.Set<java.lang.Object> objSet26 = properties20.keySet();
        boolean boolean27 = properties1.contains((java.lang.Object) properties20);
        java.io.InputStream inputStream28 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.loadFromXML(inputStream28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test00099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00099");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        properties1.clear();
        boolean boolean8 = properties1.containsKey((java.lang.Object) "hi!");
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        boolean boolean11 = properties10.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setCheckpointInterval((long) (byte) -1);
        atomikosProperties12.setConsoleFileName("");
        java.lang.String str17 = atomikosProperties12.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setCheckpointInterval((long) (byte) -1);
        atomikosProperties18.setThreadedTwoPhaseCommit(true);
        java.util.Properties properties23 = null;
        java.util.Properties properties24 = new java.util.Properties(properties23);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties24.elements();
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties27.elements();
        java.lang.String str30 = properties27.getProperty("");
        properties24.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj36 = properties24.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties33);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel37 = atomikosProperties33.getConsoleLogLevel();
        atomikosProperties18.setConsoleLogLevel(atomikosLoggingLevel37);
        atomikosProperties12.setConsoleLogLevel(atomikosLoggingLevel37);
        boolean boolean41 = properties1.replace((java.lang.Object) properties10, (java.lang.Object) atomikosProperties12, (java.lang.Object) 10.0d);
        java.util.Properties properties42 = new java.util.Properties(properties1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int44 = atomikosProperties43.getMaxActives();
        java.lang.String str45 = atomikosProperties43.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel46 = atomikosProperties43.getConsoleLogLevel();
        java.util.Properties properties47 = null;
        java.util.Properties properties48 = new java.util.Properties(properties47);
        java.util.Enumeration<java.lang.Object> objEnumeration49 = properties48.elements();
        java.util.Properties properties50 = null;
        java.util.Properties properties51 = new java.util.Properties(properties50);
        java.util.Enumeration<java.lang.Object> objEnumeration52 = properties51.elements();
        java.lang.String str54 = properties51.getProperty("");
        properties48.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties51);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties57.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj60 = properties48.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties57);
        atomikosProperties57.setSerialJtaTransactions(false);
        int int63 = atomikosProperties57.getConsoleFileCount();
        int int64 = atomikosProperties57.getConsoleFileLimit();
        java.lang.String str65 = atomikosProperties57.getLogBaseName();
        atomikosProperties57.setService("tmlog");
        java.util.Properties properties68 = null;
        java.util.Properties properties69 = new java.util.Properties(properties68);
        boolean boolean70 = properties69.isEmpty();
        java.lang.String str72 = properties69.getProperty("hi!");
        java.util.Set<java.lang.Object> objSet73 = properties69.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet74 = properties69.entrySet();
        boolean boolean75 = properties42.replace((java.lang.Object) atomikosProperties43, (java.lang.Object) "tmlog", (java.lang.Object) properties69);
        java.lang.Class<?> wildcardClass76 = properties42.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel37 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel37.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 50 + "'", int44 == 50);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel46 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel46.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(objEnumeration49);
        org.junit.Assert.assertNotNull(objEnumeration52);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "tmlog" + "'", str65, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(objSet73);
        org.junit.Assert.assertNotNull(objEntrySet74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test00100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00100");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean13 = properties1.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean12);
        properties1.clear();
        int int15 = properties1.size();
        java.io.Reader reader16 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(reader16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test00101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00101");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties7.elements();
        java.lang.String str10 = properties7.getProperty("");
        properties4.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.util.Properties properties13 = null;
        java.util.Properties properties14 = new java.util.Properties(properties13);
        boolean boolean15 = properties14.isEmpty();
        boolean boolean16 = properties4.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean15);
        boolean boolean17 = properties4.isEmpty();
        boolean boolean18 = properties0.replace((java.lang.Object) 100.0f, (java.lang.Object) true, (java.lang.Object) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setCheckpointInterval((long) (byte) -1);
        atomikosProperties19.setConsoleFileName("");
        java.lang.String str24 = atomikosProperties19.getLogBaseName();
        long long25 = atomikosProperties19.getCheckpointInterval();
        java.lang.String str26 = atomikosProperties19.getConsoleFileName();
        long long27 = atomikosProperties19.getCheckpointInterval();
        java.lang.Object obj28 = properties4.remove((java.lang.Object) atomikosProperties19);
        java.io.OutputStream outputStream29 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties4.store(outputStream29, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertNull(obj28);
    }

    @Test
    public void test00102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00102");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Enumeration<?> wildcardEnumeration9 = properties1.propertyNames();
        boolean boolean10 = properties1.isEmpty();
        java.lang.Object obj11 = null;
        java.util.Properties properties12 = null;
        java.util.Properties properties13 = new java.util.Properties(properties12);
        java.util.Enumeration<java.lang.Object> objEnumeration14 = properties13.elements();
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties16.elements();
        java.lang.String str19 = properties16.getProperty("");
        properties13.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties16);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj25 = properties13.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties22);
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        boolean boolean28 = properties27.isEmpty();
        properties13.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties27);
        java.lang.Object obj30 = properties13.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties31.setCheckpointInterval((long) (byte) -1);
        atomikosProperties31.setThreadedTwoPhaseCommit(true);
        java.lang.String str36 = atomikosProperties31.getOutputDir();
        java.util.Properties properties37 = atomikosProperties31.asProperties();
        java.lang.Object obj38 = properties13.remove((java.lang.Object) properties37);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj39 = properties1.getOrDefault(obj11, (java.lang.Object) properties37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(wildcardEnumeration9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objEnumeration14);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertNull(obj38);
    }

    @Test
    public void test00103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00103");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.io.OutputStream outputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream9, "tmlog", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test00104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00104");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.lang.String str4 = properties1.getProperty("hi!");
        boolean boolean6 = properties1.contains((java.lang.Object) 10.0f);
        java.util.Set<java.lang.Object> objSet7 = properties1.keySet();
        java.io.Writer writer8 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(writer8, "{10=#}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objSet7);
    }

    @Test
    public void test00105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00105");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties7.elements();
        java.lang.String str10 = properties7.getProperty("");
        properties4.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.util.Properties properties13 = null;
        java.util.Properties properties14 = new java.util.Properties(properties13);
        boolean boolean15 = properties14.isEmpty();
        boolean boolean16 = properties4.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean15);
        boolean boolean17 = properties4.isEmpty();
        boolean boolean18 = properties0.replace((java.lang.Object) 100.0f, (java.lang.Object) true, (java.lang.Object) properties4);
        java.io.OutputStream outputStream19 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream19, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test00106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00106");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        boolean boolean4 = properties1.contains((java.lang.Object) 1L);
        boolean boolean5 = properties1.isEmpty();
        java.io.Writer writer6 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(writer6, "{10=#}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test00107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00107");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) (byte) -1);
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        atomikosProperties0.setSerialJtaTransactions(false);
        java.lang.String str7 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseDir("tmlog");
        atomikosProperties0.setDefaultJtaTimeout(300000L);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test00108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00108");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = null;
        java.util.Properties properties2 = new java.util.Properties(properties1);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties5.elements();
        java.lang.String str8 = properties5.getProperty("");
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        boolean boolean13 = properties12.isEmpty();
        boolean boolean14 = properties2.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean13);
        boolean boolean15 = properties2.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setCheckpointInterval((long) (byte) -1);
        atomikosProperties17.setConsoleFileName("");
        java.lang.String str22 = atomikosProperties17.getLogBaseName();
        long long23 = atomikosProperties17.getCheckpointInterval();
        java.lang.String str24 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.setEnableLogging(true);
        java.lang.Object obj27 = properties0.putIfAbsent((java.lang.Object) objEnumeration16, (java.lang.Object) atomikosProperties17);
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties0.keys();
        java.lang.String str30 = properties0.getProperty("tm.out");
        java.util.Properties properties31 = null;
        java.util.Properties properties32 = new java.util.Properties(properties31);
        boolean boolean33 = properties32.isEmpty();
        java.util.Properties properties34 = new java.util.Properties(properties32);
        java.lang.Object obj35 = properties0.get((java.lang.Object) properties34);
        java.io.OutputStream outputStream36 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties34.save(outputStream36, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(obj35);
    }

    @Test
    public void test00109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00109");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet3 = properties1.entrySet();
        java.lang.Object obj6 = properties1.setProperty("tm.out", "hi!");
        boolean boolean7 = properties1.isEmpty();
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties9.elements();
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties12.elements();
        java.lang.String str15 = properties12.getProperty("");
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties12);
        boolean boolean18 = properties9.contains((java.lang.Object) 0);
        boolean boolean19 = properties1.containsValue((java.lang.Object) boolean18);
        java.io.OutputStream outputStream20 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream20, "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEntrySet3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test00110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00110");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.lang.String str4 = properties1.getProperty("hi!");
        boolean boolean6 = properties1.contains((java.lang.Object) 10.0f);
        boolean boolean7 = properties1.isEmpty();
        java.io.InputStream inputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(inputStream8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test00111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00111");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        int int9 = properties1.size();
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean14 = properties11.contains((java.lang.Object) 1L);
        java.util.Set<java.lang.Object> objSet15 = properties11.keySet();
        java.lang.Object obj18 = properties11.setProperty("", "");
        java.util.Properties properties19 = null;
        java.util.Properties properties20 = new java.util.Properties(properties19);
        boolean boolean21 = properties20.isEmpty();
        java.lang.String str23 = properties20.getProperty("hi!");
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        boolean boolean27 = properties26.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery28 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int29 = recovery28.getMaxRetries();
        boolean boolean30 = properties26.containsKey((java.lang.Object) recovery28);
        recovery28.setRetryInterval((long) (short) -1);
        recovery28.setRetryInterval((long) 0);
        recovery28.setMaxRetries((int) (byte) 10);
        java.lang.Class<?> wildcardClass37 = recovery28.getClass();
        java.lang.Object obj38 = properties20.replace((java.lang.Object) (byte) -1, (java.lang.Object) recovery28);
        java.util.Properties properties39 = null;
        java.util.Properties properties40 = new java.util.Properties(properties39);
        boolean boolean41 = properties40.isEmpty();
        java.lang.String str43 = properties40.getProperty("hi!");
        java.util.Set<java.lang.String> strSet44 = properties40.stringPropertyNames();
        java.lang.Object obj45 = new java.lang.Object();
        boolean boolean46 = properties11.replace((java.lang.Object) (byte) -1, (java.lang.Object) properties40, obj45);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str48 = atomikosProperties47.getLogBaseDir();
        java.lang.Class<?> wildcardClass49 = atomikosProperties47.getClass();
        boolean boolean50 = properties1.remove(obj45, (java.lang.Object) wildcardClass49);
        java.io.Reader reader51 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(reader51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objSet15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test00112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00112");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        boolean boolean3 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties1.keys();
        java.io.PrintStream printStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printStream5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objEnumeration4);
    }

    @Test
    public void test00113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00113");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties7.elements();
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties10.elements();
        java.lang.String str13 = properties10.getProperty("");
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj19 = properties7.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties16);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel20 = atomikosProperties16.getConsoleLogLevel();
        int int21 = atomikosProperties16.getConsoleFileCount();
        java.lang.Object obj22 = properties1.get((java.lang.Object) atomikosProperties16);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties23.setCheckpointInterval((long) (byte) -1);
        atomikosProperties23.setConsoleFileName("");
        java.lang.String str28 = atomikosProperties23.getLogBaseName();
        long long29 = atomikosProperties23.getCheckpointInterval();
        java.lang.Object obj30 = properties1.get((java.lang.Object) atomikosProperties23);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties31.setCheckpointInterval((long) (byte) -1);
        atomikosProperties31.setThreadedTwoPhaseCommit(true);
        java.lang.String str36 = atomikosProperties31.getOutputDir();
        java.lang.String str37 = atomikosProperties31.getTransactionManagerUniqueName();
        int int38 = atomikosProperties31.getConsoleFileCount();
        boolean boolean39 = atomikosProperties31.isThreadedTwoPhaseCommit();
        java.lang.Object obj41 = properties1.put((java.lang.Object) boolean39, (java.lang.Object) 0L);
        java.io.Writer writer42 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(writer42, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel20 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel20.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(obj41);
    }

    @Test
    public void test00114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00114");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        atomikosProperties10.setSerialJtaTransactions(false);
        boolean boolean16 = atomikosProperties10.isForceShutdownOnVmExit();
        java.util.Properties properties17 = atomikosProperties10.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setCheckpointInterval((long) (byte) -1);
        atomikosProperties18.setThreadedTwoPhaseCommit(true);
        atomikosProperties18.setSerialJtaTransactions(false);
        java.lang.Object obj25 = properties17.remove((java.lang.Object) false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass26 = obj25.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertNull(obj25);
    }

    @Test
    public void test00115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00115");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) (byte) -1);
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.setOutputDir("");
        java.lang.String str9 = atomikosProperties0.getConsoleFileName();
        java.lang.String str10 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.setEnableLogging(false);
        boolean boolean15 = atomikosProperties0.isAllowSubTransactions();
        java.lang.String str16 = atomikosProperties0.getLogBaseName();
        java.lang.String str17 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setForceShutdownOnVmExit(false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test00116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00116");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        boolean boolean3 = properties1.isEmpty();
        java.io.Writer writer4 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(writer4, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test00117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00117");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        atomikosProperties10.setSerialJtaTransactions(false);
        boolean boolean16 = atomikosProperties10.isForceShutdownOnVmExit();
        java.util.Properties properties17 = atomikosProperties10.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setCheckpointInterval((long) (byte) -1);
        atomikosProperties18.setThreadedTwoPhaseCommit(true);
        atomikosProperties18.setSerialJtaTransactions(false);
        java.lang.Object obj25 = properties17.remove((java.lang.Object) false);
        java.lang.Object obj26 = null;
        java.util.Properties properties27 = null;
        java.util.Properties properties28 = new java.util.Properties(properties27);
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties28.elements();
        boolean boolean30 = properties28.isEmpty();
        java.util.Set<java.lang.String> strSet31 = properties28.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties32.setCheckpointInterval((long) (byte) -1);
        atomikosProperties32.setThreadedTwoPhaseCommit(true);
        java.lang.String str37 = atomikosProperties32.getOutputDir();
        java.util.Properties properties38 = atomikosProperties32.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties39.setCheckpointInterval((long) (byte) -1);
        atomikosProperties39.setThreadedTwoPhaseCommit(true);
        atomikosProperties39.setSerialJtaTransactions(false);
        atomikosProperties39.setOutputDir("");
        java.lang.String str48 = atomikosProperties39.getConsoleFileName();
        java.lang.String str49 = atomikosProperties39.getLogBaseName();
        atomikosProperties39.setDefaultJtaTimeout(0L);
        java.lang.Object obj52 = properties28.putIfAbsent((java.lang.Object) atomikosProperties32, (java.lang.Object) atomikosProperties39);
        java.lang.String str54 = properties28.getProperty("hi!");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj55 = properties17.put(obj26, (java.lang.Object) str54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "tm.out" + "'", str48, "tm.out");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNull(str54);
    }

    @Test
    public void test00118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00118");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean13 = properties1.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean12);
        boolean boolean14 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties1.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.getLogBaseDir();
        atomikosProperties16.setLogBaseDir("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.setCheckpointInterval((long) (byte) -1);
        atomikosProperties20.setThreadedTwoPhaseCommit(true);
        atomikosProperties20.setSerialJtaTransactions(false);
        java.lang.String str27 = atomikosProperties20.getLogBaseName();
        atomikosProperties20.setAllowSubTransactions(false);
        atomikosProperties20.setLogBaseName("{10=#}");
        java.lang.Object obj32 = properties1.putIfAbsent((java.lang.Object) atomikosProperties16, (java.lang.Object) "{10=#}");
        boolean boolean34 = properties1.containsKey((java.lang.Object) (byte) -1);
        java.util.Properties properties35 = null;
        java.util.Properties properties36 = new java.util.Properties(properties35);
        boolean boolean37 = properties36.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery38 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int39 = recovery38.getMaxRetries();
        boolean boolean40 = properties36.containsKey((java.lang.Object) recovery38);
        properties36.clear();
        java.util.Properties properties42 = null;
        java.util.Properties properties43 = new java.util.Properties(properties42);
        boolean boolean44 = properties43.isEmpty();
        java.lang.String str46 = properties43.getProperty("hi!");
        boolean boolean48 = properties43.contains((java.lang.Object) 10.0f);
        java.util.Set<java.lang.Object> objSet49 = properties43.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties50.setCheckpointInterval((long) (byte) -1);
        atomikosProperties50.setThreadedTwoPhaseCommit(true);
        java.lang.String str55 = atomikosProperties50.getOutputDir();
        atomikosProperties50.setConsoleFileName("tmlog");
        boolean boolean58 = properties43.contains((java.lang.Object) "tmlog");
        java.lang.Object obj59 = properties36.get((java.lang.Object) properties43);
        java.lang.String str61 = properties36.getProperty("{}");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean62 = properties1.containsKey((java.lang.Object) str61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objSet49);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(str61);
    }

    @Test
    public void test00119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00119");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Properties properties3 = new java.util.Properties(properties1);
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        boolean boolean6 = properties5.isEmpty();
        java.lang.String str8 = properties5.getProperty("hi!");
        java.util.Set<java.lang.Object> objSet9 = properties5.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties5.entrySet();
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties12.elements();
        java.util.Properties properties14 = null;
        java.util.Properties properties15 = new java.util.Properties(properties14);
        boolean boolean16 = properties15.isEmpty();
        java.util.Properties properties17 = new java.util.Properties(properties15);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet18 = properties15.entrySet();
        java.lang.Object obj19 = properties5.getOrDefault((java.lang.Object) properties12, (java.lang.Object) objEntrySet18);
        boolean boolean20 = properties1.containsKey((java.lang.Object) objEntrySet18);
        java.lang.String str23 = properties1.getProperty("", "");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(objSet9);
        org.junit.Assert.assertNotNull(objEntrySet10);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objEntrySet18);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "[]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "[]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test00120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00120");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery2 = atomikosProperties0.getRecovery();
        recovery2.setRetryInterval(10000L);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(recovery2);
    }

    @Test
    public void test00121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00121");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = null;
        java.util.Properties properties2 = new java.util.Properties(properties1);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties5.elements();
        java.lang.String str8 = properties5.getProperty("");
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        boolean boolean13 = properties12.isEmpty();
        boolean boolean14 = properties2.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean13);
        boolean boolean15 = properties2.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setCheckpointInterval((long) (byte) -1);
        atomikosProperties17.setConsoleFileName("");
        java.lang.String str22 = atomikosProperties17.getLogBaseName();
        long long23 = atomikosProperties17.getCheckpointInterval();
        java.lang.String str24 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.setEnableLogging(true);
        java.lang.Object obj27 = properties0.putIfAbsent((java.lang.Object) objEnumeration16, (java.lang.Object) atomikosProperties17);
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties0.keys();
        java.lang.String str30 = properties0.getProperty("tm.out");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration<?> wildcardEnumeration31 = properties0.propertyNames();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Collections$EmptyEnumeration cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test00122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00122");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        boolean boolean3 = properties1.isEmpty();
        java.io.InputStream inputStream4 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.loadFromXML(inputStream4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test00123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00123");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        boolean boolean3 = properties1.isEmpty();
        java.util.Set<java.lang.String> strSet4 = properties1.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties5.setCheckpointInterval((long) (byte) -1);
        atomikosProperties5.setThreadedTwoPhaseCommit(true);
        java.lang.String str10 = atomikosProperties5.getOutputDir();
        java.util.Properties properties11 = atomikosProperties5.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setCheckpointInterval((long) (byte) -1);
        atomikosProperties12.setThreadedTwoPhaseCommit(true);
        atomikosProperties12.setSerialJtaTransactions(false);
        atomikosProperties12.setOutputDir("");
        java.lang.String str21 = atomikosProperties12.getConsoleFileName();
        java.lang.String str22 = atomikosProperties12.getLogBaseName();
        atomikosProperties12.setDefaultJtaTimeout(0L);
        java.lang.Object obj25 = properties1.putIfAbsent((java.lang.Object) atomikosProperties5, (java.lang.Object) atomikosProperties12);
        atomikosProperties5.setLogBaseDir("hi!");
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tm.out" + "'", str21, "tm.out");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertNull(obj25);
    }

    @Test
    public void test00124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00124");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.lang.String str4 = properties1.getProperty("hi!");
        java.io.OutputStream outputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(outputStream5, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test00125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00125");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.lang.String str4 = properties1.getProperty("hi!");
        boolean boolean6 = properties1.contains((java.lang.Object) 10.0f);
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties9.elements();
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties12.elements();
        java.lang.String str15 = properties12.getProperty("");
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties12);
        java.util.Properties properties18 = null;
        java.util.Properties properties19 = new java.util.Properties(properties18);
        boolean boolean20 = properties19.isEmpty();
        boolean boolean21 = properties9.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean20);
        boolean boolean22 = properties9.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties9.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.setCheckpointInterval((long) (byte) -1);
        atomikosProperties24.setConsoleFileName("");
        java.lang.String str29 = atomikosProperties24.getLogBaseName();
        long long30 = atomikosProperties24.getCheckpointInterval();
        java.lang.String str31 = atomikosProperties24.getLogBaseDir();
        atomikosProperties24.setEnableLogging(true);
        java.lang.Object obj34 = properties7.putIfAbsent((java.lang.Object) objEnumeration23, (java.lang.Object) atomikosProperties24);
        java.util.Properties properties35 = null;
        java.util.Properties properties36 = new java.util.Properties(properties35);
        boolean boolean37 = properties36.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery38 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int39 = recovery38.getMaxRetries();
        boolean boolean40 = properties36.containsKey((java.lang.Object) recovery38);
        recovery38.setRetryInterval((long) (short) -1);
        recovery38.setDelay(10L);
        java.util.Properties properties45 = null;
        java.util.Properties properties46 = new java.util.Properties(properties45);
        boolean boolean47 = properties46.isEmpty();
        java.lang.Object obj48 = properties7.getOrDefault((java.lang.Object) recovery38, (java.lang.Object) properties46);
        java.lang.Object obj49 = properties1.remove((java.lang.Object) recovery38);
        properties1.clear();
        java.util.Properties properties51 = null;
        java.util.Properties properties52 = new java.util.Properties(properties51);
        boolean boolean53 = properties52.isEmpty();
        java.lang.String str55 = properties52.getProperty("hi!");
        boolean boolean57 = properties52.contains((java.lang.Object) 10.0f);
        boolean boolean58 = properties52.isEmpty();
        boolean boolean59 = properties1.containsValue((java.lang.Object) properties52);
        java.io.InputStream inputStream60 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(inputStream60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "{}");
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test00126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00126");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.lang.String str4 = properties1.getProperty("hi!");
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        boolean boolean8 = properties7.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int10 = recovery9.getMaxRetries();
        boolean boolean11 = properties7.containsKey((java.lang.Object) recovery9);
        recovery9.setRetryInterval((long) (short) -1);
        recovery9.setRetryInterval((long) 0);
        recovery9.setMaxRetries((int) (byte) 10);
        java.lang.Class<?> wildcardClass18 = recovery9.getClass();
        java.lang.Object obj19 = properties1.replace((java.lang.Object) (byte) -1, (java.lang.Object) recovery9);
        java.io.OutputStream outputStream20 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream20, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNull(obj19);
    }

    @Test
    public void test00127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00127");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        boolean boolean3 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties4.setCheckpointInterval((long) (byte) -1);
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties4.getRecovery();
        recovery8.setForgetOrphanedLogEntriesDelay((long) 50);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties11.setCheckpointInterval((long) (byte) -1);
        atomikosProperties11.setThreadedTwoPhaseCommit(false);
        atomikosProperties11.setConsoleFileCount((int) 'a');
        boolean boolean18 = atomikosProperties11.isForceShutdownOnVmExit();
        java.lang.String str19 = atomikosProperties11.getOutputDir();
        java.lang.Object obj20 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean21 = properties1.replace((java.lang.Object) 50, (java.lang.Object) str19, obj20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test00128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00128");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) (byte) -1);
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.setOutputDir("");
        long long9 = atomikosProperties0.getCheckpointInterval();
        int int10 = atomikosProperties0.getConsoleFileCount();
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test00129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00129");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet3 = properties1.entrySet();
        java.lang.Object obj6 = properties1.setProperty("tm.out", "hi!");
        boolean boolean7 = properties1.isEmpty();
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties9.elements();
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties12.elements();
        java.lang.String str15 = properties12.getProperty("");
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties12);
        boolean boolean18 = properties9.contains((java.lang.Object) 0);
        boolean boolean19 = properties1.containsValue((java.lang.Object) boolean18);
        java.io.Writer writer20 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(writer20, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEntrySet3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test00130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00130");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        boolean boolean4 = properties1.contains((java.lang.Object) 1L);
        boolean boolean5 = properties1.isEmpty();
        java.lang.String str8 = properties1.getProperty("", "");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test00131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00131");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean13 = properties1.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean12);
        boolean boolean14 = properties1.isEmpty();
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties16.elements();
        boolean boolean19 = properties16.containsKey((java.lang.Object) 10.0f);
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties16);
        java.lang.String str23 = properties1.getProperty("hi!", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str23, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
    }

    @Test
    public void test00132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00132");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean13 = properties1.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean12);
        boolean boolean14 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setConsoleFileName("tm.out");
        java.util.Properties properties19 = new java.util.Properties();
        java.util.Properties properties22 = null;
        java.util.Properties properties23 = new java.util.Properties(properties22);
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties23.elements();
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties26.elements();
        java.lang.String str29 = properties26.getProperty("");
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        java.util.Properties properties32 = null;
        java.util.Properties properties33 = new java.util.Properties(properties32);
        boolean boolean34 = properties33.isEmpty();
        boolean boolean35 = properties23.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean34);
        boolean boolean36 = properties23.isEmpty();
        boolean boolean37 = properties19.replace((java.lang.Object) 100.0f, (java.lang.Object) true, (java.lang.Object) properties23);
        boolean boolean38 = properties1.replace((java.lang.Object) ' ', (java.lang.Object) "tm.out", (java.lang.Object) boolean37);
        boolean boolean40 = properties1.equals((java.lang.Object) ' ');
        java.io.Writer writer41 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(writer41, "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test00133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00133");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties7.elements();
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties10.elements();
        java.lang.String str13 = properties10.getProperty("");
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj19 = properties7.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties16);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel20 = atomikosProperties16.getConsoleLogLevel();
        int int21 = atomikosProperties16.getConsoleFileCount();
        java.lang.Object obj22 = properties1.get((java.lang.Object) atomikosProperties16);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties23.setCheckpointInterval((long) (byte) -1);
        atomikosProperties23.setConsoleFileName("");
        java.lang.String str28 = atomikosProperties23.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setCheckpointInterval((long) (byte) -1);
        atomikosProperties29.setThreadedTwoPhaseCommit(true);
        java.util.Properties properties34 = null;
        java.util.Properties properties35 = new java.util.Properties(properties34);
        java.util.Enumeration<java.lang.Object> objEnumeration36 = properties35.elements();
        java.util.Properties properties37 = null;
        java.util.Properties properties38 = new java.util.Properties(properties37);
        java.util.Enumeration<java.lang.Object> objEnumeration39 = properties38.elements();
        java.lang.String str41 = properties38.getProperty("");
        properties35.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj47 = properties35.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties44);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel48 = atomikosProperties44.getConsoleLogLevel();
        atomikosProperties29.setConsoleLogLevel(atomikosLoggingLevel48);
        atomikosProperties23.setConsoleLogLevel(atomikosLoggingLevel48);
        atomikosProperties23.setConsoleFileCount(5);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery53 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery53.setMaxRetries((-1));
        long long56 = recovery53.getRetryInterval();
        java.lang.Object obj57 = properties1.replace((java.lang.Object) 5, (java.lang.Object) long56);
        java.lang.Object obj58 = properties1.clone();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet59 = properties1.entrySet();
        java.util.Enumeration<?> wildcardEnumeration60 = properties1.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery61 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int62 = recovery61.getMaxRetries();
        recovery61.setForgetOrphanedLogEntriesDelay((-1L));
        recovery61.setForgetOrphanedLogEntriesDelay((long) (-1));
        int int67 = recovery61.getMaxRetries();
        long long68 = recovery61.getForgetOrphanedLogEntriesDelay();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties69 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties69.setCheckpointInterval((long) (byte) -1);
        atomikosProperties69.setConsoleFileName("");
        java.lang.String str74 = atomikosProperties69.getLogBaseName();
        long long75 = atomikosProperties69.getCheckpointInterval();
        java.lang.String str76 = atomikosProperties69.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties77 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties77.setCheckpointInterval((long) (byte) -1);
        atomikosProperties77.setThreadedTwoPhaseCommit(true);
        java.util.Properties properties82 = null;
        java.util.Properties properties83 = new java.util.Properties(properties82);
        java.util.Enumeration<java.lang.Object> objEnumeration84 = properties83.elements();
        java.util.Properties properties85 = null;
        java.util.Properties properties86 = new java.util.Properties(properties85);
        java.util.Enumeration<java.lang.Object> objEnumeration87 = properties86.elements();
        java.lang.String str89 = properties86.getProperty("");
        properties83.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties86);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties92 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties92.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj95 = properties83.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties92);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel96 = atomikosProperties92.getConsoleLogLevel();
        atomikosProperties77.setConsoleLogLevel(atomikosLoggingLevel96);
        atomikosProperties69.setConsoleLogLevel(atomikosLoggingLevel96);
        java.lang.Object obj99 = properties1.getOrDefault((java.lang.Object) long68, (java.lang.Object) atomikosLoggingLevel96);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel20 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel20.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertNotNull(objEnumeration36);
        org.junit.Assert.assertNotNull(objEnumeration39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel48 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel48.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 10000L + "'", long56 == 10000L);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "{}");
        org.junit.Assert.assertNotNull(objEntrySet59);
        org.junit.Assert.assertNotNull(wildcardEnumeration60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 5 + "'", int62 == 5);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 5 + "'", int67 == 5);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-1L) + "'", long68 == (-1L));
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "tmlog" + "'", str74, "tmlog");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-1L) + "'", long75 == (-1L));
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(objEnumeration84);
        org.junit.Assert.assertNotNull(objEnumeration87);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNull(obj95);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel96 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel96.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + obj99 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", obj99.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test00134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00134");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getMaxActives();
        java.lang.String str2 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.setConsoleFileCount(0);
        atomikosProperties0.setConsoleFileCount((int) ' ');
        java.lang.Class<?> wildcardClass7 = atomikosProperties0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 50 + "'", int1 == 50);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test00135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00135");
        java.util.Properties properties0 = new java.util.Properties();
        java.io.Writer writer1 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(writer1, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00136");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        boolean boolean4 = properties1.containsKey((java.lang.Object) 10.0f);
        java.util.Properties properties5 = null;
        java.util.Properties properties6 = new java.util.Properties(properties5);
        java.util.Enumeration<java.lang.Object> objEnumeration7 = properties6.elements();
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties9.elements();
        java.lang.String str12 = properties9.getProperty("");
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        java.util.Enumeration<?> wildcardEnumeration14 = properties6.propertyNames();
        boolean boolean15 = properties1.containsValue((java.lang.Object) wildcardEnumeration14);
        java.util.Properties properties16 = null;
        java.util.Properties properties17 = new java.util.Properties(properties16);
        boolean boolean18 = properties17.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery19 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int20 = recovery19.getMaxRetries();
        boolean boolean21 = properties17.containsKey((java.lang.Object) recovery19);
        properties17.clear();
        boolean boolean24 = properties17.containsKey((java.lang.Object) "hi!");
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        boolean boolean27 = properties26.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties28.setCheckpointInterval((long) (byte) -1);
        atomikosProperties28.setConsoleFileName("");
        java.lang.String str33 = atomikosProperties28.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties34.setCheckpointInterval((long) (byte) -1);
        atomikosProperties34.setThreadedTwoPhaseCommit(true);
        java.util.Properties properties39 = null;
        java.util.Properties properties40 = new java.util.Properties(properties39);
        java.util.Enumeration<java.lang.Object> objEnumeration41 = properties40.elements();
        java.util.Properties properties42 = null;
        java.util.Properties properties43 = new java.util.Properties(properties42);
        java.util.Enumeration<java.lang.Object> objEnumeration44 = properties43.elements();
        java.lang.String str46 = properties43.getProperty("");
        properties40.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties43);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties49.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj52 = properties40.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties49);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel53 = atomikosProperties49.getConsoleLogLevel();
        atomikosProperties34.setConsoleLogLevel(atomikosLoggingLevel53);
        atomikosProperties28.setConsoleLogLevel(atomikosLoggingLevel53);
        boolean boolean57 = properties17.replace((java.lang.Object) properties26, (java.lang.Object) atomikosProperties28, (java.lang.Object) 10.0d);
        java.lang.Object obj58 = properties1.remove((java.lang.Object) properties17);
        java.io.InputStream inputStream59 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.loadFromXML(inputStream59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objEnumeration7);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(wildcardEnumeration14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tmlog" + "'", str33, "tmlog");
        org.junit.Assert.assertNotNull(objEnumeration41);
        org.junit.Assert.assertNotNull(objEnumeration44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel53 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel53.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(obj58);
    }

    @Test
    public void test00137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00137");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        boolean boolean4 = properties1.contains((java.lang.Object) 1L);
        int int5 = properties1.size();
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties1.keys();
        java.io.Writer writer7 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(writer7, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(objEnumeration6);
    }

    @Test
    public void test00138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00138");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = null;
        java.util.Properties properties2 = new java.util.Properties(properties1);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties5.elements();
        java.lang.String str8 = properties5.getProperty("");
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        boolean boolean13 = properties12.isEmpty();
        boolean boolean14 = properties2.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean13);
        boolean boolean15 = properties2.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setCheckpointInterval((long) (byte) -1);
        atomikosProperties17.setConsoleFileName("");
        java.lang.String str22 = atomikosProperties17.getLogBaseName();
        long long23 = atomikosProperties17.getCheckpointInterval();
        java.lang.String str24 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.setEnableLogging(true);
        java.lang.Object obj27 = properties0.putIfAbsent((java.lang.Object) objEnumeration16, (java.lang.Object) atomikosProperties17);
        java.io.InputStream inputStream28 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.loadFromXML(inputStream28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(obj27);
    }

    @Test
    public void test00139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00139");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        java.util.Properties properties14 = null;
        java.util.Properties properties15 = new java.util.Properties(properties14);
        boolean boolean16 = properties15.isEmpty();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.lang.Object obj18 = properties1.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setCheckpointInterval((long) (byte) -1);
        atomikosProperties19.setThreadedTwoPhaseCommit(true);
        java.lang.String str24 = atomikosProperties19.getOutputDir();
        java.util.Properties properties25 = atomikosProperties19.asProperties();
        java.lang.Object obj26 = properties1.remove((java.lang.Object) properties25);
        java.util.Properties properties27 = null;
        java.util.Properties properties28 = new java.util.Properties(properties27);
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties28.elements();
        java.util.Properties properties30 = null;
        java.util.Properties properties31 = new java.util.Properties(properties30);
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties31.elements();
        java.lang.String str34 = properties31.getProperty("");
        properties28.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties31);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties37.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj40 = properties28.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties37);
        java.util.Properties properties41 = null;
        java.util.Properties properties42 = new java.util.Properties(properties41);
        boolean boolean43 = properties42.isEmpty();
        properties28.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties42);
        java.lang.Object obj45 = properties28.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str47 = atomikosProperties46.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery48 = atomikosProperties46.getRecovery();
        atomikosProperties46.setEnableLogging(false);
        boolean boolean51 = properties28.equals((java.lang.Object) atomikosProperties46);
        boolean boolean52 = properties25.contains((java.lang.Object) atomikosProperties46);
        java.io.OutputStream outputStream53 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties25.store(outputStream53, "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertNotNull(objEnumeration32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(recovery48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test00140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00140");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties3.elements();
        java.util.Properties properties5 = null;
        java.util.Properties properties6 = new java.util.Properties(properties5);
        java.util.Enumeration<java.lang.Object> objEnumeration7 = properties6.elements();
        java.lang.String str9 = properties6.getProperty("");
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties6);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj15 = properties3.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties12);
        atomikosProperties12.setSerialJtaTransactions(false);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel18 = atomikosProperties12.getConsoleLogLevel();
        java.lang.Object obj19 = properties0.putIfAbsent((java.lang.Object) 1, (java.lang.Object) atomikosProperties12);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration<?> wildcardEnumeration20 = properties0.propertyNames();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Integer cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objEnumeration7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel18 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel18.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj19);
    }

    @Test
    public void test00141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00141");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = null;
        java.util.Properties properties2 = new java.util.Properties(properties1);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties5.elements();
        java.lang.String str8 = properties5.getProperty("");
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        boolean boolean13 = properties12.isEmpty();
        boolean boolean14 = properties2.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean13);
        boolean boolean15 = properties2.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setCheckpointInterval((long) (byte) -1);
        atomikosProperties17.setConsoleFileName("");
        java.lang.String str22 = atomikosProperties17.getLogBaseName();
        long long23 = atomikosProperties17.getCheckpointInterval();
        java.lang.String str24 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.setEnableLogging(true);
        java.lang.Object obj27 = properties0.putIfAbsent((java.lang.Object) objEnumeration16, (java.lang.Object) atomikosProperties17);
        java.util.Properties properties28 = null;
        java.util.Properties properties29 = new java.util.Properties(properties28);
        boolean boolean30 = properties29.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery31 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int32 = recovery31.getMaxRetries();
        boolean boolean33 = properties29.containsKey((java.lang.Object) recovery31);
        recovery31.setRetryInterval((long) (short) -1);
        recovery31.setDelay(10L);
        java.util.Properties properties38 = null;
        java.util.Properties properties39 = new java.util.Properties(properties38);
        boolean boolean40 = properties39.isEmpty();
        java.lang.Object obj41 = properties0.getOrDefault((java.lang.Object) recovery31, (java.lang.Object) properties39);
        java.lang.Class<?> wildcardClass42 = obj41.getClass();
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "{}");
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test00142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00142");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet3 = properties1.entrySet();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Object obj6 = properties1.replace((java.lang.Object) "hi!", obj5);
        boolean boolean8 = properties1.equals((java.lang.Object) 1.0f);
        java.util.Properties properties9 = new java.util.Properties(properties1);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery13 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int14 = recovery13.getMaxRetries();
        boolean boolean15 = properties11.containsKey((java.lang.Object) recovery13);
        java.util.Properties properties16 = null;
        java.util.Properties properties17 = new java.util.Properties(properties16);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties17.elements();
        java.util.Properties properties19 = null;
        java.util.Properties properties20 = new java.util.Properties(properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties20.elements();
        java.lang.String str23 = properties20.getProperty("");
        properties17.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj29 = properties17.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties26);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel30 = atomikosProperties26.getConsoleLogLevel();
        int int31 = atomikosProperties26.getConsoleFileCount();
        java.lang.Object obj32 = properties11.get((java.lang.Object) atomikosProperties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.setCheckpointInterval((long) (byte) -1);
        atomikosProperties33.setConsoleFileName("");
        java.lang.String str38 = atomikosProperties33.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties39.setCheckpointInterval((long) (byte) -1);
        atomikosProperties39.setThreadedTwoPhaseCommit(true);
        java.util.Properties properties44 = null;
        java.util.Properties properties45 = new java.util.Properties(properties44);
        java.util.Enumeration<java.lang.Object> objEnumeration46 = properties45.elements();
        java.util.Properties properties47 = null;
        java.util.Properties properties48 = new java.util.Properties(properties47);
        java.util.Enumeration<java.lang.Object> objEnumeration49 = properties48.elements();
        java.lang.String str51 = properties48.getProperty("");
        properties45.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties48);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties54.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj57 = properties45.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties54);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel58 = atomikosProperties54.getConsoleLogLevel();
        atomikosProperties39.setConsoleLogLevel(atomikosLoggingLevel58);
        atomikosProperties33.setConsoleLogLevel(atomikosLoggingLevel58);
        atomikosProperties33.setConsoleFileCount(5);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery63 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery63.setMaxRetries((-1));
        long long66 = recovery63.getRetryInterval();
        java.lang.Object obj67 = properties11.replace((java.lang.Object) 5, (java.lang.Object) long66);
        java.lang.Object obj68 = properties11.clone();
        boolean boolean69 = properties9.contains((java.lang.Object) properties11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties70 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str71 = atomikosProperties70.getLogBaseDir();
        java.lang.String str72 = atomikosProperties70.getLogBaseDir();
        int int73 = atomikosProperties70.getConsoleFileCount();
        boolean boolean74 = properties11.contains((java.lang.Object) atomikosProperties70);
        java.io.OutputStream outputStream75 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties11.storeToXML(outputStream75, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEntrySet3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel30 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel30.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNotNull(objEnumeration46);
        org.junit.Assert.assertNotNull(objEnumeration49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel58 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel58.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 10000L + "'", long66 == 10000L);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "{}");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test00143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00143");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        java.util.Properties properties14 = null;
        java.util.Properties properties15 = new java.util.Properties(properties14);
        boolean boolean16 = properties15.isEmpty();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.util.Properties properties18 = null;
        java.util.Properties properties19 = new java.util.Properties(properties18);
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties19.elements();
        java.lang.String str22 = properties19.getProperty("");
        java.util.Set<java.lang.String> strSet23 = properties19.stringPropertyNames();
        java.lang.Object obj24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj25 = properties1.replace((java.lang.Object) strSet23, obj24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strSet23);
    }

    @Test
    public void test00144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00144");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Properties properties3 = new java.util.Properties(properties1);
        java.lang.Object obj6 = properties1.setProperty("{}", "");
        java.io.OutputStream outputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.save(outputStream7, "{10=#}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test00145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00145");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean13 = properties1.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean12);
        properties1.clear();
        int int15 = properties1.size();
        java.io.OutputStream outputStream16 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.save(outputStream16, "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test00146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00146");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Collection<java.lang.Object> objCollection9 = properties4.values();
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties4.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties11.setCheckpointInterval((long) (byte) -1);
        atomikosProperties11.setThreadedTwoPhaseCommit(true);
        atomikosProperties11.setSerialJtaTransactions(false);
        atomikosProperties11.setOutputDir("");
        int int20 = atomikosProperties11.getConsoleFileCount();
        java.util.Properties properties21 = null;
        java.util.Properties properties22 = new java.util.Properties(properties21);
        java.lang.Object obj25 = properties22.setProperty("{10=#}", "tm.out");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = properties4.remove((java.lang.Object) int20, obj25);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNull(obj25);
    }

    @Test
    public void test00147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00147");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Properties properties3 = new java.util.Properties(properties1);
        java.util.Collection<java.lang.Object> objCollection4 = properties1.values();
        java.lang.String str5 = properties1.toString();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        boolean boolean8 = properties7.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet9 = properties7.entrySet();
        java.lang.Object obj11 = new java.lang.Object();
        java.lang.Object obj12 = properties7.replace((java.lang.Object) "hi!", obj11);
        boolean boolean14 = properties7.equals((java.lang.Object) 1.0f);
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties7.keys();
        java.util.Properties properties16 = null;
        java.util.Properties properties17 = new java.util.Properties(properties16);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties17.elements();
        java.util.Properties properties19 = null;
        java.util.Properties properties20 = new java.util.Properties(properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties20.elements();
        java.lang.String str23 = properties20.getProperty("");
        properties17.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties20);
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        boolean boolean28 = properties27.isEmpty();
        boolean boolean29 = properties17.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean28);
        properties17.clear();
        int int31 = properties17.size();
        java.util.Set<java.lang.Object> objSet32 = properties17.keySet();
        java.lang.Object obj33 = properties1.putIfAbsent((java.lang.Object) properties7, (java.lang.Object) properties17);
        java.io.PrintWriter printWriter34 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printWriter34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objEntrySet9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(objSet32);
        org.junit.Assert.assertNull(obj33);
    }

    @Test
    public void test00148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00148");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.lang.String str4 = properties1.getProperty("hi!");
        boolean boolean6 = properties1.contains((java.lang.Object) 10.0f);
        java.util.Set<java.lang.Object> objSet7 = properties1.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int9 = atomikosProperties8.getMaxActives();
        boolean boolean10 = properties1.equals((java.lang.Object) atomikosProperties8);
        java.io.Writer writer11 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(writer11, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test00149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00149");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.io.OutputStream outputStream2 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream2, "tm.out", "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00150");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet3 = properties1.entrySet();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Object obj6 = properties1.replace((java.lang.Object) "hi!", obj5);
        boolean boolean8 = properties1.equals((java.lang.Object) 1.0f);
        java.util.Properties properties9 = new java.util.Properties(properties1);
        java.io.OutputStream outputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties9.storeToXML(outputStream10, "tmlog", "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEntrySet3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test00151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00151");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean13 = properties1.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean12);
        boolean boolean14 = properties1.isEmpty();
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        boolean boolean17 = properties16.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int19 = recovery18.getMaxRetries();
        boolean boolean20 = properties16.containsKey((java.lang.Object) recovery18);
        properties16.clear();
        boolean boolean23 = properties16.containsKey((java.lang.Object) "hi!");
        java.util.Properties properties24 = null;
        java.util.Properties properties25 = new java.util.Properties(properties24);
        boolean boolean26 = properties25.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.setCheckpointInterval((long) (byte) -1);
        atomikosProperties27.setConsoleFileName("");
        java.lang.String str32 = atomikosProperties27.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.setCheckpointInterval((long) (byte) -1);
        atomikosProperties33.setThreadedTwoPhaseCommit(true);
        java.util.Properties properties38 = null;
        java.util.Properties properties39 = new java.util.Properties(properties38);
        java.util.Enumeration<java.lang.Object> objEnumeration40 = properties39.elements();
        java.util.Properties properties41 = null;
        java.util.Properties properties42 = new java.util.Properties(properties41);
        java.util.Enumeration<java.lang.Object> objEnumeration43 = properties42.elements();
        java.lang.String str45 = properties42.getProperty("");
        properties39.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties42);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties48.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj51 = properties39.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties48);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel52 = atomikosProperties48.getConsoleLogLevel();
        atomikosProperties33.setConsoleLogLevel(atomikosLoggingLevel52);
        atomikosProperties27.setConsoleLogLevel(atomikosLoggingLevel52);
        boolean boolean56 = properties16.replace((java.lang.Object) properties25, (java.lang.Object) atomikosProperties27, (java.lang.Object) 10.0d);
        java.util.Properties properties57 = new java.util.Properties(properties16);
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties57);
        java.io.OutputStream outputStream59 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties57.store(outputStream59, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tmlog" + "'", str32, "tmlog");
        org.junit.Assert.assertNotNull(objEnumeration40);
        org.junit.Assert.assertNotNull(objEnumeration43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel52 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel52.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test00152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00152");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Enumeration<?> wildcardEnumeration9 = properties1.propertyNames();
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        java.util.Enumeration<java.lang.Object> objEnumeration12 = properties11.elements();
        java.util.Properties properties13 = null;
        java.util.Properties properties14 = new java.util.Properties(properties13);
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties14.elements();
        java.lang.String str17 = properties14.getProperty("");
        properties11.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties14);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj23 = properties11.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties20);
        atomikosProperties20.setSerialJtaTransactions(false);
        atomikosProperties20.setOutputDir("");
        boolean boolean28 = properties1.containsKey((java.lang.Object) "");
        java.util.Properties properties30 = null;
        java.util.Properties properties31 = new java.util.Properties(properties30);
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties31.elements();
        java.util.Properties properties33 = null;
        java.util.Properties properties34 = new java.util.Properties(properties33);
        java.util.Enumeration<java.lang.Object> objEnumeration35 = properties34.elements();
        java.lang.String str37 = properties34.getProperty("");
        properties31.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties34);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties40.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj43 = properties31.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties40);
        atomikosProperties40.setSerialJtaTransactions(false);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel46 = atomikosProperties40.getConsoleLogLevel();
        java.lang.String str47 = atomikosProperties40.getTransactionManagerUniqueName();
        java.lang.Object obj48 = properties1.replace((java.lang.Object) "hi!", (java.lang.Object) atomikosProperties40);
        boolean boolean49 = properties1.isEmpty();
        java.io.OutputStream outputStream50 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream50, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(wildcardEnumeration9);
        org.junit.Assert.assertNotNull(objEnumeration12);
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objEnumeration32);
        org.junit.Assert.assertNotNull(objEnumeration35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel46 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel46.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test00153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00153");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        long long6 = recovery3.getDelay();
        long long7 = recovery3.getRetryInterval();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
    }

    @Test
    public void test00154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00154");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) (byte) -1);
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        atomikosProperties0.setSerialJtaTransactions(false);
        java.lang.String str7 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setAllowSubTransactions(false);
        java.lang.String str10 = atomikosProperties0.getService();
        atomikosProperties0.setMaxActives((int) (short) 10);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test00155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00155");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Enumeration<?> wildcardEnumeration9 = properties1.propertyNames();
        boolean boolean10 = properties1.isEmpty();
        java.io.Reader reader11 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(reader11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(wildcardEnumeration9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test00156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00156");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = atomikosProperties10.getConsoleLogLevel();
        atomikosProperties10.setForceShutdownOnVmExit(true);
        java.lang.String str17 = atomikosProperties10.getOutputDir();
        atomikosProperties10.setTransactionManagerUniqueName("hi!");
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel14 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel14.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test00157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00157");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        boolean boolean4 = properties1.contains((java.lang.Object) 1L);
        java.util.Set<java.lang.Object> objSet5 = properties1.keySet();
        java.lang.Object obj8 = properties1.setProperty("", "");
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        boolean boolean11 = properties10.isEmpty();
        java.lang.String str13 = properties10.getProperty("hi!");
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        boolean boolean17 = properties16.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int19 = recovery18.getMaxRetries();
        boolean boolean20 = properties16.containsKey((java.lang.Object) recovery18);
        recovery18.setRetryInterval((long) (short) -1);
        recovery18.setRetryInterval((long) 0);
        recovery18.setMaxRetries((int) (byte) 10);
        java.lang.Class<?> wildcardClass27 = recovery18.getClass();
        java.lang.Object obj28 = properties10.replace((java.lang.Object) (byte) -1, (java.lang.Object) recovery18);
        java.util.Properties properties29 = null;
        java.util.Properties properties30 = new java.util.Properties(properties29);
        boolean boolean31 = properties30.isEmpty();
        java.lang.String str33 = properties30.getProperty("hi!");
        java.util.Set<java.lang.String> strSet34 = properties30.stringPropertyNames();
        java.lang.Object obj35 = new java.lang.Object();
        boolean boolean36 = properties1.replace((java.lang.Object) (byte) -1, (java.lang.Object) properties30, obj35);
        java.util.Properties properties37 = null;
        java.util.Properties properties38 = new java.util.Properties(properties37);
        java.util.Enumeration<java.lang.Object> objEnumeration39 = properties38.elements();
        boolean boolean40 = properties38.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration41 = properties38.keys();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties38);
        java.io.PrintStream printStream43 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printStream43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objSet5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objEnumeration39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objEnumeration41);
    }

    @Test
    public void test00158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00158");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet3 = properties1.entrySet();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Object obj6 = properties1.replace((java.lang.Object) "hi!", obj5);
        boolean boolean8 = properties1.equals((java.lang.Object) 1.0f);
        java.util.Properties properties9 = new java.util.Properties(properties1);
        java.io.OutputStream outputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties9.save(outputStream10, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEntrySet3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test00159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00159");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        boolean boolean4 = properties1.containsKey((java.lang.Object) 10.0f);
        java.util.Properties properties5 = null;
        java.util.Properties properties6 = new java.util.Properties(properties5);
        java.util.Enumeration<java.lang.Object> objEnumeration7 = properties6.elements();
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties9.elements();
        java.lang.String str12 = properties9.getProperty("");
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        java.util.Collection<java.lang.Object> objCollection14 = properties9.values();
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties9.elements();
        java.lang.Object obj16 = properties1.remove((java.lang.Object) properties9);
        java.io.Writer writer17 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(writer17, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objEnumeration7);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(objCollection14);
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertNull(obj16);
    }

    @Test
    public void test00160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00160");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        boolean boolean3 = properties1.isEmpty();
        java.util.Set<java.lang.String> strSet4 = properties1.stringPropertyNames();
        java.util.Properties properties5 = null;
        java.util.Properties properties6 = new java.util.Properties(properties5);
        boolean boolean7 = properties6.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int9 = recovery8.getMaxRetries();
        boolean boolean10 = properties6.containsKey((java.lang.Object) recovery8);
        recovery8.setRetryInterval((long) (short) -1);
        recovery8.setRetryInterval((long) 0);
        recovery8.setMaxRetries((int) (byte) 10);
        java.lang.Class<?> wildcardClass17 = recovery8.getClass();
        boolean boolean18 = properties1.contains((java.lang.Object) recovery8);
        java.lang.String str21 = properties1.getProperty("tm.out", "tm.out");
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tm.out" + "'", str21, "tm.out");
    }

    @Test
    public void test00161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00161");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        java.util.Properties properties14 = null;
        java.util.Properties properties15 = new java.util.Properties(properties14);
        boolean boolean16 = properties15.isEmpty();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.util.Properties properties18 = null;
        java.util.Properties properties19 = new java.util.Properties(properties18);
        boolean boolean20 = properties19.isEmpty();
        java.util.Properties properties21 = new java.util.Properties(properties19);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet22 = properties19.entrySet();
        java.lang.String str24 = properties19.getProperty("tmlog");
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties26.elements();
        java.util.Properties properties28 = null;
        java.util.Properties properties29 = new java.util.Properties(properties28);
        java.util.Enumeration<java.lang.Object> objEnumeration30 = properties29.elements();
        java.lang.String str32 = properties29.getProperty("");
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        java.util.Enumeration<?> wildcardEnumeration34 = properties26.propertyNames();
        java.util.Properties properties35 = null;
        java.util.Properties properties36 = new java.util.Properties(properties35);
        java.util.Enumeration<java.lang.Object> objEnumeration37 = properties36.elements();
        java.util.Properties properties38 = null;
        java.util.Properties properties39 = new java.util.Properties(properties38);
        java.util.Enumeration<java.lang.Object> objEnumeration40 = properties39.elements();
        java.lang.String str42 = properties39.getProperty("");
        properties36.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties39);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties45.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj48 = properties36.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties45);
        atomikosProperties45.setSerialJtaTransactions(false);
        atomikosProperties45.setOutputDir("");
        boolean boolean53 = properties26.containsKey((java.lang.Object) "");
        java.util.Properties properties55 = null;
        java.util.Properties properties56 = new java.util.Properties(properties55);
        java.util.Enumeration<java.lang.Object> objEnumeration57 = properties56.elements();
        java.util.Properties properties58 = null;
        java.util.Properties properties59 = new java.util.Properties(properties58);
        java.util.Enumeration<java.lang.Object> objEnumeration60 = properties59.elements();
        java.lang.String str62 = properties59.getProperty("");
        properties56.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties59);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties65.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj68 = properties56.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties65);
        atomikosProperties65.setSerialJtaTransactions(false);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel71 = atomikosProperties65.getConsoleLogLevel();
        java.lang.String str72 = atomikosProperties65.getTransactionManagerUniqueName();
        java.lang.Object obj73 = properties26.replace((java.lang.Object) "hi!", (java.lang.Object) atomikosProperties65);
        java.util.Collection<java.lang.Object> objCollection74 = properties26.values();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj75 = properties15.put((java.lang.Object) str24, (java.lang.Object) properties26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objEntrySet22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNotNull(objEnumeration30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(wildcardEnumeration34);
        org.junit.Assert.assertNotNull(objEnumeration37);
        org.junit.Assert.assertNotNull(objEnumeration40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objEnumeration57);
        org.junit.Assert.assertNotNull(objEnumeration60);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel71 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel71.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertNotNull(objCollection74);
    }

    @Test
    public void test00162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00162");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties7.elements();
        java.lang.String str10 = properties7.getProperty("");
        properties4.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.util.Properties properties13 = null;
        java.util.Properties properties14 = new java.util.Properties(properties13);
        boolean boolean15 = properties14.isEmpty();
        boolean boolean16 = properties4.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean15);
        boolean boolean17 = properties4.isEmpty();
        boolean boolean18 = properties0.replace((java.lang.Object) 100.0f, (java.lang.Object) true, (java.lang.Object) properties4);
        java.io.OutputStream outputStream19 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream19, "{}", "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test00163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00163");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.lang.String str4 = properties1.getProperty("hi!");
        boolean boolean6 = properties1.contains((java.lang.Object) 10.0f);
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties9.elements();
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties12.elements();
        java.lang.String str15 = properties12.getProperty("");
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties12);
        java.util.Properties properties18 = null;
        java.util.Properties properties19 = new java.util.Properties(properties18);
        boolean boolean20 = properties19.isEmpty();
        boolean boolean21 = properties9.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean20);
        boolean boolean22 = properties9.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties9.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.setCheckpointInterval((long) (byte) -1);
        atomikosProperties24.setConsoleFileName("");
        java.lang.String str29 = atomikosProperties24.getLogBaseName();
        long long30 = atomikosProperties24.getCheckpointInterval();
        java.lang.String str31 = atomikosProperties24.getLogBaseDir();
        atomikosProperties24.setEnableLogging(true);
        java.lang.Object obj34 = properties7.putIfAbsent((java.lang.Object) objEnumeration23, (java.lang.Object) atomikosProperties24);
        java.util.Properties properties35 = null;
        java.util.Properties properties36 = new java.util.Properties(properties35);
        boolean boolean37 = properties36.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery38 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int39 = recovery38.getMaxRetries();
        boolean boolean40 = properties36.containsKey((java.lang.Object) recovery38);
        recovery38.setRetryInterval((long) (short) -1);
        recovery38.setDelay(10L);
        java.util.Properties properties45 = null;
        java.util.Properties properties46 = new java.util.Properties(properties45);
        boolean boolean47 = properties46.isEmpty();
        java.lang.Object obj48 = properties7.getOrDefault((java.lang.Object) recovery38, (java.lang.Object) properties46);
        java.lang.Object obj49 = properties1.remove((java.lang.Object) recovery38);
        java.io.InputStream inputStream50 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.loadFromXML(inputStream50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "{}");
        org.junit.Assert.assertNull(obj49);
    }

    @Test
    public void test00164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00164");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        properties1.clear();
        boolean boolean8 = properties1.containsKey((java.lang.Object) "hi!");
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        boolean boolean11 = properties10.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setCheckpointInterval((long) (byte) -1);
        atomikosProperties12.setConsoleFileName("");
        java.lang.String str17 = atomikosProperties12.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setCheckpointInterval((long) (byte) -1);
        atomikosProperties18.setThreadedTwoPhaseCommit(true);
        java.util.Properties properties23 = null;
        java.util.Properties properties24 = new java.util.Properties(properties23);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties24.elements();
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties27.elements();
        java.lang.String str30 = properties27.getProperty("");
        properties24.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj36 = properties24.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties33);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel37 = atomikosProperties33.getConsoleLogLevel();
        atomikosProperties18.setConsoleLogLevel(atomikosLoggingLevel37);
        atomikosProperties12.setConsoleLogLevel(atomikosLoggingLevel37);
        boolean boolean41 = properties1.replace((java.lang.Object) properties10, (java.lang.Object) atomikosProperties12, (java.lang.Object) 10.0d);
        java.util.Properties properties42 = new java.util.Properties(properties1);
        java.util.Properties properties43 = null;
        java.util.Properties properties44 = new java.util.Properties(properties43);
        java.util.Enumeration<java.lang.Object> objEnumeration45 = properties44.elements();
        boolean boolean47 = properties44.containsKey((java.lang.Object) 10.0f);
        properties42.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties44);
        java.io.Reader reader49 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties44.load(reader49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel37 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel37.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objEnumeration45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test00165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00165");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        java.util.Properties properties14 = null;
        java.util.Properties properties15 = new java.util.Properties(properties14);
        boolean boolean16 = properties15.isEmpty();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.io.PrintStream printStream18 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printStream18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test00166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00166");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean13 = properties1.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean12);
        boolean boolean14 = properties1.isEmpty();
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        boolean boolean17 = properties16.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int19 = recovery18.getMaxRetries();
        boolean boolean20 = properties16.containsKey((java.lang.Object) recovery18);
        properties16.clear();
        boolean boolean23 = properties16.containsKey((java.lang.Object) "hi!");
        java.util.Properties properties24 = null;
        java.util.Properties properties25 = new java.util.Properties(properties24);
        boolean boolean26 = properties25.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.setCheckpointInterval((long) (byte) -1);
        atomikosProperties27.setConsoleFileName("");
        java.lang.String str32 = atomikosProperties27.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.setCheckpointInterval((long) (byte) -1);
        atomikosProperties33.setThreadedTwoPhaseCommit(true);
        java.util.Properties properties38 = null;
        java.util.Properties properties39 = new java.util.Properties(properties38);
        java.util.Enumeration<java.lang.Object> objEnumeration40 = properties39.elements();
        java.util.Properties properties41 = null;
        java.util.Properties properties42 = new java.util.Properties(properties41);
        java.util.Enumeration<java.lang.Object> objEnumeration43 = properties42.elements();
        java.lang.String str45 = properties42.getProperty("");
        properties39.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties42);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties48.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj51 = properties39.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties48);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel52 = atomikosProperties48.getConsoleLogLevel();
        atomikosProperties33.setConsoleLogLevel(atomikosLoggingLevel52);
        atomikosProperties27.setConsoleLogLevel(atomikosLoggingLevel52);
        boolean boolean56 = properties16.replace((java.lang.Object) properties25, (java.lang.Object) atomikosProperties27, (java.lang.Object) 10.0d);
        java.util.Properties properties57 = new java.util.Properties(properties16);
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties57);
        java.io.OutputStream outputStream59 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(outputStream59, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tmlog" + "'", str32, "tmlog");
        org.junit.Assert.assertNotNull(objEnumeration40);
        org.junit.Assert.assertNotNull(objEnumeration43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel52 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel52.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test00167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00167");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) (byte) -1);
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        java.util.Properties properties5 = null;
        java.util.Properties properties6 = new java.util.Properties(properties5);
        java.util.Enumeration<java.lang.Object> objEnumeration7 = properties6.elements();
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties9.elements();
        java.lang.String str12 = properties9.getProperty("");
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties15.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj18 = properties6.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties15);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel19 = atomikosProperties15.getConsoleLogLevel();
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel19);
        atomikosProperties0.setLogBaseName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        java.util.Properties properties23 = atomikosProperties0.asProperties();
        java.util.Properties properties24 = new java.util.Properties();
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties26.elements();
        java.util.Properties properties28 = null;
        java.util.Properties properties29 = new java.util.Properties(properties28);
        java.util.Enumeration<java.lang.Object> objEnumeration30 = properties29.elements();
        java.lang.String str32 = properties29.getProperty("");
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        java.util.Properties properties35 = null;
        java.util.Properties properties36 = new java.util.Properties(properties35);
        boolean boolean37 = properties36.isEmpty();
        boolean boolean38 = properties26.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean37);
        boolean boolean39 = properties26.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration40 = properties26.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties41.setCheckpointInterval((long) (byte) -1);
        atomikosProperties41.setConsoleFileName("");
        java.lang.String str46 = atomikosProperties41.getLogBaseName();
        long long47 = atomikosProperties41.getCheckpointInterval();
        java.lang.String str48 = atomikosProperties41.getLogBaseDir();
        atomikosProperties41.setEnableLogging(true);
        java.lang.Object obj51 = properties24.putIfAbsent((java.lang.Object) objEnumeration40, (java.lang.Object) atomikosProperties41);
        java.util.Properties properties52 = null;
        java.util.Properties properties53 = new java.util.Properties(properties52);
        boolean boolean54 = properties53.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery55 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int56 = recovery55.getMaxRetries();
        boolean boolean57 = properties53.containsKey((java.lang.Object) recovery55);
        recovery55.setRetryInterval((long) (short) -1);
        recovery55.setDelay(10L);
        java.util.Properties properties62 = null;
        java.util.Properties properties63 = new java.util.Properties(properties62);
        boolean boolean64 = properties63.isEmpty();
        java.lang.Object obj65 = properties24.getOrDefault((java.lang.Object) recovery55, (java.lang.Object) properties63);
        boolean boolean66 = properties23.contains((java.lang.Object) properties24);
        java.io.Writer writer67 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties23.store(writer67, "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration7);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel19 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel19.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNotNull(objEnumeration30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objEnumeration40);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "tmlog" + "'", str46, "tmlog");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5 + "'", int56 == 5);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "{}");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test00168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00168");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean13 = properties1.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean12);
        boolean boolean14 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties1.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setCheckpointInterval((long) (byte) -1);
        atomikosProperties16.setConsoleFileName("");
        java.lang.String str21 = atomikosProperties16.getLogBaseName();
        long long22 = atomikosProperties16.getCheckpointInterval();
        atomikosProperties16.setForceShutdownOnVmExit(false);
        atomikosProperties16.setTransactionManagerUniqueName("tmlog");
        atomikosProperties16.setLogBaseDir("");
        java.util.Properties properties29 = null;
        java.util.Properties properties30 = new java.util.Properties(properties29);
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties30.elements();
        java.util.Properties properties32 = null;
        java.util.Properties properties33 = new java.util.Properties(properties32);
        java.util.Enumeration<java.lang.Object> objEnumeration34 = properties33.elements();
        java.lang.String str36 = properties33.getProperty("");
        properties30.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties33);
        java.util.Properties properties39 = null;
        java.util.Properties properties40 = new java.util.Properties(properties39);
        boolean boolean41 = properties40.isEmpty();
        boolean boolean42 = properties30.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean41);
        boolean boolean43 = properties1.remove((java.lang.Object) "", (java.lang.Object) boolean42);
        java.util.Properties properties44 = null;
        java.util.Properties properties45 = new java.util.Properties(properties44);
        java.util.Enumeration<java.lang.Object> objEnumeration46 = properties45.elements();
        java.util.Properties properties47 = null;
        java.util.Properties properties48 = new java.util.Properties(properties47);
        java.util.Enumeration<java.lang.Object> objEnumeration49 = properties48.elements();
        java.lang.String str51 = properties48.getProperty("");
        properties45.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties48);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties54.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj57 = properties45.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties54);
        java.util.Properties properties58 = null;
        java.util.Properties properties59 = new java.util.Properties(properties58);
        boolean boolean60 = properties59.isEmpty();
        properties45.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties59);
        java.lang.Object obj62 = properties45.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties63.setCheckpointInterval((long) (byte) -1);
        atomikosProperties63.setThreadedTwoPhaseCommit(true);
        java.lang.String str68 = atomikosProperties63.getOutputDir();
        java.util.Properties properties69 = atomikosProperties63.asProperties();
        java.lang.Object obj70 = properties45.remove((java.lang.Object) properties69);
        boolean boolean71 = properties1.containsKey((java.lang.Object) properties45);
        java.lang.Object obj72 = null;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties73 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties73.setCheckpointInterval((long) (byte) -1);
        atomikosProperties73.setConsoleFileName("");
        java.lang.String str78 = atomikosProperties73.getLogBaseName();
        long long79 = atomikosProperties73.getCheckpointInterval();
        atomikosProperties73.setForceShutdownOnVmExit(false);
        int int82 = atomikosProperties73.getConsoleFileLimit();
        long long83 = atomikosProperties73.getDefaultJtaTimeout();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj84 = properties1.put(obj72, (java.lang.Object) long83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNotNull(objEnumeration31);
        org.junit.Assert.assertNotNull(objEnumeration34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objEnumeration46);
        org.junit.Assert.assertNotNull(objEnumeration49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(properties69);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "tmlog" + "'", str78, "tmlog");
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-1L) + "'", long79 == (-1L));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 10000L + "'", long83 == 10000L);
    }

    @Test
    public void test00169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00169");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        boolean boolean4 = properties1.contains((java.lang.Object) 1L);
        java.util.Set<java.lang.Object> objSet5 = properties1.keySet();
        java.lang.Object obj8 = properties1.setProperty("", "");
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        boolean boolean11 = properties10.isEmpty();
        java.lang.String str13 = properties10.getProperty("hi!");
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        boolean boolean17 = properties16.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int19 = recovery18.getMaxRetries();
        boolean boolean20 = properties16.containsKey((java.lang.Object) recovery18);
        recovery18.setRetryInterval((long) (short) -1);
        recovery18.setRetryInterval((long) 0);
        recovery18.setMaxRetries((int) (byte) 10);
        java.lang.Class<?> wildcardClass27 = recovery18.getClass();
        java.lang.Object obj28 = properties10.replace((java.lang.Object) (byte) -1, (java.lang.Object) recovery18);
        java.util.Properties properties29 = null;
        java.util.Properties properties30 = new java.util.Properties(properties29);
        boolean boolean31 = properties30.isEmpty();
        java.lang.String str33 = properties30.getProperty("hi!");
        java.util.Set<java.lang.String> strSet34 = properties30.stringPropertyNames();
        java.lang.Object obj35 = new java.lang.Object();
        boolean boolean36 = properties1.replace((java.lang.Object) (byte) -1, (java.lang.Object) properties30, obj35);
        java.io.OutputStream outputStream37 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream37, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objSet5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test00170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00170");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) (byte) -1);
        atomikosProperties0.setConsoleFileName("");
        long long5 = atomikosProperties0.getMaxTimeout();
        java.lang.Class<?> wildcardClass6 = atomikosProperties0.getClass();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test00171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00171");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int1 = recovery0.getMaxRetries();
        recovery0.setForgetOrphanedLogEntriesDelay((-1L));
        recovery0.setForgetOrphanedLogEntriesDelay((long) (-1));
        int int6 = recovery0.getMaxRetries();
        long long7 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.setRetryInterval((long) 52);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 5 + "'", int1 == 5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
    }

    @Test
    public void test00172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00172");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet3 = properties1.entrySet();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Object obj6 = properties1.replace((java.lang.Object) "hi!", obj5);
        boolean boolean8 = properties1.equals((java.lang.Object) 1.0f);
        java.lang.String str10 = properties1.getProperty("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery11.setForgetOrphanedLogEntriesDelay((long) (byte) 0);
        int int14 = recovery11.getMaxRetries();
        int int15 = recovery11.getMaxRetries();
        java.lang.Object obj16 = properties1.get((java.lang.Object) recovery11);
        java.io.PrintStream printStream17 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printStream17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEntrySet3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertNull(obj16);
    }

    @Test
    public void test00173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00173");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        properties1.clear();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        boolean boolean9 = properties8.isEmpty();
        java.lang.String str11 = properties8.getProperty("hi!");
        boolean boolean13 = properties8.contains((java.lang.Object) 10.0f);
        java.util.Set<java.lang.Object> objSet14 = properties8.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties15.setCheckpointInterval((long) (byte) -1);
        atomikosProperties15.setThreadedTwoPhaseCommit(true);
        java.lang.String str20 = atomikosProperties15.getOutputDir();
        atomikosProperties15.setConsoleFileName("tmlog");
        boolean boolean23 = properties8.contains((java.lang.Object) "tmlog");
        java.lang.Object obj24 = properties1.get((java.lang.Object) properties8);
        java.io.OutputStream outputStream25 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.save(outputStream25, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objSet14);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(obj24);
    }

    @Test
    public void test00174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00174");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet3 = properties1.entrySet();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Object obj6 = properties1.replace((java.lang.Object) "hi!", obj5);
        boolean boolean8 = properties1.equals((java.lang.Object) 1.0f);
        java.util.Properties properties9 = new java.util.Properties(properties1);
        properties1.clear();
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties1.elements();
        java.io.InputStream inputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(inputStream12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEntrySet3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(objEnumeration11);
    }

    @Test
    public void test00175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00175");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) (byte) -1);
        atomikosProperties0.setConsoleFileName("");
        java.lang.String str5 = atomikosProperties0.getOutputDir();
        int int6 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setLogBaseName("tmlog");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test00176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00176");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setLogBaseDir("");
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.setConsoleFileName("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test00177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00177");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = atomikosProperties10.getConsoleLogLevel();
        atomikosProperties10.setConsoleFileLimit((int) '4');
        int int17 = atomikosProperties10.getMaxActives();
        int int18 = atomikosProperties10.getConsoleFileLimit();
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel14 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel14.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
    }

    @Test
    public void test00178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00178");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties7.elements();
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties10.elements();
        java.lang.String str13 = properties10.getProperty("");
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj19 = properties7.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties16);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel20 = atomikosProperties16.getConsoleLogLevel();
        int int21 = atomikosProperties16.getConsoleFileCount();
        java.lang.Object obj22 = properties1.get((java.lang.Object) atomikosProperties16);
        java.io.PrintWriter printWriter23 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printWriter23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel20 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel20.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNull(obj22);
    }

    @Test
    public void test00179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00179");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.io.Reader reader9 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(reader9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test00180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00180");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean13 = properties1.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean12);
        boolean boolean14 = properties1.isEmpty();
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties16.elements();
        boolean boolean19 = properties16.containsKey((java.lang.Object) 10.0f);
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties16);
        java.lang.String str21 = properties1.toString();
        java.io.Writer writer22 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(writer22, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{}" + "'", str21, "{}");
    }

    @Test
    public void test00181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00181");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        boolean boolean4 = properties1.containsKey((java.lang.Object) 10.0f);
        java.util.Properties properties5 = null;
        java.util.Properties properties6 = new java.util.Properties(properties5);
        java.util.Enumeration<java.lang.Object> objEnumeration7 = properties6.elements();
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties9.elements();
        java.lang.String str12 = properties9.getProperty("");
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        java.util.Collection<java.lang.Object> objCollection14 = properties9.values();
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties9.elements();
        java.lang.Object obj16 = properties1.remove((java.lang.Object) properties9);
        java.lang.Object obj18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj19 = properties1.put((java.lang.Object) (short) 1, obj18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objEnumeration7);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(objCollection14);
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertNull(obj16);
    }

    @Test
    public void test00182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00182");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        java.util.Properties properties14 = null;
        java.util.Properties properties15 = new java.util.Properties(properties14);
        boolean boolean16 = properties15.isEmpty();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.lang.Object obj18 = properties1.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setCheckpointInterval((long) (byte) -1);
        atomikosProperties19.setThreadedTwoPhaseCommit(true);
        java.lang.String str24 = atomikosProperties19.getOutputDir();
        java.util.Properties properties25 = atomikosProperties19.asProperties();
        java.lang.Object obj26 = properties1.remove((java.lang.Object) properties25);
        java.util.Properties properties27 = new java.util.Properties(properties25);
        java.io.OutputStream outputStream28 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties25.storeToXML(outputStream28, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNull(obj26);
    }

    @Test
    public void test00183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00183");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        properties1.clear();
        boolean boolean8 = properties1.containsKey((java.lang.Object) "hi!");
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        boolean boolean11 = properties10.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setCheckpointInterval((long) (byte) -1);
        atomikosProperties12.setConsoleFileName("");
        java.lang.String str17 = atomikosProperties12.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setCheckpointInterval((long) (byte) -1);
        atomikosProperties18.setThreadedTwoPhaseCommit(true);
        java.util.Properties properties23 = null;
        java.util.Properties properties24 = new java.util.Properties(properties23);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties24.elements();
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties27.elements();
        java.lang.String str30 = properties27.getProperty("");
        properties24.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj36 = properties24.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties33);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel37 = atomikosProperties33.getConsoleLogLevel();
        atomikosProperties18.setConsoleLogLevel(atomikosLoggingLevel37);
        atomikosProperties12.setConsoleLogLevel(atomikosLoggingLevel37);
        boolean boolean41 = properties1.replace((java.lang.Object) properties10, (java.lang.Object) atomikosProperties12, (java.lang.Object) 10.0d);
        atomikosProperties12.setDefaultJtaTimeout((long) '#');
        atomikosProperties12.setMaxActives((int) ' ');
        java.lang.String str46 = atomikosProperties12.getService();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel37 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel37.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str46);
    }

    @Test
    public void test00184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00184");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        atomikosProperties10.setSerialJtaTransactions(false);
        boolean boolean16 = atomikosProperties10.isForceShutdownOnVmExit();
        java.util.Properties properties17 = atomikosProperties10.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setCheckpointInterval((long) (byte) -1);
        atomikosProperties18.setThreadedTwoPhaseCommit(true);
        atomikosProperties18.setSerialJtaTransactions(false);
        java.lang.Object obj25 = properties17.remove((java.lang.Object) false);
        java.util.Enumeration<?> wildcardEnumeration26 = properties17.propertyNames();
        java.io.PrintWriter printWriter27 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties17.list(printWriter27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(wildcardEnumeration26);
    }

    @Test
    public void test00185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00185");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) (byte) -1);
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        atomikosProperties0.setConsoleFileCount((int) 'a');
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
    }

    @Test
    public void test00186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00186");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean13 = properties1.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean12);
        boolean boolean14 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties1.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.getLogBaseDir();
        atomikosProperties16.setLogBaseDir("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.setCheckpointInterval((long) (byte) -1);
        atomikosProperties20.setThreadedTwoPhaseCommit(true);
        atomikosProperties20.setSerialJtaTransactions(false);
        java.lang.String str27 = atomikosProperties20.getLogBaseName();
        atomikosProperties20.setAllowSubTransactions(false);
        atomikosProperties20.setLogBaseName("{10=#}");
        java.lang.Object obj32 = properties1.putIfAbsent((java.lang.Object) atomikosProperties16, (java.lang.Object) "{10=#}");
        boolean boolean34 = properties1.containsKey((java.lang.Object) (byte) -1);
        java.io.PrintWriter printWriter35 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printWriter35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test00187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00187");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.lang.String str4 = properties1.getProperty("hi!");
        java.io.OutputStream outputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.save(outputStream5, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test00188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00188");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        boolean boolean4 = properties1.contains((java.lang.Object) 1L);
        java.util.Set<java.lang.Object> objSet5 = properties1.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setCheckpointInterval((long) (byte) -1);
        atomikosProperties6.setThreadedTwoPhaseCommit(true);
        atomikosProperties6.setSerialJtaTransactions(false);
        atomikosProperties6.setOutputDir("");
        java.lang.String str15 = atomikosProperties6.getConsoleFileName();
        java.lang.String str16 = atomikosProperties6.getLogBaseName();
        atomikosProperties6.setEnableLogging(false);
        boolean boolean19 = properties1.containsKey((java.lang.Object) atomikosProperties6);
        java.io.OutputStream outputStream20 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(outputStream20, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objSet5);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tm.out" + "'", str15, "tm.out");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test00189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00189");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean13 = properties1.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean12);
        boolean boolean14 = properties1.isEmpty();
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties16.elements();
        boolean boolean19 = properties16.containsKey((java.lang.Object) 10.0f);
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties16);
        java.lang.Object obj23 = properties1.setProperty("hi!", "tmlog");
        java.io.OutputStream outputStream24 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream24, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj23);
    }

    @Test
    public void test00190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00190");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) (byte) -1);
        atomikosProperties0.setConsoleFileName("");
        java.lang.String str5 = atomikosProperties0.getLogBaseName();
        long long6 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setForceShutdownOnVmExit(false);
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties9.elements();
        java.io.OutputStream outputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties9.storeToXML(outputStream11, "tmlog", "{10=#}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(objEnumeration10);
    }

    @Test
    public void test00191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00191");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) (byte) -1);
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        java.lang.String str5 = atomikosProperties0.getOutputDir();
        java.lang.String str6 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.setCheckpointInterval((long) 'a');
        java.lang.Class<?> wildcardClass9 = atomikosProperties0.getClass();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test00192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00192");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.lang.String str4 = properties1.getProperty("");
        java.util.Properties properties5 = null;
        java.util.Properties properties6 = new java.util.Properties(properties5);
        boolean boolean7 = properties6.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet8 = properties6.entrySet();
        java.lang.Object obj10 = new java.lang.Object();
        java.lang.Object obj11 = properties6.replace((java.lang.Object) "hi!", obj10);
        boolean boolean13 = properties6.equals((java.lang.Object) 1.0f);
        boolean boolean14 = properties1.containsKey((java.lang.Object) boolean13);
        properties1.clear();
        java.io.InputStream inputStream16 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(inputStream16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objEntrySet8);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test00193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00193");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        java.util.Properties properties14 = null;
        java.util.Properties properties15 = new java.util.Properties(properties14);
        boolean boolean16 = properties15.isEmpty();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.lang.Object obj18 = properties1.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setCheckpointInterval((long) (byte) -1);
        atomikosProperties19.setThreadedTwoPhaseCommit(true);
        java.lang.String str24 = atomikosProperties19.getOutputDir();
        java.util.Properties properties25 = atomikosProperties19.asProperties();
        java.lang.Object obj26 = properties1.remove((java.lang.Object) properties25);
        java.util.Properties properties27 = null;
        java.util.Properties properties28 = new java.util.Properties(properties27);
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties28.elements();
        java.util.Properties properties30 = null;
        java.util.Properties properties31 = new java.util.Properties(properties30);
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties31.elements();
        java.lang.String str34 = properties31.getProperty("");
        properties28.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties31);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties37.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj40 = properties28.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties37);
        java.util.Properties properties41 = null;
        java.util.Properties properties42 = new java.util.Properties(properties41);
        boolean boolean43 = properties42.isEmpty();
        properties28.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties42);
        java.lang.Object obj45 = properties28.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str47 = atomikosProperties46.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery48 = atomikosProperties46.getRecovery();
        atomikosProperties46.setEnableLogging(false);
        boolean boolean51 = properties28.equals((java.lang.Object) atomikosProperties46);
        boolean boolean52 = properties25.contains((java.lang.Object) atomikosProperties46);
        java.util.Enumeration<?> wildcardEnumeration53 = properties25.propertyNames();
        java.io.OutputStream outputStream54 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties25.storeToXML(outputStream54, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertNotNull(objEnumeration32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(recovery48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration53);
    }

    @Test
    public void test00194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00194");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean13 = properties1.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean12);
        boolean boolean14 = properties1.isEmpty();
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties16.elements();
        boolean boolean18 = properties1.contains((java.lang.Object) objEnumeration17);
        java.util.Properties properties19 = null;
        java.util.Properties properties20 = new java.util.Properties(properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties20.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.setCheckpointInterval((long) (byte) -1);
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setSerialJtaTransactions(true);
        long long28 = atomikosProperties22.getMaxTimeout();
        java.util.Properties properties29 = null;
        java.util.Properties properties30 = new java.util.Properties(properties29);
        boolean boolean31 = properties30.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties30.elements();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet33 = properties30.entrySet();
        boolean boolean34 = properties20.remove((java.lang.Object) atomikosProperties22, (java.lang.Object) objEntrySet33);
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties36.setCheckpointInterval((long) (byte) -1);
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery40 = atomikosProperties36.getRecovery();
        java.util.Properties properties41 = atomikosProperties36.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties42.setCheckpointInterval((long) (byte) -1);
        atomikosProperties42.setConsoleFileName("");
        java.lang.String str47 = atomikosProperties42.getService();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj48 = properties20.put((java.lang.Object) properties41, (java.lang.Object) str47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 300000L + "'", long28 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objEnumeration32);
        org.junit.Assert.assertNotNull(objEntrySet33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(recovery40);
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertNull(str47);
    }

    @Test
    public void test00195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00195");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = null;
        java.util.Properties properties2 = new java.util.Properties(properties1);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties5.elements();
        java.lang.String str8 = properties5.getProperty("");
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        boolean boolean13 = properties12.isEmpty();
        boolean boolean14 = properties2.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean13);
        boolean boolean15 = properties2.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setCheckpointInterval((long) (byte) -1);
        atomikosProperties17.setConsoleFileName("");
        java.lang.String str22 = atomikosProperties17.getLogBaseName();
        long long23 = atomikosProperties17.getCheckpointInterval();
        java.lang.String str24 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.setEnableLogging(true);
        java.lang.Object obj27 = properties0.putIfAbsent((java.lang.Object) objEnumeration16, (java.lang.Object) atomikosProperties17);
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties0.keys();
        java.lang.String str30 = properties0.getProperty("tm.out");
        java.util.Properties properties31 = null;
        java.util.Properties properties32 = new java.util.Properties(properties31);
        boolean boolean33 = properties32.isEmpty();
        java.util.Properties properties34 = new java.util.Properties(properties32);
        java.lang.Object obj35 = properties0.get((java.lang.Object) properties34);
        java.util.Properties properties36 = null;
        java.util.Properties properties37 = new java.util.Properties(properties36);
        java.util.Enumeration<java.lang.Object> objEnumeration38 = properties37.elements();
        java.util.Properties properties39 = null;
        java.util.Properties properties40 = new java.util.Properties(properties39);
        java.util.Enumeration<java.lang.Object> objEnumeration41 = properties40.elements();
        java.lang.String str43 = properties40.getProperty("");
        properties37.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties40);
        java.util.Properties properties46 = null;
        java.util.Properties properties47 = new java.util.Properties(properties46);
        boolean boolean48 = properties47.isEmpty();
        boolean boolean49 = properties37.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean48);
        boolean boolean50 = properties37.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration51 = properties37.keys();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties37);
        java.util.Set<java.lang.Object> objSet53 = properties37.keySet();
        java.io.Writer writer54 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties37.store(writer54, "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(objEnumeration38);
        org.junit.Assert.assertNotNull(objEnumeration41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objEnumeration51);
        org.junit.Assert.assertNotNull(objSet53);
    }

    @Test
    public void test00196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00196");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        java.util.Properties properties14 = null;
        java.util.Properties properties15 = new java.util.Properties(properties14);
        boolean boolean16 = properties15.isEmpty();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.lang.Object obj18 = properties1.clone();
        java.io.PrintWriter printWriter19 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printWriter19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(obj18);
    }

    @Test
    public void test00197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00197");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        properties1.clear();
        boolean boolean8 = properties1.containsKey((java.lang.Object) "hi!");
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        boolean boolean11 = properties10.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setCheckpointInterval((long) (byte) -1);
        atomikosProperties12.setConsoleFileName("");
        java.lang.String str17 = atomikosProperties12.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setCheckpointInterval((long) (byte) -1);
        atomikosProperties18.setThreadedTwoPhaseCommit(true);
        java.util.Properties properties23 = null;
        java.util.Properties properties24 = new java.util.Properties(properties23);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties24.elements();
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties27.elements();
        java.lang.String str30 = properties27.getProperty("");
        properties24.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj36 = properties24.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties33);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel37 = atomikosProperties33.getConsoleLogLevel();
        atomikosProperties18.setConsoleLogLevel(atomikosLoggingLevel37);
        atomikosProperties12.setConsoleLogLevel(atomikosLoggingLevel37);
        boolean boolean41 = properties1.replace((java.lang.Object) properties10, (java.lang.Object) atomikosProperties12, (java.lang.Object) 10.0d);
        java.util.Properties properties42 = new java.util.Properties(properties1);
        java.util.Properties properties43 = null;
        java.util.Properties properties44 = new java.util.Properties(properties43);
        java.util.Enumeration<java.lang.Object> objEnumeration45 = properties44.elements();
        boolean boolean47 = properties44.containsKey((java.lang.Object) 10.0f);
        properties42.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties44);
        java.lang.Object obj51 = properties42.setProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel37 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel37.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objEnumeration45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(obj51);
    }

    @Test
    public void test00198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00198");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        java.io.PrintStream printStream14 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printStream14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test00199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00199");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) (byte) -1);
        atomikosProperties0.setConsoleFileName("");
        long long5 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.setConsoleFileCount(50);
        java.lang.String str8 = atomikosProperties0.getLogBaseName();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tmlog" + "'", str8, "tmlog");
    }

    @Test
    public void test00200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00200");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties1.elements();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        boolean boolean6 = properties5.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet7 = properties5.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int9 = recovery8.getMaxRetries();
        recovery8.setForgetOrphanedLogEntriesDelay((-1L));
        recovery8.setForgetOrphanedLogEntriesDelay((long) (-1));
        boolean boolean14 = properties1.remove((java.lang.Object) properties5, (java.lang.Object) (-1));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.getLogBaseDir();
        java.lang.String str17 = atomikosProperties15.getLogBaseDir();
        int int18 = atomikosProperties15.getConsoleFileCount();
        java.util.Properties properties19 = null;
        java.util.Properties properties20 = new java.util.Properties(properties19);
        boolean boolean21 = properties20.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration22 = properties20.elements();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet23 = properties20.entrySet();
        boolean boolean25 = properties5.replace((java.lang.Object) atomikosProperties15, (java.lang.Object) properties20, (java.lang.Object) 1);
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        boolean boolean28 = properties27.isEmpty();
        boolean boolean29 = properties27.isEmpty();
        properties20.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties27);
        java.io.InputStream inputStream31 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties20.load(inputStream31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objEntrySet7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objEnumeration22);
        org.junit.Assert.assertNotNull(objEntrySet23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test00201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00201");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) (byte) -1);
        atomikosProperties0.setConsoleFileName("");
        java.lang.String str5 = atomikosProperties0.getLogBaseName();
        long long6 = atomikosProperties0.getCheckpointInterval();
        java.lang.String str7 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.setSerialJtaTransactions(true);
        atomikosProperties0.setMaxTimeout((long) (short) 10);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test00202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00202");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = null;
        java.util.Properties properties2 = new java.util.Properties(properties1);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties5.elements();
        java.lang.String str8 = properties5.getProperty("");
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        boolean boolean13 = properties12.isEmpty();
        boolean boolean14 = properties2.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean13);
        boolean boolean15 = properties2.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setCheckpointInterval((long) (byte) -1);
        atomikosProperties17.setConsoleFileName("");
        java.lang.String str22 = atomikosProperties17.getLogBaseName();
        long long23 = atomikosProperties17.getCheckpointInterval();
        java.lang.String str24 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.setEnableLogging(true);
        java.lang.Object obj27 = properties0.putIfAbsent((java.lang.Object) objEnumeration16, (java.lang.Object) atomikosProperties17);
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties0.keys();
        java.util.Properties properties29 = null;
        java.util.Properties properties30 = new java.util.Properties(properties29);
        boolean boolean31 = properties30.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery32 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int33 = recovery32.getMaxRetries();
        boolean boolean34 = properties30.containsKey((java.lang.Object) recovery32);
        properties30.clear();
        java.util.Properties properties36 = new java.util.Properties(properties30);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties36);
        java.util.Set<java.lang.String> strSet38 = properties36.stringPropertyNames();
        java.util.Properties properties39 = new java.util.Properties(properties36);
        java.util.Properties properties40 = new java.util.Properties();
        java.util.Properties properties43 = null;
        java.util.Properties properties44 = new java.util.Properties(properties43);
        java.util.Enumeration<java.lang.Object> objEnumeration45 = properties44.elements();
        java.util.Properties properties46 = null;
        java.util.Properties properties47 = new java.util.Properties(properties46);
        java.util.Enumeration<java.lang.Object> objEnumeration48 = properties47.elements();
        java.lang.String str50 = properties47.getProperty("");
        properties44.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties47);
        java.util.Properties properties53 = null;
        java.util.Properties properties54 = new java.util.Properties(properties53);
        boolean boolean55 = properties54.isEmpty();
        boolean boolean56 = properties44.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean55);
        boolean boolean57 = properties44.isEmpty();
        boolean boolean58 = properties40.replace((java.lang.Object) 100.0f, (java.lang.Object) true, (java.lang.Object) properties44);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties59.setCheckpointInterval((long) (byte) -1);
        atomikosProperties59.setConsoleFileName("");
        java.lang.String str64 = atomikosProperties59.getLogBaseName();
        long long65 = atomikosProperties59.getCheckpointInterval();
        java.lang.String str66 = atomikosProperties59.getConsoleFileName();
        long long67 = atomikosProperties59.getCheckpointInterval();
        java.lang.Object obj68 = properties44.remove((java.lang.Object) atomikosProperties59);
        atomikosProperties59.setSerialJtaTransactions(true);
        boolean boolean71 = properties39.containsKey((java.lang.Object) true);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(objEnumeration45);
        org.junit.Assert.assertNotNull(objEnumeration48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "tmlog" + "'", str64, "tmlog");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-1L) + "'", long67 == (-1L));
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test00203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00203");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = null;
        java.util.Properties properties2 = new java.util.Properties(properties1);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties5.elements();
        java.lang.String str8 = properties5.getProperty("");
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        boolean boolean13 = properties12.isEmpty();
        boolean boolean14 = properties2.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean13);
        boolean boolean15 = properties2.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setCheckpointInterval((long) (byte) -1);
        atomikosProperties17.setConsoleFileName("");
        java.lang.String str22 = atomikosProperties17.getLogBaseName();
        long long23 = atomikosProperties17.getCheckpointInterval();
        java.lang.String str24 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.setEnableLogging(true);
        java.lang.Object obj27 = properties0.putIfAbsent((java.lang.Object) objEnumeration16, (java.lang.Object) atomikosProperties17);
        java.util.Properties properties28 = null;
        java.util.Properties properties29 = new java.util.Properties(properties28);
        boolean boolean30 = properties29.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery31 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int32 = recovery31.getMaxRetries();
        boolean boolean33 = properties29.containsKey((java.lang.Object) recovery31);
        recovery31.setRetryInterval((long) (short) -1);
        recovery31.setDelay(10L);
        java.util.Properties properties38 = null;
        java.util.Properties properties39 = new java.util.Properties(properties38);
        boolean boolean40 = properties39.isEmpty();
        java.lang.Object obj41 = properties0.getOrDefault((java.lang.Object) recovery31, (java.lang.Object) properties39);
        java.util.Properties properties42 = new java.util.Properties(properties0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration<?> wildcardEnumeration43 = properties42.propertyNames();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Collections$EmptyEnumeration cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "{}");
    }

    @Test
    public void test00204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00204");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet3 = properties1.entrySet();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Object obj6 = properties1.replace((java.lang.Object) "hi!", obj5);
        boolean boolean8 = properties1.equals((java.lang.Object) 1.0f);
        java.util.Properties properties9 = new java.util.Properties(properties1);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery13 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int14 = recovery13.getMaxRetries();
        boolean boolean15 = properties11.containsKey((java.lang.Object) recovery13);
        java.util.Properties properties16 = null;
        java.util.Properties properties17 = new java.util.Properties(properties16);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties17.elements();
        java.util.Properties properties19 = null;
        java.util.Properties properties20 = new java.util.Properties(properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties20.elements();
        java.lang.String str23 = properties20.getProperty("");
        properties17.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj29 = properties17.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties26);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel30 = atomikosProperties26.getConsoleLogLevel();
        int int31 = atomikosProperties26.getConsoleFileCount();
        java.lang.Object obj32 = properties11.get((java.lang.Object) atomikosProperties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.setCheckpointInterval((long) (byte) -1);
        atomikosProperties33.setConsoleFileName("");
        java.lang.String str38 = atomikosProperties33.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties39.setCheckpointInterval((long) (byte) -1);
        atomikosProperties39.setThreadedTwoPhaseCommit(true);
        java.util.Properties properties44 = null;
        java.util.Properties properties45 = new java.util.Properties(properties44);
        java.util.Enumeration<java.lang.Object> objEnumeration46 = properties45.elements();
        java.util.Properties properties47 = null;
        java.util.Properties properties48 = new java.util.Properties(properties47);
        java.util.Enumeration<java.lang.Object> objEnumeration49 = properties48.elements();
        java.lang.String str51 = properties48.getProperty("");
        properties45.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties48);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties54.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj57 = properties45.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties54);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel58 = atomikosProperties54.getConsoleLogLevel();
        atomikosProperties39.setConsoleLogLevel(atomikosLoggingLevel58);
        atomikosProperties33.setConsoleLogLevel(atomikosLoggingLevel58);
        atomikosProperties33.setConsoleFileCount(5);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery63 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery63.setMaxRetries((-1));
        long long66 = recovery63.getRetryInterval();
        java.lang.Object obj67 = properties11.replace((java.lang.Object) 5, (java.lang.Object) long66);
        java.lang.Object obj68 = properties11.clone();
        boolean boolean69 = properties9.contains((java.lang.Object) properties11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties70 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties70.setCheckpointInterval((long) (byte) -1);
        atomikosProperties70.setConsoleFileName("");
        java.lang.String str75 = atomikosProperties70.getLogBaseName();
        long long76 = atomikosProperties70.getCheckpointInterval();
        java.lang.String str77 = atomikosProperties70.getConsoleFileName();
        long long78 = atomikosProperties70.getCheckpointInterval();
        java.lang.String str79 = atomikosProperties70.getLogBaseName();
        atomikosProperties70.setOutputDir("tmlog");
        atomikosProperties70.setDefaultJtaTimeout((long) 100);
        atomikosProperties70.setForceShutdownOnVmExit(false);
        boolean boolean86 = properties9.contains((java.lang.Object) false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties87 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties87.setCheckpointInterval((long) (byte) -1);
        atomikosProperties87.setThreadedTwoPhaseCommit(true);
        java.lang.String str92 = atomikosProperties87.getOutputDir();
        atomikosProperties87.setConsoleFileName("tmlog");
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel95 = atomikosProperties87.getConsoleLogLevel();
        boolean boolean96 = properties9.equals((java.lang.Object) atomikosLoggingLevel95);
        java.io.InputStream inputStream97 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties9.loadFromXML(inputStream97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEntrySet3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel30 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel30.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNotNull(objEnumeration46);
        org.junit.Assert.assertNotNull(objEnumeration49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel58 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel58.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 10000L + "'", long66 == 10000L);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "{}");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "tmlog" + "'", str75, "tmlog");
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-1L) + "'", long76 == (-1L));
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + (-1L) + "'", long78 == (-1L));
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "tmlog" + "'", str79, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel95 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel95.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test00205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00205");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean13 = properties1.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean12);
        boolean boolean14 = properties1.isEmpty();
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties16.elements();
        boolean boolean18 = properties1.contains((java.lang.Object) objEnumeration17);
        java.util.Properties properties19 = null;
        java.util.Properties properties20 = new java.util.Properties(properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties20.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.setCheckpointInterval((long) (byte) -1);
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setSerialJtaTransactions(true);
        long long28 = atomikosProperties22.getMaxTimeout();
        java.util.Properties properties29 = null;
        java.util.Properties properties30 = new java.util.Properties(properties29);
        boolean boolean31 = properties30.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties30.elements();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet33 = properties30.entrySet();
        boolean boolean34 = properties20.remove((java.lang.Object) atomikosProperties22, (java.lang.Object) objEntrySet33);
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties20);
        java.io.PrintStream printStream36 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties20.list(printStream36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 300000L + "'", long28 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objEnumeration32);
        org.junit.Assert.assertNotNull(objEntrySet33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test00206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00206");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        boolean boolean4 = properties1.contains((java.lang.Object) 1L);
        int int5 = properties1.size();
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties1.keys();
        java.lang.String str8 = properties1.getProperty("");
        java.io.InputStream inputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(inputStream9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test00207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00207");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet6 = properties1.entrySet();
        java.io.PrintWriter printWriter7 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printWriter7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objEntrySet6);
    }

    @Test
    public void test00208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00208");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Properties properties3 = new java.util.Properties(properties1);
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        boolean boolean6 = properties5.isEmpty();
        java.lang.String str8 = properties5.getProperty("hi!");
        java.util.Set<java.lang.Object> objSet9 = properties5.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties5.entrySet();
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties12.elements();
        java.util.Properties properties14 = null;
        java.util.Properties properties15 = new java.util.Properties(properties14);
        boolean boolean16 = properties15.isEmpty();
        java.util.Properties properties17 = new java.util.Properties(properties15);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet18 = properties15.entrySet();
        java.lang.Object obj19 = properties5.getOrDefault((java.lang.Object) properties12, (java.lang.Object) objEntrySet18);
        boolean boolean20 = properties1.containsKey((java.lang.Object) objEntrySet18);
        java.io.PrintStream printStream21 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printStream21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(objSet9);
        org.junit.Assert.assertNotNull(objEntrySet10);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objEntrySet18);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "[]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "[]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test00209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00209");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet3 = properties1.entrySet();
        java.util.Set<java.lang.String> strSet4 = properties1.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties5.setCheckpointInterval((long) (byte) -1);
        atomikosProperties5.setConsoleFileName("");
        java.lang.String str10 = atomikosProperties5.getLogBaseName();
        long long11 = atomikosProperties5.getCheckpointInterval();
        java.lang.String str12 = atomikosProperties5.getLogBaseDir();
        atomikosProperties5.setEnableLogging(true);
        long long15 = atomikosProperties5.getDefaultJtaTimeout();
        boolean boolean16 = atomikosProperties5.isSerialJtaTransactions();
        java.lang.String str17 = atomikosProperties5.getOutputDir();
        atomikosProperties5.setTransactionManagerUniqueName("{}");
        java.util.Properties properties20 = null;
        java.util.Properties properties21 = new java.util.Properties(properties20);
        java.util.Enumeration<java.lang.Object> objEnumeration22 = properties21.elements();
        boolean boolean24 = properties21.containsKey((java.lang.Object) 10.0f);
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties26.elements();
        java.util.Properties properties28 = null;
        java.util.Properties properties29 = new java.util.Properties(properties28);
        java.util.Enumeration<java.lang.Object> objEnumeration30 = properties29.elements();
        java.lang.String str32 = properties29.getProperty("");
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        java.util.Enumeration<?> wildcardEnumeration34 = properties26.propertyNames();
        boolean boolean35 = properties21.containsValue((java.lang.Object) wildcardEnumeration34);
        java.lang.Object obj36 = properties1.put((java.lang.Object) atomikosProperties5, (java.lang.Object) properties21);
        java.io.OutputStream outputStream37 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties21.storeToXML(outputStream37, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEntrySet3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(objEnumeration22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNotNull(objEnumeration30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(wildcardEnumeration34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(obj36);
    }

    @Test
    public void test00210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00210");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) (byte) -1);
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery4 = atomikosProperties0.getRecovery();
        long long5 = recovery4.getDelay();
        long long6 = recovery4.getForgetOrphanedLogEntriesDelay();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(recovery4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 86400000L + "'", long6 == 86400000L);
    }

    @Test
    public void test00211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00211");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.lang.String str4 = properties1.getProperty("hi!");
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        boolean boolean8 = properties7.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int10 = recovery9.getMaxRetries();
        boolean boolean11 = properties7.containsKey((java.lang.Object) recovery9);
        recovery9.setRetryInterval((long) (short) -1);
        recovery9.setRetryInterval((long) 0);
        recovery9.setMaxRetries((int) (byte) 10);
        java.lang.Class<?> wildcardClass18 = recovery9.getClass();
        java.lang.Object obj19 = properties1.replace((java.lang.Object) (byte) -1, (java.lang.Object) recovery9);
        java.util.Properties properties20 = null;
        java.util.Properties properties21 = new java.util.Properties(properties20);
        boolean boolean22 = properties21.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet23 = properties21.entrySet();
        java.lang.Object obj26 = properties21.setProperty("tm.out", "hi!");
        boolean boolean27 = properties21.isEmpty();
        java.util.Properties properties28 = null;
        java.util.Properties properties29 = new java.util.Properties(properties28);
        java.util.Enumeration<java.lang.Object> objEnumeration30 = properties29.elements();
        java.util.Properties properties31 = null;
        java.util.Properties properties32 = new java.util.Properties(properties31);
        java.util.Enumeration<java.lang.Object> objEnumeration33 = properties32.elements();
        java.lang.String str35 = properties32.getProperty("");
        properties29.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties32);
        boolean boolean38 = properties29.contains((java.lang.Object) 0);
        boolean boolean39 = properties21.containsValue((java.lang.Object) boolean38);
        java.util.Properties properties40 = null;
        java.util.Properties properties41 = new java.util.Properties(properties40);
        java.util.Enumeration<java.lang.Object> objEnumeration42 = properties41.elements();
        java.util.Properties properties43 = null;
        java.util.Properties properties44 = new java.util.Properties(properties43);
        java.util.Enumeration<java.lang.Object> objEnumeration45 = properties44.elements();
        java.lang.String str47 = properties44.getProperty("");
        properties41.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties44);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties50.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj53 = properties41.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties50);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel54 = atomikosProperties50.getConsoleLogLevel();
        atomikosProperties50.setConsoleFileLimit((int) '4');
        atomikosProperties50.setMaxActives((int) ' ');
        atomikosProperties50.setForceShutdownOnVmExit(true);
        java.lang.Object obj61 = properties1.replace((java.lang.Object) boolean38, (java.lang.Object) true);
        java.io.OutputStream outputStream62 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream62, "{10=#}", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objEntrySet23);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objEnumeration30);
        org.junit.Assert.assertNotNull(objEnumeration33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objEnumeration42);
        org.junit.Assert.assertNotNull(objEnumeration45);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel54 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel54.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj61);
    }

    @Test
    public void test00212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00212");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int1 = recovery0.getMaxRetries();
        recovery0.setForgetOrphanedLogEntriesDelay((-1L));
        recovery0.setForgetOrphanedLogEntriesDelay((long) (-1));
        recovery0.setForgetOrphanedLogEntriesDelay(100L);
        long long8 = recovery0.getDelay();
        recovery0.setDelay((long) (short) 10);
        long long11 = recovery0.getDelay();
        recovery0.setMaxRetries((int) (short) -1);
        long long14 = recovery0.getForgetOrphanedLogEntriesDelay();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 5 + "'", int1 == 5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10000L + "'", long8 == 10000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L + "'", long14 == 100L);
    }

    @Test
    public void test00213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00213");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet3 = properties1.entrySet();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Object obj6 = properties1.replace((java.lang.Object) "hi!", obj5);
        boolean boolean8 = properties1.equals((java.lang.Object) 1.0f);
        java.util.Properties properties9 = new java.util.Properties(properties1);
        properties1.clear();
        java.lang.String str11 = properties1.toString();
        java.io.InputStream inputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(inputStream12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEntrySet3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
    }

    @Test
    public void test00214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00214");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.lang.String str4 = properties1.getProperty("");
        java.io.InputStream inputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.loadFromXML(inputStream5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test00215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00215");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        boolean boolean4 = properties1.contains((java.lang.Object) 1L);
        java.util.Set<java.lang.Object> objSet5 = properties1.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setCheckpointInterval((long) (byte) -1);
        atomikosProperties6.setThreadedTwoPhaseCommit(true);
        atomikosProperties6.setSerialJtaTransactions(false);
        atomikosProperties6.setOutputDir("");
        java.lang.String str15 = atomikosProperties6.getConsoleFileName();
        java.lang.String str16 = atomikosProperties6.getLogBaseName();
        atomikosProperties6.setEnableLogging(false);
        boolean boolean19 = properties1.containsKey((java.lang.Object) atomikosProperties6);
        java.io.PrintWriter printWriter20 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printWriter20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objSet5);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tm.out" + "'", str15, "tm.out");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test00216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00216");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int1 = recovery0.getMaxRetries();
        recovery0.setForgetOrphanedLogEntriesDelay((-1L));
        recovery0.setForgetOrphanedLogEntriesDelay((long) (-1));
        recovery0.setForgetOrphanedLogEntriesDelay(100L);
        long long8 = recovery0.getDelay();
        recovery0.setDelay((long) (short) 10);
        long long11 = recovery0.getDelay();
        long long12 = recovery0.getForgetOrphanedLogEntriesDelay();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 5 + "'", int1 == 5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10000L + "'", long8 == 10000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
    }

    @Test
    public void test00217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00217");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Properties properties3 = new java.util.Properties(properties1);
        java.util.Collection<java.lang.Object> objCollection4 = properties1.values();
        java.lang.String str5 = properties1.toString();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        boolean boolean8 = properties7.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet9 = properties7.entrySet();
        java.lang.Object obj11 = new java.lang.Object();
        java.lang.Object obj12 = properties7.replace((java.lang.Object) "hi!", obj11);
        boolean boolean14 = properties7.equals((java.lang.Object) 1.0f);
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties7.keys();
        java.util.Properties properties16 = null;
        java.util.Properties properties17 = new java.util.Properties(properties16);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties17.elements();
        java.util.Properties properties19 = null;
        java.util.Properties properties20 = new java.util.Properties(properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties20.elements();
        java.lang.String str23 = properties20.getProperty("");
        properties17.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties20);
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        boolean boolean28 = properties27.isEmpty();
        boolean boolean29 = properties17.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean28);
        properties17.clear();
        int int31 = properties17.size();
        java.util.Set<java.lang.Object> objSet32 = properties17.keySet();
        java.lang.Object obj33 = properties1.putIfAbsent((java.lang.Object) properties7, (java.lang.Object) properties17);
        java.io.Writer writer34 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(writer34, "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objEntrySet9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(objSet32);
        org.junit.Assert.assertNull(obj33);
    }

    @Test
    public void test00218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00218");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = null;
        java.util.Properties properties2 = new java.util.Properties(properties1);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties5.elements();
        java.lang.String str8 = properties5.getProperty("");
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        boolean boolean13 = properties12.isEmpty();
        boolean boolean14 = properties2.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean13);
        boolean boolean15 = properties2.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setCheckpointInterval((long) (byte) -1);
        atomikosProperties17.setConsoleFileName("");
        java.lang.String str22 = atomikosProperties17.getLogBaseName();
        long long23 = atomikosProperties17.getCheckpointInterval();
        java.lang.String str24 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.setEnableLogging(true);
        java.lang.Object obj27 = properties0.putIfAbsent((java.lang.Object) objEnumeration16, (java.lang.Object) atomikosProperties17);
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties0.keys();
        java.util.Properties properties29 = null;
        java.util.Properties properties30 = new java.util.Properties(properties29);
        boolean boolean31 = properties30.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery32 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int33 = recovery32.getMaxRetries();
        boolean boolean34 = properties30.containsKey((java.lang.Object) recovery32);
        properties30.clear();
        java.util.Properties properties36 = new java.util.Properties(properties30);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties36);
        java.util.Set<java.lang.String> strSet38 = properties36.stringPropertyNames();
        java.util.Properties properties39 = new java.util.Properties(properties36);
        int int40 = properties39.size();
        java.lang.String str43 = properties39.getProperty("tmlog", "");
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
    }

    @Test
    public void test00219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00219");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.lang.String str4 = properties1.getProperty("hi!");
        boolean boolean6 = properties1.contains((java.lang.Object) 10.0f);
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties9.elements();
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties12.elements();
        java.lang.String str15 = properties12.getProperty("");
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties12);
        java.util.Properties properties18 = null;
        java.util.Properties properties19 = new java.util.Properties(properties18);
        boolean boolean20 = properties19.isEmpty();
        boolean boolean21 = properties9.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean20);
        boolean boolean22 = properties9.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties9.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.setCheckpointInterval((long) (byte) -1);
        atomikosProperties24.setConsoleFileName("");
        java.lang.String str29 = atomikosProperties24.getLogBaseName();
        long long30 = atomikosProperties24.getCheckpointInterval();
        java.lang.String str31 = atomikosProperties24.getLogBaseDir();
        atomikosProperties24.setEnableLogging(true);
        java.lang.Object obj34 = properties7.putIfAbsent((java.lang.Object) objEnumeration23, (java.lang.Object) atomikosProperties24);
        java.util.Properties properties35 = null;
        java.util.Properties properties36 = new java.util.Properties(properties35);
        boolean boolean37 = properties36.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery38 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int39 = recovery38.getMaxRetries();
        boolean boolean40 = properties36.containsKey((java.lang.Object) recovery38);
        recovery38.setRetryInterval((long) (short) -1);
        recovery38.setDelay(10L);
        java.util.Properties properties45 = null;
        java.util.Properties properties46 = new java.util.Properties(properties45);
        boolean boolean47 = properties46.isEmpty();
        java.lang.Object obj48 = properties7.getOrDefault((java.lang.Object) recovery38, (java.lang.Object) properties46);
        java.lang.Object obj49 = properties1.remove((java.lang.Object) recovery38);
        properties1.clear();
        java.util.Properties properties51 = null;
        java.util.Properties properties52 = new java.util.Properties(properties51);
        boolean boolean53 = properties52.isEmpty();
        java.lang.String str55 = properties52.getProperty("hi!");
        boolean boolean57 = properties52.contains((java.lang.Object) 10.0f);
        boolean boolean58 = properties52.isEmpty();
        boolean boolean59 = properties1.containsValue((java.lang.Object) properties52);
        java.io.Writer writer60 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(writer60, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "{}");
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test00220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00220");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Enumeration<?> wildcardEnumeration9 = properties1.propertyNames();
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        java.util.Enumeration<java.lang.Object> objEnumeration12 = properties11.elements();
        java.util.Properties properties13 = null;
        java.util.Properties properties14 = new java.util.Properties(properties13);
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties14.elements();
        java.lang.String str17 = properties14.getProperty("");
        properties11.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties14);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj23 = properties11.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties20);
        atomikosProperties20.setSerialJtaTransactions(false);
        atomikosProperties20.setOutputDir("");
        boolean boolean28 = properties1.containsKey((java.lang.Object) "");
        java.util.Properties properties30 = null;
        java.util.Properties properties31 = new java.util.Properties(properties30);
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties31.elements();
        java.util.Properties properties33 = null;
        java.util.Properties properties34 = new java.util.Properties(properties33);
        java.util.Enumeration<java.lang.Object> objEnumeration35 = properties34.elements();
        java.lang.String str37 = properties34.getProperty("");
        properties31.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties34);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties40.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj43 = properties31.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties40);
        atomikosProperties40.setSerialJtaTransactions(false);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel46 = atomikosProperties40.getConsoleLogLevel();
        java.lang.String str47 = atomikosProperties40.getTransactionManagerUniqueName();
        java.lang.Object obj48 = properties1.replace((java.lang.Object) "hi!", (java.lang.Object) atomikosProperties40);
        java.util.Collection<java.lang.Object> objCollection49 = properties1.values();
        java.util.Properties properties50 = null;
        java.util.Properties properties51 = new java.util.Properties(properties50);
        boolean boolean52 = properties51.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery53 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int54 = recovery53.getMaxRetries();
        boolean boolean55 = properties51.containsKey((java.lang.Object) recovery53);
        properties51.clear();
        boolean boolean58 = properties51.containsKey((java.lang.Object) "hi!");
        java.lang.Object obj59 = null;
        boolean boolean60 = properties51.equals(obj59);
        java.util.Properties properties61 = new java.util.Properties(properties51);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties62 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties62.setCheckpointInterval((long) (byte) -1);
        java.lang.String str65 = atomikosProperties62.getLogBaseDir();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj66 = properties1.put((java.lang.Object) properties61, (java.lang.Object) str65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(wildcardEnumeration9);
        org.junit.Assert.assertNotNull(objEnumeration12);
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objEnumeration32);
        org.junit.Assert.assertNotNull(objEnumeration35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel46 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel46.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(objCollection49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5 + "'", int54 == 5);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(str65);
    }

    @Test
    public void test00221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00221");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean13 = properties1.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean12);
        boolean boolean14 = properties1.isEmpty();
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties16.elements();
        boolean boolean19 = properties16.containsKey((java.lang.Object) 10.0f);
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties16);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.setCheckpointInterval((long) (byte) -1);
        atomikosProperties21.setThreadedTwoPhaseCommit(true);
        java.lang.String str26 = atomikosProperties21.getOutputDir();
        java.lang.String str27 = atomikosProperties21.getTransactionManagerUniqueName();
        java.lang.Object obj28 = properties1.get((java.lang.Object) atomikosProperties21);
        java.util.Properties properties29 = new java.util.Properties();
        java.util.Properties properties30 = null;
        java.util.Properties properties31 = new java.util.Properties(properties30);
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties31.elements();
        java.util.Properties properties33 = null;
        java.util.Properties properties34 = new java.util.Properties(properties33);
        java.util.Enumeration<java.lang.Object> objEnumeration35 = properties34.elements();
        java.lang.String str37 = properties34.getProperty("");
        properties31.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties34);
        java.util.Properties properties40 = null;
        java.util.Properties properties41 = new java.util.Properties(properties40);
        boolean boolean42 = properties41.isEmpty();
        boolean boolean43 = properties31.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean42);
        boolean boolean44 = properties31.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration45 = properties31.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties46.setCheckpointInterval((long) (byte) -1);
        atomikosProperties46.setConsoleFileName("");
        java.lang.String str51 = atomikosProperties46.getLogBaseName();
        long long52 = atomikosProperties46.getCheckpointInterval();
        java.lang.String str53 = atomikosProperties46.getLogBaseDir();
        atomikosProperties46.setEnableLogging(true);
        java.lang.Object obj56 = properties29.putIfAbsent((java.lang.Object) objEnumeration45, (java.lang.Object) atomikosProperties46);
        java.util.Enumeration<java.lang.Object> objEnumeration57 = properties29.keys();
        java.util.Properties properties58 = null;
        java.util.Properties properties59 = new java.util.Properties(properties58);
        java.util.Enumeration<java.lang.Object> objEnumeration60 = properties59.elements();
        java.util.Properties properties61 = null;
        java.util.Properties properties62 = new java.util.Properties(properties61);
        java.util.Enumeration<java.lang.Object> objEnumeration63 = properties62.elements();
        java.lang.String str65 = properties62.getProperty("");
        properties59.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties62);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties68.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj71 = properties59.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties68);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel72 = atomikosProperties68.getConsoleLogLevel();
        int int73 = atomikosProperties68.getConsoleFileCount();
        java.lang.Class<?> wildcardClass74 = atomikosProperties68.getClass();
        java.lang.Object obj75 = properties1.put((java.lang.Object) properties29, (java.lang.Object) atomikosProperties68);
        java.io.Writer writer76 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties29.store(writer76, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(objEnumeration32);
        org.junit.Assert.assertNotNull(objEnumeration35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(objEnumeration45);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "tmlog" + "'", str51, "tmlog");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-1L) + "'", long52 == (-1L));
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(objEnumeration57);
        org.junit.Assert.assertNotNull(objEnumeration60);
        org.junit.Assert.assertNotNull(objEnumeration63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel72 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel72.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNull(obj75);
    }

    @Test
    public void test00222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00222");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet3 = properties1.entrySet();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Object obj6 = properties1.replace((java.lang.Object) "hi!", obj5);
        boolean boolean8 = properties1.equals((java.lang.Object) 1.0f);
        java.util.Enumeration<java.lang.Object> objEnumeration9 = properties1.keys();
        java.lang.String str12 = properties1.getProperty("{}", "tm.out");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEntrySet3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(objEnumeration9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tm.out" + "'", str12, "tm.out");
    }

    @Test
    public void test00223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00223");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        java.util.Enumeration<java.lang.Object> objEnumeration14 = properties1.keys();
        java.io.InputStream inputStream15 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(inputStream15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(objEnumeration14);
    }

    @Test
    public void test00224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00224");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        atomikosProperties10.setSerialJtaTransactions(false);
        atomikosProperties10.setMaxTimeout((long) (short) 1);
        java.lang.String str18 = atomikosProperties10.getService();
        java.lang.Class<?> wildcardClass19 = atomikosProperties10.getClass();
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test00225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00225");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties1.elements();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        boolean boolean6 = properties5.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet7 = properties5.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int9 = recovery8.getMaxRetries();
        recovery8.setForgetOrphanedLogEntriesDelay((-1L));
        recovery8.setForgetOrphanedLogEntriesDelay((long) (-1));
        boolean boolean14 = properties1.remove((java.lang.Object) properties5, (java.lang.Object) (-1));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.getLogBaseDir();
        java.lang.String str17 = atomikosProperties15.getLogBaseDir();
        int int18 = atomikosProperties15.getConsoleFileCount();
        java.util.Properties properties19 = null;
        java.util.Properties properties20 = new java.util.Properties(properties19);
        boolean boolean21 = properties20.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration22 = properties20.elements();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet23 = properties20.entrySet();
        boolean boolean25 = properties5.replace((java.lang.Object) atomikosProperties15, (java.lang.Object) properties20, (java.lang.Object) 1);
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        boolean boolean28 = properties27.isEmpty();
        boolean boolean29 = properties27.isEmpty();
        properties20.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties27);
        java.io.OutputStream outputStream31 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties20.storeToXML(outputStream31, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objEntrySet7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objEnumeration22);
        org.junit.Assert.assertNotNull(objEntrySet23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test00226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00226");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean13 = properties1.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean12);
        boolean boolean14 = properties1.isEmpty();
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties16.elements();
        boolean boolean19 = properties16.containsKey((java.lang.Object) 10.0f);
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties16);
        java.lang.Class<?> wildcardClass21 = properties1.getClass();
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test00227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00227");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Properties properties3 = new java.util.Properties(properties1);
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        boolean boolean6 = properties5.isEmpty();
        java.lang.String str8 = properties5.getProperty("hi!");
        java.util.Set<java.lang.Object> objSet9 = properties5.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties5.entrySet();
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties12.elements();
        java.util.Properties properties14 = null;
        java.util.Properties properties15 = new java.util.Properties(properties14);
        boolean boolean16 = properties15.isEmpty();
        java.util.Properties properties17 = new java.util.Properties(properties15);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet18 = properties15.entrySet();
        java.lang.Object obj19 = properties5.getOrDefault((java.lang.Object) properties12, (java.lang.Object) objEntrySet18);
        boolean boolean20 = properties1.containsKey((java.lang.Object) objEntrySet18);
        java.util.Properties properties21 = new java.util.Properties();
        java.util.Properties properties22 = null;
        java.util.Properties properties23 = new java.util.Properties(properties22);
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties23.elements();
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties26.elements();
        java.lang.String str29 = properties26.getProperty("");
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        java.util.Properties properties32 = null;
        java.util.Properties properties33 = new java.util.Properties(properties32);
        boolean boolean34 = properties33.isEmpty();
        boolean boolean35 = properties23.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean34);
        boolean boolean36 = properties23.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration37 = properties23.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties38.setCheckpointInterval((long) (byte) -1);
        atomikosProperties38.setConsoleFileName("");
        java.lang.String str43 = atomikosProperties38.getLogBaseName();
        long long44 = atomikosProperties38.getCheckpointInterval();
        java.lang.String str45 = atomikosProperties38.getLogBaseDir();
        atomikosProperties38.setEnableLogging(true);
        java.lang.Object obj48 = properties21.putIfAbsent((java.lang.Object) objEnumeration37, (java.lang.Object) atomikosProperties38);
        java.util.Enumeration<java.lang.Object> objEnumeration49 = properties21.keys();
        java.lang.String str51 = properties21.getProperty("tm.out");
        java.util.Properties properties52 = null;
        java.util.Properties properties53 = new java.util.Properties(properties52);
        boolean boolean54 = properties53.isEmpty();
        java.util.Properties properties55 = new java.util.Properties(properties53);
        java.lang.Object obj56 = properties21.get((java.lang.Object) properties55);
        java.util.Properties properties57 = null;
        java.util.Properties properties58 = new java.util.Properties(properties57);
        java.util.Enumeration<java.lang.Object> objEnumeration59 = properties58.elements();
        java.util.Properties properties60 = null;
        java.util.Properties properties61 = new java.util.Properties(properties60);
        java.util.Enumeration<java.lang.Object> objEnumeration62 = properties61.elements();
        java.lang.String str64 = properties61.getProperty("");
        properties58.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties61);
        java.util.Properties properties67 = null;
        java.util.Properties properties68 = new java.util.Properties(properties67);
        boolean boolean69 = properties68.isEmpty();
        boolean boolean70 = properties58.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean69);
        boolean boolean71 = properties58.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration72 = properties58.keys();
        properties21.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties58);
        java.util.Enumeration<java.lang.Object> objEnumeration74 = properties21.keys();
        boolean boolean75 = properties1.equals((java.lang.Object) properties21);
        java.lang.String str76 = properties1.toString();
        java.lang.Object obj77 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean78 = properties1.containsValue(obj77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(objSet9);
        org.junit.Assert.assertNotNull(objEntrySet10);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objEntrySet18);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "[]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "[]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objEnumeration37);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(objEnumeration49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(objEnumeration59);
        org.junit.Assert.assertNotNull(objEnumeration62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(objEnumeration72);
        org.junit.Assert.assertNotNull(objEnumeration74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "{}" + "'", str76, "{}");
    }

    @Test
    public void test00228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00228");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        java.util.Enumeration<java.lang.Object> objEnumeration14 = properties1.keys();
        java.lang.String str15 = properties1.toString();
        java.io.OutputStream outputStream16 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(outputStream16, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(objEnumeration14);
    }

    @Test
    public void test00229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00229");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties3.elements();
        java.util.Properties properties5 = null;
        java.util.Properties properties6 = new java.util.Properties(properties5);
        java.util.Enumeration<java.lang.Object> objEnumeration7 = properties6.elements();
        java.lang.String str9 = properties6.getProperty("");
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties6);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj15 = properties3.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties12);
        atomikosProperties12.setSerialJtaTransactions(false);
        boolean boolean18 = properties1.equals((java.lang.Object) false);
        java.io.Reader reader19 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(reader19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objEnumeration7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test00230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00230");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        boolean boolean4 = properties1.contains((java.lang.Object) 1L);
        java.util.Set<java.lang.Object> objSet5 = properties1.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setCheckpointInterval((long) (byte) -1);
        atomikosProperties6.setThreadedTwoPhaseCommit(true);
        atomikosProperties6.setSerialJtaTransactions(false);
        atomikosProperties6.setOutputDir("");
        java.lang.String str15 = atomikosProperties6.getConsoleFileName();
        java.lang.String str16 = atomikosProperties6.getLogBaseName();
        atomikosProperties6.setEnableLogging(false);
        boolean boolean19 = properties1.containsKey((java.lang.Object) atomikosProperties6);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet20 = properties1.entrySet();
        java.io.InputStream inputStream21 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(inputStream21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objSet5);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tm.out" + "'", str15, "tm.out");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objEntrySet20);
    }

    @Test
    public void test00231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00231");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        java.util.Properties properties14 = null;
        java.util.Properties properties15 = new java.util.Properties(properties14);
        boolean boolean16 = properties15.isEmpty();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.lang.Object obj18 = properties1.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setCheckpointInterval((long) (byte) -1);
        atomikosProperties19.setThreadedTwoPhaseCommit(true);
        java.lang.String str24 = atomikosProperties19.getOutputDir();
        java.util.Properties properties25 = atomikosProperties19.asProperties();
        java.lang.Object obj26 = properties1.remove((java.lang.Object) properties25);
        java.util.Properties properties27 = null;
        java.util.Properties properties28 = new java.util.Properties(properties27);
        boolean boolean29 = properties28.isEmpty();
        java.lang.String str31 = properties28.getProperty("hi!");
        boolean boolean33 = properties28.contains((java.lang.Object) 10.0f);
        java.util.Set<java.lang.Object> objSet34 = properties28.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int36 = atomikosProperties35.getMaxActives();
        boolean boolean37 = properties28.equals((java.lang.Object) atomikosProperties35);
        atomikosProperties35.setSerialJtaTransactions(false);
        atomikosProperties35.setEnableLogging(false);
        java.lang.Object obj42 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj43 = properties1.putIfAbsent((java.lang.Object) atomikosProperties35, obj42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objSet34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 50 + "'", int36 == 50);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test00232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00232");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet3 = properties1.entrySet();
        java.lang.Object obj6 = properties1.setProperty("tm.out", "hi!");
        boolean boolean7 = properties1.isEmpty();
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties9.elements();
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties12.elements();
        java.lang.String str15 = properties12.getProperty("");
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties12);
        boolean boolean18 = properties9.contains((java.lang.Object) 0);
        boolean boolean19 = properties1.containsValue((java.lang.Object) boolean18);
        java.io.Writer writer20 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(writer20, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEntrySet3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test00233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00233");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        properties1.clear();
        java.util.Properties properties7 = new java.util.Properties(properties1);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties9.elements();
        boolean boolean11 = properties9.isEmpty();
        java.util.Set<java.lang.String> strSet12 = properties9.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.setCheckpointInterval((long) (byte) -1);
        atomikosProperties13.setThreadedTwoPhaseCommit(true);
        java.lang.String str18 = atomikosProperties13.getOutputDir();
        java.util.Properties properties19 = atomikosProperties13.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.setCheckpointInterval((long) (byte) -1);
        atomikosProperties20.setThreadedTwoPhaseCommit(true);
        atomikosProperties20.setSerialJtaTransactions(false);
        atomikosProperties20.setOutputDir("");
        java.lang.String str29 = atomikosProperties20.getConsoleFileName();
        java.lang.String str30 = atomikosProperties20.getLogBaseName();
        atomikosProperties20.setDefaultJtaTimeout(0L);
        java.lang.Object obj33 = properties9.putIfAbsent((java.lang.Object) atomikosProperties13, (java.lang.Object) atomikosProperties20);
        java.lang.String str35 = properties9.getProperty("hi!");
        java.util.Enumeration<java.lang.Object> objEnumeration36 = properties9.keys();
        boolean boolean37 = properties1.contains((java.lang.Object) properties9);
        java.io.PrintWriter printWriter38 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printWriter38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tm.out" + "'", str29, "tm.out");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "tmlog" + "'", str30, "tmlog");
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(objEnumeration36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test00234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00234");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = null;
        java.util.Properties properties2 = new java.util.Properties(properties1);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties5.elements();
        java.lang.String str8 = properties5.getProperty("");
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        boolean boolean13 = properties12.isEmpty();
        boolean boolean14 = properties2.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean13);
        boolean boolean15 = properties2.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setCheckpointInterval((long) (byte) -1);
        atomikosProperties17.setConsoleFileName("");
        java.lang.String str22 = atomikosProperties17.getLogBaseName();
        long long23 = atomikosProperties17.getCheckpointInterval();
        java.lang.String str24 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.setEnableLogging(true);
        java.lang.Object obj27 = properties0.putIfAbsent((java.lang.Object) objEnumeration16, (java.lang.Object) atomikosProperties17);
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties0.keys();
        java.io.Reader reader29 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.load(reader29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(objEnumeration28);
    }

    @Test
    public void test00235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00235");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties1.elements();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        boolean boolean6 = properties5.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet7 = properties5.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int9 = recovery8.getMaxRetries();
        recovery8.setForgetOrphanedLogEntriesDelay((-1L));
        recovery8.setForgetOrphanedLogEntriesDelay((long) (-1));
        boolean boolean14 = properties1.remove((java.lang.Object) properties5, (java.lang.Object) (-1));
        java.io.OutputStream outputStream15 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.storeToXML(outputStream15, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objEntrySet7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test00236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00236");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties1.elements();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        boolean boolean6 = properties5.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet7 = properties5.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int9 = recovery8.getMaxRetries();
        recovery8.setForgetOrphanedLogEntriesDelay((-1L));
        recovery8.setForgetOrphanedLogEntriesDelay((long) (-1));
        boolean boolean14 = properties1.remove((java.lang.Object) properties5, (java.lang.Object) (-1));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.getLogBaseDir();
        java.lang.String str17 = atomikosProperties15.getLogBaseDir();
        int int18 = atomikosProperties15.getConsoleFileCount();
        java.util.Properties properties19 = null;
        java.util.Properties properties20 = new java.util.Properties(properties19);
        boolean boolean21 = properties20.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration22 = properties20.elements();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet23 = properties20.entrySet();
        boolean boolean25 = properties5.replace((java.lang.Object) atomikosProperties15, (java.lang.Object) properties20, (java.lang.Object) 1);
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        boolean boolean28 = properties27.isEmpty();
        boolean boolean29 = properties27.isEmpty();
        properties20.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties27);
        java.util.Properties properties31 = null;
        java.util.Properties properties32 = new java.util.Properties(properties31);
        boolean boolean33 = properties32.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery34 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int35 = recovery34.getMaxRetries();
        boolean boolean36 = properties32.containsKey((java.lang.Object) recovery34);
        properties32.clear();
        boolean boolean38 = properties27.contains((java.lang.Object) properties32);
        java.io.OutputStream outputStream39 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties32.storeToXML(outputStream39, "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objEntrySet7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objEnumeration22);
        org.junit.Assert.assertNotNull(objEntrySet23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test00237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00237");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties7.elements();
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties10.elements();
        java.lang.String str13 = properties10.getProperty("");
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj19 = properties7.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties16);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel20 = atomikosProperties16.getConsoleLogLevel();
        int int21 = atomikosProperties16.getConsoleFileCount();
        java.lang.Object obj22 = properties1.get((java.lang.Object) atomikosProperties16);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties23.setCheckpointInterval((long) (byte) -1);
        atomikosProperties23.setConsoleFileName("");
        java.lang.String str28 = atomikosProperties23.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setCheckpointInterval((long) (byte) -1);
        atomikosProperties29.setThreadedTwoPhaseCommit(true);
        java.util.Properties properties34 = null;
        java.util.Properties properties35 = new java.util.Properties(properties34);
        java.util.Enumeration<java.lang.Object> objEnumeration36 = properties35.elements();
        java.util.Properties properties37 = null;
        java.util.Properties properties38 = new java.util.Properties(properties37);
        java.util.Enumeration<java.lang.Object> objEnumeration39 = properties38.elements();
        java.lang.String str41 = properties38.getProperty("");
        properties35.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj47 = properties35.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties44);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel48 = atomikosProperties44.getConsoleLogLevel();
        atomikosProperties29.setConsoleLogLevel(atomikosLoggingLevel48);
        atomikosProperties23.setConsoleLogLevel(atomikosLoggingLevel48);
        atomikosProperties23.setConsoleFileCount(5);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery53 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery53.setMaxRetries((-1));
        long long56 = recovery53.getRetryInterval();
        java.lang.Object obj57 = properties1.replace((java.lang.Object) 5, (java.lang.Object) long56);
        java.lang.Object obj58 = properties1.clone();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet59 = properties1.entrySet();
        java.io.PrintStream printStream60 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printStream60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel20 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel20.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertNotNull(objEnumeration36);
        org.junit.Assert.assertNotNull(objEnumeration39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel48 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel48.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 10000L + "'", long56 == 10000L);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "{}");
        org.junit.Assert.assertNotNull(objEntrySet59);
    }

    @Test
    public void test00238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00238");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet3 = properties1.entrySet();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Object obj6 = properties1.replace((java.lang.Object) "hi!", obj5);
        boolean boolean8 = properties1.equals((java.lang.Object) 1.0f);
        java.util.Properties properties9 = new java.util.Properties(properties1);
        properties1.clear();
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties1.elements();
        java.util.Enumeration<?> wildcardEnumeration12 = properties1.propertyNames();
        java.lang.String str14 = properties1.getProperty("");
        java.io.PrintWriter printWriter15 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printWriter15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEntrySet3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertNotNull(wildcardEnumeration12);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test00239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00239");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Properties properties3 = new java.util.Properties(properties1);
        java.lang.Object obj6 = properties3.putIfAbsent((java.lang.Object) 10, (java.lang.Object) '#');
        java.lang.String str7 = properties3.toString();
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        boolean boolean10 = properties9.isEmpty();
        boolean boolean12 = properties9.contains((java.lang.Object) 1L);
        java.util.Set<java.lang.Object> objSet13 = properties9.keySet();
        java.lang.Object obj15 = properties9.remove((java.lang.Object) "{10=#}");
        java.lang.Object obj17 = properties9.remove((java.lang.Object) "");
        boolean boolean18 = properties3.contains((java.lang.Object) "");
        java.util.Enumeration<java.lang.Object> objEnumeration19 = properties3.elements();
        java.io.InputStream inputStream20 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.loadFromXML(inputStream20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{10=#}" + "'", str7, "{10=#}");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objSet13);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(objEnumeration19);
    }

    @Test
    public void test00240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00240");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) (byte) -1);
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        atomikosProperties0.setSerialJtaTransactions(false);
        java.lang.String str7 = atomikosProperties0.getLogBaseName();
        long long8 = atomikosProperties0.getCheckpointInterval();
        java.lang.String str9 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setConsoleFileLimit((int) (short) -1);
        atomikosProperties0.setConsoleFileName("tm.out");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test00241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00241");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Properties properties3 = new java.util.Properties(properties1);
        java.lang.Object obj6 = properties3.putIfAbsent((java.lang.Object) 10, (java.lang.Object) '#');
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        boolean boolean9 = properties8.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties8.entrySet();
        java.lang.Object obj12 = new java.lang.Object();
        java.lang.Object obj13 = properties8.replace((java.lang.Object) "hi!", obj12);
        boolean boolean15 = properties8.equals((java.lang.Object) 1.0f);
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties8.keys();
        boolean boolean17 = properties3.containsKey((java.lang.Object) objEnumeration16);
        java.io.OutputStream outputStream18 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.store(outputStream18, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objEntrySet10);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test00242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00242");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Properties properties3 = new java.util.Properties(properties1);
        java.lang.Object obj6 = properties3.putIfAbsent((java.lang.Object) 10, (java.lang.Object) '#');
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        boolean boolean9 = properties8.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties8.entrySet();
        java.lang.Object obj12 = new java.lang.Object();
        java.lang.Object obj13 = properties8.replace((java.lang.Object) "hi!", obj12);
        boolean boolean15 = properties8.equals((java.lang.Object) 1.0f);
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties8.keys();
        boolean boolean17 = properties3.containsKey((java.lang.Object) objEnumeration16);
        java.io.OutputStream outputStream18 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.save(outputStream18, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objEntrySet10);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test00243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00243");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) (byte) -1);
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        atomikosProperties0.setSerialJtaTransactions(false);
        java.lang.String str7 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setDefaultJtaTimeout((long) (short) 1);
        atomikosProperties0.setConsoleFileCount((int) (byte) -1);
        atomikosProperties0.setConsoleFileLimit((int) ' ');
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel14);
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
    }

    @Test
    public void test00244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00244");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean13 = properties1.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean12);
        boolean boolean14 = properties1.isEmpty();
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties16.elements();
        boolean boolean19 = properties16.containsKey((java.lang.Object) 10.0f);
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties16);
        java.util.Properties properties21 = new java.util.Properties(properties1);
        java.util.Set<java.lang.Object> objSet22 = properties1.keySet();
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objSet22);
    }

    @Test
    public void test00245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00245");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        boolean boolean10 = properties1.contains((java.lang.Object) 0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties11.setCheckpointInterval((long) (byte) -1);
        atomikosProperties11.setThreadedTwoPhaseCommit(true);
        atomikosProperties11.setSerialJtaTransactions(false);
        atomikosProperties11.setOutputDir("");
        java.lang.String str20 = atomikosProperties11.getConsoleFileName();
        java.lang.String str21 = atomikosProperties11.getLogBaseName();
        atomikosProperties11.setDefaultJtaTimeout(0L);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel24 = atomikosProperties11.getConsoleLogLevel();
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        boolean boolean27 = properties26.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery28 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int29 = recovery28.getMaxRetries();
        boolean boolean30 = properties26.containsKey((java.lang.Object) recovery28);
        properties26.clear();
        boolean boolean33 = properties26.containsKey((java.lang.Object) "hi!");
        java.util.Properties properties34 = null;
        java.util.Properties properties35 = new java.util.Properties(properties34);
        boolean boolean36 = properties35.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties37.setCheckpointInterval((long) (byte) -1);
        atomikosProperties37.setConsoleFileName("");
        java.lang.String str42 = atomikosProperties37.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties43.setCheckpointInterval((long) (byte) -1);
        atomikosProperties43.setThreadedTwoPhaseCommit(true);
        java.util.Properties properties48 = null;
        java.util.Properties properties49 = new java.util.Properties(properties48);
        java.util.Enumeration<java.lang.Object> objEnumeration50 = properties49.elements();
        java.util.Properties properties51 = null;
        java.util.Properties properties52 = new java.util.Properties(properties51);
        java.util.Enumeration<java.lang.Object> objEnumeration53 = properties52.elements();
        java.lang.String str55 = properties52.getProperty("");
        properties49.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties52);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties58.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj61 = properties49.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties58);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel62 = atomikosProperties58.getConsoleLogLevel();
        atomikosProperties43.setConsoleLogLevel(atomikosLoggingLevel62);
        atomikosProperties37.setConsoleLogLevel(atomikosLoggingLevel62);
        boolean boolean66 = properties26.replace((java.lang.Object) properties35, (java.lang.Object) atomikosProperties37, (java.lang.Object) 10.0d);
        java.util.Properties properties67 = new java.util.Properties(properties26);
        boolean boolean68 = properties26.isEmpty();
        int int69 = properties26.size();
        java.lang.Object obj70 = properties1.replace((java.lang.Object) atomikosLoggingLevel24, (java.lang.Object) properties26);
        java.lang.Class<?> wildcardClass71 = properties26.getClass();
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tm.out" + "'", str20, "tm.out");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel24 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel24.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "tmlog" + "'", str42, "tmlog");
        org.junit.Assert.assertNotNull(objEnumeration50);
        org.junit.Assert.assertNotNull(objEnumeration53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel62 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel62.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test00246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00246");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties1.elements();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        boolean boolean6 = properties5.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet7 = properties5.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int9 = recovery8.getMaxRetries();
        recovery8.setForgetOrphanedLogEntriesDelay((-1L));
        recovery8.setForgetOrphanedLogEntriesDelay((long) (-1));
        boolean boolean14 = properties1.remove((java.lang.Object) properties5, (java.lang.Object) (-1));
        boolean boolean15 = properties1.isEmpty();
        java.io.PrintStream printStream16 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printStream16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objEntrySet7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test00247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00247");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        boolean boolean4 = properties1.contains((java.lang.Object) 1L);
        boolean boolean5 = properties1.isEmpty();
        boolean boolean7 = properties1.containsValue((java.lang.Object) 5);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        boolean boolean10 = properties9.isEmpty();
        java.lang.String str12 = properties9.getProperty("hi!");
        java.util.Properties properties14 = null;
        java.util.Properties properties15 = new java.util.Properties(properties14);
        boolean boolean16 = properties15.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery17 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int18 = recovery17.getMaxRetries();
        boolean boolean19 = properties15.containsKey((java.lang.Object) recovery17);
        recovery17.setRetryInterval((long) (short) -1);
        recovery17.setRetryInterval((long) 0);
        recovery17.setMaxRetries((int) (byte) 10);
        java.lang.Class<?> wildcardClass26 = recovery17.getClass();
        java.lang.Object obj27 = properties9.replace((java.lang.Object) (byte) -1, (java.lang.Object) recovery17);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery28 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery28.setRetryInterval((long) 100);
        int int31 = recovery28.getMaxRetries();
        recovery28.setDelay((long) (short) 100);
        int int34 = recovery28.getMaxRetries();
        java.util.Properties properties35 = null;
        java.util.Properties properties36 = new java.util.Properties(properties35);
        boolean boolean37 = properties36.isEmpty();
        java.lang.String str39 = properties36.getProperty("hi!");
        boolean boolean41 = properties36.contains((java.lang.Object) 10.0f);
        java.util.Set<java.lang.Object> objSet42 = properties36.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int44 = atomikosProperties43.getMaxActives();
        boolean boolean45 = properties36.equals((java.lang.Object) atomikosProperties43);
        atomikosProperties43.setSerialJtaTransactions(false);
        int int48 = atomikosProperties43.getMaxActives();
        boolean boolean49 = properties1.replace((java.lang.Object) recovery17, (java.lang.Object) int34, (java.lang.Object) atomikosProperties43);
        java.io.OutputStream outputStream50 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(outputStream50, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5 + "'", int34 == 5);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objSet42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 50 + "'", int44 == 50);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 50 + "'", int48 == 50);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test00248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00248");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        boolean boolean4 = properties1.contains((java.lang.Object) 1L);
        java.util.Set<java.lang.Object> objSet5 = properties1.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setCheckpointInterval((long) (byte) -1);
        atomikosProperties6.setThreadedTwoPhaseCommit(true);
        atomikosProperties6.setSerialJtaTransactions(false);
        atomikosProperties6.setOutputDir("");
        java.lang.String str15 = atomikosProperties6.getConsoleFileName();
        java.lang.String str16 = atomikosProperties6.getLogBaseName();
        atomikosProperties6.setEnableLogging(false);
        boolean boolean19 = properties1.containsKey((java.lang.Object) atomikosProperties6);
        atomikosProperties6.setConsoleFileName("");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objSet5);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tm.out" + "'", str15, "tm.out");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test00249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00249");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = atomikosProperties10.getConsoleLogLevel();
        atomikosProperties10.setConsoleFileLimit((int) '4');
        atomikosProperties10.setEnableLogging(false);
        java.lang.Class<?> wildcardClass19 = atomikosProperties10.getClass();
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel14 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel14.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test00250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00250");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        boolean boolean4 = properties1.contains((java.lang.Object) 1L);
        java.util.Set<java.lang.Object> objSet5 = properties1.keySet();
        java.lang.Object obj8 = properties1.setProperty("", "");
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        boolean boolean11 = properties10.isEmpty();
        java.lang.String str13 = properties10.getProperty("hi!");
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        boolean boolean17 = properties16.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int19 = recovery18.getMaxRetries();
        boolean boolean20 = properties16.containsKey((java.lang.Object) recovery18);
        recovery18.setRetryInterval((long) (short) -1);
        recovery18.setRetryInterval((long) 0);
        recovery18.setMaxRetries((int) (byte) 10);
        java.lang.Class<?> wildcardClass27 = recovery18.getClass();
        java.lang.Object obj28 = properties10.replace((java.lang.Object) (byte) -1, (java.lang.Object) recovery18);
        java.util.Properties properties29 = null;
        java.util.Properties properties30 = new java.util.Properties(properties29);
        boolean boolean31 = properties30.isEmpty();
        java.lang.String str33 = properties30.getProperty("hi!");
        java.util.Set<java.lang.String> strSet34 = properties30.stringPropertyNames();
        java.lang.Object obj35 = new java.lang.Object();
        boolean boolean36 = properties1.replace((java.lang.Object) (byte) -1, (java.lang.Object) properties30, obj35);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties37.setCheckpointInterval((long) (byte) -1);
        atomikosProperties37.setThreadedTwoPhaseCommit(true);
        atomikosProperties37.setSerialJtaTransactions(false);
        atomikosProperties37.setOutputDir("");
        java.lang.String str46 = atomikosProperties37.getConsoleFileName();
        java.lang.String str47 = atomikosProperties37.getLogBaseName();
        atomikosProperties37.setConsoleFileCount((int) (byte) -1);
        java.util.Properties properties50 = atomikosProperties37.asProperties();
        java.util.Properties properties51 = null;
        java.util.Properties properties52 = new java.util.Properties(properties51);
        java.util.Enumeration<java.lang.Object> objEnumeration53 = properties52.elements();
        boolean boolean54 = properties52.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration55 = properties52.keys();
        boolean boolean56 = properties50.containsValue((java.lang.Object) properties52);
        properties30.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties52);
        java.io.InputStream inputStream58 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties30.loadFromXML(inputStream58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objSet5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "tm.out" + "'", str46, "tm.out");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "tmlog" + "'", str47, "tmlog");
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertNotNull(objEnumeration53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objEnumeration55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test00251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00251");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties1.elements();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        boolean boolean6 = properties5.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet7 = properties5.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int9 = recovery8.getMaxRetries();
        recovery8.setForgetOrphanedLogEntriesDelay((-1L));
        recovery8.setForgetOrphanedLogEntriesDelay((long) (-1));
        boolean boolean14 = properties1.remove((java.lang.Object) properties5, (java.lang.Object) (-1));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.getLogBaseDir();
        java.lang.String str17 = atomikosProperties15.getLogBaseDir();
        int int18 = atomikosProperties15.getConsoleFileCount();
        java.util.Properties properties19 = null;
        java.util.Properties properties20 = new java.util.Properties(properties19);
        boolean boolean21 = properties20.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration22 = properties20.elements();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet23 = properties20.entrySet();
        boolean boolean25 = properties5.replace((java.lang.Object) atomikosProperties15, (java.lang.Object) properties20, (java.lang.Object) 1);
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        boolean boolean28 = properties27.isEmpty();
        boolean boolean29 = properties27.isEmpty();
        properties20.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties27);
        java.io.Reader reader31 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties27.load(reader31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objEntrySet7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objEnumeration22);
        org.junit.Assert.assertNotNull(objEntrySet23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test00252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00252");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) (byte) -1);
        atomikosProperties0.setConsoleFileName("");
        java.lang.String str5 = atomikosProperties0.getLogBaseName();
        long long6 = atomikosProperties0.getCheckpointInterval();
        java.lang.String str7 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setEnableLogging(true);
        long long10 = atomikosProperties0.getDefaultJtaTimeout();
        boolean boolean11 = atomikosProperties0.isSerialJtaTransactions();
        java.lang.String str12 = atomikosProperties0.getOutputDir();
        java.lang.String str13 = atomikosProperties0.getOutputDir();
        java.util.Properties properties14 = atomikosProperties0.asProperties();
        java.lang.Object obj15 = null;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.getLogBaseDir();
        java.lang.String str18 = atomikosProperties16.getLogBaseDir();
        boolean boolean19 = atomikosProperties16.isAllowSubTransactions();
        boolean boolean20 = atomikosProperties16.isSerialJtaTransactions();
        java.lang.String str21 = atomikosProperties16.getOutputDir();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj22 = properties14.getOrDefault(obj15, (java.lang.Object) str21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test00253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00253");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) (byte) -1);
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        atomikosProperties0.setSerialJtaTransactions(false);
        java.lang.String str7 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setAllowSubTransactions(false);
        atomikosProperties0.setLogBaseName("{10=#}");
        atomikosProperties0.setCheckpointInterval((long) 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
    }

    @Test
    public void test00254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00254");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        java.util.Properties properties14 = null;
        java.util.Properties properties15 = new java.util.Properties(properties14);
        boolean boolean16 = properties15.isEmpty();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setCheckpointInterval((long) (byte) -1);
        atomikosProperties18.setConsoleFileName("");
        java.lang.String str23 = atomikosProperties18.getLogBaseName();
        long long24 = atomikosProperties18.getCheckpointInterval();
        atomikosProperties18.setForceShutdownOnVmExit(false);
        java.util.Properties properties27 = atomikosProperties18.asProperties();
        boolean boolean28 = atomikosProperties18.isAllowSubTransactions();
        java.lang.Object obj29 = null;
        java.lang.Object obj30 = properties1.getOrDefault((java.lang.Object) boolean28, obj29);
        java.util.Properties properties31 = null;
        java.util.Properties properties32 = new java.util.Properties(properties31);
        boolean boolean33 = properties32.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery34 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int35 = recovery34.getMaxRetries();
        boolean boolean36 = properties32.containsKey((java.lang.Object) recovery34);
        properties32.clear();
        boolean boolean39 = properties32.containsKey((java.lang.Object) "hi!");
        java.util.Properties properties40 = null;
        java.util.Properties properties41 = new java.util.Properties(properties40);
        boolean boolean42 = properties41.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties43.setCheckpointInterval((long) (byte) -1);
        atomikosProperties43.setConsoleFileName("");
        java.lang.String str48 = atomikosProperties43.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties49.setCheckpointInterval((long) (byte) -1);
        atomikosProperties49.setThreadedTwoPhaseCommit(true);
        java.util.Properties properties54 = null;
        java.util.Properties properties55 = new java.util.Properties(properties54);
        java.util.Enumeration<java.lang.Object> objEnumeration56 = properties55.elements();
        java.util.Properties properties57 = null;
        java.util.Properties properties58 = new java.util.Properties(properties57);
        java.util.Enumeration<java.lang.Object> objEnumeration59 = properties58.elements();
        java.lang.String str61 = properties58.getProperty("");
        properties55.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties58);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties64.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj67 = properties55.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties64);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel68 = atomikosProperties64.getConsoleLogLevel();
        atomikosProperties49.setConsoleLogLevel(atomikosLoggingLevel68);
        atomikosProperties43.setConsoleLogLevel(atomikosLoggingLevel68);
        boolean boolean72 = properties32.replace((java.lang.Object) properties41, (java.lang.Object) atomikosProperties43, (java.lang.Object) 10.0d);
        java.util.Set<java.lang.Object> objSet73 = properties41.keySet();
        boolean boolean74 = properties1.containsValue((java.lang.Object) properties41);
        java.io.InputStream inputStream75 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties41.load(inputStream75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tmlog" + "'", str23, "tmlog");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "tmlog" + "'", str48, "tmlog");
        org.junit.Assert.assertNotNull(objEnumeration56);
        org.junit.Assert.assertNotNull(objEnumeration59);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel68 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel68.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objSet73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test00255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00255");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int1 = recovery0.getMaxRetries();
        recovery0.setForgetOrphanedLogEntriesDelay((-1L));
        recovery0.setForgetOrphanedLogEntriesDelay((long) (-1));
        recovery0.setMaxRetries((int) 'a');
        recovery0.setDelay(300000L);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 5 + "'", int1 == 5);
    }

    @Test
    public void test00256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00256");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean13 = properties1.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean12);
        boolean boolean14 = properties1.isEmpty();
        java.util.Properties properties15 = new java.util.Properties();
        java.util.Properties properties16 = null;
        java.util.Properties properties17 = new java.util.Properties(properties16);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties17.elements();
        java.util.Properties properties19 = null;
        java.util.Properties properties20 = new java.util.Properties(properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties20.elements();
        java.lang.String str23 = properties20.getProperty("");
        properties17.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties20);
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        boolean boolean28 = properties27.isEmpty();
        boolean boolean29 = properties17.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean28);
        boolean boolean30 = properties17.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties17.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties32.setCheckpointInterval((long) (byte) -1);
        atomikosProperties32.setConsoleFileName("");
        java.lang.String str37 = atomikosProperties32.getLogBaseName();
        long long38 = atomikosProperties32.getCheckpointInterval();
        java.lang.String str39 = atomikosProperties32.getLogBaseDir();
        atomikosProperties32.setEnableLogging(true);
        java.lang.Object obj42 = properties15.putIfAbsent((java.lang.Object) objEnumeration31, (java.lang.Object) atomikosProperties32);
        java.util.Properties properties43 = null;
        java.util.Properties properties44 = new java.util.Properties(properties43);
        boolean boolean45 = properties44.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery46 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int47 = recovery46.getMaxRetries();
        boolean boolean48 = properties44.containsKey((java.lang.Object) recovery46);
        recovery46.setRetryInterval((long) (short) -1);
        recovery46.setDelay(10L);
        java.util.Properties properties53 = null;
        java.util.Properties properties54 = new java.util.Properties(properties53);
        boolean boolean55 = properties54.isEmpty();
        java.lang.Object obj56 = properties15.getOrDefault((java.lang.Object) recovery46, (java.lang.Object) properties54);
        java.util.Properties properties57 = null;
        java.util.Properties properties58 = new java.util.Properties(properties57);
        boolean boolean59 = properties58.isEmpty();
        java.lang.String str61 = properties58.getProperty("hi!");
        java.util.Set<java.lang.String> strSet62 = properties58.stringPropertyNames();
        java.lang.Object obj63 = properties58.clone();
        java.util.Properties properties64 = null;
        java.util.Properties properties65 = new java.util.Properties(properties64);
        java.util.Enumeration<java.lang.Object> objEnumeration66 = properties65.elements();
        java.util.Properties properties67 = null;
        java.util.Properties properties68 = new java.util.Properties(properties67);
        java.util.Enumeration<java.lang.Object> objEnumeration69 = properties68.elements();
        java.lang.String str71 = properties68.getProperty("");
        properties65.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties68);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties74 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties74.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj77 = properties65.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties74);
        atomikosProperties74.setSerialJtaTransactions(false);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel80 = atomikosProperties74.getConsoleLogLevel();
        java.lang.String str81 = atomikosProperties74.getTransactionManagerUniqueName();
        atomikosProperties74.setOutputDir("{10=#}");
        boolean boolean84 = properties1.replace((java.lang.Object) properties54, (java.lang.Object) properties58, (java.lang.Object) "{10=#}");
        java.lang.String str86 = properties58.getProperty("hi!");
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objEnumeration31);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tmlog" + "'", str37, "tmlog");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "{}");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals(obj63.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "{}");
        org.junit.Assert.assertNotNull(objEnumeration66);
        org.junit.Assert.assertNotNull(objEnumeration69);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel80 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel80.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(str86);
    }

    @Test
    public void test00257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00257");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setLogBaseName("hi!");
        atomikosProperties0.setService("");
        boolean boolean6 = atomikosProperties0.isAllowSubTransactions();
        atomikosProperties0.setForceShutdownOnVmExit(false);
        atomikosProperties0.setCheckpointInterval(0L);
        atomikosProperties0.setConsoleFileLimit(10);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test00258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00258");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) (byte) -1);
        atomikosProperties0.setConsoleFileName("");
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        boolean boolean8 = atomikosProperties0.isSerialJtaTransactions();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test00259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00259");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean13 = properties1.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean12);
        boolean boolean14 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties1.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setCheckpointInterval((long) (byte) -1);
        atomikosProperties16.setConsoleFileName("");
        java.lang.String str21 = atomikosProperties16.getLogBaseName();
        long long22 = atomikosProperties16.getCheckpointInterval();
        atomikosProperties16.setForceShutdownOnVmExit(false);
        atomikosProperties16.setTransactionManagerUniqueName("tmlog");
        atomikosProperties16.setLogBaseDir("");
        java.util.Properties properties29 = null;
        java.util.Properties properties30 = new java.util.Properties(properties29);
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties30.elements();
        java.util.Properties properties32 = null;
        java.util.Properties properties33 = new java.util.Properties(properties32);
        java.util.Enumeration<java.lang.Object> objEnumeration34 = properties33.elements();
        java.lang.String str36 = properties33.getProperty("");
        properties30.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties33);
        java.util.Properties properties39 = null;
        java.util.Properties properties40 = new java.util.Properties(properties39);
        boolean boolean41 = properties40.isEmpty();
        boolean boolean42 = properties30.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean41);
        boolean boolean43 = properties1.remove((java.lang.Object) "", (java.lang.Object) boolean42);
        java.lang.Object obj45 = null;
        java.util.Properties properties46 = null;
        java.util.Properties properties47 = new java.util.Properties(properties46);
        java.util.Enumeration<java.lang.Object> objEnumeration48 = properties47.elements();
        java.util.Properties properties49 = null;
        java.util.Properties properties50 = new java.util.Properties(properties49);
        java.util.Enumeration<java.lang.Object> objEnumeration51 = properties50.elements();
        java.lang.String str53 = properties50.getProperty("");
        properties47.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties50);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties56.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj59 = properties47.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties56);
        atomikosProperties56.setSerialJtaTransactions(false);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel62 = atomikosProperties56.getConsoleLogLevel();
        java.lang.String str63 = atomikosProperties56.getTransactionManagerUniqueName();
        atomikosProperties56.setOutputDir("{10=#}");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean66 = properties1.replace((java.lang.Object) 1L, obj45, (java.lang.Object) "{10=#}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNotNull(objEnumeration31);
        org.junit.Assert.assertNotNull(objEnumeration34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objEnumeration48);
        org.junit.Assert.assertNotNull(objEnumeration51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel62 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel62.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str63);
    }

    @Test
    public void test00260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00260");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.lang.Object obj4 = properties1.setProperty("{10=#}", "tm.out");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet5 = properties1.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties6.getRecovery();
        atomikosProperties6.setEnableLogging(false);
        long long11 = atomikosProperties6.getMaxTimeout();
        java.util.Properties properties12 = null;
        java.util.Properties properties13 = new java.util.Properties(properties12);
        java.util.Enumeration<java.lang.Object> objEnumeration14 = properties13.elements();
        java.lang.String str16 = properties13.getProperty("");
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        boolean boolean19 = properties18.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet20 = properties18.entrySet();
        java.lang.Object obj22 = new java.lang.Object();
        java.lang.Object obj23 = properties18.replace((java.lang.Object) "hi!", obj22);
        boolean boolean25 = properties18.equals((java.lang.Object) 1.0f);
        boolean boolean26 = properties13.containsKey((java.lang.Object) boolean25);
        java.lang.Object obj27 = properties1.put((java.lang.Object) atomikosProperties6, (java.lang.Object) properties13);
        java.lang.Object obj30 = properties1.setProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "{}");
        java.io.Reader reader31 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(reader31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(objEntrySet5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertNotNull(objEnumeration14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objEntrySet20);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(obj30);
    }

    @Test
    public void test00261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00261");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        boolean boolean3 = properties1.isEmpty();
        java.lang.String str6 = properties1.getProperty("{}", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str6, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
    }

    @Test
    public void test00262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00262");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet3 = properties1.entrySet();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Object obj6 = properties1.replace((java.lang.Object) "hi!", obj5);
        boolean boolean8 = properties1.equals((java.lang.Object) 1.0f);
        java.util.Properties properties9 = new java.util.Properties(properties1);
        java.io.InputStream inputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.loadFromXML(inputStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEntrySet3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test00263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00263");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean13 = properties1.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean12);
        boolean boolean14 = properties1.isEmpty();
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties16.elements();
        boolean boolean19 = properties16.containsKey((java.lang.Object) 10.0f);
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties16);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.setCheckpointInterval((long) (byte) -1);
        atomikosProperties21.setThreadedTwoPhaseCommit(true);
        java.lang.String str26 = atomikosProperties21.getOutputDir();
        java.lang.String str27 = atomikosProperties21.getTransactionManagerUniqueName();
        java.lang.Object obj28 = properties1.get((java.lang.Object) atomikosProperties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.getLogBaseDir();
        atomikosProperties29.setLogBaseName("hi!");
        atomikosProperties29.setService("");
        java.lang.String str35 = atomikosProperties29.getService();
        java.lang.Object obj36 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj37 = properties1.putIfAbsent((java.lang.Object) atomikosProperties29, obj36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
    }

    @Test
    public void test00264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00264");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.setRetryInterval((long) 100);
        int int3 = recovery0.getMaxRetries();
        recovery0.setDelay((long) (short) 100);
        int int6 = recovery0.getMaxRetries();
        recovery0.setDelay(0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
    }

    @Test
    public void test00265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00265");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties1.elements();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        boolean boolean6 = properties5.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet7 = properties5.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int9 = recovery8.getMaxRetries();
        recovery8.setForgetOrphanedLogEntriesDelay((-1L));
        recovery8.setForgetOrphanedLogEntriesDelay((long) (-1));
        boolean boolean14 = properties1.remove((java.lang.Object) properties5, (java.lang.Object) (-1));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.getLogBaseDir();
        java.lang.String str17 = atomikosProperties15.getLogBaseDir();
        int int18 = atomikosProperties15.getConsoleFileCount();
        java.util.Properties properties19 = null;
        java.util.Properties properties20 = new java.util.Properties(properties19);
        boolean boolean21 = properties20.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration22 = properties20.elements();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet23 = properties20.entrySet();
        boolean boolean25 = properties5.replace((java.lang.Object) atomikosProperties15, (java.lang.Object) properties20, (java.lang.Object) 1);
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        boolean boolean28 = properties27.isEmpty();
        boolean boolean29 = properties27.isEmpty();
        properties20.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties27);
        java.lang.String str33 = properties20.getProperty("", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objEntrySet7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objEnumeration22);
        org.junit.Assert.assertNotNull(objEntrySet23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str33, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
    }

    @Test
    public void test00266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00266");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean13 = properties1.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean12);
        java.util.Map<java.lang.Object, java.lang.Object> objMap14 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.putAll(objMap14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test00267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00267");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = null;
        java.util.Properties properties2 = new java.util.Properties(properties1);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties5.elements();
        java.lang.String str8 = properties5.getProperty("");
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties11.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj14 = properties2.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties11);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel15 = atomikosProperties11.getConsoleLogLevel();
        atomikosProperties11.setConsoleFileLimit((int) '4');
        atomikosProperties11.setForceShutdownOnVmExit(true);
        int int20 = atomikosProperties11.getMaxActives();
        boolean boolean21 = properties0.contains((java.lang.Object) int20);
        int int22 = properties0.size();
        java.util.Set<java.lang.Object> objSet23 = properties0.keySet();
        java.io.OutputStream outputStream24 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream24, "tm.out", "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel15 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel15.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 50 + "'", int20 == 50);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(objSet23);
    }

    @Test
    public void test00268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00268");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        properties1.clear();
        java.util.Properties properties7 = new java.util.Properties(properties1);
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties7.keys();
        properties7.clear();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objEnumeration8);
    }

    @Test
    public void test00269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00269");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean13 = properties1.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean12);
        boolean boolean14 = properties1.isEmpty();
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties16.elements();
        boolean boolean19 = properties16.containsKey((java.lang.Object) 10.0f);
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties16);
        java.util.Properties properties21 = new java.util.Properties(properties1);
        java.io.OutputStream outputStream22 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties21.store(outputStream22, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test00270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00270");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties7.elements();
        java.lang.String str10 = properties7.getProperty("");
        properties4.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.util.Properties properties13 = null;
        java.util.Properties properties14 = new java.util.Properties(properties13);
        boolean boolean15 = properties14.isEmpty();
        boolean boolean16 = properties4.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean15);
        boolean boolean17 = properties4.isEmpty();
        boolean boolean18 = properties0.replace((java.lang.Object) 100.0f, (java.lang.Object) true, (java.lang.Object) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setCheckpointInterval((long) (byte) -1);
        atomikosProperties19.setConsoleFileName("");
        java.lang.String str24 = atomikosProperties19.getLogBaseName();
        long long25 = atomikosProperties19.getCheckpointInterval();
        java.lang.String str26 = atomikosProperties19.getConsoleFileName();
        long long27 = atomikosProperties19.getCheckpointInterval();
        java.lang.Object obj28 = properties4.remove((java.lang.Object) atomikosProperties19);
        java.util.Properties properties29 = null;
        java.util.Properties properties30 = new java.util.Properties(properties29);
        boolean boolean31 = properties30.isEmpty();
        java.lang.String str33 = properties30.getProperty("hi!");
        boolean boolean35 = properties30.contains((java.lang.Object) 10.0f);
        java.util.Set<java.lang.Object> objSet36 = properties30.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int38 = atomikosProperties37.getMaxActives();
        boolean boolean39 = properties30.equals((java.lang.Object) atomikosProperties37);
        atomikosProperties37.setThreadedTwoPhaseCommit(true);
        java.lang.String str42 = atomikosProperties37.getLogBaseDir();
        boolean boolean43 = properties4.equals((java.lang.Object) str42);
        java.util.Enumeration<?> wildcardEnumeration44 = properties4.propertyNames();
        java.util.Properties properties45 = null;
        java.util.Properties properties46 = new java.util.Properties(properties45);
        boolean boolean47 = properties46.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery48 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int49 = recovery48.getMaxRetries();
        boolean boolean50 = properties46.containsKey((java.lang.Object) recovery48);
        java.util.Properties properties51 = null;
        java.util.Properties properties52 = new java.util.Properties(properties51);
        java.util.Enumeration<java.lang.Object> objEnumeration53 = properties52.elements();
        java.util.Properties properties54 = null;
        java.util.Properties properties55 = new java.util.Properties(properties54);
        java.util.Enumeration<java.lang.Object> objEnumeration56 = properties55.elements();
        java.lang.String str58 = properties55.getProperty("");
        properties52.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties55);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties61.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj64 = properties52.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties61);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel65 = atomikosProperties61.getConsoleLogLevel();
        int int66 = atomikosProperties61.getConsoleFileCount();
        java.lang.Object obj67 = properties46.get((java.lang.Object) atomikosProperties61);
        long long68 = atomikosProperties61.getMaxTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel69 = atomikosProperties61.getConsoleLogLevel();
        boolean boolean70 = properties4.contains((java.lang.Object) atomikosProperties61);
        java.io.InputStream inputStream71 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties4.loadFromXML(inputStream71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objSet36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 50 + "'", int38 == 50);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(objEnumeration53);
        org.junit.Assert.assertNotNull(objEnumeration56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel65 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel65.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 300000L + "'", long68 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel69 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel69.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test00271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00271");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.lang.Object obj4 = properties1.setProperty("{10=#}", "tm.out");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet5 = properties1.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties6.getRecovery();
        atomikosProperties6.setEnableLogging(false);
        long long11 = atomikosProperties6.getMaxTimeout();
        java.util.Properties properties12 = null;
        java.util.Properties properties13 = new java.util.Properties(properties12);
        java.util.Enumeration<java.lang.Object> objEnumeration14 = properties13.elements();
        java.lang.String str16 = properties13.getProperty("");
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        boolean boolean19 = properties18.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet20 = properties18.entrySet();
        java.lang.Object obj22 = new java.lang.Object();
        java.lang.Object obj23 = properties18.replace((java.lang.Object) "hi!", obj22);
        boolean boolean25 = properties18.equals((java.lang.Object) 1.0f);
        boolean boolean26 = properties13.containsKey((java.lang.Object) boolean25);
        java.lang.Object obj27 = properties1.put((java.lang.Object) atomikosProperties6, (java.lang.Object) properties13);
        java.io.Writer writer28 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(writer28, "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(objEntrySet5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertNotNull(objEnumeration14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objEntrySet20);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(obj27);
    }

    @Test
    public void test00272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00272");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties3.elements();
        java.util.Properties properties5 = null;
        java.util.Properties properties6 = new java.util.Properties(properties5);
        java.util.Enumeration<java.lang.Object> objEnumeration7 = properties6.elements();
        java.lang.String str9 = properties6.getProperty("");
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties6);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj15 = properties3.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties12);
        atomikosProperties12.setSerialJtaTransactions(false);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel18 = atomikosProperties12.getConsoleLogLevel();
        java.lang.Object obj19 = properties0.putIfAbsent((java.lang.Object) 1, (java.lang.Object) atomikosProperties12);
        java.util.Properties properties20 = null;
        java.util.Properties properties21 = new java.util.Properties(properties20);
        java.util.Enumeration<java.lang.Object> objEnumeration22 = properties21.elements();
        java.util.Properties properties23 = null;
        java.util.Properties properties24 = new java.util.Properties(properties23);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties24.elements();
        java.lang.String str27 = properties24.getProperty("");
        properties21.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        java.util.Collection<java.lang.Object> objCollection29 = properties24.values();
        boolean boolean30 = properties0.containsValue((java.lang.Object) objCollection29);
        java.io.OutputStream outputStream31 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.save(outputStream31, "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objEnumeration7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel18 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel18.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(objEnumeration22);
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(objCollection29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test00273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00273");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        boolean boolean4 = properties1.containsKey((java.lang.Object) 10.0f);
        java.util.Properties properties5 = null;
        java.util.Properties properties6 = new java.util.Properties(properties5);
        java.util.Enumeration<java.lang.Object> objEnumeration7 = properties6.elements();
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties9.elements();
        java.lang.String str12 = properties9.getProperty("");
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        java.util.Enumeration<?> wildcardEnumeration14 = properties6.propertyNames();
        boolean boolean15 = properties1.containsValue((java.lang.Object) wildcardEnumeration14);
        java.util.Properties properties16 = null;
        java.util.Properties properties17 = new java.util.Properties(properties16);
        boolean boolean18 = properties17.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery19 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int20 = recovery19.getMaxRetries();
        boolean boolean21 = properties17.containsKey((java.lang.Object) recovery19);
        properties17.clear();
        boolean boolean24 = properties17.containsKey((java.lang.Object) "hi!");
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        boolean boolean27 = properties26.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties28.setCheckpointInterval((long) (byte) -1);
        atomikosProperties28.setConsoleFileName("");
        java.lang.String str33 = atomikosProperties28.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties34.setCheckpointInterval((long) (byte) -1);
        atomikosProperties34.setThreadedTwoPhaseCommit(true);
        java.util.Properties properties39 = null;
        java.util.Properties properties40 = new java.util.Properties(properties39);
        java.util.Enumeration<java.lang.Object> objEnumeration41 = properties40.elements();
        java.util.Properties properties42 = null;
        java.util.Properties properties43 = new java.util.Properties(properties42);
        java.util.Enumeration<java.lang.Object> objEnumeration44 = properties43.elements();
        java.lang.String str46 = properties43.getProperty("");
        properties40.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties43);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties49.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj52 = properties40.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties49);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel53 = atomikosProperties49.getConsoleLogLevel();
        atomikosProperties34.setConsoleLogLevel(atomikosLoggingLevel53);
        atomikosProperties28.setConsoleLogLevel(atomikosLoggingLevel53);
        boolean boolean57 = properties17.replace((java.lang.Object) properties26, (java.lang.Object) atomikosProperties28, (java.lang.Object) 10.0d);
        java.lang.Object obj58 = properties1.remove((java.lang.Object) properties17);
        java.io.OutputStream outputStream59 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream59, "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objEnumeration7);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(wildcardEnumeration14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tmlog" + "'", str33, "tmlog");
        org.junit.Assert.assertNotNull(objEnumeration41);
        org.junit.Assert.assertNotNull(objEnumeration44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel53 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel53.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(obj58);
    }

    @Test
    public void test00274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00274");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        java.util.Properties properties14 = null;
        java.util.Properties properties15 = new java.util.Properties(properties14);
        boolean boolean16 = properties15.isEmpty();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.lang.Object obj18 = properties1.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery21 = atomikosProperties19.getRecovery();
        atomikosProperties19.setEnableLogging(false);
        boolean boolean24 = properties1.equals((java.lang.Object) atomikosProperties19);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties1.keys();
        java.lang.String str28 = properties1.getProperty("tmlog", "{10=#}");
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(recovery21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{10=#}" + "'", str28, "{10=#}");
    }

    @Test
    public void test00275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00275");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        properties1.clear();
        java.util.Properties properties7 = new java.util.Properties(properties1);
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties7.elements();
        java.io.Reader reader9 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties7.load(reader9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objEnumeration8);
    }

    @Test
    public void test00276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00276");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setCheckpointInterval((long) (byte) -1);
        java.lang.String str9 = atomikosProperties6.getLogBaseDir();
        atomikosProperties6.setMaxTimeout(0L);
        java.lang.Object obj12 = properties1.remove((java.lang.Object) atomikosProperties6);
        java.lang.String str15 = properties1.getProperty("{10=#}", "hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
    }

    @Test
    public void test00277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00277");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties7.elements();
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties10.elements();
        java.lang.String str13 = properties10.getProperty("");
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj19 = properties7.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties16);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel20 = atomikosProperties16.getConsoleLogLevel();
        int int21 = atomikosProperties16.getConsoleFileCount();
        java.lang.Object obj22 = properties1.get((java.lang.Object) atomikosProperties16);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties23.setCheckpointInterval((long) (byte) -1);
        atomikosProperties23.setConsoleFileName("");
        java.lang.String str28 = atomikosProperties23.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setCheckpointInterval((long) (byte) -1);
        atomikosProperties29.setThreadedTwoPhaseCommit(true);
        java.util.Properties properties34 = null;
        java.util.Properties properties35 = new java.util.Properties(properties34);
        java.util.Enumeration<java.lang.Object> objEnumeration36 = properties35.elements();
        java.util.Properties properties37 = null;
        java.util.Properties properties38 = new java.util.Properties(properties37);
        java.util.Enumeration<java.lang.Object> objEnumeration39 = properties38.elements();
        java.lang.String str41 = properties38.getProperty("");
        properties35.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj47 = properties35.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties44);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel48 = atomikosProperties44.getConsoleLogLevel();
        atomikosProperties29.setConsoleLogLevel(atomikosLoggingLevel48);
        atomikosProperties23.setConsoleLogLevel(atomikosLoggingLevel48);
        atomikosProperties23.setConsoleFileCount(5);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery53 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery53.setMaxRetries((-1));
        long long56 = recovery53.getRetryInterval();
        java.lang.Object obj57 = properties1.replace((java.lang.Object) 5, (java.lang.Object) long56);
        java.lang.Object obj58 = properties1.clone();
        java.io.InputStream inputStream59 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.loadFromXML(inputStream59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel20 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel20.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertNotNull(objEnumeration36);
        org.junit.Assert.assertNotNull(objEnumeration39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel48 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel48.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 10000L + "'", long56 == 10000L);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "{}");
    }

    @Test
    public void test00278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00278");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        boolean boolean4 = properties1.contains((java.lang.Object) 1L);
        java.util.Set<java.lang.Object> objSet5 = properties1.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setCheckpointInterval((long) (byte) -1);
        atomikosProperties6.setThreadedTwoPhaseCommit(true);
        atomikosProperties6.setSerialJtaTransactions(false);
        atomikosProperties6.setOutputDir("");
        java.lang.String str15 = atomikosProperties6.getConsoleFileName();
        java.lang.String str16 = atomikosProperties6.getLogBaseName();
        atomikosProperties6.setEnableLogging(false);
        boolean boolean19 = properties1.containsKey((java.lang.Object) atomikosProperties6);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet20 = properties1.entrySet();
        java.io.PrintStream printStream21 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printStream21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objSet5);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tm.out" + "'", str15, "tm.out");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objEntrySet20);
    }

    @Test
    public void test00279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00279");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        boolean boolean4 = properties1.containsKey((java.lang.Object) 10.0f);
        java.util.Properties properties5 = null;
        java.util.Properties properties6 = new java.util.Properties(properties5);
        java.util.Enumeration<java.lang.Object> objEnumeration7 = properties6.elements();
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties9.elements();
        java.lang.String str12 = properties9.getProperty("");
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        java.util.Collection<java.lang.Object> objCollection14 = properties9.values();
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties9.elements();
        java.lang.Object obj16 = properties1.remove((java.lang.Object) properties9);
        java.io.Writer writer17 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(writer17, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objEnumeration7);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(objCollection14);
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertNull(obj16);
    }

    @Test
    public void test00280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00280");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        atomikosProperties10.setSerialJtaTransactions(false);
        boolean boolean16 = atomikosProperties10.isForceShutdownOnVmExit();
        java.util.Properties properties17 = atomikosProperties10.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setCheckpointInterval((long) (byte) -1);
        atomikosProperties18.setThreadedTwoPhaseCommit(true);
        atomikosProperties18.setSerialJtaTransactions(false);
        java.lang.Object obj25 = properties17.remove((java.lang.Object) false);
        java.io.Writer writer26 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties17.store(writer26, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertNull(obj25);
    }

    @Test
    public void test00281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00281");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = null;
        java.util.Properties properties2 = new java.util.Properties(properties1);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties5.elements();
        java.lang.String str8 = properties5.getProperty("");
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        boolean boolean13 = properties12.isEmpty();
        boolean boolean14 = properties2.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean13);
        boolean boolean15 = properties2.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setCheckpointInterval((long) (byte) -1);
        atomikosProperties17.setConsoleFileName("");
        java.lang.String str22 = atomikosProperties17.getLogBaseName();
        long long23 = atomikosProperties17.getCheckpointInterval();
        java.lang.String str24 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.setEnableLogging(true);
        java.lang.Object obj27 = properties0.putIfAbsent((java.lang.Object) objEnumeration16, (java.lang.Object) atomikosProperties17);
        java.io.OutputStream outputStream28 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream28, "{}", "{10=#}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(obj27);
    }

    @Test
    public void test00282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00282");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileName("tm.out");
        java.lang.Class<?> wildcardClass3 = atomikosProperties0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test00283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00283");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) (byte) -1);
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.setOutputDir("");
        java.lang.String str9 = atomikosProperties0.getConsoleFileName();
        java.lang.String str10 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setConsoleFileCount((int) (byte) -1);
        java.util.Properties properties13 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties14.setCheckpointInterval((long) (byte) -1);
        atomikosProperties14.setThreadedTwoPhaseCommit(true);
        atomikosProperties14.setSerialJtaTransactions(false);
        atomikosProperties14.setOutputDir("");
        java.lang.String str23 = atomikosProperties14.getConsoleFileName();
        java.lang.String str24 = atomikosProperties14.getLogBaseName();
        atomikosProperties14.setConsoleFileCount((int) (byte) -1);
        java.util.Properties properties27 = atomikosProperties14.asProperties();
        java.util.Properties properties28 = null;
        java.util.Properties properties29 = new java.util.Properties(properties28);
        java.util.Enumeration<java.lang.Object> objEnumeration30 = properties29.elements();
        boolean boolean31 = properties29.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties29.keys();
        boolean boolean33 = properties27.containsValue((java.lang.Object) properties29);
        java.util.Properties properties34 = null;
        java.util.Properties properties35 = new java.util.Properties(properties34);
        boolean boolean36 = properties35.isEmpty();
        java.lang.String str38 = properties35.getProperty("hi!");
        java.util.Set<java.lang.String> strSet39 = properties35.stringPropertyNames();
        java.lang.Object obj40 = properties35.clone();
        boolean boolean41 = properties29.containsKey(obj40);
        java.lang.Object obj42 = properties13.remove((java.lang.Object) properties29);
        java.io.OutputStream outputStream43 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties13.store(outputStream43, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tm.out" + "'", str23, "tm.out");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertNotNull(objEnumeration30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objEnumeration32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "{}");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(obj42);
    }

    @Test
    public void test00284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00284");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = null;
        java.util.Properties properties2 = new java.util.Properties(properties1);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties5.elements();
        java.lang.String str8 = properties5.getProperty("");
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        boolean boolean13 = properties12.isEmpty();
        boolean boolean14 = properties2.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean13);
        boolean boolean15 = properties2.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setCheckpointInterval((long) (byte) -1);
        atomikosProperties17.setConsoleFileName("");
        java.lang.String str22 = atomikosProperties17.getLogBaseName();
        long long23 = atomikosProperties17.getCheckpointInterval();
        java.lang.String str24 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.setEnableLogging(true);
        java.lang.Object obj27 = properties0.putIfAbsent((java.lang.Object) objEnumeration16, (java.lang.Object) atomikosProperties17);
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties0.keys();
        java.lang.String str30 = properties0.getProperty("tm.out");
        java.io.Writer writer31 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(writer31, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test00285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00285");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Properties properties3 = new java.util.Properties(properties1);
        java.lang.Object obj6 = properties1.setProperty("{}", "");
        int int7 = properties1.size();
        java.lang.String str10 = properties1.getProperty("", "");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test00286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00286");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        boolean boolean10 = properties1.contains((java.lang.Object) 0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties11.setCheckpointInterval((long) (byte) -1);
        atomikosProperties11.setThreadedTwoPhaseCommit(true);
        atomikosProperties11.setSerialJtaTransactions(false);
        atomikosProperties11.setOutputDir("");
        java.lang.String str20 = atomikosProperties11.getConsoleFileName();
        java.lang.String str21 = atomikosProperties11.getLogBaseName();
        atomikosProperties11.setDefaultJtaTimeout(0L);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel24 = atomikosProperties11.getConsoleLogLevel();
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        boolean boolean27 = properties26.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery28 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int29 = recovery28.getMaxRetries();
        boolean boolean30 = properties26.containsKey((java.lang.Object) recovery28);
        properties26.clear();
        boolean boolean33 = properties26.containsKey((java.lang.Object) "hi!");
        java.util.Properties properties34 = null;
        java.util.Properties properties35 = new java.util.Properties(properties34);
        boolean boolean36 = properties35.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties37.setCheckpointInterval((long) (byte) -1);
        atomikosProperties37.setConsoleFileName("");
        java.lang.String str42 = atomikosProperties37.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties43.setCheckpointInterval((long) (byte) -1);
        atomikosProperties43.setThreadedTwoPhaseCommit(true);
        java.util.Properties properties48 = null;
        java.util.Properties properties49 = new java.util.Properties(properties48);
        java.util.Enumeration<java.lang.Object> objEnumeration50 = properties49.elements();
        java.util.Properties properties51 = null;
        java.util.Properties properties52 = new java.util.Properties(properties51);
        java.util.Enumeration<java.lang.Object> objEnumeration53 = properties52.elements();
        java.lang.String str55 = properties52.getProperty("");
        properties49.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties52);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties58.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj61 = properties49.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties58);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel62 = atomikosProperties58.getConsoleLogLevel();
        atomikosProperties43.setConsoleLogLevel(atomikosLoggingLevel62);
        atomikosProperties37.setConsoleLogLevel(atomikosLoggingLevel62);
        boolean boolean66 = properties26.replace((java.lang.Object) properties35, (java.lang.Object) atomikosProperties37, (java.lang.Object) 10.0d);
        java.util.Properties properties67 = new java.util.Properties(properties26);
        boolean boolean68 = properties26.isEmpty();
        int int69 = properties26.size();
        java.lang.Object obj70 = properties1.replace((java.lang.Object) atomikosLoggingLevel24, (java.lang.Object) properties26);
        java.io.OutputStream outputStream71 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties26.storeToXML(outputStream71, "hi!", "{10=#}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tm.out" + "'", str20, "tm.out");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel24 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel24.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "tmlog" + "'", str42, "tmlog");
        org.junit.Assert.assertNotNull(objEnumeration50);
        org.junit.Assert.assertNotNull(objEnumeration53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel62 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel62.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNull(obj70);
    }

    @Test
    public void test00287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00287");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        atomikosProperties10.setAllowSubTransactions(false);
        atomikosProperties10.setService("tm.out");
        atomikosProperties10.setOutputDir("{}");
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test00288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00288");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean13 = properties1.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean12);
        boolean boolean14 = properties1.isEmpty();
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties16.elements();
        boolean boolean19 = properties16.containsKey((java.lang.Object) 10.0f);
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties16);
        java.util.Properties properties21 = new java.util.Properties(properties1);
        java.io.Reader reader22 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties21.load(reader22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test00289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00289");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet3 = properties1.entrySet();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Object obj6 = properties1.replace((java.lang.Object) "hi!", obj5);
        boolean boolean8 = properties1.equals((java.lang.Object) 1.0f);
        java.util.Properties properties9 = new java.util.Properties(properties1);
        properties1.clear();
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties1.elements();
        java.io.OutputStream outputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.save(outputStream12, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEntrySet3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(objEnumeration11);
    }

    @Test
    public void test00290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00290");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        java.util.Properties properties14 = new java.util.Properties(properties1);
        java.lang.String str17 = properties14.getProperty("tmlog", "tm.out");
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tm.out" + "'", str17, "tm.out");
    }

    @Test
    public void test00291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00291");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = null;
        java.util.Properties properties2 = new java.util.Properties(properties1);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties5.elements();
        java.lang.String str8 = properties5.getProperty("");
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties11.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj14 = properties2.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties11);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel15 = atomikosProperties11.getConsoleLogLevel();
        atomikosProperties11.setConsoleFileLimit((int) '4');
        atomikosProperties11.setForceShutdownOnVmExit(true);
        int int20 = atomikosProperties11.getMaxActives();
        boolean boolean21 = properties0.contains((java.lang.Object) int20);
        int int22 = properties0.size();
        properties0.clear();
        java.io.OutputStream outputStream24 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream24, "", "{10=#}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel15 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel15.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 50 + "'", int20 == 50);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test00292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00292");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Properties properties3 = new java.util.Properties(properties1);
        java.util.Collection<java.lang.Object> objCollection4 = properties1.values();
        java.lang.String str5 = properties1.toString();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        boolean boolean8 = properties7.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet9 = properties7.entrySet();
        java.lang.Object obj11 = new java.lang.Object();
        java.lang.Object obj12 = properties7.replace((java.lang.Object) "hi!", obj11);
        boolean boolean14 = properties7.equals((java.lang.Object) 1.0f);
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties7.keys();
        java.util.Properties properties16 = null;
        java.util.Properties properties17 = new java.util.Properties(properties16);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties17.elements();
        java.util.Properties properties19 = null;
        java.util.Properties properties20 = new java.util.Properties(properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties20.elements();
        java.lang.String str23 = properties20.getProperty("");
        properties17.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties20);
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        boolean boolean28 = properties27.isEmpty();
        boolean boolean29 = properties17.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean28);
        properties17.clear();
        int int31 = properties17.size();
        java.util.Set<java.lang.Object> objSet32 = properties17.keySet();
        java.lang.Object obj33 = properties1.putIfAbsent((java.lang.Object) properties7, (java.lang.Object) properties17);
        java.util.Set<java.lang.Object> objSet34 = properties1.keySet();
        java.lang.String str37 = properties1.getProperty("{}", "{10=#}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objEntrySet9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(objSet32);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(objSet34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{10=#}" + "'", str37, "{10=#}");
    }

    @Test
    public void test00293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00293");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) (byte) -1);
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        atomikosProperties0.setForceShutdownOnVmExit(true);
        atomikosProperties0.setConsoleFileName("hi!");
        atomikosProperties0.setLogBaseName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
    }

    @Test
    public void test00294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00294");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Enumeration<?> wildcardEnumeration9 = properties1.propertyNames();
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        java.util.Enumeration<java.lang.Object> objEnumeration12 = properties11.elements();
        java.util.Properties properties13 = null;
        java.util.Properties properties14 = new java.util.Properties(properties13);
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties14.elements();
        java.lang.String str17 = properties14.getProperty("");
        properties11.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties14);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj23 = properties11.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties20);
        atomikosProperties20.setSerialJtaTransactions(false);
        atomikosProperties20.setOutputDir("");
        boolean boolean28 = properties1.containsKey((java.lang.Object) "");
        java.util.Properties properties30 = null;
        java.util.Properties properties31 = new java.util.Properties(properties30);
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties31.elements();
        java.util.Properties properties33 = null;
        java.util.Properties properties34 = new java.util.Properties(properties33);
        java.util.Enumeration<java.lang.Object> objEnumeration35 = properties34.elements();
        java.lang.String str37 = properties34.getProperty("");
        properties31.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties34);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties40.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj43 = properties31.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties40);
        atomikosProperties40.setSerialJtaTransactions(false);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel46 = atomikosProperties40.getConsoleLogLevel();
        java.lang.String str47 = atomikosProperties40.getTransactionManagerUniqueName();
        java.lang.Object obj48 = properties1.replace((java.lang.Object) "hi!", (java.lang.Object) atomikosProperties40);
        java.util.Collection<java.lang.Object> objCollection49 = properties1.values();
        java.lang.Object obj50 = properties1.clone();
        java.util.Properties properties51 = null;
        java.util.Properties properties52 = new java.util.Properties(properties51);
        java.util.Enumeration<java.lang.Object> objEnumeration53 = properties52.elements();
        java.lang.String str55 = properties52.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties56.setCheckpointInterval((long) (byte) -1);
        atomikosProperties56.setConsoleFileName("");
        java.lang.String str61 = atomikosProperties56.getLogBaseName();
        long long62 = atomikosProperties56.getCheckpointInterval();
        atomikosProperties56.setForceShutdownOnVmExit(false);
        java.util.Properties properties65 = atomikosProperties56.asProperties();
        boolean boolean66 = atomikosProperties56.isAllowSubTransactions();
        int int67 = atomikosProperties56.getConsoleFileLimit();
        boolean boolean68 = properties52.containsKey((java.lang.Object) int67);
        java.util.Enumeration<?> wildcardEnumeration69 = properties52.propertyNames();
        boolean boolean70 = properties1.containsValue((java.lang.Object) properties52);
        java.lang.Object obj73 = properties1.setProperty("hi!", "tmlog");
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(wildcardEnumeration9);
        org.junit.Assert.assertNotNull(objEnumeration12);
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objEnumeration32);
        org.junit.Assert.assertNotNull(objEnumeration35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel46 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel46.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(objCollection49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "{}");
        org.junit.Assert.assertNotNull(objEnumeration53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "tmlog" + "'", str61, "tmlog");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-1L) + "'", long62 == (-1L));
        org.junit.Assert.assertNotNull(properties65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(obj73);
    }

    @Test
    public void test00295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00295");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties1.elements();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet4 = properties1.entrySet();
        java.io.Reader reader5 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(reader5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNotNull(objEntrySet4);
    }

    @Test
    public void test00296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00296");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Properties properties3 = new java.util.Properties(properties1);
        java.util.Collection<java.lang.Object> objCollection4 = properties1.values();
        java.lang.String str5 = properties1.toString();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        boolean boolean8 = properties7.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet9 = properties7.entrySet();
        java.lang.Object obj11 = new java.lang.Object();
        java.lang.Object obj12 = properties7.replace((java.lang.Object) "hi!", obj11);
        boolean boolean14 = properties7.equals((java.lang.Object) 1.0f);
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties7.keys();
        java.util.Properties properties16 = null;
        java.util.Properties properties17 = new java.util.Properties(properties16);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties17.elements();
        java.util.Properties properties19 = null;
        java.util.Properties properties20 = new java.util.Properties(properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties20.elements();
        java.lang.String str23 = properties20.getProperty("");
        properties17.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties20);
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        boolean boolean28 = properties27.isEmpty();
        boolean boolean29 = properties17.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean28);
        properties17.clear();
        int int31 = properties17.size();
        java.util.Set<java.lang.Object> objSet32 = properties17.keySet();
        java.lang.Object obj33 = properties1.putIfAbsent((java.lang.Object) properties7, (java.lang.Object) properties17);
        java.util.Properties properties34 = null;
        java.util.Properties properties35 = new java.util.Properties(properties34);
        java.util.Enumeration<java.lang.Object> objEnumeration36 = properties35.elements();
        java.util.Properties properties37 = null;
        java.util.Properties properties38 = new java.util.Properties(properties37);
        java.util.Enumeration<java.lang.Object> objEnumeration39 = properties38.elements();
        java.lang.String str41 = properties38.getProperty("");
        properties35.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj47 = properties35.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties44);
        java.util.Properties properties48 = null;
        java.util.Properties properties49 = new java.util.Properties(properties48);
        boolean boolean50 = properties49.isEmpty();
        properties35.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties49);
        java.lang.Object obj52 = properties35.clone();
        java.util.Properties properties53 = null;
        java.util.Properties properties54 = new java.util.Properties(properties53);
        boolean boolean55 = properties54.isEmpty();
        java.lang.String str57 = properties54.getProperty("hi!");
        boolean boolean59 = properties54.contains((java.lang.Object) 10.0f);
        java.lang.Object obj60 = properties7.replace(obj52, (java.lang.Object) properties54);
        java.io.OutputStream outputStream61 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties7.store(outputStream61, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objEntrySet9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(objSet32);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(objEnumeration36);
        org.junit.Assert.assertNotNull(objEnumeration39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(obj60);
    }

    @Test
    public void test00297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00297");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = null;
        java.util.Properties properties2 = new java.util.Properties(properties1);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties5.elements();
        java.lang.String str8 = properties5.getProperty("");
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties11.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj14 = properties2.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties11);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel15 = atomikosProperties11.getConsoleLogLevel();
        atomikosProperties11.setConsoleFileLimit((int) '4');
        atomikosProperties11.setForceShutdownOnVmExit(true);
        int int20 = atomikosProperties11.getMaxActives();
        boolean boolean21 = properties0.contains((java.lang.Object) int20);
        int int22 = properties0.size();
        java.io.OutputStream outputStream23 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream23, "{10=#}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel15 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel15.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 50 + "'", int20 == 50);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test00298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00298");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties3.setCheckpointInterval((long) (byte) -1);
        java.lang.String str6 = atomikosProperties3.getLogBaseDir();
        atomikosProperties3.setSerialJtaTransactions(true);
        long long9 = atomikosProperties3.getMaxTimeout();
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.elements();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet14 = properties11.entrySet();
        boolean boolean15 = properties1.remove((java.lang.Object) atomikosProperties3, (java.lang.Object) objEntrySet14);
        java.io.PrintStream printStream16 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printStream16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 300000L + "'", long9 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNotNull(objEntrySet14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test00299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00299");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        boolean boolean4 = properties1.contains((java.lang.Object) 1L);
        java.util.Set<java.lang.Object> objSet5 = properties1.keySet();
        java.lang.Object obj8 = properties1.setProperty("", "");
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        boolean boolean11 = properties10.isEmpty();
        java.lang.String str13 = properties10.getProperty("hi!");
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        boolean boolean17 = properties16.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int19 = recovery18.getMaxRetries();
        boolean boolean20 = properties16.containsKey((java.lang.Object) recovery18);
        recovery18.setRetryInterval((long) (short) -1);
        recovery18.setRetryInterval((long) 0);
        recovery18.setMaxRetries((int) (byte) 10);
        java.lang.Class<?> wildcardClass27 = recovery18.getClass();
        java.lang.Object obj28 = properties10.replace((java.lang.Object) (byte) -1, (java.lang.Object) recovery18);
        java.util.Properties properties29 = null;
        java.util.Properties properties30 = new java.util.Properties(properties29);
        boolean boolean31 = properties30.isEmpty();
        java.lang.String str33 = properties30.getProperty("hi!");
        java.util.Set<java.lang.String> strSet34 = properties30.stringPropertyNames();
        java.lang.Object obj35 = new java.lang.Object();
        boolean boolean36 = properties1.replace((java.lang.Object) (byte) -1, (java.lang.Object) properties30, obj35);
        java.util.Properties properties37 = null;
        java.util.Properties properties38 = new java.util.Properties(properties37);
        java.util.Enumeration<java.lang.Object> objEnumeration39 = properties38.elements();
        boolean boolean40 = properties38.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration41 = properties38.keys();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties38);
        java.io.InputStream inputStream43 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(inputStream43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objSet5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objEnumeration39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objEnumeration41);
    }

    @Test
    public void test00300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00300");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties7.elements();
        java.lang.String str10 = properties7.getProperty("");
        properties4.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.util.Properties properties13 = null;
        java.util.Properties properties14 = new java.util.Properties(properties13);
        boolean boolean15 = properties14.isEmpty();
        boolean boolean16 = properties4.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean15);
        boolean boolean17 = properties4.isEmpty();
        boolean boolean18 = properties0.replace((java.lang.Object) 100.0f, (java.lang.Object) true, (java.lang.Object) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setCheckpointInterval((long) (byte) -1);
        atomikosProperties19.setConsoleFileName("");
        java.lang.String str24 = atomikosProperties19.getLogBaseName();
        long long25 = atomikosProperties19.getCheckpointInterval();
        java.lang.String str26 = atomikosProperties19.getConsoleFileName();
        long long27 = atomikosProperties19.getCheckpointInterval();
        java.lang.Object obj28 = properties4.remove((java.lang.Object) atomikosProperties19);
        java.util.Properties properties29 = null;
        java.util.Properties properties30 = new java.util.Properties(properties29);
        boolean boolean31 = properties30.isEmpty();
        java.lang.String str33 = properties30.getProperty("hi!");
        boolean boolean35 = properties30.contains((java.lang.Object) 10.0f);
        java.util.Set<java.lang.Object> objSet36 = properties30.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int38 = atomikosProperties37.getMaxActives();
        boolean boolean39 = properties30.equals((java.lang.Object) atomikosProperties37);
        atomikosProperties37.setThreadedTwoPhaseCommit(true);
        java.lang.String str42 = atomikosProperties37.getLogBaseDir();
        boolean boolean43 = properties4.equals((java.lang.Object) str42);
        java.util.Enumeration<?> wildcardEnumeration44 = properties4.propertyNames();
        java.io.OutputStream outputStream45 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties4.storeToXML(outputStream45, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objSet36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 50 + "'", int38 == 50);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration44);
    }

    @Test
    public void test00301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00301");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Properties properties3 = new java.util.Properties(properties1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties4.setCheckpointInterval((long) (byte) -1);
        atomikosProperties4.setConsoleFileName("");
        java.lang.String str9 = atomikosProperties4.getLogBaseName();
        long long10 = atomikosProperties4.getCheckpointInterval();
        java.lang.String str11 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setEnableLogging(true);
        long long14 = atomikosProperties4.getDefaultJtaTimeout();
        boolean boolean15 = atomikosProperties4.isSerialJtaTransactions();
        java.lang.String str16 = atomikosProperties4.getOutputDir();
        java.lang.String str17 = atomikosProperties4.getOutputDir();
        java.util.Properties properties18 = atomikosProperties4.asProperties();
        boolean boolean19 = properties1.equals((java.lang.Object) atomikosProperties4);
        atomikosProperties4.setLogBaseName("");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tmlog" + "'", str9, "tmlog");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test00302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00302");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) (byte) -1);
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.setOutputDir("");
        java.lang.String str9 = atomikosProperties0.getConsoleFileName();
        java.lang.String str10 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setConsoleFileCount((int) (byte) -1);
        java.util.Properties properties13 = atomikosProperties0.asProperties();
        java.util.Properties properties14 = null;
        java.util.Properties properties15 = new java.util.Properties(properties14);
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties15.elements();
        boolean boolean17 = properties15.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties15.keys();
        boolean boolean19 = properties13.containsValue((java.lang.Object) properties15);
        java.util.Properties properties20 = null;
        java.util.Properties properties21 = new java.util.Properties(properties20);
        boolean boolean22 = properties21.isEmpty();
        java.lang.String str24 = properties21.getProperty("hi!");
        java.util.Set<java.lang.String> strSet25 = properties21.stringPropertyNames();
        java.lang.Object obj26 = properties21.clone();
        boolean boolean27 = properties15.containsKey(obj26);
        java.lang.String str28 = properties15.toString();
        java.io.PrintStream printStream29 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties15.list(printStream29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "{}");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{}" + "'", str28, "{}");
    }

    @Test
    public void test00303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00303");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean13 = properties1.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean12);
        boolean boolean14 = properties1.isEmpty();
        java.util.Properties properties15 = new java.util.Properties();
        java.util.Properties properties16 = null;
        java.util.Properties properties17 = new java.util.Properties(properties16);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties17.elements();
        java.util.Properties properties19 = null;
        java.util.Properties properties20 = new java.util.Properties(properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties20.elements();
        java.lang.String str23 = properties20.getProperty("");
        properties17.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties20);
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        boolean boolean28 = properties27.isEmpty();
        boolean boolean29 = properties17.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean28);
        boolean boolean30 = properties17.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties17.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties32.setCheckpointInterval((long) (byte) -1);
        atomikosProperties32.setConsoleFileName("");
        java.lang.String str37 = atomikosProperties32.getLogBaseName();
        long long38 = atomikosProperties32.getCheckpointInterval();
        java.lang.String str39 = atomikosProperties32.getLogBaseDir();
        atomikosProperties32.setEnableLogging(true);
        java.lang.Object obj42 = properties15.putIfAbsent((java.lang.Object) objEnumeration31, (java.lang.Object) atomikosProperties32);
        java.util.Properties properties43 = null;
        java.util.Properties properties44 = new java.util.Properties(properties43);
        boolean boolean45 = properties44.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery46 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int47 = recovery46.getMaxRetries();
        boolean boolean48 = properties44.containsKey((java.lang.Object) recovery46);
        recovery46.setRetryInterval((long) (short) -1);
        recovery46.setDelay(10L);
        java.util.Properties properties53 = null;
        java.util.Properties properties54 = new java.util.Properties(properties53);
        boolean boolean55 = properties54.isEmpty();
        java.lang.Object obj56 = properties15.getOrDefault((java.lang.Object) recovery46, (java.lang.Object) properties54);
        java.util.Properties properties57 = null;
        java.util.Properties properties58 = new java.util.Properties(properties57);
        boolean boolean59 = properties58.isEmpty();
        java.lang.String str61 = properties58.getProperty("hi!");
        java.util.Set<java.lang.String> strSet62 = properties58.stringPropertyNames();
        java.lang.Object obj63 = properties58.clone();
        java.util.Properties properties64 = null;
        java.util.Properties properties65 = new java.util.Properties(properties64);
        java.util.Enumeration<java.lang.Object> objEnumeration66 = properties65.elements();
        java.util.Properties properties67 = null;
        java.util.Properties properties68 = new java.util.Properties(properties67);
        java.util.Enumeration<java.lang.Object> objEnumeration69 = properties68.elements();
        java.lang.String str71 = properties68.getProperty("");
        properties65.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties68);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties74 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties74.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj77 = properties65.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties74);
        atomikosProperties74.setSerialJtaTransactions(false);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel80 = atomikosProperties74.getConsoleLogLevel();
        java.lang.String str81 = atomikosProperties74.getTransactionManagerUniqueName();
        atomikosProperties74.setOutputDir("{10=#}");
        boolean boolean84 = properties1.replace((java.lang.Object) properties54, (java.lang.Object) properties58, (java.lang.Object) "{10=#}");
        java.util.Properties properties85 = null;
        java.util.Properties properties86 = new java.util.Properties(properties85);
        java.util.Enumeration<java.lang.Object> objEnumeration87 = properties86.elements();
        java.lang.Object obj88 = properties1.get((java.lang.Object) properties86);
        java.util.Collection<java.lang.Object> objCollection89 = properties86.values();
        java.io.OutputStream outputStream90 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties86.storeToXML(outputStream90, "{10=#}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objEnumeration31);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tmlog" + "'", str37, "tmlog");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "{}");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals(obj63.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "{}");
        org.junit.Assert.assertNotNull(objEnumeration66);
        org.junit.Assert.assertNotNull(objEnumeration69);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel80 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel80.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(objEnumeration87);
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertNotNull(objCollection89);
    }

    @Test
    public void test00304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00304");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet3 = properties1.entrySet();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Object obj6 = properties1.replace((java.lang.Object) "hi!", obj5);
        boolean boolean8 = properties1.equals((java.lang.Object) 1.0f);
        java.lang.String str10 = properties1.getProperty("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery11.setForgetOrphanedLogEntriesDelay((long) (byte) 0);
        int int14 = recovery11.getMaxRetries();
        int int15 = recovery11.getMaxRetries();
        java.lang.Object obj16 = properties1.get((java.lang.Object) recovery11);
        long long17 = recovery11.getDelay();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEntrySet3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10000L + "'", long17 == 10000L);
    }

    @Test
    public void test00305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00305");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet3 = properties1.entrySet();
        java.util.Set<java.lang.String> strSet4 = properties1.stringPropertyNames();
        java.io.PrintWriter printWriter5 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printWriter5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEntrySet3);
        org.junit.Assert.assertNotNull(strSet4);
    }

    @Test
    public void test00306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00306");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet3 = properties1.entrySet();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Object obj6 = properties1.replace((java.lang.Object) "hi!", obj5);
        boolean boolean8 = properties1.equals((java.lang.Object) 1.0f);
        java.util.Properties properties9 = new java.util.Properties(properties1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str11 = atomikosProperties10.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery12 = atomikosProperties10.getRecovery();
        atomikosProperties10.setEnableLogging(false);
        atomikosProperties10.setSerialJtaTransactions(true);
        java.lang.String str17 = atomikosProperties10.getOutputDir();
        java.lang.Object obj18 = properties1.get((java.lang.Object) atomikosProperties10);
        java.lang.String str19 = atomikosProperties10.getTransactionManagerUniqueName();
        java.lang.String str20 = atomikosProperties10.getConsoleFileName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEntrySet3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(recovery12);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tm.out" + "'", str20, "tm.out");
    }

    @Test
    public void test00307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00307");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) (byte) -1);
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        java.lang.String str5 = atomikosProperties0.getOutputDir();
        java.lang.String str6 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.setCheckpointInterval((long) 'a');
        atomikosProperties0.setMaxActives(100);
        boolean boolean11 = atomikosProperties0.isEnableLogging();
        java.lang.String str12 = atomikosProperties0.getLogBaseDir();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test00308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00308");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        atomikosProperties10.setSerialJtaTransactions(false);
        atomikosProperties10.setOutputDir("");
        boolean boolean18 = atomikosProperties10.isForceShutdownOnVmExit();
        java.lang.String str19 = atomikosProperties10.getOutputDir();
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test00309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00309");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Properties properties3 = new java.util.Properties(properties1);
        java.lang.Object obj6 = properties3.putIfAbsent((java.lang.Object) 10, (java.lang.Object) '#');
        java.lang.String str7 = properties3.toString();
        java.lang.String str10 = properties3.getProperty("tm.out", "tm.out");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{10=#}" + "'", str7, "{10=#}");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tm.out" + "'", str10, "tm.out");
    }

    @Test
    public void test00310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00310");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) (byte) -1);
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        atomikosProperties0.setSerialJtaTransactions(false);
        java.lang.String str7 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseDir("tmlog");
        java.lang.String str10 = atomikosProperties0.getOutputDir();
        java.lang.String str11 = atomikosProperties0.getOutputDir();
        java.lang.String str12 = atomikosProperties0.getConsoleFileName();
        boolean boolean13 = atomikosProperties0.isSerialJtaTransactions();
        boolean boolean14 = atomikosProperties0.isForceShutdownOnVmExit();
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tm.out" + "'", str12, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test00311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00311");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        boolean boolean3 = properties1.isEmpty();
        java.io.OutputStream outputStream4 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.save(outputStream4, "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test00312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00312");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        boolean boolean10 = properties1.contains((java.lang.Object) 0);
        java.io.InputStream inputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.loadFromXML(inputStream11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test00313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00313");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Set<java.lang.String> strSet9 = properties4.stringPropertyNames();
        java.io.PrintStream printStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties4.list(printStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strSet9);
    }

    @Test
    public void test00314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00314");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        recovery3.setRetryInterval((long) (short) -1);
        recovery3.setRetryInterval((long) 0);
        recovery3.setRetryInterval(0L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test00315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00315");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        java.util.Properties properties14 = null;
        java.util.Properties properties15 = new java.util.Properties(properties14);
        boolean boolean16 = properties15.isEmpty();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.lang.Object obj18 = properties1.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setCheckpointInterval((long) (byte) -1);
        atomikosProperties19.setThreadedTwoPhaseCommit(true);
        java.lang.String str24 = atomikosProperties19.getOutputDir();
        java.util.Properties properties25 = atomikosProperties19.asProperties();
        java.lang.Object obj26 = properties1.remove((java.lang.Object) properties25);
        java.util.Properties properties27 = new java.util.Properties(properties25);
        java.io.OutputStream outputStream28 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties27.save(outputStream28, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNull(obj26);
    }

    @Test
    public void test00316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00316");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.lang.String str4 = properties1.getProperty("hi!");
        boolean boolean6 = properties1.contains((java.lang.Object) 10.0f);
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties9.elements();
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties12.elements();
        java.lang.String str15 = properties12.getProperty("");
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties12);
        java.util.Properties properties18 = null;
        java.util.Properties properties19 = new java.util.Properties(properties18);
        boolean boolean20 = properties19.isEmpty();
        boolean boolean21 = properties9.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean20);
        boolean boolean22 = properties9.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties9.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.setCheckpointInterval((long) (byte) -1);
        atomikosProperties24.setConsoleFileName("");
        java.lang.String str29 = atomikosProperties24.getLogBaseName();
        long long30 = atomikosProperties24.getCheckpointInterval();
        java.lang.String str31 = atomikosProperties24.getLogBaseDir();
        atomikosProperties24.setEnableLogging(true);
        java.lang.Object obj34 = properties7.putIfAbsent((java.lang.Object) objEnumeration23, (java.lang.Object) atomikosProperties24);
        java.util.Properties properties35 = null;
        java.util.Properties properties36 = new java.util.Properties(properties35);
        boolean boolean37 = properties36.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery38 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int39 = recovery38.getMaxRetries();
        boolean boolean40 = properties36.containsKey((java.lang.Object) recovery38);
        recovery38.setRetryInterval((long) (short) -1);
        recovery38.setDelay(10L);
        java.util.Properties properties45 = null;
        java.util.Properties properties46 = new java.util.Properties(properties45);
        boolean boolean47 = properties46.isEmpty();
        java.lang.Object obj48 = properties7.getOrDefault((java.lang.Object) recovery38, (java.lang.Object) properties46);
        java.lang.Object obj49 = properties1.remove((java.lang.Object) recovery38);
        properties1.clear();
        java.util.Collection<java.lang.Object> objCollection51 = properties1.values();
        java.io.Writer writer52 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(writer52, "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "{}");
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(objCollection51);
    }

    @Test
    public void test00317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00317");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet3 = properties1.entrySet();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Object obj6 = properties1.replace((java.lang.Object) "hi!", obj5);
        boolean boolean8 = properties1.equals((java.lang.Object) 1.0f);
        java.lang.String str10 = properties1.getProperty("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery11.setForgetOrphanedLogEntriesDelay((long) (byte) 0);
        int int14 = recovery11.getMaxRetries();
        int int15 = recovery11.getMaxRetries();
        java.lang.Object obj16 = properties1.get((java.lang.Object) recovery11);
        java.io.InputStream inputStream17 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(inputStream17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEntrySet3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertNull(obj16);
    }

    @Test
    public void test00318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00318");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        boolean boolean4 = properties1.contains((java.lang.Object) 1L);
        java.util.Set<java.lang.Object> objSet5 = properties1.keySet();
        java.lang.Object obj8 = properties1.setProperty("", "");
        int int9 = properties1.size();
        properties1.clear();
        java.io.OutputStream outputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(outputStream11, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objSet5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test00319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00319");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        boolean boolean4 = properties1.contains((java.lang.Object) 1L);
        java.util.Set<java.lang.Object> objSet5 = properties1.keySet();
        java.lang.Object obj8 = properties1.setProperty("", "");
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        boolean boolean11 = properties10.isEmpty();
        java.lang.String str13 = properties10.getProperty("hi!");
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        boolean boolean17 = properties16.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int19 = recovery18.getMaxRetries();
        boolean boolean20 = properties16.containsKey((java.lang.Object) recovery18);
        recovery18.setRetryInterval((long) (short) -1);
        recovery18.setRetryInterval((long) 0);
        recovery18.setMaxRetries((int) (byte) 10);
        java.lang.Class<?> wildcardClass27 = recovery18.getClass();
        java.lang.Object obj28 = properties10.replace((java.lang.Object) (byte) -1, (java.lang.Object) recovery18);
        java.util.Properties properties29 = null;
        java.util.Properties properties30 = new java.util.Properties(properties29);
        boolean boolean31 = properties30.isEmpty();
        java.lang.String str33 = properties30.getProperty("hi!");
        java.util.Set<java.lang.String> strSet34 = properties30.stringPropertyNames();
        java.lang.Object obj35 = new java.lang.Object();
        boolean boolean36 = properties1.replace((java.lang.Object) (byte) -1, (java.lang.Object) properties30, obj35);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties37.setCheckpointInterval((long) (byte) -1);
        atomikosProperties37.setThreadedTwoPhaseCommit(true);
        atomikosProperties37.setSerialJtaTransactions(false);
        atomikosProperties37.setOutputDir("");
        java.lang.String str46 = atomikosProperties37.getConsoleFileName();
        java.lang.String str47 = atomikosProperties37.getLogBaseName();
        atomikosProperties37.setConsoleFileCount((int) (byte) -1);
        java.util.Properties properties50 = atomikosProperties37.asProperties();
        java.util.Properties properties51 = null;
        java.util.Properties properties52 = new java.util.Properties(properties51);
        java.util.Enumeration<java.lang.Object> objEnumeration53 = properties52.elements();
        boolean boolean54 = properties52.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration55 = properties52.keys();
        boolean boolean56 = properties50.containsValue((java.lang.Object) properties52);
        properties30.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties52);
        java.io.OutputStream outputStream58 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties52.store(outputStream58, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objSet5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "tm.out" + "'", str46, "tm.out");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "tmlog" + "'", str47, "tmlog");
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertNotNull(objEnumeration53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objEnumeration55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test00320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00320");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = null;
        java.util.Properties properties2 = new java.util.Properties(properties1);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties5.elements();
        java.lang.String str8 = properties5.getProperty("");
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        boolean boolean13 = properties12.isEmpty();
        boolean boolean14 = properties2.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean13);
        boolean boolean15 = properties2.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setCheckpointInterval((long) (byte) -1);
        atomikosProperties17.setConsoleFileName("");
        java.lang.String str22 = atomikosProperties17.getLogBaseName();
        long long23 = atomikosProperties17.getCheckpointInterval();
        java.lang.String str24 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.setEnableLogging(true);
        java.lang.Object obj27 = properties0.putIfAbsent((java.lang.Object) objEnumeration16, (java.lang.Object) atomikosProperties17);
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties0.keys();
        java.lang.String str30 = properties0.getProperty("tm.out");
        java.util.Properties properties31 = null;
        java.util.Properties properties32 = new java.util.Properties(properties31);
        boolean boolean33 = properties32.isEmpty();
        java.util.Properties properties34 = new java.util.Properties(properties32);
        java.lang.Object obj35 = properties0.get((java.lang.Object) properties34);
        java.lang.String str38 = properties0.getProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "hi!");
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
    }

    @Test
    public void test00321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00321");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery2 = atomikosProperties0.getRecovery();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties7.elements();
        java.lang.String str10 = properties7.getProperty("");
        properties4.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        boolean boolean13 = properties4.contains((java.lang.Object) 0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties14.setCheckpointInterval((long) (byte) -1);
        atomikosProperties14.setThreadedTwoPhaseCommit(true);
        atomikosProperties14.setSerialJtaTransactions(false);
        atomikosProperties14.setOutputDir("");
        java.lang.String str23 = atomikosProperties14.getConsoleFileName();
        java.lang.String str24 = atomikosProperties14.getLogBaseName();
        atomikosProperties14.setDefaultJtaTimeout(0L);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel27 = atomikosProperties14.getConsoleLogLevel();
        java.util.Properties properties28 = null;
        java.util.Properties properties29 = new java.util.Properties(properties28);
        boolean boolean30 = properties29.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery31 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int32 = recovery31.getMaxRetries();
        boolean boolean33 = properties29.containsKey((java.lang.Object) recovery31);
        properties29.clear();
        boolean boolean36 = properties29.containsKey((java.lang.Object) "hi!");
        java.util.Properties properties37 = null;
        java.util.Properties properties38 = new java.util.Properties(properties37);
        boolean boolean39 = properties38.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties40.setCheckpointInterval((long) (byte) -1);
        atomikosProperties40.setConsoleFileName("");
        java.lang.String str45 = atomikosProperties40.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties46.setCheckpointInterval((long) (byte) -1);
        atomikosProperties46.setThreadedTwoPhaseCommit(true);
        java.util.Properties properties51 = null;
        java.util.Properties properties52 = new java.util.Properties(properties51);
        java.util.Enumeration<java.lang.Object> objEnumeration53 = properties52.elements();
        java.util.Properties properties54 = null;
        java.util.Properties properties55 = new java.util.Properties(properties54);
        java.util.Enumeration<java.lang.Object> objEnumeration56 = properties55.elements();
        java.lang.String str58 = properties55.getProperty("");
        properties52.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties55);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties61.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj64 = properties52.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties61);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel65 = atomikosProperties61.getConsoleLogLevel();
        atomikosProperties46.setConsoleLogLevel(atomikosLoggingLevel65);
        atomikosProperties40.setConsoleLogLevel(atomikosLoggingLevel65);
        boolean boolean69 = properties29.replace((java.lang.Object) properties38, (java.lang.Object) atomikosProperties40, (java.lang.Object) 10.0d);
        java.util.Properties properties70 = new java.util.Properties(properties29);
        boolean boolean71 = properties29.isEmpty();
        int int72 = properties29.size();
        java.lang.Object obj73 = properties4.replace((java.lang.Object) atomikosLoggingLevel27, (java.lang.Object) properties29);
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel27);
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.setCheckpointInterval((long) (byte) 1);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(recovery2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tm.out" + "'", str23, "tm.out");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel27 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel27.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "tmlog" + "'", str45, "tmlog");
        org.junit.Assert.assertNotNull(objEnumeration53);
        org.junit.Assert.assertNotNull(objEnumeration56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel65 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel65.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNull(obj73);
    }

    @Test
    public void test00322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00322");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        boolean boolean5 = properties4.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery6 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int7 = recovery6.getMaxRetries();
        boolean boolean8 = properties4.containsKey((java.lang.Object) recovery6);
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties10.elements();
        java.util.Properties properties12 = null;
        java.util.Properties properties13 = new java.util.Properties(properties12);
        java.util.Enumeration<java.lang.Object> objEnumeration14 = properties13.elements();
        java.lang.String str16 = properties13.getProperty("");
        properties10.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties13);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj22 = properties10.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties19);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel23 = atomikosProperties19.getConsoleLogLevel();
        int int24 = atomikosProperties19.getConsoleFileCount();
        java.lang.Object obj25 = properties4.get((java.lang.Object) atomikosProperties19);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setCheckpointInterval((long) (byte) -1);
        atomikosProperties26.setConsoleFileName("");
        java.lang.String str31 = atomikosProperties26.getLogBaseName();
        long long32 = atomikosProperties26.getCheckpointInterval();
        java.lang.Object obj33 = properties4.get((java.lang.Object) atomikosProperties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties34.setCheckpointInterval((long) (byte) -1);
        atomikosProperties34.setThreadedTwoPhaseCommit(true);
        java.lang.String str39 = atomikosProperties34.getOutputDir();
        java.lang.String str40 = atomikosProperties34.getTransactionManagerUniqueName();
        int int41 = atomikosProperties34.getConsoleFileCount();
        boolean boolean42 = atomikosProperties34.isThreadedTwoPhaseCommit();
        java.lang.Object obj44 = properties4.put((java.lang.Object) boolean42, (java.lang.Object) 0L);
        java.util.Properties properties45 = new java.util.Properties();
        java.util.Properties properties48 = null;
        java.util.Properties properties49 = new java.util.Properties(properties48);
        java.util.Enumeration<java.lang.Object> objEnumeration50 = properties49.elements();
        java.util.Properties properties51 = null;
        java.util.Properties properties52 = new java.util.Properties(properties51);
        java.util.Enumeration<java.lang.Object> objEnumeration53 = properties52.elements();
        java.lang.String str55 = properties52.getProperty("");
        properties49.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties52);
        java.util.Properties properties58 = null;
        java.util.Properties properties59 = new java.util.Properties(properties58);
        boolean boolean60 = properties59.isEmpty();
        boolean boolean61 = properties49.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean60);
        boolean boolean62 = properties49.isEmpty();
        boolean boolean63 = properties45.replace((java.lang.Object) 100.0f, (java.lang.Object) true, (java.lang.Object) properties49);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties64.setCheckpointInterval((long) (byte) -1);
        atomikosProperties64.setConsoleFileName("");
        java.lang.String str69 = atomikosProperties64.getLogBaseName();
        long long70 = atomikosProperties64.getCheckpointInterval();
        java.lang.String str71 = atomikosProperties64.getConsoleFileName();
        long long72 = atomikosProperties64.getCheckpointInterval();
        java.lang.Object obj73 = properties49.remove((java.lang.Object) atomikosProperties64);
        java.lang.Object obj74 = properties1.getOrDefault((java.lang.Object) 0L, (java.lang.Object) properties49);
        java.io.InputStream inputStream75 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties49.loadFromXML(inputStream75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertNotNull(objEnumeration14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel23 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel23.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(objEnumeration50);
        org.junit.Assert.assertNotNull(objEnumeration53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "tmlog" + "'", str69, "tmlog");
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-1L) + "'", long70 == (-1L));
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-1L) + "'", long72 == (-1L));
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertEquals(obj74.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj74), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj74), "{}");
    }

    @Test
    public void test00323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00323");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        java.util.Properties properties14 = null;
        java.util.Properties properties15 = new java.util.Properties(properties14);
        boolean boolean16 = properties15.isEmpty();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.lang.Object obj18 = properties1.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery21 = atomikosProperties19.getRecovery();
        atomikosProperties19.setEnableLogging(false);
        boolean boolean24 = properties1.equals((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.String> strSet25 = properties1.stringPropertyNames();
        boolean boolean26 = properties1.isEmpty();
        java.io.Reader reader27 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(reader27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(recovery21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test00324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00324");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        int int9 = properties4.size();
        java.io.PrintStream printStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties4.list(printStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test00325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00325");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Set<java.lang.String> strSet9 = properties4.stringPropertyNames();
        java.util.Enumeration<?> wildcardEnumeration10 = properties4.propertyNames();
        java.io.OutputStream outputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties4.storeToXML(outputStream11, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(wildcardEnumeration10);
    }

    @Test
    public void test00326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00326");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Properties properties3 = new java.util.Properties(properties1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties4.setCheckpointInterval((long) (byte) -1);
        atomikosProperties4.setConsoleFileName("");
        java.lang.String str9 = atomikosProperties4.getLogBaseName();
        long long10 = atomikosProperties4.getCheckpointInterval();
        java.lang.String str11 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setEnableLogging(true);
        long long14 = atomikosProperties4.getDefaultJtaTimeout();
        boolean boolean15 = atomikosProperties4.isSerialJtaTransactions();
        java.lang.String str16 = atomikosProperties4.getOutputDir();
        java.lang.String str17 = atomikosProperties4.getOutputDir();
        java.util.Properties properties18 = atomikosProperties4.asProperties();
        boolean boolean19 = properties1.equals((java.lang.Object) atomikosProperties4);
        java.lang.String str20 = atomikosProperties4.getLogBaseDir();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tmlog" + "'", str9, "tmlog");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test00327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00327");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        properties1.clear();
        boolean boolean8 = properties1.containsKey((java.lang.Object) "hi!");
        java.lang.Object obj9 = null;
        boolean boolean10 = properties1.equals(obj9);
        java.util.Properties properties11 = new java.util.Properties(properties1);
        java.io.OutputStream outputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(outputStream12, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test00328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00328");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        boolean boolean4 = properties1.contains((java.lang.Object) 1L);
        java.util.Set<java.lang.Object> objSet5 = properties1.keySet();
        java.lang.Object obj8 = properties1.setProperty("", "");
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        boolean boolean11 = properties10.isEmpty();
        java.lang.String str13 = properties10.getProperty("hi!");
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        boolean boolean17 = properties16.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int19 = recovery18.getMaxRetries();
        boolean boolean20 = properties16.containsKey((java.lang.Object) recovery18);
        recovery18.setRetryInterval((long) (short) -1);
        recovery18.setRetryInterval((long) 0);
        recovery18.setMaxRetries((int) (byte) 10);
        java.lang.Class<?> wildcardClass27 = recovery18.getClass();
        java.lang.Object obj28 = properties10.replace((java.lang.Object) (byte) -1, (java.lang.Object) recovery18);
        java.util.Properties properties29 = null;
        java.util.Properties properties30 = new java.util.Properties(properties29);
        boolean boolean31 = properties30.isEmpty();
        java.lang.String str33 = properties30.getProperty("hi!");
        java.util.Set<java.lang.String> strSet34 = properties30.stringPropertyNames();
        java.lang.Object obj35 = new java.lang.Object();
        boolean boolean36 = properties1.replace((java.lang.Object) (byte) -1, (java.lang.Object) properties30, obj35);
        java.util.Properties properties37 = null;
        java.util.Properties properties38 = new java.util.Properties(properties37);
        java.util.Enumeration<java.lang.Object> objEnumeration39 = properties38.elements();
        boolean boolean40 = properties38.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration41 = properties38.keys();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties43.setCheckpointInterval((long) (byte) -1);
        atomikosProperties43.setThreadedTwoPhaseCommit(true);
        atomikosProperties43.setSerialJtaTransactions(false);
        atomikosProperties43.setOutputDir("");
        atomikosProperties43.setThreadedTwoPhaseCommit(true);
        atomikosProperties43.setThreadedTwoPhaseCommit(false);
        atomikosProperties43.setCheckpointInterval((long) (short) 1);
        boolean boolean58 = atomikosProperties43.isThreadedTwoPhaseCommit();
        java.lang.Object obj59 = properties38.remove((java.lang.Object) atomikosProperties43);
        java.io.InputStream inputStream60 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties38.load(inputStream60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objSet5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objEnumeration39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objEnumeration41);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(obj59);
    }

    @Test
    public void test00329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00329");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) (byte) -1);
        boolean boolean3 = atomikosProperties0.isSerialJtaTransactions();
        java.lang.String str4 = atomikosProperties0.getService();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test00330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00330");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getMaxActives();
        java.lang.String str2 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.setDefaultJtaTimeout((long) (byte) 0);
        atomikosProperties0.setMaxTimeout((long) '#');
        atomikosProperties0.setLogBaseDir("tm.out");
        int int9 = atomikosProperties0.getConsoleFileCount();
        int int10 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        java.io.InputStream inputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties11.loadFromXML(inputStream12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 50 + "'", int1 == 50);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(properties11);
    }

    @Test
    public void test00331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00331");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) (byte) -1);
        atomikosProperties0.setConsoleFileName("");
        java.lang.String str5 = atomikosProperties0.getLogBaseName();
        long long6 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setForceShutdownOnVmExit(false);
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        boolean boolean10 = atomikosProperties0.isAllowSubTransactions();
        int int11 = atomikosProperties0.getConsoleFileLimit();
        atomikosProperties0.setService("{10=#}");
        atomikosProperties0.setConsoleFileLimit((int) (short) 100);
        atomikosProperties0.setLogBaseDir("{}");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test00332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00332");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) (byte) -1);
        atomikosProperties0.setConsoleFileName("");
        java.lang.String str5 = atomikosProperties0.getLogBaseName();
        java.lang.String str6 = atomikosProperties0.getConsoleFileName();
        java.lang.String str7 = atomikosProperties0.getOutputDir();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test00333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00333");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Properties properties3 = new java.util.Properties(properties1);
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties3.keys();
        properties3.clear();
        java.io.Reader reader6 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.load(reader6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEnumeration4);
    }

    @Test
    public void test00334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00334");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.lang.String str4 = properties1.getProperty("hi!");
        boolean boolean6 = properties1.contains((java.lang.Object) 10.0f);
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties9.elements();
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties12.elements();
        java.lang.String str15 = properties12.getProperty("");
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties12);
        java.util.Properties properties18 = null;
        java.util.Properties properties19 = new java.util.Properties(properties18);
        boolean boolean20 = properties19.isEmpty();
        boolean boolean21 = properties9.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean20);
        boolean boolean22 = properties9.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties9.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.setCheckpointInterval((long) (byte) -1);
        atomikosProperties24.setConsoleFileName("");
        java.lang.String str29 = atomikosProperties24.getLogBaseName();
        long long30 = atomikosProperties24.getCheckpointInterval();
        java.lang.String str31 = atomikosProperties24.getLogBaseDir();
        atomikosProperties24.setEnableLogging(true);
        java.lang.Object obj34 = properties7.putIfAbsent((java.lang.Object) objEnumeration23, (java.lang.Object) atomikosProperties24);
        java.util.Properties properties35 = null;
        java.util.Properties properties36 = new java.util.Properties(properties35);
        boolean boolean37 = properties36.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery38 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int39 = recovery38.getMaxRetries();
        boolean boolean40 = properties36.containsKey((java.lang.Object) recovery38);
        recovery38.setRetryInterval((long) (short) -1);
        recovery38.setDelay(10L);
        java.util.Properties properties45 = null;
        java.util.Properties properties46 = new java.util.Properties(properties45);
        boolean boolean47 = properties46.isEmpty();
        java.lang.Object obj48 = properties7.getOrDefault((java.lang.Object) recovery38, (java.lang.Object) properties46);
        java.lang.Object obj49 = properties1.remove((java.lang.Object) recovery38);
        properties1.clear();
        java.util.Collection<java.lang.Object> objCollection51 = properties1.values();
        java.io.OutputStream outputStream52 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream52, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "{}");
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(objCollection51);
    }

    @Test
    public void test00335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00335");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration<?> wildcardEnumeration14 = properties1.propertyNames();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Double cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test00336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00336");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean13 = properties1.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean12);
        boolean boolean14 = properties1.isEmpty();
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties16.elements();
        boolean boolean19 = properties16.containsKey((java.lang.Object) 10.0f);
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties16);
        java.lang.Object obj23 = properties1.setProperty("hi!", "tmlog");
        java.io.InputStream inputStream24 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.loadFromXML(inputStream24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj23);
    }

    @Test
    public void test00337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00337");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) (byte) -1);
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.setOutputDir("");
        long long9 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setOutputDir("tmlog");
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.setConsoleFileLimit((int) '4');
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    }

    @Test
    public void test00338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00338");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.lang.String str4 = properties1.getProperty("hi!");
        boolean boolean6 = properties1.contains((java.lang.Object) 10.0f);
        java.util.Set<java.lang.Object> objSet7 = properties1.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int9 = atomikosProperties8.getMaxActives();
        boolean boolean10 = properties1.equals((java.lang.Object) atomikosProperties8);
        atomikosProperties8.setSerialJtaTransactions(false);
        int int13 = atomikosProperties8.getMaxActives();
        boolean boolean14 = atomikosProperties8.isEnableLogging();
        java.lang.String str15 = atomikosProperties8.getLogBaseName();
        boolean boolean16 = atomikosProperties8.isSerialJtaTransactions();
        java.lang.String str17 = atomikosProperties8.getLogBaseName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tmlog" + "'", str15, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
    }

    @Test
    public void test00339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00339");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean13 = properties1.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean12);
        boolean boolean14 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setConsoleFileName("tm.out");
        java.util.Properties properties19 = new java.util.Properties();
        java.util.Properties properties22 = null;
        java.util.Properties properties23 = new java.util.Properties(properties22);
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties23.elements();
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties26.elements();
        java.lang.String str29 = properties26.getProperty("");
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        java.util.Properties properties32 = null;
        java.util.Properties properties33 = new java.util.Properties(properties32);
        boolean boolean34 = properties33.isEmpty();
        boolean boolean35 = properties23.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean34);
        boolean boolean36 = properties23.isEmpty();
        boolean boolean37 = properties19.replace((java.lang.Object) 100.0f, (java.lang.Object) true, (java.lang.Object) properties23);
        boolean boolean38 = properties1.replace((java.lang.Object) ' ', (java.lang.Object) "tm.out", (java.lang.Object) boolean37);
        java.util.Collection<java.lang.Object> objCollection39 = properties1.values();
        java.io.OutputStream outputStream40 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream40, "tm.out", "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objCollection39);
    }

    @Test
    public void test00340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00340");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties3.elements();
        java.util.Properties properties5 = null;
        java.util.Properties properties6 = new java.util.Properties(properties5);
        java.util.Enumeration<java.lang.Object> objEnumeration7 = properties6.elements();
        java.lang.String str9 = properties6.getProperty("");
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties6);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj15 = properties3.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties12);
        atomikosProperties12.setSerialJtaTransactions(false);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel18 = atomikosProperties12.getConsoleLogLevel();
        java.lang.Object obj19 = properties0.putIfAbsent((java.lang.Object) 1, (java.lang.Object) atomikosProperties12);
        java.util.Properties properties20 = null;
        java.util.Properties properties21 = new java.util.Properties(properties20);
        java.util.Enumeration<java.lang.Object> objEnumeration22 = properties21.elements();
        java.util.Properties properties23 = null;
        java.util.Properties properties24 = new java.util.Properties(properties23);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties24.elements();
        java.lang.String str27 = properties24.getProperty("");
        properties21.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        java.util.Collection<java.lang.Object> objCollection29 = properties24.values();
        boolean boolean30 = properties0.containsValue((java.lang.Object) objCollection29);
        java.util.Properties properties31 = null;
        java.util.Properties properties32 = new java.util.Properties(properties31);
        java.util.Enumeration<java.lang.Object> objEnumeration33 = properties32.elements();
        java.util.Properties properties34 = null;
        java.util.Properties properties35 = new java.util.Properties(properties34);
        java.util.Enumeration<java.lang.Object> objEnumeration36 = properties35.elements();
        java.lang.String str38 = properties35.getProperty("");
        properties32.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties35);
        java.util.Properties properties41 = null;
        java.util.Properties properties42 = new java.util.Properties(properties41);
        boolean boolean43 = properties42.isEmpty();
        boolean boolean44 = properties32.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean43);
        java.util.Properties properties45 = null;
        java.util.Properties properties46 = new java.util.Properties(properties45);
        java.util.Enumeration<java.lang.Object> objEnumeration47 = properties46.elements();
        java.util.Properties properties48 = null;
        java.util.Properties properties49 = new java.util.Properties(properties48);
        java.util.Enumeration<java.lang.Object> objEnumeration50 = properties49.elements();
        java.lang.String str52 = properties49.getProperty("");
        properties46.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties49);
        boolean boolean54 = properties32.contains((java.lang.Object) properties46);
        int int55 = properties32.size();
        boolean boolean56 = properties0.equals((java.lang.Object) properties32);
        java.io.PrintWriter printWriter57 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties32.list(printWriter57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objEnumeration7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel18 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel18.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(objEnumeration22);
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(objCollection29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objEnumeration33);
        org.junit.Assert.assertNotNull(objEnumeration36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(objEnumeration47);
        org.junit.Assert.assertNotNull(objEnumeration50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test00341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00341");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet3 = properties1.entrySet();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Object obj6 = properties1.replace((java.lang.Object) "hi!", obj5);
        boolean boolean8 = properties1.equals((java.lang.Object) 1.0f);
        java.util.Properties properties9 = new java.util.Properties(properties1);
        properties1.clear();
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties1.elements();
        java.util.Enumeration<?> wildcardEnumeration12 = properties1.propertyNames();
        java.lang.String str14 = properties1.getProperty("");
        java.lang.String str17 = properties1.getProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEntrySet3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertNotNull(wildcardEnumeration12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
    }

    @Test
    public void test00342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00342");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean13 = properties1.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean12);
        java.util.Properties properties14 = null;
        java.util.Properties properties15 = new java.util.Properties(properties14);
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties15.elements();
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        java.util.Enumeration<java.lang.Object> objEnumeration19 = properties18.elements();
        java.lang.String str21 = properties18.getProperty("");
        properties15.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties18);
        boolean boolean23 = properties1.contains((java.lang.Object) properties15);
        java.util.Set<java.lang.Object> objSet24 = properties15.keySet();
        java.lang.Object obj27 = properties15.setProperty("tm.out", "{10=#}");
        java.io.PrintWriter printWriter28 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties15.list(printWriter28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNotNull(objEnumeration19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objSet24);
        org.junit.Assert.assertNull(obj27);
    }

    @Test
    public void test00343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00343");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        boolean boolean3 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties1.keys();
        java.util.Properties properties5 = null;
        java.util.Properties properties6 = new java.util.Properties(properties5);
        boolean boolean7 = properties6.isEmpty();
        java.lang.String str9 = properties6.getProperty("hi!");
        boolean boolean11 = properties6.contains((java.lang.Object) 10.0f);
        java.util.Set<java.lang.Object> objSet12 = properties6.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int14 = atomikosProperties13.getMaxActives();
        boolean boolean15 = properties6.equals((java.lang.Object) atomikosProperties13);
        atomikosProperties13.setSerialJtaTransactions(false);
        int int18 = atomikosProperties13.getMaxActives();
        java.util.Properties properties19 = null;
        java.util.Properties properties20 = new java.util.Properties(properties19);
        boolean boolean21 = properties20.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery22 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int23 = recovery22.getMaxRetries();
        boolean boolean24 = properties20.containsKey((java.lang.Object) recovery22);
        long long25 = recovery22.getRetryInterval();
        java.lang.Object obj26 = properties1.getOrDefault((java.lang.Object) atomikosProperties13, (java.lang.Object) recovery22);
        java.io.Reader reader27 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(reader27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objSet12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 50 + "'", int14 == 50);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 50 + "'", int18 == 50);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5 + "'", int23 == 5);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10000L + "'", long25 == 10000L);
        org.junit.Assert.assertNotNull(obj26);
    }

    @Test
    public void test00344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00344");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = null;
        java.util.Properties properties2 = new java.util.Properties(properties1);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties5.elements();
        java.lang.String str8 = properties5.getProperty("");
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        boolean boolean13 = properties12.isEmpty();
        boolean boolean14 = properties2.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean13);
        boolean boolean15 = properties2.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setCheckpointInterval((long) (byte) -1);
        atomikosProperties17.setConsoleFileName("");
        java.lang.String str22 = atomikosProperties17.getLogBaseName();
        long long23 = atomikosProperties17.getCheckpointInterval();
        java.lang.String str24 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.setEnableLogging(true);
        java.lang.Object obj27 = properties0.putIfAbsent((java.lang.Object) objEnumeration16, (java.lang.Object) atomikosProperties17);
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties0.keys();
        java.lang.String str30 = properties0.getProperty("tm.out");
        java.util.Properties properties31 = null;
        java.util.Properties properties32 = new java.util.Properties(properties31);
        boolean boolean33 = properties32.isEmpty();
        java.util.Properties properties34 = new java.util.Properties(properties32);
        java.lang.Object obj35 = properties0.get((java.lang.Object) properties34);
        boolean boolean36 = properties34.isEmpty();
        java.io.InputStream inputStream37 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties34.loadFromXML(inputStream37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test00345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00345");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = null;
        java.util.Properties properties2 = new java.util.Properties(properties1);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties5.elements();
        java.lang.String str8 = properties5.getProperty("");
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        boolean boolean13 = properties12.isEmpty();
        boolean boolean14 = properties2.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean13);
        boolean boolean15 = properties2.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setCheckpointInterval((long) (byte) -1);
        atomikosProperties17.setConsoleFileName("");
        java.lang.String str22 = atomikosProperties17.getLogBaseName();
        long long23 = atomikosProperties17.getCheckpointInterval();
        java.lang.String str24 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.setEnableLogging(true);
        java.lang.Object obj27 = properties0.putIfAbsent((java.lang.Object) objEnumeration16, (java.lang.Object) atomikosProperties17);
        boolean boolean28 = atomikosProperties17.isSerialJtaTransactions();
        atomikosProperties17.setLogBaseDir("");
        java.lang.Class<?> wildcardClass31 = atomikosProperties17.getClass();
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test00346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00346");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        boolean boolean3 = properties1.isEmpty();
        java.util.Set<java.lang.String> strSet4 = properties1.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties5.setCheckpointInterval((long) (byte) -1);
        atomikosProperties5.setThreadedTwoPhaseCommit(true);
        java.lang.String str10 = atomikosProperties5.getOutputDir();
        java.util.Properties properties11 = atomikosProperties5.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setCheckpointInterval((long) (byte) -1);
        atomikosProperties12.setThreadedTwoPhaseCommit(true);
        atomikosProperties12.setSerialJtaTransactions(false);
        atomikosProperties12.setOutputDir("");
        java.lang.String str21 = atomikosProperties12.getConsoleFileName();
        java.lang.String str22 = atomikosProperties12.getLogBaseName();
        atomikosProperties12.setDefaultJtaTimeout(0L);
        java.lang.Object obj25 = properties1.putIfAbsent((java.lang.Object) atomikosProperties5, (java.lang.Object) atomikosProperties12);
        atomikosProperties12.setMaxTimeout((long) (byte) -1);
        atomikosProperties12.setConsoleFileLimit((int) (short) -1);
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tm.out" + "'", str21, "tm.out");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertNull(obj25);
    }

    @Test
    public void test00347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00347");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties7.elements();
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties10.elements();
        java.lang.String str13 = properties10.getProperty("");
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj19 = properties7.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties16);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel20 = atomikosProperties16.getConsoleLogLevel();
        int int21 = atomikosProperties16.getConsoleFileCount();
        java.lang.Object obj22 = properties1.get((java.lang.Object) atomikosProperties16);
        atomikosProperties16.setSerialJtaTransactions(true);
        java.util.Properties properties25 = atomikosProperties16.asProperties();
        java.util.Enumeration<java.lang.Object> objEnumeration26 = properties25.elements();
        java.util.Properties properties27 = null;
        java.util.Properties properties28 = new java.util.Properties(properties27);
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties28.elements();
        java.lang.String str31 = properties28.getProperty("");
        java.util.Properties properties32 = null;
        java.util.Properties properties33 = new java.util.Properties(properties32);
        boolean boolean34 = properties33.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet35 = properties33.entrySet();
        java.lang.Object obj37 = new java.lang.Object();
        java.lang.Object obj38 = properties33.replace((java.lang.Object) "hi!", obj37);
        boolean boolean40 = properties33.equals((java.lang.Object) 1.0f);
        boolean boolean41 = properties28.containsKey((java.lang.Object) boolean40);
        java.util.Enumeration<java.lang.Object> objEnumeration42 = properties28.keys();
        boolean boolean43 = properties25.containsValue((java.lang.Object) objEnumeration42);
        java.io.OutputStream outputStream44 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties25.storeToXML(outputStream44, "tm.out", "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel20 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel20.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNotNull(objEnumeration26);
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objEntrySet35);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objEnumeration42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test00348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00348");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = null;
        java.util.Properties properties2 = new java.util.Properties(properties1);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties5.elements();
        java.lang.String str8 = properties5.getProperty("");
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        boolean boolean13 = properties12.isEmpty();
        boolean boolean14 = properties2.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean13);
        boolean boolean15 = properties2.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setCheckpointInterval((long) (byte) -1);
        atomikosProperties17.setConsoleFileName("");
        java.lang.String str22 = atomikosProperties17.getLogBaseName();
        long long23 = atomikosProperties17.getCheckpointInterval();
        java.lang.String str24 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.setEnableLogging(true);
        java.lang.Object obj27 = properties0.putIfAbsent((java.lang.Object) objEnumeration16, (java.lang.Object) atomikosProperties17);
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties0.keys();
        java.lang.String str30 = properties0.getProperty("tm.out");
        java.util.Properties properties31 = null;
        java.util.Properties properties32 = new java.util.Properties(properties31);
        boolean boolean33 = properties32.isEmpty();
        java.util.Properties properties34 = new java.util.Properties(properties32);
        java.lang.Object obj35 = properties0.get((java.lang.Object) properties34);
        java.io.OutputStream outputStream36 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(outputStream36, "{10=#}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(obj35);
    }

    @Test
    public void test00349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00349");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        boolean boolean4 = properties1.contains((java.lang.Object) 1L);
        java.io.OutputStream outputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(outputStream5, "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test00350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00350");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Properties properties3 = new java.util.Properties(properties1);
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        boolean boolean6 = properties5.isEmpty();
        boolean boolean8 = properties5.contains((java.lang.Object) 1L);
        java.util.Set<java.lang.Object> objSet9 = properties5.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str11 = atomikosProperties10.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery12 = atomikosProperties10.getRecovery();
        atomikosProperties10.setEnableLogging(false);
        atomikosProperties10.setSerialJtaTransactions(true);
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        java.util.Enumeration<java.lang.Object> objEnumeration19 = properties18.elements();
        java.util.Properties properties20 = null;
        java.util.Properties properties21 = new java.util.Properties(properties20);
        java.util.Enumeration<java.lang.Object> objEnumeration22 = properties21.elements();
        java.lang.String str24 = properties21.getProperty("");
        properties18.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.util.Properties properties27 = null;
        java.util.Properties properties28 = new java.util.Properties(properties27);
        boolean boolean29 = properties28.isEmpty();
        boolean boolean30 = properties18.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean29);
        java.util.Properties properties31 = null;
        java.util.Properties properties32 = new java.util.Properties(properties31);
        java.util.Enumeration<java.lang.Object> objEnumeration33 = properties32.elements();
        java.util.Properties properties34 = null;
        java.util.Properties properties35 = new java.util.Properties(properties34);
        java.util.Enumeration<java.lang.Object> objEnumeration36 = properties35.elements();
        java.lang.String str38 = properties35.getProperty("");
        properties32.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties35);
        boolean boolean40 = properties18.contains((java.lang.Object) properties32);
        java.util.Set<java.lang.Object> objSet41 = properties32.keySet();
        java.lang.Object obj42 = properties5.getOrDefault((java.lang.Object) true, (java.lang.Object) properties32);
        boolean boolean43 = properties1.containsValue((java.lang.Object) properties32);
        java.io.PrintStream printStream44 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printStream44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(objSet9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(recovery12);
        org.junit.Assert.assertNotNull(objEnumeration19);
        org.junit.Assert.assertNotNull(objEnumeration22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objEnumeration33);
        org.junit.Assert.assertNotNull(objEnumeration36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objSet41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "{}");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test00351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00351");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = null;
        java.util.Properties properties2 = new java.util.Properties(properties1);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties5.elements();
        java.lang.String str8 = properties5.getProperty("");
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        boolean boolean13 = properties12.isEmpty();
        boolean boolean14 = properties2.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean13);
        boolean boolean15 = properties2.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setCheckpointInterval((long) (byte) -1);
        atomikosProperties17.setConsoleFileName("");
        java.lang.String str22 = atomikosProperties17.getLogBaseName();
        long long23 = atomikosProperties17.getCheckpointInterval();
        java.lang.String str24 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.setEnableLogging(true);
        java.lang.Object obj27 = properties0.putIfAbsent((java.lang.Object) objEnumeration16, (java.lang.Object) atomikosProperties17);
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties0.keys();
        java.util.Properties properties29 = null;
        java.util.Properties properties30 = new java.util.Properties(properties29);
        boolean boolean31 = properties30.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery32 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int33 = recovery32.getMaxRetries();
        boolean boolean34 = properties30.containsKey((java.lang.Object) recovery32);
        properties30.clear();
        java.util.Properties properties36 = new java.util.Properties(properties30);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties36);
        java.util.Set<java.lang.String> strSet38 = properties36.stringPropertyNames();
        java.util.Properties properties39 = new java.util.Properties(properties36);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet40 = properties39.entrySet();
        java.util.Properties properties41 = null;
        java.util.Properties properties42 = new java.util.Properties(properties41);
        java.util.Enumeration<java.lang.Object> objEnumeration43 = properties42.elements();
        boolean boolean45 = properties42.containsKey((java.lang.Object) 10.0f);
        java.lang.String str47 = properties42.getProperty("hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str50 = atomikosProperties49.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery51 = atomikosProperties49.getRecovery();
        atomikosProperties49.setEnableLogging(false);
        atomikosProperties49.setSerialJtaTransactions(true);
        java.util.Properties properties56 = null;
        java.util.Properties properties57 = new java.util.Properties(properties56);
        java.util.Enumeration<java.lang.Object> objEnumeration58 = properties57.elements();
        java.util.Properties properties59 = null;
        java.util.Properties properties60 = new java.util.Properties(properties59);
        java.util.Enumeration<java.lang.Object> objEnumeration61 = properties60.elements();
        java.lang.String str63 = properties60.getProperty("");
        properties57.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties60);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties66.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj69 = properties57.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties66);
        atomikosProperties66.setSerialJtaTransactions(false);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel72 = atomikosProperties66.getConsoleLogLevel();
        atomikosProperties49.setConsoleLogLevel(atomikosLoggingLevel72);
        java.lang.Object obj74 = properties42.replace((java.lang.Object) 500L, (java.lang.Object) atomikosLoggingLevel72);
        java.lang.Object obj75 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean76 = properties39.remove((java.lang.Object) properties42, obj75);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(objEntrySet40);
        org.junit.Assert.assertNotNull(objEnumeration43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(recovery51);
        org.junit.Assert.assertNotNull(objEnumeration58);
        org.junit.Assert.assertNotNull(objEnumeration61);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel72 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel72.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj74);
    }

    @Test
    public void test00352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00352");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        properties1.clear();
        boolean boolean8 = properties1.containsKey((java.lang.Object) "hi!");
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        boolean boolean11 = properties10.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setCheckpointInterval((long) (byte) -1);
        atomikosProperties12.setConsoleFileName("");
        java.lang.String str17 = atomikosProperties12.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setCheckpointInterval((long) (byte) -1);
        atomikosProperties18.setThreadedTwoPhaseCommit(true);
        java.util.Properties properties23 = null;
        java.util.Properties properties24 = new java.util.Properties(properties23);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties24.elements();
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties27.elements();
        java.lang.String str30 = properties27.getProperty("");
        properties24.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj36 = properties24.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties33);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel37 = atomikosProperties33.getConsoleLogLevel();
        atomikosProperties18.setConsoleLogLevel(atomikosLoggingLevel37);
        atomikosProperties12.setConsoleLogLevel(atomikosLoggingLevel37);
        boolean boolean41 = properties1.replace((java.lang.Object) properties10, (java.lang.Object) atomikosProperties12, (java.lang.Object) 10.0d);
        java.util.Properties properties42 = new java.util.Properties(properties1);
        boolean boolean43 = properties1.isEmpty();
        java.util.Properties properties44 = null;
        java.util.Properties properties45 = new java.util.Properties(properties44);
        java.util.Enumeration<java.lang.Object> objEnumeration46 = properties45.elements();
        java.util.Properties properties47 = null;
        java.util.Properties properties48 = new java.util.Properties(properties47);
        java.util.Enumeration<java.lang.Object> objEnumeration49 = properties48.elements();
        java.lang.String str51 = properties48.getProperty("");
        properties45.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties48);
        java.util.Properties properties54 = null;
        java.util.Properties properties55 = new java.util.Properties(properties54);
        boolean boolean56 = properties55.isEmpty();
        boolean boolean57 = properties45.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean56);
        java.util.Properties properties58 = null;
        java.util.Properties properties59 = new java.util.Properties(properties58);
        java.util.Enumeration<java.lang.Object> objEnumeration60 = properties59.elements();
        java.util.Properties properties61 = null;
        java.util.Properties properties62 = new java.util.Properties(properties61);
        java.util.Enumeration<java.lang.Object> objEnumeration63 = properties62.elements();
        java.lang.String str65 = properties62.getProperty("");
        properties59.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties62);
        boolean boolean67 = properties45.contains((java.lang.Object) properties59);
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties45);
        java.io.PrintStream printStream69 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printStream69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel37 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel37.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objEnumeration46);
        org.junit.Assert.assertNotNull(objEnumeration49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(objEnumeration60);
        org.junit.Assert.assertNotNull(objEnumeration63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test00353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00353");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        properties4.clear();
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties4.keys();
        java.io.OutputStream outputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties4.store(outputStream11, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(objEnumeration10);
    }

    @Test
    public void test00354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00354");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        boolean boolean4 = properties1.contains((java.lang.Object) 1L);
        java.util.Set<java.lang.Object> objSet5 = properties1.keySet();
        java.lang.Object obj8 = properties1.setProperty("", "");
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        boolean boolean11 = properties10.isEmpty();
        java.lang.String str13 = properties10.getProperty("hi!");
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        boolean boolean17 = properties16.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int19 = recovery18.getMaxRetries();
        boolean boolean20 = properties16.containsKey((java.lang.Object) recovery18);
        recovery18.setRetryInterval((long) (short) -1);
        recovery18.setRetryInterval((long) 0);
        recovery18.setMaxRetries((int) (byte) 10);
        java.lang.Class<?> wildcardClass27 = recovery18.getClass();
        java.lang.Object obj28 = properties10.replace((java.lang.Object) (byte) -1, (java.lang.Object) recovery18);
        java.util.Properties properties29 = null;
        java.util.Properties properties30 = new java.util.Properties(properties29);
        boolean boolean31 = properties30.isEmpty();
        java.lang.String str33 = properties30.getProperty("hi!");
        java.util.Set<java.lang.String> strSet34 = properties30.stringPropertyNames();
        java.lang.Object obj35 = new java.lang.Object();
        boolean boolean36 = properties1.replace((java.lang.Object) (byte) -1, (java.lang.Object) properties30, obj35);
        java.util.Properties properties37 = null;
        java.util.Properties properties38 = new java.util.Properties(properties37);
        java.util.Enumeration<java.lang.Object> objEnumeration39 = properties38.elements();
        boolean boolean40 = properties38.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration41 = properties38.keys();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties43.setCheckpointInterval((long) (byte) -1);
        atomikosProperties43.setThreadedTwoPhaseCommit(true);
        atomikosProperties43.setSerialJtaTransactions(false);
        atomikosProperties43.setOutputDir("");
        atomikosProperties43.setThreadedTwoPhaseCommit(true);
        atomikosProperties43.setThreadedTwoPhaseCommit(false);
        atomikosProperties43.setCheckpointInterval((long) (short) 1);
        boolean boolean58 = atomikosProperties43.isThreadedTwoPhaseCommit();
        java.lang.Object obj59 = properties38.remove((java.lang.Object) atomikosProperties43);
        properties38.clear();
        java.util.Set<java.lang.Object> objSet61 = properties38.keySet();
        int int62 = properties38.size();
        java.io.Reader reader63 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties38.load(reader63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objSet5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objEnumeration39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objEnumeration41);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNotNull(objSet61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test00355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00355");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.lang.String str3 = properties1.toString();
        java.io.InputStream inputStream4 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.loadFromXML(inputStream4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{}" + "'", str3, "{}");
    }

    @Test
    public void test00356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00356");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        boolean boolean4 = properties1.contains((java.lang.Object) 1L);
        java.util.Set<java.lang.Object> objSet5 = properties1.keySet();
        java.lang.Object obj7 = properties1.remove((java.lang.Object) "{10=#}");
        java.lang.Object obj9 = properties1.remove((java.lang.Object) "");
        java.util.Set<java.lang.Object> objSet10 = properties1.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties11.setCheckpointInterval((long) (byte) -1);
        atomikosProperties11.setConsoleFileName("");
        java.lang.String str16 = atomikosProperties11.getLogBaseName();
        long long17 = atomikosProperties11.getCheckpointInterval();
        atomikosProperties11.setForceShutdownOnVmExit(false);
        atomikosProperties11.setTransactionManagerUniqueName("tmlog");
        atomikosProperties11.setLogBaseDir("");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery24 = atomikosProperties11.getRecovery();
        boolean boolean25 = properties1.containsKey((java.lang.Object) atomikosProperties11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setCheckpointInterval((long) (byte) -1);
        atomikosProperties26.setConsoleFileName("");
        java.lang.String str31 = atomikosProperties26.getLogBaseName();
        long long32 = atomikosProperties26.getCheckpointInterval();
        java.lang.String str33 = atomikosProperties26.getLogBaseDir();
        atomikosProperties26.setEnableLogging(true);
        long long36 = atomikosProperties26.getDefaultJtaTimeout();
        java.lang.String str37 = atomikosProperties26.getService();
        java.util.Properties properties38 = null;
        java.util.Properties properties39 = new java.util.Properties(properties38);
        java.util.Enumeration<java.lang.Object> objEnumeration40 = properties39.elements();
        boolean boolean41 = properties39.isEmpty();
        java.util.Set<java.lang.String> strSet42 = properties39.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties43.setCheckpointInterval((long) (byte) -1);
        atomikosProperties43.setThreadedTwoPhaseCommit(true);
        java.lang.String str48 = atomikosProperties43.getOutputDir();
        java.util.Properties properties49 = atomikosProperties43.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties50.setCheckpointInterval((long) (byte) -1);
        atomikosProperties50.setThreadedTwoPhaseCommit(true);
        atomikosProperties50.setSerialJtaTransactions(false);
        atomikosProperties50.setOutputDir("");
        java.lang.String str59 = atomikosProperties50.getConsoleFileName();
        java.lang.String str60 = atomikosProperties50.getLogBaseName();
        atomikosProperties50.setDefaultJtaTimeout(0L);
        java.lang.Object obj63 = properties39.putIfAbsent((java.lang.Object) atomikosProperties43, (java.lang.Object) atomikosProperties50);
        atomikosProperties50.setSerialJtaTransactions(false);
        java.lang.Object obj66 = properties1.getOrDefault((java.lang.Object) atomikosProperties26, (java.lang.Object) atomikosProperties50);
        java.lang.String str67 = properties1.toString();
        java.io.PrintWriter printWriter68 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printWriter68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objSet5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(objSet10);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(recovery24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10000L + "'", long36 == 10000L);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(objEnumeration40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(properties49);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "tm.out" + "'", str59, "tm.out");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "tmlog" + "'", str60, "tmlog");
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "{}" + "'", str67, "{}");
    }

    @Test
    public void test00357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00357");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.lang.Object obj4 = properties1.setProperty("{10=#}", "tm.out");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet5 = properties1.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties6.getRecovery();
        atomikosProperties6.setEnableLogging(false);
        long long11 = atomikosProperties6.getMaxTimeout();
        java.util.Properties properties12 = null;
        java.util.Properties properties13 = new java.util.Properties(properties12);
        java.util.Enumeration<java.lang.Object> objEnumeration14 = properties13.elements();
        java.lang.String str16 = properties13.getProperty("");
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        boolean boolean19 = properties18.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet20 = properties18.entrySet();
        java.lang.Object obj22 = new java.lang.Object();
        java.lang.Object obj23 = properties18.replace((java.lang.Object) "hi!", obj22);
        boolean boolean25 = properties18.equals((java.lang.Object) 1.0f);
        boolean boolean26 = properties13.containsKey((java.lang.Object) boolean25);
        java.lang.Object obj27 = properties1.put((java.lang.Object) atomikosProperties6, (java.lang.Object) properties13);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties28.setCheckpointInterval((long) (byte) -1);
        atomikosProperties28.setThreadedTwoPhaseCommit(false);
        java.util.Properties properties33 = null;
        java.util.Properties properties34 = new java.util.Properties(properties33);
        java.util.Enumeration<java.lang.Object> objEnumeration35 = properties34.elements();
        java.util.Properties properties36 = null;
        java.util.Properties properties37 = new java.util.Properties(properties36);
        java.util.Enumeration<java.lang.Object> objEnumeration38 = properties37.elements();
        java.lang.String str40 = properties37.getProperty("");
        properties34.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties37);
        java.util.Properties properties43 = null;
        java.util.Properties properties44 = new java.util.Properties(properties43);
        boolean boolean45 = properties44.isEmpty();
        boolean boolean46 = properties34.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean45);
        java.util.Properties properties47 = null;
        java.util.Properties properties48 = new java.util.Properties(properties47);
        java.util.Enumeration<java.lang.Object> objEnumeration49 = properties48.elements();
        java.util.Properties properties50 = null;
        java.util.Properties properties51 = new java.util.Properties(properties50);
        java.util.Enumeration<java.lang.Object> objEnumeration52 = properties51.elements();
        java.lang.String str54 = properties51.getProperty("");
        properties48.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties51);
        boolean boolean56 = properties34.contains((java.lang.Object) properties48);
        int int57 = properties34.size();
        java.lang.Object obj58 = properties1.putIfAbsent((java.lang.Object) false, (java.lang.Object) int57);
        java.lang.Object obj61 = properties1.setProperty("{}", "tmlog");
        java.io.InputStream inputStream62 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(inputStream62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(objEntrySet5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertNotNull(objEnumeration14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objEntrySet20);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(objEnumeration35);
        org.junit.Assert.assertNotNull(objEnumeration38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(objEnumeration49);
        org.junit.Assert.assertNotNull(objEnumeration52);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNull(obj61);
    }

    @Test
    public void test00358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00358");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet3 = properties1.entrySet();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Object obj6 = properties1.replace((java.lang.Object) "hi!", obj5);
        boolean boolean8 = properties1.equals((java.lang.Object) 1.0f);
        java.util.Properties properties9 = new java.util.Properties(properties1);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery13 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int14 = recovery13.getMaxRetries();
        boolean boolean15 = properties11.containsKey((java.lang.Object) recovery13);
        java.util.Properties properties16 = null;
        java.util.Properties properties17 = new java.util.Properties(properties16);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties17.elements();
        java.util.Properties properties19 = null;
        java.util.Properties properties20 = new java.util.Properties(properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties20.elements();
        java.lang.String str23 = properties20.getProperty("");
        properties17.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj29 = properties17.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties26);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel30 = atomikosProperties26.getConsoleLogLevel();
        int int31 = atomikosProperties26.getConsoleFileCount();
        java.lang.Object obj32 = properties11.get((java.lang.Object) atomikosProperties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.setCheckpointInterval((long) (byte) -1);
        atomikosProperties33.setConsoleFileName("");
        java.lang.String str38 = atomikosProperties33.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties39.setCheckpointInterval((long) (byte) -1);
        atomikosProperties39.setThreadedTwoPhaseCommit(true);
        java.util.Properties properties44 = null;
        java.util.Properties properties45 = new java.util.Properties(properties44);
        java.util.Enumeration<java.lang.Object> objEnumeration46 = properties45.elements();
        java.util.Properties properties47 = null;
        java.util.Properties properties48 = new java.util.Properties(properties47);
        java.util.Enumeration<java.lang.Object> objEnumeration49 = properties48.elements();
        java.lang.String str51 = properties48.getProperty("");
        properties45.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties48);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties54.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj57 = properties45.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties54);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel58 = atomikosProperties54.getConsoleLogLevel();
        atomikosProperties39.setConsoleLogLevel(atomikosLoggingLevel58);
        atomikosProperties33.setConsoleLogLevel(atomikosLoggingLevel58);
        atomikosProperties33.setConsoleFileCount(5);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery63 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery63.setMaxRetries((-1));
        long long66 = recovery63.getRetryInterval();
        java.lang.Object obj67 = properties11.replace((java.lang.Object) 5, (java.lang.Object) long66);
        java.lang.Object obj68 = properties11.clone();
        boolean boolean69 = properties9.contains((java.lang.Object) properties11);
        java.util.Collection<java.lang.Object> objCollection70 = properties9.values();
        java.io.Reader reader71 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties9.load(reader71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEntrySet3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel30 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel30.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNotNull(objEnumeration46);
        org.junit.Assert.assertNotNull(objEnumeration49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel58 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel58.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 10000L + "'", long66 == 10000L);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "{}");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objCollection70);
    }

    @Test
    public void test00359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00359");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Properties properties3 = new java.util.Properties(properties1);
        java.lang.Object obj6 = properties3.putIfAbsent((java.lang.Object) 10, (java.lang.Object) '#');
        java.lang.String str7 = properties3.toString();
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        boolean boolean10 = properties9.isEmpty();
        boolean boolean12 = properties9.contains((java.lang.Object) 1L);
        java.util.Set<java.lang.Object> objSet13 = properties9.keySet();
        java.lang.Object obj15 = properties9.remove((java.lang.Object) "{10=#}");
        java.lang.Object obj17 = properties9.remove((java.lang.Object) "");
        boolean boolean18 = properties3.contains((java.lang.Object) "");
        java.util.Enumeration<java.lang.Object> objEnumeration19 = properties3.elements();
        java.io.OutputStream outputStream20 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.storeToXML(outputStream20, "hi!", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{10=#}" + "'", str7, "{10=#}");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objSet13);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(objEnumeration19);
    }

    @Test
    public void test00360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00360");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.lang.String str4 = properties1.getProperty("hi!");
        boolean boolean6 = properties1.contains((java.lang.Object) 10.0f);
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties9.elements();
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties12.elements();
        java.lang.String str15 = properties12.getProperty("");
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties12);
        java.util.Properties properties18 = null;
        java.util.Properties properties19 = new java.util.Properties(properties18);
        boolean boolean20 = properties19.isEmpty();
        boolean boolean21 = properties9.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean20);
        boolean boolean22 = properties9.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties9.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.setCheckpointInterval((long) (byte) -1);
        atomikosProperties24.setConsoleFileName("");
        java.lang.String str29 = atomikosProperties24.getLogBaseName();
        long long30 = atomikosProperties24.getCheckpointInterval();
        java.lang.String str31 = atomikosProperties24.getLogBaseDir();
        atomikosProperties24.setEnableLogging(true);
        java.lang.Object obj34 = properties7.putIfAbsent((java.lang.Object) objEnumeration23, (java.lang.Object) atomikosProperties24);
        java.util.Properties properties35 = null;
        java.util.Properties properties36 = new java.util.Properties(properties35);
        boolean boolean37 = properties36.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery38 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int39 = recovery38.getMaxRetries();
        boolean boolean40 = properties36.containsKey((java.lang.Object) recovery38);
        recovery38.setRetryInterval((long) (short) -1);
        recovery38.setDelay(10L);
        java.util.Properties properties45 = null;
        java.util.Properties properties46 = new java.util.Properties(properties45);
        boolean boolean47 = properties46.isEmpty();
        java.lang.Object obj48 = properties7.getOrDefault((java.lang.Object) recovery38, (java.lang.Object) properties46);
        java.lang.Object obj49 = properties1.remove((java.lang.Object) recovery38);
        properties1.clear();
        java.util.Properties properties51 = null;
        java.util.Properties properties52 = new java.util.Properties(properties51);
        boolean boolean53 = properties52.isEmpty();
        java.lang.String str55 = properties52.getProperty("hi!");
        boolean boolean57 = properties52.contains((java.lang.Object) 10.0f);
        boolean boolean58 = properties52.isEmpty();
        boolean boolean59 = properties1.containsValue((java.lang.Object) properties52);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties60.setCheckpointInterval((long) (byte) -1);
        atomikosProperties60.setThreadedTwoPhaseCommit(true);
        atomikosProperties60.setSerialJtaTransactions(false);
        atomikosProperties60.setOutputDir("");
        java.lang.String str69 = atomikosProperties60.getConsoleFileName();
        java.lang.String str70 = atomikosProperties60.getLogBaseName();
        atomikosProperties60.setConsoleFileCount((int) (byte) -1);
        atomikosProperties60.setConsoleFileName("hi!");
        java.lang.Object obj75 = properties52.remove((java.lang.Object) "hi!");
        java.io.PrintStream printStream76 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties52.list(printStream76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "{}");
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "tm.out" + "'", str69, "tm.out");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "tmlog" + "'", str70, "tmlog");
        org.junit.Assert.assertNull(obj75);
    }

    @Test
    public void test00361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00361");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Enumeration<?> wildcardEnumeration9 = properties1.propertyNames();
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        java.util.Enumeration<java.lang.Object> objEnumeration12 = properties11.elements();
        java.util.Properties properties13 = null;
        java.util.Properties properties14 = new java.util.Properties(properties13);
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties14.elements();
        java.lang.String str17 = properties14.getProperty("");
        properties11.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties14);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj23 = properties11.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties20);
        atomikosProperties20.setSerialJtaTransactions(false);
        atomikosProperties20.setOutputDir("");
        boolean boolean28 = properties1.containsKey((java.lang.Object) "");
        java.lang.String str30 = properties1.getProperty("tmlog");
        java.io.PrintStream printStream31 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printStream31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(wildcardEnumeration9);
        org.junit.Assert.assertNotNull(objEnumeration12);
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test00362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00362");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean13 = properties1.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean12);
        properties1.clear();
        java.io.OutputStream outputStream15 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.save(outputStream15, "{10=#}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test00363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00363");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties1.elements();
        java.io.OutputStream outputStream4 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream4, "{}", "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEnumeration3);
    }

    @Test
    public void test00364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00364");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet3 = properties1.entrySet();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Object obj6 = properties1.replace((java.lang.Object) "hi!", obj5);
        boolean boolean8 = properties1.equals((java.lang.Object) 1.0f);
        java.util.Properties properties9 = new java.util.Properties(properties1);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery13 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int14 = recovery13.getMaxRetries();
        boolean boolean15 = properties11.containsKey((java.lang.Object) recovery13);
        java.util.Properties properties16 = null;
        java.util.Properties properties17 = new java.util.Properties(properties16);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties17.elements();
        java.util.Properties properties19 = null;
        java.util.Properties properties20 = new java.util.Properties(properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties20.elements();
        java.lang.String str23 = properties20.getProperty("");
        properties17.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj29 = properties17.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties26);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel30 = atomikosProperties26.getConsoleLogLevel();
        int int31 = atomikosProperties26.getConsoleFileCount();
        java.lang.Object obj32 = properties11.get((java.lang.Object) atomikosProperties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.setCheckpointInterval((long) (byte) -1);
        atomikosProperties33.setConsoleFileName("");
        java.lang.String str38 = atomikosProperties33.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties39.setCheckpointInterval((long) (byte) -1);
        atomikosProperties39.setThreadedTwoPhaseCommit(true);
        java.util.Properties properties44 = null;
        java.util.Properties properties45 = new java.util.Properties(properties44);
        java.util.Enumeration<java.lang.Object> objEnumeration46 = properties45.elements();
        java.util.Properties properties47 = null;
        java.util.Properties properties48 = new java.util.Properties(properties47);
        java.util.Enumeration<java.lang.Object> objEnumeration49 = properties48.elements();
        java.lang.String str51 = properties48.getProperty("");
        properties45.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties48);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties54.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj57 = properties45.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties54);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel58 = atomikosProperties54.getConsoleLogLevel();
        atomikosProperties39.setConsoleLogLevel(atomikosLoggingLevel58);
        atomikosProperties33.setConsoleLogLevel(atomikosLoggingLevel58);
        atomikosProperties33.setConsoleFileCount(5);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery63 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery63.setMaxRetries((-1));
        long long66 = recovery63.getRetryInterval();
        java.lang.Object obj67 = properties11.replace((java.lang.Object) 5, (java.lang.Object) long66);
        java.lang.Object obj68 = properties11.clone();
        boolean boolean69 = properties9.contains((java.lang.Object) properties11);
        java.io.Writer writer70 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties9.store(writer70, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEntrySet3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel30 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel30.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNotNull(objEnumeration46);
        org.junit.Assert.assertNotNull(objEnumeration49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel58 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel58.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 10000L + "'", long66 == 10000L);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "{}");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test00365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00365");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean13 = properties1.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean12);
        boolean boolean14 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setConsoleFileName("tm.out");
        java.util.Properties properties19 = new java.util.Properties();
        java.util.Properties properties22 = null;
        java.util.Properties properties23 = new java.util.Properties(properties22);
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties23.elements();
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties26.elements();
        java.lang.String str29 = properties26.getProperty("");
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        java.util.Properties properties32 = null;
        java.util.Properties properties33 = new java.util.Properties(properties32);
        boolean boolean34 = properties33.isEmpty();
        boolean boolean35 = properties23.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean34);
        boolean boolean36 = properties23.isEmpty();
        boolean boolean37 = properties19.replace((java.lang.Object) 100.0f, (java.lang.Object) true, (java.lang.Object) properties23);
        boolean boolean38 = properties1.replace((java.lang.Object) ' ', (java.lang.Object) "tm.out", (java.lang.Object) boolean37);
        java.util.Properties properties39 = new java.util.Properties(properties1);
        java.util.Properties properties40 = new java.util.Properties();
        java.util.Properties properties41 = null;
        java.util.Properties properties42 = new java.util.Properties(properties41);
        java.util.Enumeration<java.lang.Object> objEnumeration43 = properties42.elements();
        java.util.Properties properties44 = null;
        java.util.Properties properties45 = new java.util.Properties(properties44);
        java.util.Enumeration<java.lang.Object> objEnumeration46 = properties45.elements();
        java.lang.String str48 = properties45.getProperty("");
        properties42.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties45);
        java.util.Properties properties51 = null;
        java.util.Properties properties52 = new java.util.Properties(properties51);
        boolean boolean53 = properties52.isEmpty();
        boolean boolean54 = properties42.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean53);
        boolean boolean55 = properties42.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration56 = properties42.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties57.setCheckpointInterval((long) (byte) -1);
        atomikosProperties57.setConsoleFileName("");
        java.lang.String str62 = atomikosProperties57.getLogBaseName();
        long long63 = atomikosProperties57.getCheckpointInterval();
        java.lang.String str64 = atomikosProperties57.getLogBaseDir();
        atomikosProperties57.setEnableLogging(true);
        java.lang.Object obj67 = properties40.putIfAbsent((java.lang.Object) objEnumeration56, (java.lang.Object) atomikosProperties57);
        java.util.Enumeration<java.lang.Object> objEnumeration68 = properties40.keys();
        java.util.Properties properties69 = null;
        java.util.Properties properties70 = new java.util.Properties(properties69);
        boolean boolean71 = properties70.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery72 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int73 = recovery72.getMaxRetries();
        boolean boolean74 = properties70.containsKey((java.lang.Object) recovery72);
        properties70.clear();
        java.util.Properties properties76 = new java.util.Properties(properties70);
        properties40.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties76);
        java.util.Set<java.lang.String> strSet78 = properties76.stringPropertyNames();
        java.util.Properties properties79 = new java.util.Properties(properties76);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet80 = properties79.entrySet();
        java.lang.String str82 = properties79.getProperty("hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties83 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties83.setCheckpointInterval((long) (byte) -1);
        java.lang.String str86 = atomikosProperties83.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery87 = atomikosProperties83.getRecovery();
        java.lang.String str88 = atomikosProperties83.getService();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj89 = properties39.put((java.lang.Object) properties79, (java.lang.Object) str88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objEnumeration43);
        org.junit.Assert.assertNotNull(objEnumeration46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(objEnumeration56);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tmlog" + "'", str62, "tmlog");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-1L) + "'", long63 == (-1L));
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNotNull(objEnumeration68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 5 + "'", int73 == 5);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertNotNull(objEntrySet80);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(recovery87);
        org.junit.Assert.assertNull(str88);
    }

    @Test
    public void test00366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00366");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Properties properties3 = new java.util.Properties(properties1);
        java.util.Collection<java.lang.Object> objCollection4 = properties1.values();
        java.lang.String str5 = properties1.toString();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        boolean boolean8 = properties7.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet9 = properties7.entrySet();
        java.lang.Object obj11 = new java.lang.Object();
        java.lang.Object obj12 = properties7.replace((java.lang.Object) "hi!", obj11);
        boolean boolean14 = properties7.equals((java.lang.Object) 1.0f);
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties7.keys();
        java.util.Properties properties16 = null;
        java.util.Properties properties17 = new java.util.Properties(properties16);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties17.elements();
        java.util.Properties properties19 = null;
        java.util.Properties properties20 = new java.util.Properties(properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties20.elements();
        java.lang.String str23 = properties20.getProperty("");
        properties17.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties20);
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        boolean boolean28 = properties27.isEmpty();
        boolean boolean29 = properties17.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean28);
        properties17.clear();
        int int31 = properties17.size();
        java.util.Set<java.lang.Object> objSet32 = properties17.keySet();
        java.lang.Object obj33 = properties1.putIfAbsent((java.lang.Object) properties7, (java.lang.Object) properties17);
        java.util.Properties properties34 = null;
        java.util.Properties properties35 = new java.util.Properties(properties34);
        java.util.Enumeration<java.lang.Object> objEnumeration36 = properties35.elements();
        java.util.Properties properties37 = null;
        java.util.Properties properties38 = new java.util.Properties(properties37);
        java.util.Enumeration<java.lang.Object> objEnumeration39 = properties38.elements();
        java.lang.String str41 = properties38.getProperty("");
        properties35.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj47 = properties35.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties44);
        java.util.Properties properties48 = null;
        java.util.Properties properties49 = new java.util.Properties(properties48);
        boolean boolean50 = properties49.isEmpty();
        properties35.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties49);
        java.lang.Object obj52 = properties35.clone();
        java.util.Properties properties53 = null;
        java.util.Properties properties54 = new java.util.Properties(properties53);
        boolean boolean55 = properties54.isEmpty();
        java.lang.String str57 = properties54.getProperty("hi!");
        boolean boolean59 = properties54.contains((java.lang.Object) 10.0f);
        java.lang.Object obj60 = properties7.replace(obj52, (java.lang.Object) properties54);
        java.io.OutputStream outputStream61 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties54.store(outputStream61, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objEntrySet9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(objSet32);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(objEnumeration36);
        org.junit.Assert.assertNotNull(objEnumeration39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(obj60);
    }

    @Test
    public void test00367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00367");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet3 = properties1.entrySet();
        java.util.Set<java.lang.String> strSet4 = properties1.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties5.setCheckpointInterval((long) (byte) -1);
        atomikosProperties5.setConsoleFileName("");
        java.lang.String str10 = atomikosProperties5.getLogBaseName();
        long long11 = atomikosProperties5.getCheckpointInterval();
        java.lang.String str12 = atomikosProperties5.getLogBaseDir();
        atomikosProperties5.setEnableLogging(true);
        long long15 = atomikosProperties5.getDefaultJtaTimeout();
        boolean boolean16 = atomikosProperties5.isSerialJtaTransactions();
        java.lang.String str17 = atomikosProperties5.getOutputDir();
        atomikosProperties5.setTransactionManagerUniqueName("{}");
        java.util.Properties properties20 = null;
        java.util.Properties properties21 = new java.util.Properties(properties20);
        java.util.Enumeration<java.lang.Object> objEnumeration22 = properties21.elements();
        boolean boolean24 = properties21.containsKey((java.lang.Object) 10.0f);
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties26.elements();
        java.util.Properties properties28 = null;
        java.util.Properties properties29 = new java.util.Properties(properties28);
        java.util.Enumeration<java.lang.Object> objEnumeration30 = properties29.elements();
        java.lang.String str32 = properties29.getProperty("");
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        java.util.Enumeration<?> wildcardEnumeration34 = properties26.propertyNames();
        boolean boolean35 = properties21.containsValue((java.lang.Object) wildcardEnumeration34);
        java.lang.Object obj36 = properties1.put((java.lang.Object) atomikosProperties5, (java.lang.Object) properties21);
        java.lang.Object obj37 = properties1.clone();
        java.io.InputStream inputStream38 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.loadFromXML(inputStream38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEntrySet3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(objEnumeration22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNotNull(objEnumeration30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(wildcardEnumeration34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(obj37);
    }

    @Test
    public void test00368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00368");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) (byte) -1);
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        atomikosProperties0.setSerialJtaTransactions(false);
        java.lang.String str7 = atomikosProperties0.getLogBaseName();
        long long8 = atomikosProperties0.getCheckpointInterval();
        long long9 = atomikosProperties0.getMaxTimeout();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 300000L + "'", long9 == 300000L);
    }

    @Test
    public void test00369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00369");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        properties1.clear();
        java.util.Properties properties7 = new java.util.Properties(properties1);
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties7.keys();
        java.util.Set<java.lang.String> strSet9 = properties7.stringPropertyNames();
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery13 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int14 = recovery13.getMaxRetries();
        boolean boolean15 = properties11.containsKey((java.lang.Object) recovery13);
        recovery13.setRetryInterval((long) (short) -1);
        recovery13.setDelay(10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.setCheckpointInterval((long) (byte) -1);
        atomikosProperties20.setThreadedTwoPhaseCommit(true);
        atomikosProperties20.setSerialJtaTransactions(false);
        atomikosProperties20.setOutputDir("");
        atomikosProperties20.setOutputDir("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        java.lang.Object obj31 = properties7.getOrDefault((java.lang.Object) recovery13, (java.lang.Object) atomikosProperties20);
        recovery13.setForgetOrphanedLogEntriesDelay((long) (byte) 10);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj31);
    }

    @Test
    public void test00370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00370");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        boolean boolean4 = properties1.contains((java.lang.Object) 1L);
        java.util.Set<java.lang.Object> objSet5 = properties1.keySet();
        java.lang.Object obj8 = properties1.setProperty("", "");
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        boolean boolean11 = properties10.isEmpty();
        java.lang.String str13 = properties10.getProperty("hi!");
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        boolean boolean17 = properties16.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int19 = recovery18.getMaxRetries();
        boolean boolean20 = properties16.containsKey((java.lang.Object) recovery18);
        recovery18.setRetryInterval((long) (short) -1);
        recovery18.setRetryInterval((long) 0);
        recovery18.setMaxRetries((int) (byte) 10);
        java.lang.Class<?> wildcardClass27 = recovery18.getClass();
        java.lang.Object obj28 = properties10.replace((java.lang.Object) (byte) -1, (java.lang.Object) recovery18);
        java.util.Properties properties29 = null;
        java.util.Properties properties30 = new java.util.Properties(properties29);
        boolean boolean31 = properties30.isEmpty();
        java.lang.String str33 = properties30.getProperty("hi!");
        java.util.Set<java.lang.String> strSet34 = properties30.stringPropertyNames();
        java.lang.Object obj35 = new java.lang.Object();
        boolean boolean36 = properties1.replace((java.lang.Object) (byte) -1, (java.lang.Object) properties30, obj35);
        java.util.Properties properties37 = null;
        java.util.Properties properties38 = new java.util.Properties(properties37);
        java.util.Enumeration<java.lang.Object> objEnumeration39 = properties38.elements();
        java.util.Properties properties40 = null;
        java.util.Properties properties41 = new java.util.Properties(properties40);
        java.util.Enumeration<java.lang.Object> objEnumeration42 = properties41.elements();
        java.lang.String str44 = properties41.getProperty("");
        properties38.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties41);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties47.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj50 = properties38.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties47);
        atomikosProperties47.setConsoleFileName("");
        java.lang.Object obj53 = properties1.get((java.lang.Object) atomikosProperties47);
        boolean boolean54 = atomikosProperties47.isForceShutdownOnVmExit();
        atomikosProperties47.setConsoleFileLimit(1);
        int int57 = atomikosProperties47.getConsoleFileCount();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objSet5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objEnumeration39);
        org.junit.Assert.assertNotNull(objEnumeration42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
    }

    @Test
    public void test00371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00371");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties1.elements();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        boolean boolean6 = properties5.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet7 = properties5.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int9 = recovery8.getMaxRetries();
        recovery8.setForgetOrphanedLogEntriesDelay((-1L));
        recovery8.setForgetOrphanedLogEntriesDelay((long) (-1));
        boolean boolean14 = properties1.remove((java.lang.Object) properties5, (java.lang.Object) (-1));
        boolean boolean15 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties1.keys();
        boolean boolean17 = properties1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objEntrySet7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test00372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00372");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean13 = properties1.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean12);
        boolean boolean14 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties1.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setCheckpointInterval((long) (byte) -1);
        atomikosProperties16.setConsoleFileName("");
        java.lang.String str21 = atomikosProperties16.getLogBaseName();
        long long22 = atomikosProperties16.getCheckpointInterval();
        atomikosProperties16.setForceShutdownOnVmExit(false);
        atomikosProperties16.setTransactionManagerUniqueName("tmlog");
        atomikosProperties16.setLogBaseDir("");
        java.util.Properties properties29 = null;
        java.util.Properties properties30 = new java.util.Properties(properties29);
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties30.elements();
        java.util.Properties properties32 = null;
        java.util.Properties properties33 = new java.util.Properties(properties32);
        java.util.Enumeration<java.lang.Object> objEnumeration34 = properties33.elements();
        java.lang.String str36 = properties33.getProperty("");
        properties30.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties33);
        java.util.Properties properties39 = null;
        java.util.Properties properties40 = new java.util.Properties(properties39);
        boolean boolean41 = properties40.isEmpty();
        boolean boolean42 = properties30.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean41);
        boolean boolean43 = properties1.remove((java.lang.Object) "", (java.lang.Object) boolean42);
        java.io.OutputStream outputStream44 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream44, "{com.atomikos.icatch.console_file_name=, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNotNull(objEnumeration31);
        org.junit.Assert.assertNotNull(objEnumeration34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test00373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00373");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        java.util.Properties properties14 = null;
        java.util.Properties properties15 = new java.util.Properties(properties14);
        boolean boolean16 = properties15.isEmpty();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setCheckpointInterval((long) (byte) -1);
        atomikosProperties18.setConsoleFileName("");
        java.lang.String str23 = atomikosProperties18.getLogBaseName();
        long long24 = atomikosProperties18.getCheckpointInterval();
        atomikosProperties18.setForceShutdownOnVmExit(false);
        java.util.Properties properties27 = atomikosProperties18.asProperties();
        boolean boolean28 = atomikosProperties18.isAllowSubTransactions();
        java.lang.Object obj29 = null;
        java.lang.Object obj30 = properties1.getOrDefault((java.lang.Object) boolean28, obj29);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration<?> wildcardEnumeration31 = properties1.propertyNames();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Double cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tmlog" + "'", str23, "tmlog");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(obj30);
    }

    @Test
    public void test00374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00374");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet3 = properties1.entrySet();
        java.util.Set<java.lang.String> strSet4 = properties1.stringPropertyNames();
        java.io.Reader reader5 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(reader5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEntrySet3);
        org.junit.Assert.assertNotNull(strSet4);
    }

    @Test
    public void test00375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00375");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        boolean boolean4 = properties1.containsKey((java.lang.Object) 10.0f);
        java.io.Writer writer5 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(writer5, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test00376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00376");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties7.elements();
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties10.elements();
        java.lang.String str13 = properties10.getProperty("");
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj19 = properties7.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties16);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel20 = atomikosProperties16.getConsoleLogLevel();
        int int21 = atomikosProperties16.getConsoleFileCount();
        java.lang.Object obj22 = properties1.get((java.lang.Object) atomikosProperties16);
        atomikosProperties16.setSerialJtaTransactions(true);
        atomikosProperties16.setLogBaseName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        int int27 = atomikosProperties16.getConsoleFileCount();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel20 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel20.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
    }

    @Test
    public void test00377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00377");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties1.elements();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        boolean boolean6 = properties5.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet7 = properties5.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int9 = recovery8.getMaxRetries();
        recovery8.setForgetOrphanedLogEntriesDelay((-1L));
        recovery8.setForgetOrphanedLogEntriesDelay((long) (-1));
        boolean boolean14 = properties1.remove((java.lang.Object) properties5, (java.lang.Object) (-1));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.getLogBaseDir();
        java.lang.String str17 = atomikosProperties15.getLogBaseDir();
        int int18 = atomikosProperties15.getConsoleFileCount();
        java.util.Properties properties19 = null;
        java.util.Properties properties20 = new java.util.Properties(properties19);
        boolean boolean21 = properties20.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration22 = properties20.elements();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet23 = properties20.entrySet();
        boolean boolean25 = properties5.replace((java.lang.Object) atomikosProperties15, (java.lang.Object) properties20, (java.lang.Object) 1);
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        boolean boolean28 = properties27.isEmpty();
        boolean boolean29 = properties27.isEmpty();
        properties20.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties27);
        java.io.OutputStream outputStream31 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties20.storeToXML(outputStream31, "{com.atomikos.icatch.console_file_name=, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objEntrySet7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objEnumeration22);
        org.junit.Assert.assertNotNull(objEntrySet23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test00378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00378");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        properties1.clear();
        boolean boolean8 = properties1.containsKey((java.lang.Object) "hi!");
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        boolean boolean11 = properties10.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setCheckpointInterval((long) (byte) -1);
        atomikosProperties12.setConsoleFileName("");
        java.lang.String str17 = atomikosProperties12.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setCheckpointInterval((long) (byte) -1);
        atomikosProperties18.setThreadedTwoPhaseCommit(true);
        java.util.Properties properties23 = null;
        java.util.Properties properties24 = new java.util.Properties(properties23);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties24.elements();
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties27.elements();
        java.lang.String str30 = properties27.getProperty("");
        properties24.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj36 = properties24.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties33);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel37 = atomikosProperties33.getConsoleLogLevel();
        atomikosProperties18.setConsoleLogLevel(atomikosLoggingLevel37);
        atomikosProperties12.setConsoleLogLevel(atomikosLoggingLevel37);
        boolean boolean41 = properties1.replace((java.lang.Object) properties10, (java.lang.Object) atomikosProperties12, (java.lang.Object) 10.0d);
        java.util.Properties properties42 = new java.util.Properties(properties1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int44 = atomikosProperties43.getMaxActives();
        java.lang.String str45 = atomikosProperties43.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel46 = atomikosProperties43.getConsoleLogLevel();
        java.util.Properties properties47 = null;
        java.util.Properties properties48 = new java.util.Properties(properties47);
        java.util.Enumeration<java.lang.Object> objEnumeration49 = properties48.elements();
        java.util.Properties properties50 = null;
        java.util.Properties properties51 = new java.util.Properties(properties50);
        java.util.Enumeration<java.lang.Object> objEnumeration52 = properties51.elements();
        java.lang.String str54 = properties51.getProperty("");
        properties48.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties51);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties57.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj60 = properties48.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties57);
        atomikosProperties57.setSerialJtaTransactions(false);
        int int63 = atomikosProperties57.getConsoleFileCount();
        int int64 = atomikosProperties57.getConsoleFileLimit();
        java.lang.String str65 = atomikosProperties57.getLogBaseName();
        atomikosProperties57.setService("tmlog");
        java.util.Properties properties68 = null;
        java.util.Properties properties69 = new java.util.Properties(properties68);
        boolean boolean70 = properties69.isEmpty();
        java.lang.String str72 = properties69.getProperty("hi!");
        java.util.Set<java.lang.Object> objSet73 = properties69.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet74 = properties69.entrySet();
        boolean boolean75 = properties42.replace((java.lang.Object) atomikosProperties43, (java.lang.Object) "tmlog", (java.lang.Object) properties69);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties76 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties76.setCheckpointInterval((long) (byte) -1);
        boolean boolean79 = atomikosProperties76.isSerialJtaTransactions();
        java.lang.String str80 = atomikosProperties76.getOutputDir();
        boolean boolean81 = properties69.containsValue((java.lang.Object) atomikosProperties76);
        java.util.Collection<java.lang.Object> objCollection82 = properties69.values();
        java.lang.Object obj85 = properties69.setProperty("{10=#}", "");
        java.io.Writer writer86 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties69.store(writer86, "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel37 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel37.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 50 + "'", int44 == 50);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel46 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel46.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(objEnumeration49);
        org.junit.Assert.assertNotNull(objEnumeration52);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "tmlog" + "'", str65, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(objSet73);
        org.junit.Assert.assertNotNull(objEntrySet74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objCollection82);
        org.junit.Assert.assertNull(obj85);
    }

    @Test
    public void test00379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00379");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        boolean boolean4 = properties1.contains((java.lang.Object) 1L);
        java.util.Set<java.lang.Object> objSet5 = properties1.keySet();
        java.lang.Object obj8 = properties1.setProperty("", "");
        int int9 = properties1.size();
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        java.util.Enumeration<java.lang.Object> objEnumeration12 = properties11.elements();
        java.util.Properties properties13 = null;
        java.util.Properties properties14 = new java.util.Properties(properties13);
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties14.elements();
        java.lang.String str17 = properties14.getProperty("");
        properties11.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties14);
        java.util.Properties properties20 = null;
        java.util.Properties properties21 = new java.util.Properties(properties20);
        boolean boolean22 = properties21.isEmpty();
        boolean boolean23 = properties11.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean22);
        boolean boolean24 = properties11.isEmpty();
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties26.elements();
        boolean boolean29 = properties26.containsKey((java.lang.Object) 10.0f);
        properties11.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        java.util.Set<java.lang.String> strSet31 = properties26.stringPropertyNames();
        java.util.Properties properties32 = null;
        java.util.Properties properties33 = new java.util.Properties(properties32);
        java.util.Enumeration<java.lang.Object> objEnumeration34 = properties33.elements();
        java.util.Properties properties35 = null;
        java.util.Properties properties36 = new java.util.Properties(properties35);
        java.util.Enumeration<java.lang.Object> objEnumeration37 = properties36.elements();
        java.lang.String str39 = properties36.getProperty("");
        properties33.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties36);
        java.util.Properties properties42 = null;
        java.util.Properties properties43 = new java.util.Properties(properties42);
        boolean boolean44 = properties43.isEmpty();
        boolean boolean45 = properties33.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean44);
        boolean boolean46 = properties33.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration47 = properties33.keys();
        boolean boolean48 = properties1.remove((java.lang.Object) properties26, (java.lang.Object) properties33);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objSet5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(objEnumeration12);
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(objEnumeration34);
        org.junit.Assert.assertNotNull(objEnumeration37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objEnumeration47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test00380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00380");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) (byte) -1);
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        java.lang.String str5 = atomikosProperties0.getOutputDir();
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery7 = atomikosProperties0.getRecovery();
        recovery7.setDelay((long) (-1));
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNotNull(recovery7);
    }

    @Test
    public void test00381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00381");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        properties1.clear();
        boolean boolean8 = properties1.containsKey((java.lang.Object) "hi!");
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        boolean boolean11 = properties10.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setCheckpointInterval((long) (byte) -1);
        atomikosProperties12.setConsoleFileName("");
        java.lang.String str17 = atomikosProperties12.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setCheckpointInterval((long) (byte) -1);
        atomikosProperties18.setThreadedTwoPhaseCommit(true);
        java.util.Properties properties23 = null;
        java.util.Properties properties24 = new java.util.Properties(properties23);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties24.elements();
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties27.elements();
        java.lang.String str30 = properties27.getProperty("");
        properties24.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj36 = properties24.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties33);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel37 = atomikosProperties33.getConsoleLogLevel();
        atomikosProperties18.setConsoleLogLevel(atomikosLoggingLevel37);
        atomikosProperties12.setConsoleLogLevel(atomikosLoggingLevel37);
        boolean boolean41 = properties1.replace((java.lang.Object) properties10, (java.lang.Object) atomikosProperties12, (java.lang.Object) 10.0d);
        java.util.Properties properties42 = new java.util.Properties(properties1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int44 = atomikosProperties43.getMaxActives();
        java.lang.String str45 = atomikosProperties43.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel46 = atomikosProperties43.getConsoleLogLevel();
        java.util.Properties properties47 = null;
        java.util.Properties properties48 = new java.util.Properties(properties47);
        java.util.Enumeration<java.lang.Object> objEnumeration49 = properties48.elements();
        java.util.Properties properties50 = null;
        java.util.Properties properties51 = new java.util.Properties(properties50);
        java.util.Enumeration<java.lang.Object> objEnumeration52 = properties51.elements();
        java.lang.String str54 = properties51.getProperty("");
        properties48.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties51);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties57.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj60 = properties48.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties57);
        atomikosProperties57.setSerialJtaTransactions(false);
        int int63 = atomikosProperties57.getConsoleFileCount();
        int int64 = atomikosProperties57.getConsoleFileLimit();
        java.lang.String str65 = atomikosProperties57.getLogBaseName();
        atomikosProperties57.setService("tmlog");
        java.util.Properties properties68 = null;
        java.util.Properties properties69 = new java.util.Properties(properties68);
        boolean boolean70 = properties69.isEmpty();
        java.lang.String str72 = properties69.getProperty("hi!");
        java.util.Set<java.lang.Object> objSet73 = properties69.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet74 = properties69.entrySet();
        boolean boolean75 = properties42.replace((java.lang.Object) atomikosProperties43, (java.lang.Object) "tmlog", (java.lang.Object) properties69);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties76 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties76.setCheckpointInterval((long) (byte) -1);
        boolean boolean79 = atomikosProperties76.isSerialJtaTransactions();
        java.lang.String str80 = atomikosProperties76.getOutputDir();
        boolean boolean81 = properties69.containsValue((java.lang.Object) atomikosProperties76);
        java.util.Collection<java.lang.Object> objCollection82 = properties69.values();
        java.lang.Object obj85 = properties69.setProperty("{10=#}", "");
        java.io.OutputStream outputStream86 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties69.store(outputStream86, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel37 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel37.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 50 + "'", int44 == 50);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel46 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel46.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(objEnumeration49);
        org.junit.Assert.assertNotNull(objEnumeration52);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "tmlog" + "'", str65, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(objSet73);
        org.junit.Assert.assertNotNull(objEntrySet74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objCollection82);
        org.junit.Assert.assertNull(obj85);
    }

    @Test
    public void test00382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00382");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) (byte) -1);
        atomikosProperties0.setConsoleFileName("");
        java.lang.String str5 = atomikosProperties0.getLogBaseName();
        long long6 = atomikosProperties0.getCheckpointInterval();
        java.lang.String str7 = atomikosProperties0.getLogBaseDir();
        java.lang.String str8 = atomikosProperties0.getConsoleFileName();
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        java.lang.String str10 = properties9.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties11.setCheckpointInterval((long) (byte) -1);
        atomikosProperties11.setConsoleFileName("");
        java.lang.String str16 = atomikosProperties11.getOutputDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery17 = atomikosProperties11.getRecovery();
        long long18 = recovery17.getForgetOrphanedLogEntriesDelay();
        java.lang.Object obj19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj20 = properties9.replace((java.lang.Object) recovery17, obj19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(properties9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{com.atomikos.icatch.console_file_name=, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str10, "{com.atomikos.icatch.console_file_name=, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(recovery17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 86400000L + "'", long18 == 86400000L);
    }

    @Test
    public void test00383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00383");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.setRetryInterval((long) 100);
        int int3 = recovery0.getMaxRetries();
        long long4 = recovery0.getDelay();
        long long5 = recovery0.getDelay();
        recovery0.setMaxRetries((int) (byte) 1);
        recovery0.setRetryInterval((long) 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
    }

    @Test
    public void test00384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00384");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = null;
        java.util.Properties properties2 = new java.util.Properties(properties1);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties5.elements();
        java.lang.String str8 = properties5.getProperty("");
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        boolean boolean13 = properties12.isEmpty();
        boolean boolean14 = properties2.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean13);
        boolean boolean15 = properties2.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setCheckpointInterval((long) (byte) -1);
        atomikosProperties17.setConsoleFileName("");
        java.lang.String str22 = atomikosProperties17.getLogBaseName();
        long long23 = atomikosProperties17.getCheckpointInterval();
        java.lang.String str24 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.setEnableLogging(true);
        java.lang.Object obj27 = properties0.putIfAbsent((java.lang.Object) objEnumeration16, (java.lang.Object) atomikosProperties17);
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties0.keys();
        java.util.Properties properties29 = null;
        java.util.Properties properties30 = new java.util.Properties(properties29);
        boolean boolean31 = properties30.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery32 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int33 = recovery32.getMaxRetries();
        boolean boolean34 = properties30.containsKey((java.lang.Object) recovery32);
        properties30.clear();
        java.util.Properties properties36 = new java.util.Properties(properties30);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties36);
        java.util.Set<java.lang.String> strSet38 = properties36.stringPropertyNames();
        java.util.Properties properties39 = new java.util.Properties(properties36);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet40 = properties39.entrySet();
        java.lang.String str42 = properties39.getProperty("hi!");
        java.io.InputStream inputStream43 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties39.load(inputStream43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(objEntrySet40);
        org.junit.Assert.assertNull(str42);
    }

    @Test
    public void test00385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00385");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties7.elements();
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties10.elements();
        java.lang.String str13 = properties10.getProperty("");
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj19 = properties7.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties16);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel20 = atomikosProperties16.getConsoleLogLevel();
        int int21 = atomikosProperties16.getConsoleFileCount();
        java.lang.Object obj22 = properties1.get((java.lang.Object) atomikosProperties16);
        atomikosProperties16.setSerialJtaTransactions(true);
        java.util.Properties properties25 = atomikosProperties16.asProperties();
        atomikosProperties16.setCheckpointInterval(0L);
        atomikosProperties16.setConsoleFileName("tmlog");
        int int30 = atomikosProperties16.getConsoleFileCount();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel20 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel20.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test00386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00386");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties7.elements();
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties10.elements();
        java.lang.String str13 = properties10.getProperty("");
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj19 = properties7.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties16);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel20 = atomikosProperties16.getConsoleLogLevel();
        int int21 = atomikosProperties16.getConsoleFileCount();
        java.lang.Object obj22 = properties1.get((java.lang.Object) atomikosProperties16);
        atomikosProperties16.setSerialJtaTransactions(true);
        java.util.Properties properties25 = atomikosProperties16.asProperties();
        java.util.Enumeration<java.lang.Object> objEnumeration26 = properties25.elements();
        java.lang.Object obj29 = properties25.setProperty("{}", "{}");
        java.io.Reader reader30 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties25.load(reader30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel20 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel20.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNotNull(objEnumeration26);
        org.junit.Assert.assertNull(obj29);
    }

    @Test
    public void test00387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00387");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean13 = properties1.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean12);
        boolean boolean14 = properties1.isEmpty();
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties16.elements();
        boolean boolean19 = properties16.containsKey((java.lang.Object) 10.0f);
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties16);
        java.util.Properties properties21 = new java.util.Properties(properties1);
        java.io.OutputStream outputStream22 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties21.store(outputStream22, "{10=#}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test00388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00388");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = null;
        java.util.Properties properties2 = new java.util.Properties(properties1);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties5.elements();
        java.lang.String str8 = properties5.getProperty("");
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        boolean boolean13 = properties12.isEmpty();
        boolean boolean14 = properties2.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean13);
        boolean boolean15 = properties2.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setCheckpointInterval((long) (byte) -1);
        atomikosProperties17.setConsoleFileName("");
        java.lang.String str22 = atomikosProperties17.getLogBaseName();
        long long23 = atomikosProperties17.getCheckpointInterval();
        java.lang.String str24 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.setEnableLogging(true);
        java.lang.Object obj27 = properties0.putIfAbsent((java.lang.Object) objEnumeration16, (java.lang.Object) atomikosProperties17);
        java.util.Properties properties28 = null;
        java.util.Properties properties29 = new java.util.Properties(properties28);
        boolean boolean30 = properties29.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery31 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int32 = recovery31.getMaxRetries();
        boolean boolean33 = properties29.containsKey((java.lang.Object) recovery31);
        recovery31.setRetryInterval((long) (short) -1);
        recovery31.setDelay(10L);
        java.util.Properties properties38 = null;
        java.util.Properties properties39 = new java.util.Properties(properties38);
        boolean boolean40 = properties39.isEmpty();
        java.lang.Object obj41 = properties0.getOrDefault((java.lang.Object) recovery31, (java.lang.Object) properties39);
        java.util.Properties properties42 = new java.util.Properties(properties0);
        java.io.Writer writer43 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties42.store(writer43, "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "{}");
    }

    @Test
    public void test00389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00389");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        java.util.Properties properties14 = null;
        java.util.Properties properties15 = new java.util.Properties(properties14);
        boolean boolean16 = properties15.isEmpty();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.lang.Object obj18 = properties1.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setCheckpointInterval((long) (byte) -1);
        atomikosProperties19.setThreadedTwoPhaseCommit(true);
        java.lang.String str24 = atomikosProperties19.getOutputDir();
        java.util.Properties properties25 = atomikosProperties19.asProperties();
        java.lang.Object obj26 = properties1.remove((java.lang.Object) properties25);
        java.util.Properties properties27 = new java.util.Properties(properties25);
        java.io.InputStream inputStream28 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties27.load(inputStream28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNull(obj26);
    }

    @Test
    public void test00390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00390");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) (byte) -1);
        atomikosProperties0.setConsoleFileName("");
        java.lang.String str5 = atomikosProperties0.getLogBaseName();
        long long6 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setForceShutdownOnVmExit(false);
        atomikosProperties0.setTransactionManagerUniqueName("tmlog");
        atomikosProperties0.setLogBaseDir("");
        int int13 = atomikosProperties0.getConsoleFileCount();
        java.lang.String str14 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.setLogBaseName("{com.atomikos.icatch.console_file_name=, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tmlog" + "'", str14, "tmlog");
    }

    @Test
    public void test00391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00391");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties7.elements();
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties10.elements();
        java.lang.String str13 = properties10.getProperty("");
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj19 = properties7.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties16);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel20 = atomikosProperties16.getConsoleLogLevel();
        int int21 = atomikosProperties16.getConsoleFileCount();
        java.lang.Object obj22 = properties1.get((java.lang.Object) atomikosProperties16);
        atomikosProperties16.setSerialJtaTransactions(true);
        java.util.Properties properties25 = atomikosProperties16.asProperties();
        java.io.PrintWriter printWriter26 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties25.list(printWriter26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel20 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel20.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(properties25);
    }

    @Test
    public void test00392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00392");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        java.util.Properties properties14 = null;
        java.util.Properties properties15 = new java.util.Properties(properties14);
        boolean boolean16 = properties15.isEmpty();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.lang.Object obj18 = properties1.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setCheckpointInterval((long) (byte) -1);
        atomikosProperties19.setThreadedTwoPhaseCommit(true);
        java.lang.String str24 = atomikosProperties19.getOutputDir();
        java.util.Properties properties25 = atomikosProperties19.asProperties();
        java.lang.Object obj26 = properties1.remove((java.lang.Object) properties25);
        java.io.OutputStream outputStream27 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream27, "tmlog", "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNull(obj26);
    }

    @Test
    public void test00393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00393");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet3 = properties1.entrySet();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Object obj6 = properties1.replace((java.lang.Object) "hi!", obj5);
        boolean boolean8 = properties1.equals((java.lang.Object) 1.0f);
        java.util.Enumeration<java.lang.Object> objEnumeration9 = properties1.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties1.entrySet();
        java.io.Reader reader11 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(reader11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEntrySet3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(objEnumeration9);
        org.junit.Assert.assertNotNull(objEntrySet10);
    }

    @Test
    public void test00394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00394");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties1.elements();
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties1.keys();
        java.util.Properties properties5 = new java.util.Properties(properties1);
        java.io.OutputStream outputStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.save(outputStream6, "{10=#}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNotNull(objEnumeration4);
    }

    @Test
    public void test00395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00395");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery2 = atomikosProperties0.getRecovery();
        atomikosProperties0.setDefaultJtaTimeout((long) (short) 10);
        atomikosProperties0.setDefaultJtaTimeout((long) 5);
        int int7 = atomikosProperties0.getConsoleFileLimit();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(recovery2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test00396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00396");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        boolean boolean4 = properties1.contains((java.lang.Object) 1L);
        java.util.Set<java.lang.Object> objSet5 = properties1.keySet();
        java.lang.Object obj8 = properties1.setProperty("", "");
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        boolean boolean11 = properties10.isEmpty();
        java.lang.String str13 = properties10.getProperty("hi!");
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        boolean boolean17 = properties16.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int19 = recovery18.getMaxRetries();
        boolean boolean20 = properties16.containsKey((java.lang.Object) recovery18);
        recovery18.setRetryInterval((long) (short) -1);
        recovery18.setRetryInterval((long) 0);
        recovery18.setMaxRetries((int) (byte) 10);
        java.lang.Class<?> wildcardClass27 = recovery18.getClass();
        java.lang.Object obj28 = properties10.replace((java.lang.Object) (byte) -1, (java.lang.Object) recovery18);
        java.util.Properties properties29 = null;
        java.util.Properties properties30 = new java.util.Properties(properties29);
        boolean boolean31 = properties30.isEmpty();
        java.lang.String str33 = properties30.getProperty("hi!");
        java.util.Set<java.lang.String> strSet34 = properties30.stringPropertyNames();
        java.lang.Object obj35 = new java.lang.Object();
        boolean boolean36 = properties1.replace((java.lang.Object) (byte) -1, (java.lang.Object) properties30, obj35);
        java.util.Properties properties37 = null;
        java.util.Properties properties38 = new java.util.Properties(properties37);
        boolean boolean39 = properties38.isEmpty();
        java.util.Properties properties40 = new java.util.Properties(properties38);
        java.util.Enumeration<java.lang.Object> objEnumeration41 = properties40.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties42.setCheckpointInterval((long) (byte) -1);
        java.lang.String str45 = atomikosProperties42.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery46 = atomikosProperties42.getRecovery();
        java.lang.String str47 = atomikosProperties42.getService();
        atomikosProperties42.setCheckpointInterval(0L);
        atomikosProperties42.setCheckpointInterval(100L);
        java.lang.Object obj52 = properties40.get((java.lang.Object) atomikosProperties42);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean53 = properties30.containsValue(obj52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objSet5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objEnumeration41);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(recovery46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(obj52);
    }

    @Test
    public void test00397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00397");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        boolean boolean4 = properties1.contains((java.lang.Object) 1L);
        java.util.Set<java.lang.Object> objSet5 = properties1.keySet();
        java.lang.Object obj8 = properties1.setProperty("", "");
        java.io.PrintWriter printWriter9 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printWriter9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objSet5);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test00398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00398");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) (byte) -1);
        atomikosProperties0.setConsoleFileName("");
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        java.io.Writer writer9 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.store(writer9, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(properties8);
    }

    @Test
    public void test00399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00399");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Properties properties3 = new java.util.Properties(properties1);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet4 = properties1.entrySet();
        java.lang.String str6 = properties1.getProperty("tmlog");
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Enumeration<java.lang.Object> objEnumeration9 = properties8.elements();
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        java.util.Enumeration<java.lang.Object> objEnumeration12 = properties11.elements();
        java.lang.String str14 = properties11.getProperty("");
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj20 = properties8.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties17);
        java.util.Properties properties21 = null;
        java.util.Properties properties22 = new java.util.Properties(properties21);
        boolean boolean23 = properties22.isEmpty();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties22);
        java.lang.Object obj25 = properties8.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str27 = atomikosProperties26.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery28 = atomikosProperties26.getRecovery();
        atomikosProperties26.setEnableLogging(false);
        boolean boolean31 = properties8.equals((java.lang.Object) atomikosProperties26);
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties8.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet33 = properties8.entrySet();
        java.lang.String str34 = properties8.toString();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        int int36 = properties8.size();
        java.io.OutputStream outputStream37 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.store(outputStream37, "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEntrySet4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(objEnumeration9);
        org.junit.Assert.assertNotNull(objEnumeration12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(recovery28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objEnumeration32);
        org.junit.Assert.assertNotNull(objEntrySet33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
    }

    @Test
    public void test00400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00400");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties1.elements();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        boolean boolean6 = properties5.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet7 = properties5.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int9 = recovery8.getMaxRetries();
        recovery8.setForgetOrphanedLogEntriesDelay((-1L));
        recovery8.setForgetOrphanedLogEntriesDelay((long) (-1));
        boolean boolean14 = properties1.remove((java.lang.Object) properties5, (java.lang.Object) (-1));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.getLogBaseDir();
        java.lang.String str17 = atomikosProperties15.getLogBaseDir();
        int int18 = atomikosProperties15.getConsoleFileCount();
        java.util.Properties properties19 = null;
        java.util.Properties properties20 = new java.util.Properties(properties19);
        boolean boolean21 = properties20.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration22 = properties20.elements();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet23 = properties20.entrySet();
        boolean boolean25 = properties5.replace((java.lang.Object) atomikosProperties15, (java.lang.Object) properties20, (java.lang.Object) 1);
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        boolean boolean28 = properties27.isEmpty();
        boolean boolean29 = properties27.isEmpty();
        properties20.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties27);
        java.util.Properties properties31 = null;
        java.util.Properties properties32 = new java.util.Properties(properties31);
        boolean boolean33 = properties32.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery34 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int35 = recovery34.getMaxRetries();
        boolean boolean36 = properties32.containsKey((java.lang.Object) recovery34);
        properties32.clear();
        boolean boolean38 = properties27.contains((java.lang.Object) properties32);
        java.io.Reader reader39 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties27.load(reader39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objEntrySet7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objEnumeration22);
        org.junit.Assert.assertNotNull(objEntrySet23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test00401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00401");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = null;
        java.util.Properties properties2 = new java.util.Properties(properties1);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties5.elements();
        java.lang.String str8 = properties5.getProperty("");
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        boolean boolean13 = properties12.isEmpty();
        boolean boolean14 = properties2.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean13);
        boolean boolean15 = properties2.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setCheckpointInterval((long) (byte) -1);
        atomikosProperties17.setConsoleFileName("");
        java.lang.String str22 = atomikosProperties17.getLogBaseName();
        long long23 = atomikosProperties17.getCheckpointInterval();
        java.lang.String str24 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.setEnableLogging(true);
        java.lang.Object obj27 = properties0.putIfAbsent((java.lang.Object) objEnumeration16, (java.lang.Object) atomikosProperties17);
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties0.keys();
        java.lang.String str30 = properties0.getProperty("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties31.setCheckpointInterval((long) (byte) -1);
        atomikosProperties31.setConsoleFileName("");
        atomikosProperties31.setConsoleFileName("");
        long long38 = atomikosProperties31.getDefaultJtaTimeout();
        atomikosProperties31.setDefaultJtaTimeout((long) (byte) 10);
        boolean boolean41 = properties0.containsKey((java.lang.Object) atomikosProperties31);
        java.util.Collection<java.lang.Object> objCollection42 = properties0.values();
        java.io.InputStream inputStream43 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.loadFromXML(inputStream43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10000L + "'", long38 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objCollection42);
    }

    @Test
    public void test00402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00402");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Enumeration<?> wildcardEnumeration9 = properties1.propertyNames();
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        java.util.Enumeration<java.lang.Object> objEnumeration12 = properties11.elements();
        java.util.Properties properties13 = null;
        java.util.Properties properties14 = new java.util.Properties(properties13);
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties14.elements();
        java.lang.String str17 = properties14.getProperty("");
        properties11.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties14);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj23 = properties11.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties20);
        atomikosProperties20.setSerialJtaTransactions(false);
        atomikosProperties20.setOutputDir("");
        boolean boolean28 = properties1.containsKey((java.lang.Object) "");
        java.util.Properties properties30 = null;
        java.util.Properties properties31 = new java.util.Properties(properties30);
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties31.elements();
        java.util.Properties properties33 = null;
        java.util.Properties properties34 = new java.util.Properties(properties33);
        java.util.Enumeration<java.lang.Object> objEnumeration35 = properties34.elements();
        java.lang.String str37 = properties34.getProperty("");
        properties31.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties34);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties40.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj43 = properties31.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties40);
        atomikosProperties40.setSerialJtaTransactions(false);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel46 = atomikosProperties40.getConsoleLogLevel();
        java.lang.String str47 = atomikosProperties40.getTransactionManagerUniqueName();
        java.lang.Object obj48 = properties1.replace((java.lang.Object) "hi!", (java.lang.Object) atomikosProperties40);
        java.util.Collection<java.lang.Object> objCollection49 = properties1.values();
        java.lang.Object obj50 = properties1.clone();
        java.io.OutputStream outputStream51 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream51, "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(wildcardEnumeration9);
        org.junit.Assert.assertNotNull(objEnumeration12);
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objEnumeration32);
        org.junit.Assert.assertNotNull(objEnumeration35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel46 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel46.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(objCollection49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "{}");
    }

    @Test
    public void test00403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00403");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = null;
        java.util.Properties properties2 = new java.util.Properties(properties1);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties5.elements();
        java.lang.String str8 = properties5.getProperty("");
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        boolean boolean13 = properties12.isEmpty();
        boolean boolean14 = properties2.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean13);
        boolean boolean15 = properties2.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setCheckpointInterval((long) (byte) -1);
        atomikosProperties17.setConsoleFileName("");
        java.lang.String str22 = atomikosProperties17.getLogBaseName();
        long long23 = atomikosProperties17.getCheckpointInterval();
        java.lang.String str24 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.setEnableLogging(true);
        java.lang.Object obj27 = properties0.putIfAbsent((java.lang.Object) objEnumeration16, (java.lang.Object) atomikosProperties17);
        java.util.Properties properties28 = null;
        java.util.Properties properties29 = new java.util.Properties(properties28);
        boolean boolean30 = properties29.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery31 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int32 = recovery31.getMaxRetries();
        boolean boolean33 = properties29.containsKey((java.lang.Object) recovery31);
        recovery31.setRetryInterval((long) (short) -1);
        recovery31.setDelay(10L);
        java.util.Properties properties38 = null;
        java.util.Properties properties39 = new java.util.Properties(properties38);
        boolean boolean40 = properties39.isEmpty();
        java.lang.Object obj41 = properties0.getOrDefault((java.lang.Object) recovery31, (java.lang.Object) properties39);
        java.lang.String str44 = properties39.getProperty("", "");
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "{}");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
    }

    @Test
    public void test00404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00404");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.setMaxRetries((-1));
        long long3 = recovery0.getRetryInterval();
        long long4 = recovery0.getDelay();
        long long5 = recovery0.getRetryInterval();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 10000L + "'", long3 == 10000L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
    }

    @Test
    public void test00405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00405");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) (byte) -1);
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery4 = atomikosProperties0.getRecovery();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setCheckpointInterval((long) (byte) -1);
        atomikosProperties6.setThreadedTwoPhaseCommit(true);
        atomikosProperties6.setSerialJtaTransactions(false);
        java.lang.String str13 = atomikosProperties6.getLogBaseName();
        atomikosProperties6.setDefaultJtaTimeout((long) (short) 1);
        atomikosProperties6.setConsoleFileCount((int) (byte) -1);
        atomikosProperties6.setConsoleFileLimit((int) ' ');
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel20 = null;
        atomikosProperties6.setConsoleLogLevel(atomikosLoggingLevel20);
        java.lang.String str22 = atomikosProperties6.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties23.setCheckpointInterval((long) (byte) -1);
        atomikosProperties23.setThreadedTwoPhaseCommit(true);
        atomikosProperties23.setSerialJtaTransactions(false);
        atomikosProperties23.setOutputDir("");
        java.lang.String str32 = atomikosProperties23.getConsoleFileName();
        java.lang.String str33 = atomikosProperties23.getLogBaseName();
        atomikosProperties23.setConsoleFileCount((int) (byte) -1);
        java.util.Properties properties36 = atomikosProperties23.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties37.setCheckpointInterval((long) (byte) -1);
        atomikosProperties37.setThreadedTwoPhaseCommit(true);
        atomikosProperties37.setSerialJtaTransactions(false);
        atomikosProperties37.setOutputDir("");
        java.lang.String str46 = atomikosProperties37.getConsoleFileName();
        java.lang.String str47 = atomikosProperties37.getLogBaseName();
        atomikosProperties37.setConsoleFileCount((int) (byte) -1);
        java.util.Properties properties50 = atomikosProperties37.asProperties();
        java.util.Properties properties51 = null;
        java.util.Properties properties52 = new java.util.Properties(properties51);
        java.util.Enumeration<java.lang.Object> objEnumeration53 = properties52.elements();
        boolean boolean54 = properties52.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration55 = properties52.keys();
        boolean boolean56 = properties50.containsValue((java.lang.Object) properties52);
        java.util.Properties properties57 = null;
        java.util.Properties properties58 = new java.util.Properties(properties57);
        boolean boolean59 = properties58.isEmpty();
        java.lang.String str61 = properties58.getProperty("hi!");
        java.util.Set<java.lang.String> strSet62 = properties58.stringPropertyNames();
        java.lang.Object obj63 = properties58.clone();
        boolean boolean64 = properties52.containsKey(obj63);
        java.lang.Object obj65 = properties36.remove((java.lang.Object) properties52);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj66 = properties5.putIfAbsent((java.lang.Object) atomikosProperties6, obj65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(recovery4);
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tm.out" + "'", str22, "tm.out");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tm.out" + "'", str32, "tm.out");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tmlog" + "'", str33, "tmlog");
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "tm.out" + "'", str46, "tm.out");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "tmlog" + "'", str47, "tmlog");
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertNotNull(objEnumeration53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objEnumeration55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals(obj63.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "{}");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(obj65);
    }

    @Test
    public void test00406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00406");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.lang.Object obj4 = properties1.setProperty("{10=#}", "tm.out");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet5 = properties1.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties6.getRecovery();
        atomikosProperties6.setEnableLogging(false);
        long long11 = atomikosProperties6.getMaxTimeout();
        java.util.Properties properties12 = null;
        java.util.Properties properties13 = new java.util.Properties(properties12);
        java.util.Enumeration<java.lang.Object> objEnumeration14 = properties13.elements();
        java.lang.String str16 = properties13.getProperty("");
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        boolean boolean19 = properties18.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet20 = properties18.entrySet();
        java.lang.Object obj22 = new java.lang.Object();
        java.lang.Object obj23 = properties18.replace((java.lang.Object) "hi!", obj22);
        boolean boolean25 = properties18.equals((java.lang.Object) 1.0f);
        boolean boolean26 = properties13.containsKey((java.lang.Object) boolean25);
        java.lang.Object obj27 = properties1.put((java.lang.Object) atomikosProperties6, (java.lang.Object) properties13);
        java.lang.String str28 = atomikosProperties6.getLogBaseName();
        java.lang.String str29 = atomikosProperties6.getLogBaseName();
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(objEntrySet5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertNotNull(objEnumeration14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objEntrySet20);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
    }

    @Test
    public void test00407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00407");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getMaxActives();
        java.lang.String str2 = atomikosProperties0.getTransactionManagerUniqueName();
        java.lang.String str3 = atomikosProperties0.getLogBaseName();
        boolean boolean4 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.setService("tmlog");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery7 = atomikosProperties0.getRecovery();
        atomikosProperties0.setLogBaseDir("tmlog");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 50 + "'", int1 == 50);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "tmlog" + "'", str3, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(recovery7);
    }

    @Test
    public void test00408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00408");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        boolean boolean4 = properties1.contains((java.lang.Object) 1L);
        java.util.Set<java.lang.Object> objSet5 = properties1.keySet();
        java.lang.Object obj7 = properties1.remove((java.lang.Object) "{10=#}");
        java.lang.Object obj9 = properties1.remove((java.lang.Object) "");
        java.util.Set<java.lang.Object> objSet10 = properties1.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties11.setCheckpointInterval((long) (byte) -1);
        atomikosProperties11.setConsoleFileName("");
        java.lang.String str16 = atomikosProperties11.getLogBaseName();
        long long17 = atomikosProperties11.getCheckpointInterval();
        atomikosProperties11.setForceShutdownOnVmExit(false);
        atomikosProperties11.setTransactionManagerUniqueName("tmlog");
        atomikosProperties11.setLogBaseDir("");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery24 = atomikosProperties11.getRecovery();
        boolean boolean25 = properties1.containsKey((java.lang.Object) atomikosProperties11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setCheckpointInterval((long) (byte) -1);
        atomikosProperties26.setConsoleFileName("");
        java.lang.String str31 = atomikosProperties26.getLogBaseName();
        long long32 = atomikosProperties26.getCheckpointInterval();
        java.lang.String str33 = atomikosProperties26.getLogBaseDir();
        atomikosProperties26.setEnableLogging(true);
        long long36 = atomikosProperties26.getDefaultJtaTimeout();
        java.lang.String str37 = atomikosProperties26.getService();
        java.util.Properties properties38 = null;
        java.util.Properties properties39 = new java.util.Properties(properties38);
        java.util.Enumeration<java.lang.Object> objEnumeration40 = properties39.elements();
        boolean boolean41 = properties39.isEmpty();
        java.util.Set<java.lang.String> strSet42 = properties39.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties43.setCheckpointInterval((long) (byte) -1);
        atomikosProperties43.setThreadedTwoPhaseCommit(true);
        java.lang.String str48 = atomikosProperties43.getOutputDir();
        java.util.Properties properties49 = atomikosProperties43.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties50.setCheckpointInterval((long) (byte) -1);
        atomikosProperties50.setThreadedTwoPhaseCommit(true);
        atomikosProperties50.setSerialJtaTransactions(false);
        atomikosProperties50.setOutputDir("");
        java.lang.String str59 = atomikosProperties50.getConsoleFileName();
        java.lang.String str60 = atomikosProperties50.getLogBaseName();
        atomikosProperties50.setDefaultJtaTimeout(0L);
        java.lang.Object obj63 = properties39.putIfAbsent((java.lang.Object) atomikosProperties43, (java.lang.Object) atomikosProperties50);
        atomikosProperties50.setSerialJtaTransactions(false);
        java.lang.Object obj66 = properties1.getOrDefault((java.lang.Object) atomikosProperties26, (java.lang.Object) atomikosProperties50);
        java.lang.String str67 = properties1.toString();
        java.io.OutputStream outputStream68 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(outputStream68, "{com.atomikos.icatch.console_file_name=, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objSet5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(objSet10);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(recovery24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10000L + "'", long36 == 10000L);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(objEnumeration40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(properties49);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "tm.out" + "'", str59, "tm.out");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "tmlog" + "'", str60, "tmlog");
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "{}" + "'", str67, "{}");
    }

    @Test
    public void test00409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00409");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        properties1.clear();
        java.util.Properties properties7 = new java.util.Properties(properties1);
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties7.keys();
        java.lang.String str9 = properties7.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
    }

    @Test
    public void test00410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00410");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean13 = properties1.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean12);
        boolean boolean14 = properties1.isEmpty();
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties16.elements();
        boolean boolean18 = properties1.contains((java.lang.Object) objEnumeration17);
        java.util.Properties properties19 = null;
        java.util.Properties properties20 = new java.util.Properties(properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties20.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.setCheckpointInterval((long) (byte) -1);
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setSerialJtaTransactions(true);
        long long28 = atomikosProperties22.getMaxTimeout();
        java.util.Properties properties29 = null;
        java.util.Properties properties30 = new java.util.Properties(properties29);
        boolean boolean31 = properties30.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties30.elements();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet33 = properties30.entrySet();
        boolean boolean34 = properties20.remove((java.lang.Object) atomikosProperties22, (java.lang.Object) objEntrySet33);
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties20);
        java.io.OutputStream outputStream36 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties20.storeToXML(outputStream36, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 300000L + "'", long28 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objEnumeration32);
        org.junit.Assert.assertNotNull(objEntrySet33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test00411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00411");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        boolean boolean5 = properties4.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery6 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int7 = recovery6.getMaxRetries();
        boolean boolean8 = properties4.containsKey((java.lang.Object) recovery6);
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties10.elements();
        java.util.Properties properties12 = null;
        java.util.Properties properties13 = new java.util.Properties(properties12);
        java.util.Enumeration<java.lang.Object> objEnumeration14 = properties13.elements();
        java.lang.String str16 = properties13.getProperty("");
        properties10.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties13);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj22 = properties10.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties19);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel23 = atomikosProperties19.getConsoleLogLevel();
        int int24 = atomikosProperties19.getConsoleFileCount();
        java.lang.Object obj25 = properties4.get((java.lang.Object) atomikosProperties19);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setCheckpointInterval((long) (byte) -1);
        atomikosProperties26.setConsoleFileName("");
        java.lang.String str31 = atomikosProperties26.getLogBaseName();
        long long32 = atomikosProperties26.getCheckpointInterval();
        java.lang.Object obj33 = properties4.get((java.lang.Object) atomikosProperties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties34.setCheckpointInterval((long) (byte) -1);
        atomikosProperties34.setThreadedTwoPhaseCommit(true);
        java.lang.String str39 = atomikosProperties34.getOutputDir();
        java.lang.String str40 = atomikosProperties34.getTransactionManagerUniqueName();
        int int41 = atomikosProperties34.getConsoleFileCount();
        boolean boolean42 = atomikosProperties34.isThreadedTwoPhaseCommit();
        java.lang.Object obj44 = properties4.put((java.lang.Object) boolean42, (java.lang.Object) 0L);
        java.util.Properties properties45 = new java.util.Properties();
        java.util.Properties properties48 = null;
        java.util.Properties properties49 = new java.util.Properties(properties48);
        java.util.Enumeration<java.lang.Object> objEnumeration50 = properties49.elements();
        java.util.Properties properties51 = null;
        java.util.Properties properties52 = new java.util.Properties(properties51);
        java.util.Enumeration<java.lang.Object> objEnumeration53 = properties52.elements();
        java.lang.String str55 = properties52.getProperty("");
        properties49.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties52);
        java.util.Properties properties58 = null;
        java.util.Properties properties59 = new java.util.Properties(properties58);
        boolean boolean60 = properties59.isEmpty();
        boolean boolean61 = properties49.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean60);
        boolean boolean62 = properties49.isEmpty();
        boolean boolean63 = properties45.replace((java.lang.Object) 100.0f, (java.lang.Object) true, (java.lang.Object) properties49);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties64.setCheckpointInterval((long) (byte) -1);
        atomikosProperties64.setConsoleFileName("");
        java.lang.String str69 = atomikosProperties64.getLogBaseName();
        long long70 = atomikosProperties64.getCheckpointInterval();
        java.lang.String str71 = atomikosProperties64.getConsoleFileName();
        long long72 = atomikosProperties64.getCheckpointInterval();
        java.lang.Object obj73 = properties49.remove((java.lang.Object) atomikosProperties64);
        java.lang.Object obj74 = properties1.getOrDefault((java.lang.Object) 0L, (java.lang.Object) properties49);
        java.io.Writer writer75 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties49.store(writer75, "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertNotNull(objEnumeration14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel23 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel23.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(objEnumeration50);
        org.junit.Assert.assertNotNull(objEnumeration53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "tmlog" + "'", str69, "tmlog");
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-1L) + "'", long70 == (-1L));
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-1L) + "'", long72 == (-1L));
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertEquals(obj74.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj74), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj74), "{}");
    }

    @Test
    public void test00412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00412");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        java.util.Properties properties14 = null;
        java.util.Properties properties15 = new java.util.Properties(properties14);
        boolean boolean16 = properties15.isEmpty();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.lang.Object obj18 = properties1.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery21 = atomikosProperties19.getRecovery();
        atomikosProperties19.setEnableLogging(false);
        boolean boolean24 = properties1.equals((java.lang.Object) atomikosProperties19);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties1.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet26 = properties1.entrySet();
        java.lang.String str27 = properties1.toString();
        java.lang.Object obj28 = properties1.clone();
        java.io.PrintWriter printWriter29 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printWriter29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(recovery21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNotNull(objEntrySet26);
        org.junit.Assert.assertNotNull(obj28);
    }

    @Test
    public void test00413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00413");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = null;
        java.util.Properties properties2 = new java.util.Properties(properties1);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties5.elements();
        java.lang.String str8 = properties5.getProperty("");
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        boolean boolean13 = properties12.isEmpty();
        boolean boolean14 = properties2.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean13);
        boolean boolean15 = properties2.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setCheckpointInterval((long) (byte) -1);
        atomikosProperties17.setConsoleFileName("");
        java.lang.String str22 = atomikosProperties17.getLogBaseName();
        long long23 = atomikosProperties17.getCheckpointInterval();
        java.lang.String str24 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.setEnableLogging(true);
        java.lang.Object obj27 = properties0.putIfAbsent((java.lang.Object) objEnumeration16, (java.lang.Object) atomikosProperties17);
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties0.keys();
        java.lang.String str30 = properties0.getProperty("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties31.setCheckpointInterval((long) (byte) -1);
        atomikosProperties31.setConsoleFileName("");
        atomikosProperties31.setConsoleFileName("");
        long long38 = atomikosProperties31.getDefaultJtaTimeout();
        atomikosProperties31.setDefaultJtaTimeout((long) (byte) 10);
        boolean boolean41 = properties0.containsKey((java.lang.Object) atomikosProperties31);
        java.io.PrintStream printStream42 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.list(printStream42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10000L + "'", long38 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test00414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00414");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = null;
        java.util.Properties properties2 = new java.util.Properties(properties1);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties5.elements();
        java.lang.String str8 = properties5.getProperty("");
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        boolean boolean13 = properties12.isEmpty();
        boolean boolean14 = properties2.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean13);
        boolean boolean15 = properties2.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setCheckpointInterval((long) (byte) -1);
        atomikosProperties17.setConsoleFileName("");
        java.lang.String str22 = atomikosProperties17.getLogBaseName();
        long long23 = atomikosProperties17.getCheckpointInterval();
        java.lang.String str24 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.setEnableLogging(true);
        java.lang.Object obj27 = properties0.putIfAbsent((java.lang.Object) objEnumeration16, (java.lang.Object) atomikosProperties17);
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties0.keys();
        java.lang.String str30 = properties0.getProperty("tm.out");
        java.util.Properties properties31 = null;
        java.util.Properties properties32 = new java.util.Properties(properties31);
        boolean boolean33 = properties32.isEmpty();
        java.util.Properties properties34 = new java.util.Properties(properties32);
        java.lang.Object obj35 = properties0.get((java.lang.Object) properties34);
        java.util.Properties properties36 = null;
        java.util.Properties properties37 = new java.util.Properties(properties36);
        java.util.Enumeration<java.lang.Object> objEnumeration38 = properties37.elements();
        java.util.Properties properties39 = null;
        java.util.Properties properties40 = new java.util.Properties(properties39);
        java.util.Enumeration<java.lang.Object> objEnumeration41 = properties40.elements();
        java.lang.String str43 = properties40.getProperty("");
        properties37.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties40);
        java.util.Properties properties46 = null;
        java.util.Properties properties47 = new java.util.Properties(properties46);
        boolean boolean48 = properties47.isEmpty();
        boolean boolean49 = properties37.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean48);
        boolean boolean50 = properties37.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration51 = properties37.keys();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties37);
        java.util.Enumeration<java.lang.Object> objEnumeration53 = properties0.keys();
        java.io.InputStream inputStream54 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.loadFromXML(inputStream54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(objEnumeration38);
        org.junit.Assert.assertNotNull(objEnumeration41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objEnumeration51);
        org.junit.Assert.assertNotNull(objEnumeration53);
    }

    @Test
    public void test00415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00415");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        atomikosProperties10.setSerialJtaTransactions(false);
        int int16 = atomikosProperties10.getConsoleFileCount();
        atomikosProperties10.setForceShutdownOnVmExit(false);
        long long19 = atomikosProperties10.getCheckpointInterval();
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
    }

    @Test
    public void test00416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00416");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean13 = properties1.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean12);
        java.util.Properties properties14 = null;
        java.util.Properties properties15 = new java.util.Properties(properties14);
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties15.elements();
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        java.util.Enumeration<java.lang.Object> objEnumeration19 = properties18.elements();
        java.lang.String str21 = properties18.getProperty("");
        properties15.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties18);
        boolean boolean23 = properties1.contains((java.lang.Object) properties15);
        int int24 = properties1.size();
        java.io.InputStream inputStream25 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(inputStream25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNotNull(objEnumeration19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test00417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00417");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Properties properties3 = new java.util.Properties(properties1);
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        boolean boolean6 = properties5.isEmpty();
        java.lang.String str8 = properties5.getProperty("hi!");
        java.util.Set<java.lang.Object> objSet9 = properties5.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties5.entrySet();
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties12.elements();
        java.util.Properties properties14 = null;
        java.util.Properties properties15 = new java.util.Properties(properties14);
        boolean boolean16 = properties15.isEmpty();
        java.util.Properties properties17 = new java.util.Properties(properties15);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet18 = properties15.entrySet();
        java.lang.Object obj19 = properties5.getOrDefault((java.lang.Object) properties12, (java.lang.Object) objEntrySet18);
        boolean boolean20 = properties1.containsKey((java.lang.Object) objEntrySet18);
        java.util.Properties properties21 = new java.util.Properties();
        java.util.Properties properties22 = null;
        java.util.Properties properties23 = new java.util.Properties(properties22);
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties23.elements();
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties26.elements();
        java.lang.String str29 = properties26.getProperty("");
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        java.util.Properties properties32 = null;
        java.util.Properties properties33 = new java.util.Properties(properties32);
        boolean boolean34 = properties33.isEmpty();
        boolean boolean35 = properties23.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean34);
        boolean boolean36 = properties23.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration37 = properties23.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties38.setCheckpointInterval((long) (byte) -1);
        atomikosProperties38.setConsoleFileName("");
        java.lang.String str43 = atomikosProperties38.getLogBaseName();
        long long44 = atomikosProperties38.getCheckpointInterval();
        java.lang.String str45 = atomikosProperties38.getLogBaseDir();
        atomikosProperties38.setEnableLogging(true);
        java.lang.Object obj48 = properties21.putIfAbsent((java.lang.Object) objEnumeration37, (java.lang.Object) atomikosProperties38);
        java.util.Enumeration<java.lang.Object> objEnumeration49 = properties21.keys();
        java.lang.String str51 = properties21.getProperty("tm.out");
        java.util.Properties properties52 = null;
        java.util.Properties properties53 = new java.util.Properties(properties52);
        boolean boolean54 = properties53.isEmpty();
        java.util.Properties properties55 = new java.util.Properties(properties53);
        java.lang.Object obj56 = properties21.get((java.lang.Object) properties55);
        java.util.Properties properties57 = null;
        java.util.Properties properties58 = new java.util.Properties(properties57);
        java.util.Enumeration<java.lang.Object> objEnumeration59 = properties58.elements();
        java.util.Properties properties60 = null;
        java.util.Properties properties61 = new java.util.Properties(properties60);
        java.util.Enumeration<java.lang.Object> objEnumeration62 = properties61.elements();
        java.lang.String str64 = properties61.getProperty("");
        properties58.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties61);
        java.util.Properties properties67 = null;
        java.util.Properties properties68 = new java.util.Properties(properties67);
        boolean boolean69 = properties68.isEmpty();
        boolean boolean70 = properties58.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean69);
        boolean boolean71 = properties58.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration72 = properties58.keys();
        properties21.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties58);
        java.util.Enumeration<java.lang.Object> objEnumeration74 = properties21.keys();
        boolean boolean75 = properties1.equals((java.lang.Object) properties21);
        java.io.InputStream inputStream76 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(inputStream76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(objSet9);
        org.junit.Assert.assertNotNull(objEntrySet10);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objEntrySet18);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "[]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "[]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objEnumeration37);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(objEnumeration49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(objEnumeration59);
        org.junit.Assert.assertNotNull(objEnumeration62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(objEnumeration72);
        org.junit.Assert.assertNotNull(objEnumeration74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test00418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00418");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties7.elements();
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties10.elements();
        java.lang.String str13 = properties10.getProperty("");
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj19 = properties7.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties16);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel20 = atomikosProperties16.getConsoleLogLevel();
        int int21 = atomikosProperties16.getConsoleFileCount();
        java.lang.Object obj22 = properties1.get((java.lang.Object) atomikosProperties16);
        atomikosProperties16.setService("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        long long25 = atomikosProperties16.getCheckpointInterval();
        long long26 = atomikosProperties16.getDefaultJtaTimeout();
        long long27 = atomikosProperties16.getMaxTimeout();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel20 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel20.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10000L + "'", long26 == 10000L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 300000L + "'", long27 == 300000L);
    }

    @Test
    public void test00419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00419");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        properties1.clear();
        boolean boolean8 = properties1.containsKey((java.lang.Object) "hi!");
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        boolean boolean11 = properties10.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setCheckpointInterval((long) (byte) -1);
        atomikosProperties12.setConsoleFileName("");
        java.lang.String str17 = atomikosProperties12.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setCheckpointInterval((long) (byte) -1);
        atomikosProperties18.setThreadedTwoPhaseCommit(true);
        java.util.Properties properties23 = null;
        java.util.Properties properties24 = new java.util.Properties(properties23);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties24.elements();
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties27.elements();
        java.lang.String str30 = properties27.getProperty("");
        properties24.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj36 = properties24.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties33);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel37 = atomikosProperties33.getConsoleLogLevel();
        atomikosProperties18.setConsoleLogLevel(atomikosLoggingLevel37);
        atomikosProperties12.setConsoleLogLevel(atomikosLoggingLevel37);
        boolean boolean41 = properties1.replace((java.lang.Object) properties10, (java.lang.Object) atomikosProperties12, (java.lang.Object) 10.0d);
        java.util.Collection<java.lang.Object> objCollection42 = properties10.values();
        java.io.Writer writer43 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties10.store(writer43, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel37 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel37.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objCollection42);
    }

    @Test
    public void test00420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00420");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = null;
        java.util.Properties properties2 = new java.util.Properties(properties1);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties5.elements();
        java.lang.String str8 = properties5.getProperty("");
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties11.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj14 = properties2.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties11);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel15 = atomikosProperties11.getConsoleLogLevel();
        atomikosProperties11.setConsoleFileLimit((int) '4');
        atomikosProperties11.setForceShutdownOnVmExit(true);
        int int20 = atomikosProperties11.getMaxActives();
        boolean boolean21 = properties0.contains((java.lang.Object) int20);
        int int22 = properties0.size();
        java.util.Set<java.lang.Object> objSet23 = properties0.keySet();
        java.util.Properties properties24 = new java.util.Properties(properties0);
        java.io.OutputStream outputStream25 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties24.store(outputStream25, "{com.atomikos.icatch.console_file_name=, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel15 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel15.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 50 + "'", int20 == 50);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(objSet23);
    }

    @Test
    public void test00421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00421");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean13 = properties1.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean12);
        boolean boolean14 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties1.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setCheckpointInterval((long) (byte) -1);
        atomikosProperties16.setConsoleFileName("");
        java.lang.String str21 = atomikosProperties16.getLogBaseName();
        long long22 = atomikosProperties16.getCheckpointInterval();
        atomikosProperties16.setForceShutdownOnVmExit(false);
        atomikosProperties16.setTransactionManagerUniqueName("tmlog");
        atomikosProperties16.setLogBaseDir("");
        java.util.Properties properties29 = null;
        java.util.Properties properties30 = new java.util.Properties(properties29);
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties30.elements();
        java.util.Properties properties32 = null;
        java.util.Properties properties33 = new java.util.Properties(properties32);
        java.util.Enumeration<java.lang.Object> objEnumeration34 = properties33.elements();
        java.lang.String str36 = properties33.getProperty("");
        properties30.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties33);
        java.util.Properties properties39 = null;
        java.util.Properties properties40 = new java.util.Properties(properties39);
        boolean boolean41 = properties40.isEmpty();
        boolean boolean42 = properties30.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean41);
        boolean boolean43 = properties1.remove((java.lang.Object) "", (java.lang.Object) boolean42);
        java.util.Properties properties44 = null;
        java.util.Properties properties45 = new java.util.Properties(properties44);
        java.util.Enumeration<java.lang.Object> objEnumeration46 = properties45.elements();
        java.util.Properties properties47 = null;
        java.util.Properties properties48 = new java.util.Properties(properties47);
        java.util.Enumeration<java.lang.Object> objEnumeration49 = properties48.elements();
        java.lang.String str51 = properties48.getProperty("");
        properties45.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties48);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties54.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj57 = properties45.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties54);
        java.util.Properties properties58 = null;
        java.util.Properties properties59 = new java.util.Properties(properties58);
        boolean boolean60 = properties59.isEmpty();
        properties45.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties59);
        java.lang.Object obj62 = properties45.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties63.setCheckpointInterval((long) (byte) -1);
        atomikosProperties63.setThreadedTwoPhaseCommit(true);
        java.lang.String str68 = atomikosProperties63.getOutputDir();
        java.util.Properties properties69 = atomikosProperties63.asProperties();
        java.lang.Object obj70 = properties45.remove((java.lang.Object) properties69);
        boolean boolean71 = properties1.containsKey((java.lang.Object) properties45);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet72 = properties45.entrySet();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration<?> wildcardEnumeration73 = properties45.propertyNames();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Double cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNotNull(objEnumeration31);
        org.junit.Assert.assertNotNull(objEnumeration34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objEnumeration46);
        org.junit.Assert.assertNotNull(objEnumeration49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(properties69);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(objEntrySet72);
    }

    @Test
    public void test00422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00422");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        atomikosProperties10.setSerialJtaTransactions(false);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel16 = atomikosProperties10.getConsoleLogLevel();
        atomikosProperties10.setCheckpointInterval((long) 1);
        atomikosProperties10.setAllowSubTransactions(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery21 = atomikosProperties10.getRecovery();
        boolean boolean22 = atomikosProperties10.isEnableLogging();
        atomikosProperties10.setThreadedTwoPhaseCommit(true);
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel16 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel16.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(recovery21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test00423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00423");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties1.elements();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        boolean boolean6 = properties5.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet7 = properties5.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int9 = recovery8.getMaxRetries();
        recovery8.setForgetOrphanedLogEntriesDelay((-1L));
        recovery8.setForgetOrphanedLogEntriesDelay((long) (-1));
        boolean boolean14 = properties1.remove((java.lang.Object) properties5, (java.lang.Object) (-1));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.getLogBaseDir();
        java.lang.String str17 = atomikosProperties15.getLogBaseDir();
        int int18 = atomikosProperties15.getConsoleFileCount();
        java.util.Properties properties19 = null;
        java.util.Properties properties20 = new java.util.Properties(properties19);
        boolean boolean21 = properties20.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration22 = properties20.elements();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet23 = properties20.entrySet();
        boolean boolean25 = properties5.replace((java.lang.Object) atomikosProperties15, (java.lang.Object) properties20, (java.lang.Object) 1);
        properties20.clear();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objEntrySet7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objEnumeration22);
        org.junit.Assert.assertNotNull(objEntrySet23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test00424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00424");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.lang.String str4 = properties1.getProperty("hi!");
        boolean boolean6 = properties1.contains((java.lang.Object) 10.0f);
        java.util.Set<java.lang.Object> objSet7 = properties1.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties8.setCheckpointInterval((long) (byte) -1);
        atomikosProperties8.setThreadedTwoPhaseCommit(true);
        java.lang.String str13 = atomikosProperties8.getOutputDir();
        atomikosProperties8.setConsoleFileName("tmlog");
        boolean boolean16 = properties1.contains((java.lang.Object) "tmlog");
        int int17 = properties1.size();
        java.io.OutputStream outputStream18 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(outputStream18, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test00425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00425");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = null;
        java.util.Properties properties2 = new java.util.Properties(properties1);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties5.elements();
        java.lang.String str8 = properties5.getProperty("");
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        boolean boolean13 = properties12.isEmpty();
        boolean boolean14 = properties2.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean13);
        boolean boolean15 = properties2.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setCheckpointInterval((long) (byte) -1);
        atomikosProperties17.setConsoleFileName("");
        java.lang.String str22 = atomikosProperties17.getLogBaseName();
        long long23 = atomikosProperties17.getCheckpointInterval();
        java.lang.String str24 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.setEnableLogging(true);
        java.lang.Object obj27 = properties0.putIfAbsent((java.lang.Object) objEnumeration16, (java.lang.Object) atomikosProperties17);
        java.util.Properties properties28 = null;
        java.util.Properties properties29 = new java.util.Properties(properties28);
        boolean boolean30 = properties29.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery31 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int32 = recovery31.getMaxRetries();
        boolean boolean33 = properties29.containsKey((java.lang.Object) recovery31);
        recovery31.setRetryInterval((long) (short) -1);
        recovery31.setDelay(10L);
        java.util.Properties properties38 = null;
        java.util.Properties properties39 = new java.util.Properties(properties38);
        boolean boolean40 = properties39.isEmpty();
        java.lang.Object obj41 = properties0.getOrDefault((java.lang.Object) recovery31, (java.lang.Object) properties39);
        java.util.Properties properties42 = new java.util.Properties(properties0);
        properties42.clear();
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "{}");
    }

    @Test
    public void test00426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00426");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) (byte) -1);
        atomikosProperties0.setConsoleFileName("");
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        java.io.InputStream inputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties6.loadFromXML(inputStream7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(properties6);
    }

    @Test
    public void test00427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00427");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        java.lang.String str14 = atomikosProperties10.getConsoleFileName();
        java.lang.String str15 = atomikosProperties10.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel16 = atomikosProperties10.getConsoleLogLevel();
        long long17 = atomikosProperties10.getMaxTimeout();
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tm.out" + "'", str14, "tm.out");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tmlog" + "'", str15, "tmlog");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel16 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel16.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 300000L + "'", long17 == 300000L);
    }

    @Test
    public void test00428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00428");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean13 = properties1.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean12);
        boolean boolean14 = properties1.isEmpty();
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties16.elements();
        boolean boolean19 = properties16.containsKey((java.lang.Object) 10.0f);
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties16);
        java.lang.String str21 = properties1.toString();
        java.lang.String str24 = properties1.getProperty("tmlog", "tm.out");
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{}" + "'", str21, "{}");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tm.out" + "'", str24, "tm.out");
    }

    @Test
    public void test00429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00429");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) (byte) -1);
        atomikosProperties0.setConsoleFileName("");
        java.lang.String str5 = atomikosProperties0.getLogBaseName();
        long long6 = atomikosProperties0.getCheckpointInterval();
        java.lang.String str7 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setEnableLogging(true);
        long long10 = atomikosProperties0.getDefaultJtaTimeout();
        boolean boolean11 = atomikosProperties0.isSerialJtaTransactions();
        java.lang.String str12 = atomikosProperties0.getOutputDir();
        java.lang.String str13 = atomikosProperties0.getOutputDir();
        java.util.Properties properties14 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery15 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery15.setRetryInterval((long) 100);
        int int18 = recovery15.getMaxRetries();
        recovery15.setDelay((long) (short) 100);
        recovery15.setDelay((long) (byte) 1);
        boolean boolean23 = properties14.containsKey((java.lang.Object) (byte) 1);
        java.io.OutputStream outputStream24 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties14.storeToXML(outputStream24, "{com.atomikos.icatch.console_file_name=, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test00430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00430");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        properties1.clear();
        java.util.Properties properties7 = new java.util.Properties(properties1);
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties7.keys();
        java.util.Properties properties9 = new java.util.Properties(properties7);
        java.io.OutputStream outputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties7.save(outputStream10, "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objEnumeration8);
    }

    @Test
    public void test00431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00431");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        int int14 = atomikosProperties10.getMaxActives();
        atomikosProperties10.setLogBaseName("{10=#}");
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 50 + "'", int14 == 50);
    }

    @Test
    public void test00432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00432");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.lang.String str4 = properties1.getProperty("hi!");
        boolean boolean6 = properties1.contains((java.lang.Object) 10.0f);
        java.util.Set<java.lang.Object> objSet7 = properties1.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties8.setCheckpointInterval((long) (byte) -1);
        atomikosProperties8.setThreadedTwoPhaseCommit(true);
        java.lang.String str13 = atomikosProperties8.getOutputDir();
        atomikosProperties8.setConsoleFileName("tmlog");
        boolean boolean16 = properties1.contains((java.lang.Object) "tmlog");
        java.io.OutputStream outputStream17 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream17, "{com.atomikos.icatch.console_file_name=, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test00433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00433");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.setForgetOrphanedLogEntriesDelay((long) (byte) 0);
        long long3 = recovery0.getDelay();
        recovery0.setMaxRetries((int) (short) 0);
        long long6 = recovery0.getDelay();
        recovery0.setForgetOrphanedLogEntriesDelay(1L);
        recovery0.setRetryInterval((long) (byte) 10);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 10000L + "'", long3 == 10000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
    }

    @Test
    public void test00434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00434");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        properties1.clear();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        boolean boolean9 = properties8.isEmpty();
        java.lang.String str11 = properties8.getProperty("hi!");
        boolean boolean13 = properties8.contains((java.lang.Object) 10.0f);
        java.util.Set<java.lang.Object> objSet14 = properties8.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties15.setCheckpointInterval((long) (byte) -1);
        atomikosProperties15.setThreadedTwoPhaseCommit(true);
        java.lang.String str20 = atomikosProperties15.getOutputDir();
        atomikosProperties15.setConsoleFileName("tmlog");
        boolean boolean23 = properties8.contains((java.lang.Object) "tmlog");
        java.lang.Object obj24 = properties1.get((java.lang.Object) properties8);
        java.lang.String str26 = properties1.getProperty("{}");
        java.util.Set<java.lang.String> strSet27 = properties1.stringPropertyNames();
        java.lang.String str29 = properties1.getProperty("tmlog");
        java.util.Properties properties30 = null;
        java.util.Properties properties31 = new java.util.Properties(properties30);
        boolean boolean32 = properties31.isEmpty();
        java.lang.String str34 = properties31.getProperty("hi!");
        java.util.Properties properties35 = null;
        java.util.Properties properties36 = new java.util.Properties(properties35);
        java.util.Enumeration<java.lang.Object> objEnumeration37 = properties36.elements();
        java.util.Properties properties38 = null;
        java.util.Properties properties39 = new java.util.Properties(properties38);
        java.util.Enumeration<java.lang.Object> objEnumeration40 = properties39.elements();
        java.lang.String str42 = properties39.getProperty("");
        properties36.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties39);
        java.util.Enumeration<?> wildcardEnumeration44 = properties36.propertyNames();
        java.util.Properties properties45 = null;
        java.util.Properties properties46 = new java.util.Properties(properties45);
        java.util.Enumeration<java.lang.Object> objEnumeration47 = properties46.elements();
        java.util.Properties properties48 = null;
        java.util.Properties properties49 = new java.util.Properties(properties48);
        java.util.Enumeration<java.lang.Object> objEnumeration50 = properties49.elements();
        java.lang.String str52 = properties49.getProperty("");
        properties46.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties49);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties55.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj58 = properties46.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties55);
        atomikosProperties55.setSerialJtaTransactions(false);
        atomikosProperties55.setOutputDir("");
        boolean boolean63 = properties36.containsKey((java.lang.Object) "");
        java.util.Properties properties65 = null;
        java.util.Properties properties66 = new java.util.Properties(properties65);
        java.util.Enumeration<java.lang.Object> objEnumeration67 = properties66.elements();
        java.util.Properties properties68 = null;
        java.util.Properties properties69 = new java.util.Properties(properties68);
        java.util.Enumeration<java.lang.Object> objEnumeration70 = properties69.elements();
        java.lang.String str72 = properties69.getProperty("");
        properties66.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties69);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties75 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties75.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj78 = properties66.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties75);
        atomikosProperties75.setSerialJtaTransactions(false);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel81 = atomikosProperties75.getConsoleLogLevel();
        java.lang.String str82 = atomikosProperties75.getTransactionManagerUniqueName();
        java.lang.Object obj83 = properties36.replace((java.lang.Object) "hi!", (java.lang.Object) atomikosProperties75);
        boolean boolean84 = properties36.isEmpty();
        boolean boolean85 = properties31.equals((java.lang.Object) properties36);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties86 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties86.setCheckpointInterval((long) (byte) -1);
        atomikosProperties86.setConsoleFileName("");
        java.lang.String str91 = atomikosProperties86.getLogBaseName();
        long long92 = atomikosProperties86.getCheckpointInterval();
        atomikosProperties86.setForceShutdownOnVmExit(false);
        int int95 = atomikosProperties86.getConsoleFileLimit();
        atomikosProperties86.setCheckpointInterval(10000L);
        java.lang.Class<?> wildcardClass98 = atomikosProperties86.getClass();
        java.lang.Object obj99 = properties1.getOrDefault((java.lang.Object) properties36, (java.lang.Object) wildcardClass98);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objSet14);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(objEnumeration37);
        org.junit.Assert.assertNotNull(objEnumeration40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(wildcardEnumeration44);
        org.junit.Assert.assertNotNull(objEnumeration47);
        org.junit.Assert.assertNotNull(objEnumeration50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objEnumeration67);
        org.junit.Assert.assertNotNull(objEnumeration70);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel81 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel81.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(obj83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "tmlog" + "'", str91, "tmlog");
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + (-1L) + "'", long92 == (-1L));
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass98);
        org.junit.Assert.assertNotNull(obj99);
        org.junit.Assert.assertEquals(obj99.toString(), "class org.springframework.boot.jta.atomikos.AtomikosProperties");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj99), "class org.springframework.boot.jta.atomikos.AtomikosProperties");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj99), "class org.springframework.boot.jta.atomikos.AtomikosProperties");
    }

    @Test
    public void test00435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00435");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) (byte) -1);
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.setOutputDir("");
        java.lang.String str9 = atomikosProperties0.getConsoleFileName();
        java.lang.String str10 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.setConsoleFileLimit((int) (byte) 0);
        java.lang.String str17 = atomikosProperties0.getLogBaseName();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
    }

    @Test
    public void test00436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00436");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getLogBaseDir();
        java.lang.String str2 = atomikosProperties0.getLogBaseDir();
        boolean boolean3 = atomikosProperties0.isAllowSubTransactions();
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        java.lang.String str5 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setTransactionManagerUniqueName("tm.out");
        atomikosProperties0.setForceShutdownOnVmExit(true);
        java.lang.String str10 = atomikosProperties0.getConsoleFileName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tm.out" + "'", str10, "tm.out");
    }

    @Test
    public void test00437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00437");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        boolean boolean5 = properties4.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery6 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int7 = recovery6.getMaxRetries();
        boolean boolean8 = properties4.containsKey((java.lang.Object) recovery6);
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties10.elements();
        java.util.Properties properties12 = null;
        java.util.Properties properties13 = new java.util.Properties(properties12);
        java.util.Enumeration<java.lang.Object> objEnumeration14 = properties13.elements();
        java.lang.String str16 = properties13.getProperty("");
        properties10.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties13);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj22 = properties10.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties19);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel23 = atomikosProperties19.getConsoleLogLevel();
        int int24 = atomikosProperties19.getConsoleFileCount();
        java.lang.Object obj25 = properties4.get((java.lang.Object) atomikosProperties19);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setCheckpointInterval((long) (byte) -1);
        atomikosProperties26.setConsoleFileName("");
        java.lang.String str31 = atomikosProperties26.getLogBaseName();
        long long32 = atomikosProperties26.getCheckpointInterval();
        java.lang.Object obj33 = properties4.get((java.lang.Object) atomikosProperties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties34.setCheckpointInterval((long) (byte) -1);
        atomikosProperties34.setThreadedTwoPhaseCommit(true);
        java.lang.String str39 = atomikosProperties34.getOutputDir();
        java.lang.String str40 = atomikosProperties34.getTransactionManagerUniqueName();
        int int41 = atomikosProperties34.getConsoleFileCount();
        boolean boolean42 = atomikosProperties34.isThreadedTwoPhaseCommit();
        java.lang.Object obj44 = properties4.put((java.lang.Object) boolean42, (java.lang.Object) 0L);
        java.util.Properties properties45 = new java.util.Properties();
        java.util.Properties properties48 = null;
        java.util.Properties properties49 = new java.util.Properties(properties48);
        java.util.Enumeration<java.lang.Object> objEnumeration50 = properties49.elements();
        java.util.Properties properties51 = null;
        java.util.Properties properties52 = new java.util.Properties(properties51);
        java.util.Enumeration<java.lang.Object> objEnumeration53 = properties52.elements();
        java.lang.String str55 = properties52.getProperty("");
        properties49.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties52);
        java.util.Properties properties58 = null;
        java.util.Properties properties59 = new java.util.Properties(properties58);
        boolean boolean60 = properties59.isEmpty();
        boolean boolean61 = properties49.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean60);
        boolean boolean62 = properties49.isEmpty();
        boolean boolean63 = properties45.replace((java.lang.Object) 100.0f, (java.lang.Object) true, (java.lang.Object) properties49);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties64.setCheckpointInterval((long) (byte) -1);
        atomikosProperties64.setConsoleFileName("");
        java.lang.String str69 = atomikosProperties64.getLogBaseName();
        long long70 = atomikosProperties64.getCheckpointInterval();
        java.lang.String str71 = atomikosProperties64.getConsoleFileName();
        long long72 = atomikosProperties64.getCheckpointInterval();
        java.lang.Object obj73 = properties49.remove((java.lang.Object) atomikosProperties64);
        java.lang.Object obj74 = properties1.getOrDefault((java.lang.Object) 0L, (java.lang.Object) properties49);
        java.lang.String str76 = properties1.getProperty("");
        java.lang.Object obj78 = properties1.remove((java.lang.Object) 100.0d);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertNotNull(objEnumeration14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel23 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel23.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(objEnumeration50);
        org.junit.Assert.assertNotNull(objEnumeration53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "tmlog" + "'", str69, "tmlog");
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-1L) + "'", long70 == (-1L));
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-1L) + "'", long72 == (-1L));
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertEquals(obj74.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj74), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj74), "{}");
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNull(obj78);
    }

    @Test
    public void test00438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00438");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet3 = properties1.entrySet();
        java.lang.Object obj6 = properties1.setProperty("tm.out", "hi!");
        java.io.OutputStream outputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream7, "{10=#}", "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEntrySet3);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test00439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00439");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.setRetryInterval((long) 100);
        int int3 = recovery0.getMaxRetries();
        int int4 = recovery0.getMaxRetries();
        long long5 = recovery0.getForgetOrphanedLogEntriesDelay();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 86400000L + "'", long5 == 86400000L);
    }

    @Test
    public void test00440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00440");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = null;
        java.util.Properties properties2 = new java.util.Properties(properties1);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties5.elements();
        java.lang.String str8 = properties5.getProperty("");
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        boolean boolean13 = properties12.isEmpty();
        boolean boolean14 = properties2.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean13);
        boolean boolean15 = properties2.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setCheckpointInterval((long) (byte) -1);
        atomikosProperties17.setConsoleFileName("");
        java.lang.String str22 = atomikosProperties17.getLogBaseName();
        long long23 = atomikosProperties17.getCheckpointInterval();
        java.lang.String str24 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.setEnableLogging(true);
        java.lang.Object obj27 = properties0.putIfAbsent((java.lang.Object) objEnumeration16, (java.lang.Object) atomikosProperties17);
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties0.keys();
        java.lang.String str30 = properties0.getProperty("tm.out");
        java.util.Map<java.lang.Object, java.lang.Object> objMap31 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.putAll(objMap31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test00441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00441");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        properties1.clear();
        boolean boolean8 = properties1.containsKey((java.lang.Object) "hi!");
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        boolean boolean11 = properties10.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setCheckpointInterval((long) (byte) -1);
        atomikosProperties12.setConsoleFileName("");
        java.lang.String str17 = atomikosProperties12.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setCheckpointInterval((long) (byte) -1);
        atomikosProperties18.setThreadedTwoPhaseCommit(true);
        java.util.Properties properties23 = null;
        java.util.Properties properties24 = new java.util.Properties(properties23);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties24.elements();
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties27.elements();
        java.lang.String str30 = properties27.getProperty("");
        properties24.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj36 = properties24.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties33);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel37 = atomikosProperties33.getConsoleLogLevel();
        atomikosProperties18.setConsoleLogLevel(atomikosLoggingLevel37);
        atomikosProperties12.setConsoleLogLevel(atomikosLoggingLevel37);
        boolean boolean41 = properties1.replace((java.lang.Object) properties10, (java.lang.Object) atomikosProperties12, (java.lang.Object) 10.0d);
        java.util.Properties properties42 = new java.util.Properties(properties1);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet43 = properties1.entrySet();
        java.lang.String str46 = properties1.getProperty("", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel37 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel37.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objEntrySet43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str46, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
    }

    @Test
    public void test00442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00442");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean13 = properties1.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean12);
        boolean boolean14 = properties1.isEmpty();
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        boolean boolean17 = properties16.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int19 = recovery18.getMaxRetries();
        boolean boolean20 = properties16.containsKey((java.lang.Object) recovery18);
        properties16.clear();
        boolean boolean23 = properties16.containsKey((java.lang.Object) "hi!");
        java.util.Properties properties24 = null;
        java.util.Properties properties25 = new java.util.Properties(properties24);
        boolean boolean26 = properties25.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.setCheckpointInterval((long) (byte) -1);
        atomikosProperties27.setConsoleFileName("");
        java.lang.String str32 = atomikosProperties27.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.setCheckpointInterval((long) (byte) -1);
        atomikosProperties33.setThreadedTwoPhaseCommit(true);
        java.util.Properties properties38 = null;
        java.util.Properties properties39 = new java.util.Properties(properties38);
        java.util.Enumeration<java.lang.Object> objEnumeration40 = properties39.elements();
        java.util.Properties properties41 = null;
        java.util.Properties properties42 = new java.util.Properties(properties41);
        java.util.Enumeration<java.lang.Object> objEnumeration43 = properties42.elements();
        java.lang.String str45 = properties42.getProperty("");
        properties39.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties42);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties48.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj51 = properties39.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties48);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel52 = atomikosProperties48.getConsoleLogLevel();
        atomikosProperties33.setConsoleLogLevel(atomikosLoggingLevel52);
        atomikosProperties27.setConsoleLogLevel(atomikosLoggingLevel52);
        boolean boolean56 = properties16.replace((java.lang.Object) properties25, (java.lang.Object) atomikosProperties27, (java.lang.Object) 10.0d);
        java.util.Properties properties57 = new java.util.Properties(properties16);
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties57);
        java.io.Reader reader59 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties57.load(reader59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tmlog" + "'", str32, "tmlog");
        org.junit.Assert.assertNotNull(objEnumeration40);
        org.junit.Assert.assertNotNull(objEnumeration43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel52 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel52.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test00443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00443");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getLogBaseDir();
        java.lang.String str2 = atomikosProperties0.getLogBaseDir();
        boolean boolean3 = atomikosProperties0.isAllowSubTransactions();
        atomikosProperties0.setLogBaseDir("hi!");
        java.lang.String str6 = atomikosProperties0.getConsoleFileName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tm.out" + "'", str6, "tm.out");
    }

    @Test
    public void test00444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00444");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        properties1.clear();
        boolean boolean8 = properties1.containsKey((java.lang.Object) "hi!");
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        boolean boolean11 = properties10.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setCheckpointInterval((long) (byte) -1);
        atomikosProperties12.setConsoleFileName("");
        java.lang.String str17 = atomikosProperties12.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setCheckpointInterval((long) (byte) -1);
        atomikosProperties18.setThreadedTwoPhaseCommit(true);
        java.util.Properties properties23 = null;
        java.util.Properties properties24 = new java.util.Properties(properties23);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties24.elements();
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties27.elements();
        java.lang.String str30 = properties27.getProperty("");
        properties24.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj36 = properties24.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties33);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel37 = atomikosProperties33.getConsoleLogLevel();
        atomikosProperties18.setConsoleLogLevel(atomikosLoggingLevel37);
        atomikosProperties12.setConsoleLogLevel(atomikosLoggingLevel37);
        boolean boolean41 = properties1.replace((java.lang.Object) properties10, (java.lang.Object) atomikosProperties12, (java.lang.Object) 10.0d);
        java.util.Properties properties42 = new java.util.Properties(properties1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int44 = atomikosProperties43.getMaxActives();
        java.lang.String str45 = atomikosProperties43.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel46 = atomikosProperties43.getConsoleLogLevel();
        java.util.Properties properties47 = null;
        java.util.Properties properties48 = new java.util.Properties(properties47);
        java.util.Enumeration<java.lang.Object> objEnumeration49 = properties48.elements();
        java.util.Properties properties50 = null;
        java.util.Properties properties51 = new java.util.Properties(properties50);
        java.util.Enumeration<java.lang.Object> objEnumeration52 = properties51.elements();
        java.lang.String str54 = properties51.getProperty("");
        properties48.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties51);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties57.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj60 = properties48.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties57);
        atomikosProperties57.setSerialJtaTransactions(false);
        int int63 = atomikosProperties57.getConsoleFileCount();
        int int64 = atomikosProperties57.getConsoleFileLimit();
        java.lang.String str65 = atomikosProperties57.getLogBaseName();
        atomikosProperties57.setService("tmlog");
        java.util.Properties properties68 = null;
        java.util.Properties properties69 = new java.util.Properties(properties68);
        boolean boolean70 = properties69.isEmpty();
        java.lang.String str72 = properties69.getProperty("hi!");
        java.util.Set<java.lang.Object> objSet73 = properties69.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet74 = properties69.entrySet();
        boolean boolean75 = properties42.replace((java.lang.Object) atomikosProperties43, (java.lang.Object) "tmlog", (java.lang.Object) properties69);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties76 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties76.setCheckpointInterval((long) (byte) -1);
        boolean boolean79 = atomikosProperties76.isSerialJtaTransactions();
        java.lang.String str80 = atomikosProperties76.getOutputDir();
        boolean boolean81 = properties69.containsValue((java.lang.Object) atomikosProperties76);
        boolean boolean82 = properties69.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel37 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel37.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 50 + "'", int44 == 50);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel46 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel46.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(objEnumeration49);
        org.junit.Assert.assertNotNull(objEnumeration52);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "tmlog" + "'", str65, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(objSet73);
        org.junit.Assert.assertNotNull(objEntrySet74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test00445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00445");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet3 = properties1.entrySet();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Object obj6 = properties1.replace((java.lang.Object) "hi!", obj5);
        boolean boolean8 = properties1.equals((java.lang.Object) 1.0f);
        java.util.Properties properties9 = new java.util.Properties(properties1);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery13 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int14 = recovery13.getMaxRetries();
        boolean boolean15 = properties11.containsKey((java.lang.Object) recovery13);
        java.util.Properties properties16 = null;
        java.util.Properties properties17 = new java.util.Properties(properties16);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties17.elements();
        java.util.Properties properties19 = null;
        java.util.Properties properties20 = new java.util.Properties(properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties20.elements();
        java.lang.String str23 = properties20.getProperty("");
        properties17.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj29 = properties17.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties26);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel30 = atomikosProperties26.getConsoleLogLevel();
        int int31 = atomikosProperties26.getConsoleFileCount();
        java.lang.Object obj32 = properties11.get((java.lang.Object) atomikosProperties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.setCheckpointInterval((long) (byte) -1);
        atomikosProperties33.setConsoleFileName("");
        java.lang.String str38 = atomikosProperties33.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties39.setCheckpointInterval((long) (byte) -1);
        atomikosProperties39.setThreadedTwoPhaseCommit(true);
        java.util.Properties properties44 = null;
        java.util.Properties properties45 = new java.util.Properties(properties44);
        java.util.Enumeration<java.lang.Object> objEnumeration46 = properties45.elements();
        java.util.Properties properties47 = null;
        java.util.Properties properties48 = new java.util.Properties(properties47);
        java.util.Enumeration<java.lang.Object> objEnumeration49 = properties48.elements();
        java.lang.String str51 = properties48.getProperty("");
        properties45.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties48);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties54.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj57 = properties45.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties54);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel58 = atomikosProperties54.getConsoleLogLevel();
        atomikosProperties39.setConsoleLogLevel(atomikosLoggingLevel58);
        atomikosProperties33.setConsoleLogLevel(atomikosLoggingLevel58);
        atomikosProperties33.setConsoleFileCount(5);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery63 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery63.setMaxRetries((-1));
        long long66 = recovery63.getRetryInterval();
        java.lang.Object obj67 = properties11.replace((java.lang.Object) 5, (java.lang.Object) long66);
        java.lang.Object obj68 = properties11.clone();
        boolean boolean69 = properties9.contains((java.lang.Object) properties11);
        java.util.Collection<java.lang.Object> objCollection70 = properties9.values();
        java.io.OutputStream outputStream71 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties9.save(outputStream71, "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEntrySet3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel30 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel30.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNotNull(objEnumeration46);
        org.junit.Assert.assertNotNull(objEnumeration49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel58 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel58.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 10000L + "'", long66 == 10000L);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "{}");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objCollection70);
    }

    @Test
    public void test00446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00446");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        java.lang.String str14 = atomikosProperties10.getConsoleFileName();
        java.lang.String str15 = atomikosProperties10.getLogBaseName();
        java.lang.String str16 = atomikosProperties10.getLogBaseName();
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tm.out" + "'", str14, "tm.out");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tmlog" + "'", str15, "tmlog");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
    }

    @Test
    public void test00447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00447");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        java.util.Properties properties14 = null;
        java.util.Properties properties15 = new java.util.Properties(properties14);
        boolean boolean16 = properties15.isEmpty();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.util.Properties properties18 = null;
        java.util.Properties properties19 = new java.util.Properties(properties18);
        boolean boolean20 = properties19.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery21 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int22 = recovery21.getMaxRetries();
        boolean boolean23 = properties19.containsKey((java.lang.Object) recovery21);
        properties19.clear();
        boolean boolean26 = properties19.containsKey((java.lang.Object) "hi!");
        java.util.Properties properties27 = null;
        java.util.Properties properties28 = new java.util.Properties(properties27);
        boolean boolean29 = properties28.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties30.setCheckpointInterval((long) (byte) -1);
        atomikosProperties30.setConsoleFileName("");
        java.lang.String str35 = atomikosProperties30.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties36.setCheckpointInterval((long) (byte) -1);
        atomikosProperties36.setThreadedTwoPhaseCommit(true);
        java.util.Properties properties41 = null;
        java.util.Properties properties42 = new java.util.Properties(properties41);
        java.util.Enumeration<java.lang.Object> objEnumeration43 = properties42.elements();
        java.util.Properties properties44 = null;
        java.util.Properties properties45 = new java.util.Properties(properties44);
        java.util.Enumeration<java.lang.Object> objEnumeration46 = properties45.elements();
        java.lang.String str48 = properties45.getProperty("");
        properties42.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties45);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties51.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj54 = properties42.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties51);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel55 = atomikosProperties51.getConsoleLogLevel();
        atomikosProperties36.setConsoleLogLevel(atomikosLoggingLevel55);
        atomikosProperties30.setConsoleLogLevel(atomikosLoggingLevel55);
        boolean boolean59 = properties19.replace((java.lang.Object) properties28, (java.lang.Object) atomikosProperties30, (java.lang.Object) 10.0d);
        java.util.Set<java.lang.Object> objSet60 = properties28.keySet();
        java.lang.Object obj61 = properties15.remove((java.lang.Object) objSet60);
        java.io.InputStream inputStream62 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties15.loadFromXML(inputStream62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tmlog" + "'", str35, "tmlog");
        org.junit.Assert.assertNotNull(objEnumeration43);
        org.junit.Assert.assertNotNull(objEnumeration46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel55 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel55.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(objSet60);
        org.junit.Assert.assertNull(obj61);
    }

    @Test
    public void test00448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00448");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet6 = properties1.entrySet();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Enumeration<java.lang.Object> objEnumeration9 = properties8.elements();
        boolean boolean11 = properties8.containsKey((java.lang.Object) 10.0f);
        java.lang.String str13 = properties8.getProperty("hi!");
        java.util.Set<java.lang.String> strSet14 = properties8.stringPropertyNames();
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties16.elements();
        boolean boolean18 = properties16.isEmpty();
        java.lang.Object obj19 = properties1.replace((java.lang.Object) properties8, (java.lang.Object) properties16);
        java.io.PrintStream printStream20 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties16.list(printStream20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objEntrySet6);
        org.junit.Assert.assertNotNull(objEnumeration9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(obj19);
    }

    @Test
    public void test00449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00449");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) (byte) -1);
        atomikosProperties0.setConsoleFileName("");
        java.lang.String str5 = atomikosProperties0.getLogBaseName();
        long long6 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setForceShutdownOnVmExit(false);
        int int9 = atomikosProperties0.getConsoleFileLimit();
        int int10 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setMaxActives((int) ' ');
        atomikosProperties0.setMaxTimeout((long) (byte) 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test00450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00450");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.lang.String str4 = properties1.getProperty("hi!");
        boolean boolean6 = properties1.contains((java.lang.Object) 10.0f);
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties9.elements();
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties12.elements();
        java.lang.String str15 = properties12.getProperty("");
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties12);
        java.util.Properties properties18 = null;
        java.util.Properties properties19 = new java.util.Properties(properties18);
        boolean boolean20 = properties19.isEmpty();
        boolean boolean21 = properties9.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean20);
        boolean boolean22 = properties9.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties9.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.setCheckpointInterval((long) (byte) -1);
        atomikosProperties24.setConsoleFileName("");
        java.lang.String str29 = atomikosProperties24.getLogBaseName();
        long long30 = atomikosProperties24.getCheckpointInterval();
        java.lang.String str31 = atomikosProperties24.getLogBaseDir();
        atomikosProperties24.setEnableLogging(true);
        java.lang.Object obj34 = properties7.putIfAbsent((java.lang.Object) objEnumeration23, (java.lang.Object) atomikosProperties24);
        java.util.Properties properties35 = null;
        java.util.Properties properties36 = new java.util.Properties(properties35);
        boolean boolean37 = properties36.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery38 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int39 = recovery38.getMaxRetries();
        boolean boolean40 = properties36.containsKey((java.lang.Object) recovery38);
        recovery38.setRetryInterval((long) (short) -1);
        recovery38.setDelay(10L);
        java.util.Properties properties45 = null;
        java.util.Properties properties46 = new java.util.Properties(properties45);
        boolean boolean47 = properties46.isEmpty();
        java.lang.Object obj48 = properties7.getOrDefault((java.lang.Object) recovery38, (java.lang.Object) properties46);
        java.lang.Object obj49 = properties1.remove((java.lang.Object) recovery38);
        properties1.clear();
        java.util.Properties properties51 = null;
        java.util.Properties properties52 = new java.util.Properties(properties51);
        boolean boolean53 = properties52.isEmpty();
        java.lang.String str55 = properties52.getProperty("hi!");
        boolean boolean57 = properties52.contains((java.lang.Object) 10.0f);
        boolean boolean58 = properties52.isEmpty();
        boolean boolean59 = properties1.containsValue((java.lang.Object) properties52);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties60.setCheckpointInterval((long) (byte) -1);
        atomikosProperties60.setThreadedTwoPhaseCommit(true);
        atomikosProperties60.setSerialJtaTransactions(false);
        atomikosProperties60.setOutputDir("");
        java.lang.String str69 = atomikosProperties60.getConsoleFileName();
        java.lang.String str70 = atomikosProperties60.getLogBaseName();
        atomikosProperties60.setConsoleFileCount((int) (byte) -1);
        atomikosProperties60.setConsoleFileName("hi!");
        java.lang.Object obj75 = properties52.remove((java.lang.Object) "hi!");
        java.io.Reader reader76 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties52.load(reader76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "{}");
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "tm.out" + "'", str69, "tm.out");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "tmlog" + "'", str70, "tmlog");
        org.junit.Assert.assertNull(obj75);
    }

    @Test
    public void test00451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00451");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.io.PrintWriter printWriter3 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printWriter3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test00452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00452");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = atomikosProperties10.getConsoleLogLevel();
        atomikosProperties10.setConsoleFileLimit((int) '4');
        java.lang.Class<?> wildcardClass17 = atomikosProperties10.getClass();
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel14 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel14.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test00453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00453");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.lang.String str4 = properties1.getProperty("hi!");
        boolean boolean6 = properties1.contains((java.lang.Object) 10.0f);
        java.util.Set<java.lang.Object> objSet7 = properties1.keySet();
        java.io.OutputStream outputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(outputStream8, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objSet7);
    }

    @Test
    public void test00454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00454");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        boolean boolean4 = properties1.contains((java.lang.Object) 1L);
        java.util.Set<java.lang.Object> objSet5 = properties1.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties6.getRecovery();
        atomikosProperties6.setEnableLogging(false);
        atomikosProperties6.setSerialJtaTransactions(true);
        java.util.Properties properties13 = null;
        java.util.Properties properties14 = new java.util.Properties(properties13);
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties14.elements();
        java.util.Properties properties16 = null;
        java.util.Properties properties17 = new java.util.Properties(properties16);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties17.elements();
        java.lang.String str20 = properties17.getProperty("");
        properties14.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties17);
        java.util.Properties properties23 = null;
        java.util.Properties properties24 = new java.util.Properties(properties23);
        boolean boolean25 = properties24.isEmpty();
        boolean boolean26 = properties14.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean25);
        java.util.Properties properties27 = null;
        java.util.Properties properties28 = new java.util.Properties(properties27);
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties28.elements();
        java.util.Properties properties30 = null;
        java.util.Properties properties31 = new java.util.Properties(properties30);
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties31.elements();
        java.lang.String str34 = properties31.getProperty("");
        properties28.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties31);
        boolean boolean36 = properties14.contains((java.lang.Object) properties28);
        java.util.Set<java.lang.Object> objSet37 = properties28.keySet();
        java.lang.Object obj38 = properties1.getOrDefault((java.lang.Object) true, (java.lang.Object) properties28);
        java.io.Reader reader39 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(reader39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objSet5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertNotNull(objEnumeration32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objSet37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "{}");
    }

    @Test
    public void test00455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00455");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) (byte) -1);
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        atomikosProperties0.setSerialJtaTransactions(false);
        java.lang.String str7 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setAllowSubTransactions(false);
        boolean boolean10 = atomikosProperties0.isEnableLogging();
        long long11 = atomikosProperties0.getMaxTimeout();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
    }

    @Test
    public void test00456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00456");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Properties properties3 = new java.util.Properties(properties1);
        java.util.Collection<java.lang.Object> objCollection4 = properties1.values();
        java.lang.String str5 = properties1.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setCheckpointInterval((long) (byte) -1);
        atomikosProperties6.setConsoleFileName("");
        java.lang.String str11 = atomikosProperties6.getLogBaseName();
        long long12 = atomikosProperties6.getCheckpointInterval();
        atomikosProperties6.setForceShutdownOnVmExit(false);
        atomikosProperties6.setTransactionManagerUniqueName("tmlog");
        atomikosProperties6.setLogBaseDir("");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery19 = atomikosProperties6.getRecovery();
        atomikosProperties6.setConsoleFileName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        java.lang.Object obj22 = properties1.get((java.lang.Object) "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        java.io.Reader reader23 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(reader23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tmlog" + "'", str11, "tmlog");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(recovery19);
        org.junit.Assert.assertNull(obj22);
    }

    @Test
    public void test00457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00457");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean13 = properties1.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean12);
        boolean boolean14 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties1.keys();
        java.lang.String str18 = properties1.getProperty("", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str18, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
    }

    @Test
    public void test00458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00458");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) (byte) -1);
        atomikosProperties0.setConsoleFileName("");
        java.lang.String str5 = atomikosProperties0.getOutputDir();
        int int6 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setLogBaseName("hi!");
        int int9 = atomikosProperties0.getConsoleFileCount();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test00459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00459");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean13 = properties1.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean12);
        boolean boolean14 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setConsoleFileName("tm.out");
        java.util.Properties properties19 = new java.util.Properties();
        java.util.Properties properties22 = null;
        java.util.Properties properties23 = new java.util.Properties(properties22);
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties23.elements();
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties26.elements();
        java.lang.String str29 = properties26.getProperty("");
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        java.util.Properties properties32 = null;
        java.util.Properties properties33 = new java.util.Properties(properties32);
        boolean boolean34 = properties33.isEmpty();
        boolean boolean35 = properties23.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean34);
        boolean boolean36 = properties23.isEmpty();
        boolean boolean37 = properties19.replace((java.lang.Object) 100.0f, (java.lang.Object) true, (java.lang.Object) properties23);
        boolean boolean38 = properties1.replace((java.lang.Object) ' ', (java.lang.Object) "tm.out", (java.lang.Object) boolean37);
        boolean boolean40 = properties1.equals((java.lang.Object) ' ');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties41.setCheckpointInterval((long) (byte) -1);
        atomikosProperties41.setConsoleFileName("");
        java.lang.String str46 = atomikosProperties41.getLogBaseName();
        long long47 = atomikosProperties41.getCheckpointInterval();
        atomikosProperties41.setForceShutdownOnVmExit(false);
        java.util.Properties properties50 = null;
        java.util.Properties properties51 = new java.util.Properties(properties50);
        java.util.Enumeration<java.lang.Object> objEnumeration52 = properties51.elements();
        java.util.Properties properties53 = null;
        java.util.Properties properties54 = new java.util.Properties(properties53);
        java.util.Enumeration<java.lang.Object> objEnumeration55 = properties54.elements();
        java.lang.String str57 = properties54.getProperty("");
        properties51.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties54);
        java.util.Enumeration<?> wildcardEnumeration59 = properties51.propertyNames();
        java.util.Properties properties60 = null;
        java.util.Properties properties61 = new java.util.Properties(properties60);
        java.util.Enumeration<java.lang.Object> objEnumeration62 = properties61.elements();
        java.util.Properties properties63 = null;
        java.util.Properties properties64 = new java.util.Properties(properties63);
        java.util.Enumeration<java.lang.Object> objEnumeration65 = properties64.elements();
        java.lang.String str67 = properties64.getProperty("");
        properties61.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties64);
        java.util.Properties properties70 = null;
        java.util.Properties properties71 = new java.util.Properties(properties70);
        boolean boolean72 = properties71.isEmpty();
        boolean boolean73 = properties61.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean72);
        boolean boolean74 = properties61.isEmpty();
        java.util.Properties properties75 = null;
        java.util.Properties properties76 = new java.util.Properties(properties75);
        java.util.Enumeration<java.lang.Object> objEnumeration77 = properties76.elements();
        boolean boolean79 = properties76.containsKey((java.lang.Object) 10.0f);
        properties61.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties76);
        java.util.Set<java.lang.String> strSet81 = properties61.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties82 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties82.setCheckpointInterval((long) (byte) -1);
        atomikosProperties82.setThreadedTwoPhaseCommit(true);
        atomikosProperties82.setSerialJtaTransactions(false);
        atomikosProperties82.setOutputDir("");
        java.lang.Object obj91 = properties51.putIfAbsent((java.lang.Object) properties61, (java.lang.Object) "");
        java.lang.Object obj92 = properties1.putIfAbsent((java.lang.Object) false, (java.lang.Object) properties51);
        java.io.PrintWriter printWriter93 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printWriter93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "tmlog" + "'", str46, "tmlog");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertNotNull(objEnumeration52);
        org.junit.Assert.assertNotNull(objEnumeration55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(wildcardEnumeration59);
        org.junit.Assert.assertNotNull(objEnumeration62);
        org.junit.Assert.assertNotNull(objEnumeration65);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(objEnumeration77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(strSet81);
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertNull(obj92);
    }

    @Test
    public void test00460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00460");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        properties1.clear();
        boolean boolean7 = properties1.isEmpty();
        java.io.Reader reader8 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(reader8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test00461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00461");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet3 = properties1.entrySet();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Object obj6 = properties1.replace((java.lang.Object) "hi!", obj5);
        boolean boolean8 = properties1.equals((java.lang.Object) 1.0f);
        java.util.Properties properties9 = new java.util.Properties(properties1);
        properties1.clear();
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties1.elements();
        java.util.Enumeration<?> wildcardEnumeration12 = properties1.propertyNames();
        java.lang.Class<?> wildcardClass13 = wildcardEnumeration12.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEntrySet3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertNotNull(wildcardEnumeration12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test00462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00462");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean13 = properties1.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean12);
        boolean boolean14 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setConsoleFileName("tm.out");
        java.util.Properties properties19 = new java.util.Properties();
        java.util.Properties properties22 = null;
        java.util.Properties properties23 = new java.util.Properties(properties22);
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties23.elements();
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties26.elements();
        java.lang.String str29 = properties26.getProperty("");
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        java.util.Properties properties32 = null;
        java.util.Properties properties33 = new java.util.Properties(properties32);
        boolean boolean34 = properties33.isEmpty();
        boolean boolean35 = properties23.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean34);
        boolean boolean36 = properties23.isEmpty();
        boolean boolean37 = properties19.replace((java.lang.Object) 100.0f, (java.lang.Object) true, (java.lang.Object) properties23);
        boolean boolean38 = properties1.replace((java.lang.Object) ' ', (java.lang.Object) "tm.out", (java.lang.Object) boolean37);
        boolean boolean40 = properties1.equals((java.lang.Object) ' ');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties41.setCheckpointInterval((long) (byte) -1);
        atomikosProperties41.setConsoleFileName("");
        java.lang.String str46 = atomikosProperties41.getLogBaseName();
        long long47 = atomikosProperties41.getCheckpointInterval();
        atomikosProperties41.setForceShutdownOnVmExit(false);
        java.util.Properties properties50 = null;
        java.util.Properties properties51 = new java.util.Properties(properties50);
        java.util.Enumeration<java.lang.Object> objEnumeration52 = properties51.elements();
        java.util.Properties properties53 = null;
        java.util.Properties properties54 = new java.util.Properties(properties53);
        java.util.Enumeration<java.lang.Object> objEnumeration55 = properties54.elements();
        java.lang.String str57 = properties54.getProperty("");
        properties51.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties54);
        java.util.Enumeration<?> wildcardEnumeration59 = properties51.propertyNames();
        java.util.Properties properties60 = null;
        java.util.Properties properties61 = new java.util.Properties(properties60);
        java.util.Enumeration<java.lang.Object> objEnumeration62 = properties61.elements();
        java.util.Properties properties63 = null;
        java.util.Properties properties64 = new java.util.Properties(properties63);
        java.util.Enumeration<java.lang.Object> objEnumeration65 = properties64.elements();
        java.lang.String str67 = properties64.getProperty("");
        properties61.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties64);
        java.util.Properties properties70 = null;
        java.util.Properties properties71 = new java.util.Properties(properties70);
        boolean boolean72 = properties71.isEmpty();
        boolean boolean73 = properties61.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean72);
        boolean boolean74 = properties61.isEmpty();
        java.util.Properties properties75 = null;
        java.util.Properties properties76 = new java.util.Properties(properties75);
        java.util.Enumeration<java.lang.Object> objEnumeration77 = properties76.elements();
        boolean boolean79 = properties76.containsKey((java.lang.Object) 10.0f);
        properties61.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties76);
        java.util.Set<java.lang.String> strSet81 = properties61.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties82 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties82.setCheckpointInterval((long) (byte) -1);
        atomikosProperties82.setThreadedTwoPhaseCommit(true);
        atomikosProperties82.setSerialJtaTransactions(false);
        atomikosProperties82.setOutputDir("");
        java.lang.Object obj91 = properties51.putIfAbsent((java.lang.Object) properties61, (java.lang.Object) "");
        java.lang.Object obj92 = properties1.putIfAbsent((java.lang.Object) false, (java.lang.Object) properties51);
        java.util.Collection<java.lang.Object> objCollection93 = properties1.values();
        java.io.PrintStream printStream94 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printStream94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "tmlog" + "'", str46, "tmlog");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertNotNull(objEnumeration52);
        org.junit.Assert.assertNotNull(objEnumeration55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(wildcardEnumeration59);
        org.junit.Assert.assertNotNull(objEnumeration62);
        org.junit.Assert.assertNotNull(objEnumeration65);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(objEnumeration77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(strSet81);
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertNull(obj92);
        org.junit.Assert.assertNotNull(objCollection93);
    }

    @Test
    public void test00463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00463");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        properties1.clear();
        boolean boolean8 = properties1.containsKey((java.lang.Object) "hi!");
        java.lang.Object obj9 = null;
        boolean boolean10 = properties1.equals(obj9);
        java.lang.String str11 = properties1.toString();
        properties1.clear();
        java.io.InputStream inputStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(inputStream13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
    }

    @Test
    public void test00464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00464");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = null;
        java.util.Properties properties2 = new java.util.Properties(properties1);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties5.elements();
        java.lang.String str8 = properties5.getProperty("");
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        boolean boolean13 = properties12.isEmpty();
        boolean boolean14 = properties2.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean13);
        boolean boolean15 = properties2.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setCheckpointInterval((long) (byte) -1);
        atomikosProperties17.setConsoleFileName("");
        java.lang.String str22 = atomikosProperties17.getLogBaseName();
        long long23 = atomikosProperties17.getCheckpointInterval();
        java.lang.String str24 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.setEnableLogging(true);
        java.lang.Object obj27 = properties0.putIfAbsent((java.lang.Object) objEnumeration16, (java.lang.Object) atomikosProperties17);
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties0.keys();
        java.lang.String str30 = properties0.getProperty("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties31.setCheckpointInterval((long) (byte) -1);
        atomikosProperties31.setConsoleFileName("");
        atomikosProperties31.setConsoleFileName("");
        long long38 = atomikosProperties31.getDefaultJtaTimeout();
        atomikosProperties31.setDefaultJtaTimeout((long) (byte) 10);
        boolean boolean41 = properties0.containsKey((java.lang.Object) atomikosProperties31);
        java.util.Collection<java.lang.Object> objCollection42 = properties0.values();
        java.io.OutputStream outputStream43 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream43, "{}", "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10000L + "'", long38 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objCollection42);
    }

    @Test
    public void test00465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00465");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.lang.String str4 = properties1.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties5.setCheckpointInterval((long) (byte) -1);
        atomikosProperties5.setConsoleFileName("");
        java.lang.String str10 = atomikosProperties5.getLogBaseName();
        long long11 = atomikosProperties5.getCheckpointInterval();
        atomikosProperties5.setForceShutdownOnVmExit(false);
        java.util.Properties properties14 = atomikosProperties5.asProperties();
        boolean boolean15 = atomikosProperties5.isAllowSubTransactions();
        int int16 = atomikosProperties5.getConsoleFileLimit();
        boolean boolean17 = properties1.containsKey((java.lang.Object) int16);
        java.util.Enumeration<?> wildcardEnumeration18 = properties1.propertyNames();
        java.io.PrintWriter printWriter19 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printWriter19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration18);
    }

    @Test
    public void test00466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00466");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        boolean boolean4 = properties1.contains((java.lang.Object) 1L);
        boolean boolean5 = properties1.isEmpty();
        boolean boolean7 = properties1.containsValue((java.lang.Object) 5);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties9.elements();
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties12.elements();
        java.lang.String str15 = properties12.getProperty("");
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties12);
        java.util.Enumeration<?> wildcardEnumeration17 = properties9.propertyNames();
        java.util.Properties properties18 = null;
        java.util.Properties properties19 = new java.util.Properties(properties18);
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties19.elements();
        java.util.Properties properties21 = null;
        java.util.Properties properties22 = new java.util.Properties(properties21);
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties22.elements();
        java.lang.String str25 = properties22.getProperty("");
        properties19.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties22);
        java.util.Properties properties28 = null;
        java.util.Properties properties29 = new java.util.Properties(properties28);
        boolean boolean30 = properties29.isEmpty();
        boolean boolean31 = properties19.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean30);
        boolean boolean32 = properties19.isEmpty();
        java.util.Properties properties33 = null;
        java.util.Properties properties34 = new java.util.Properties(properties33);
        java.util.Enumeration<java.lang.Object> objEnumeration35 = properties34.elements();
        boolean boolean37 = properties34.containsKey((java.lang.Object) 10.0f);
        properties19.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties34);
        java.util.Set<java.lang.String> strSet39 = properties19.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties40.setCheckpointInterval((long) (byte) -1);
        atomikosProperties40.setThreadedTwoPhaseCommit(true);
        atomikosProperties40.setSerialJtaTransactions(false);
        atomikosProperties40.setOutputDir("");
        java.lang.Object obj49 = properties9.putIfAbsent((java.lang.Object) properties19, (java.lang.Object) "");
        java.util.Properties properties50 = null;
        java.util.Properties properties51 = new java.util.Properties(properties50);
        boolean boolean52 = properties51.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery53 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int54 = recovery53.getMaxRetries();
        boolean boolean55 = properties51.containsKey((java.lang.Object) recovery53);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties56.setCheckpointInterval((long) (byte) -1);
        java.lang.String str59 = atomikosProperties56.getLogBaseDir();
        atomikosProperties56.setMaxTimeout(0L);
        java.lang.Object obj62 = properties51.remove((java.lang.Object) atomikosProperties56);
        java.util.Properties properties63 = null;
        java.util.Properties properties64 = new java.util.Properties(properties63);
        boolean boolean65 = properties64.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery66 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int67 = recovery66.getMaxRetries();
        boolean boolean68 = properties64.containsKey((java.lang.Object) recovery66);
        java.util.Properties properties69 = null;
        java.util.Properties properties70 = new java.util.Properties(properties69);
        java.util.Enumeration<java.lang.Object> objEnumeration71 = properties70.elements();
        java.util.Properties properties72 = null;
        java.util.Properties properties73 = new java.util.Properties(properties72);
        java.util.Enumeration<java.lang.Object> objEnumeration74 = properties73.elements();
        java.lang.String str76 = properties73.getProperty("");
        properties70.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties73);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties79 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties79.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj82 = properties70.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties79);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel83 = atomikosProperties79.getConsoleLogLevel();
        int int84 = atomikosProperties79.getConsoleFileCount();
        java.lang.Object obj85 = properties64.get((java.lang.Object) atomikosProperties79);
        long long86 = atomikosProperties79.getMaxTimeout();
        java.lang.Object obj87 = properties9.put((java.lang.Object) atomikosProperties56, (java.lang.Object) atomikosProperties79);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties88 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties88.setCheckpointInterval((long) (byte) -1);
        atomikosProperties88.setConsoleFileName("");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean93 = properties1.remove(obj87, (java.lang.Object) "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(wildcardEnumeration17);
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objEnumeration35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5 + "'", int54 == 5);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 5 + "'", int67 == 5);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(objEnumeration71);
        org.junit.Assert.assertNotNull(objEnumeration74);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNull(obj82);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel83 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel83.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNull(obj85);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 300000L + "'", long86 == 300000L);
        org.junit.Assert.assertNull(obj87);
    }

    @Test
    public void test00467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00467");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) (byte) -1);
        atomikosProperties0.setConsoleFileName("");
        java.lang.String str5 = atomikosProperties0.getLogBaseName();
        long long6 = atomikosProperties0.getCheckpointInterval();
        java.lang.String str7 = atomikosProperties0.getConsoleFileName();
        long long8 = atomikosProperties0.getCheckpointInterval();
        java.lang.String str9 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setOutputDir("tmlog");
        atomikosProperties0.setDefaultJtaTimeout((long) 100);
        boolean boolean14 = atomikosProperties0.isForceShutdownOnVmExit();
        long long15 = atomikosProperties0.getCheckpointInterval();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tmlog" + "'", str9, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
    }

    @Test
    public void test00468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00468");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        properties1.clear();
        java.util.Properties properties7 = new java.util.Properties(properties1);
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties7.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str10 = atomikosProperties9.getLogBaseDir();
        java.lang.String str11 = atomikosProperties9.getLogBaseDir();
        boolean boolean12 = atomikosProperties9.isAllowSubTransactions();
        atomikosProperties9.setLogBaseDir("hi!");
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties16.elements();
        java.util.Properties properties18 = null;
        java.util.Properties properties19 = new java.util.Properties(properties18);
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties19.elements();
        java.lang.String str22 = properties19.getProperty("");
        properties16.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties19);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties25.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj28 = properties16.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties25);
        java.util.Properties properties29 = null;
        java.util.Properties properties30 = new java.util.Properties(properties29);
        boolean boolean31 = properties30.isEmpty();
        properties16.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties30);
        java.lang.Object obj33 = properties16.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str35 = atomikosProperties34.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery36 = atomikosProperties34.getRecovery();
        atomikosProperties34.setEnableLogging(false);
        boolean boolean39 = properties16.equals((java.lang.Object) atomikosProperties34);
        java.util.Enumeration<java.lang.Object> objEnumeration40 = properties16.keys();
        properties16.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties42.setCheckpointInterval((long) (byte) -1);
        atomikosProperties42.setThreadedTwoPhaseCommit(true);
        int int47 = atomikosProperties42.getConsoleFileLimit();
        atomikosProperties42.setDefaultJtaTimeout((long) (short) 0);
        java.util.Properties properties50 = null;
        java.util.Properties properties51 = new java.util.Properties(properties50);
        java.util.Enumeration<java.lang.Object> objEnumeration52 = properties51.elements();
        java.util.Properties properties53 = null;
        java.util.Properties properties54 = new java.util.Properties(properties53);
        java.util.Enumeration<java.lang.Object> objEnumeration55 = properties54.elements();
        java.lang.String str57 = properties54.getProperty("");
        properties51.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties54);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties60.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj63 = properties51.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties60);
        java.util.Properties properties64 = new java.util.Properties(properties51);
        java.lang.Object obj65 = properties16.putIfAbsent((java.lang.Object) atomikosProperties42, (java.lang.Object) properties51);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj66 = properties7.replace((java.lang.Object) "hi!", obj65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(recovery36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objEnumeration40);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(objEnumeration52);
        org.junit.Assert.assertNotNull(objEnumeration55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNull(obj65);
    }

    @Test
    public void test00469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00469");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        properties1.clear();
        java.util.Properties properties7 = new java.util.Properties(properties1);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties9.elements();
        boolean boolean11 = properties9.isEmpty();
        java.util.Set<java.lang.String> strSet12 = properties9.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.setCheckpointInterval((long) (byte) -1);
        atomikosProperties13.setThreadedTwoPhaseCommit(true);
        java.lang.String str18 = atomikosProperties13.getOutputDir();
        java.util.Properties properties19 = atomikosProperties13.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.setCheckpointInterval((long) (byte) -1);
        atomikosProperties20.setThreadedTwoPhaseCommit(true);
        atomikosProperties20.setSerialJtaTransactions(false);
        atomikosProperties20.setOutputDir("");
        java.lang.String str29 = atomikosProperties20.getConsoleFileName();
        java.lang.String str30 = atomikosProperties20.getLogBaseName();
        atomikosProperties20.setDefaultJtaTimeout(0L);
        java.lang.Object obj33 = properties9.putIfAbsent((java.lang.Object) atomikosProperties13, (java.lang.Object) atomikosProperties20);
        java.lang.String str35 = properties9.getProperty("hi!");
        java.util.Enumeration<java.lang.Object> objEnumeration36 = properties9.keys();
        boolean boolean37 = properties1.contains((java.lang.Object) properties9);
        java.util.Enumeration<?> wildcardEnumeration38 = properties1.propertyNames();
        java.io.OutputStream outputStream39 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.save(outputStream39, "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tm.out" + "'", str29, "tm.out");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "tmlog" + "'", str30, "tmlog");
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(objEnumeration36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration38);
    }

    @Test
    public void test00470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00470");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = null;
        java.util.Properties properties2 = new java.util.Properties(properties1);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties5.elements();
        java.lang.String str8 = properties5.getProperty("");
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        boolean boolean13 = properties12.isEmpty();
        boolean boolean14 = properties2.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean13);
        boolean boolean15 = properties2.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setCheckpointInterval((long) (byte) -1);
        atomikosProperties17.setConsoleFileName("");
        java.lang.String str22 = atomikosProperties17.getLogBaseName();
        long long23 = atomikosProperties17.getCheckpointInterval();
        java.lang.String str24 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.setEnableLogging(true);
        java.lang.Object obj27 = properties0.putIfAbsent((java.lang.Object) objEnumeration16, (java.lang.Object) atomikosProperties17);
        java.util.Properties properties28 = null;
        java.util.Properties properties29 = new java.util.Properties(properties28);
        boolean boolean30 = properties29.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery31 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int32 = recovery31.getMaxRetries();
        boolean boolean33 = properties29.containsKey((java.lang.Object) recovery31);
        recovery31.setRetryInterval((long) (short) -1);
        recovery31.setDelay(10L);
        java.util.Properties properties38 = null;
        java.util.Properties properties39 = new java.util.Properties(properties38);
        boolean boolean40 = properties39.isEmpty();
        java.lang.Object obj41 = properties0.getOrDefault((java.lang.Object) recovery31, (java.lang.Object) properties39);
        java.util.Properties properties42 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration43 = properties42.keys();
        java.io.PrintStream printStream44 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties42.list(printStream44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "{}");
        org.junit.Assert.assertNotNull(objEnumeration43);
    }

    @Test
    public void test00471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00471");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getMaxActives();
        java.lang.String str2 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.setDefaultJtaTimeout((long) (byte) 0);
        atomikosProperties0.setMaxTimeout((long) '#');
        atomikosProperties0.setLogBaseDir("tm.out");
        int int9 = atomikosProperties0.getConsoleFileCount();
        int int10 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        atomikosProperties0.setConsoleFileName("tm.out");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 50 + "'", int1 == 50);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(properties11);
    }

    @Test
    public void test00472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00472");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        boolean boolean4 = properties1.contains((java.lang.Object) 1L);
        java.util.Set<java.lang.Object> objSet5 = properties1.keySet();
        java.lang.Object obj8 = properties1.setProperty("", "");
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        boolean boolean11 = properties10.isEmpty();
        java.lang.String str13 = properties10.getProperty("hi!");
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        boolean boolean17 = properties16.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int19 = recovery18.getMaxRetries();
        boolean boolean20 = properties16.containsKey((java.lang.Object) recovery18);
        recovery18.setRetryInterval((long) (short) -1);
        recovery18.setRetryInterval((long) 0);
        recovery18.setMaxRetries((int) (byte) 10);
        java.lang.Class<?> wildcardClass27 = recovery18.getClass();
        java.lang.Object obj28 = properties10.replace((java.lang.Object) (byte) -1, (java.lang.Object) recovery18);
        java.util.Properties properties29 = null;
        java.util.Properties properties30 = new java.util.Properties(properties29);
        boolean boolean31 = properties30.isEmpty();
        java.lang.String str33 = properties30.getProperty("hi!");
        java.util.Set<java.lang.String> strSet34 = properties30.stringPropertyNames();
        java.lang.Object obj35 = new java.lang.Object();
        boolean boolean36 = properties1.replace((java.lang.Object) (byte) -1, (java.lang.Object) properties30, obj35);
        java.io.InputStream inputStream37 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(inputStream37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objSet5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test00473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00473");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = null;
        java.util.Properties properties2 = new java.util.Properties(properties1);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties5.elements();
        java.lang.String str8 = properties5.getProperty("");
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        boolean boolean13 = properties12.isEmpty();
        boolean boolean14 = properties2.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean13);
        boolean boolean15 = properties2.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setCheckpointInterval((long) (byte) -1);
        atomikosProperties17.setConsoleFileName("");
        java.lang.String str22 = atomikosProperties17.getLogBaseName();
        long long23 = atomikosProperties17.getCheckpointInterval();
        java.lang.String str24 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.setEnableLogging(true);
        java.lang.Object obj27 = properties0.putIfAbsent((java.lang.Object) objEnumeration16, (java.lang.Object) atomikosProperties17);
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties0.keys();
        java.lang.String str30 = properties0.getProperty("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties31.setCheckpointInterval((long) (byte) -1);
        atomikosProperties31.setConsoleFileName("");
        atomikosProperties31.setConsoleFileName("");
        long long38 = atomikosProperties31.getDefaultJtaTimeout();
        atomikosProperties31.setDefaultJtaTimeout((long) (byte) 10);
        boolean boolean41 = properties0.containsKey((java.lang.Object) atomikosProperties31);
        atomikosProperties31.setLogBaseName("{com.atomikos.icatch.console_file_name=, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10000L + "'", long38 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test00474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00474");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties7.elements();
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties10.elements();
        java.lang.String str13 = properties10.getProperty("");
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj19 = properties7.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties16);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel20 = atomikosProperties16.getConsoleLogLevel();
        int int21 = atomikosProperties16.getConsoleFileCount();
        java.lang.Object obj22 = properties1.get((java.lang.Object) atomikosProperties16);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties23.setCheckpointInterval((long) (byte) -1);
        atomikosProperties23.setConsoleFileName("");
        java.lang.String str28 = atomikosProperties23.getLogBaseName();
        long long29 = atomikosProperties23.getCheckpointInterval();
        java.lang.Object obj30 = properties1.get((java.lang.Object) atomikosProperties23);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties31.setCheckpointInterval((long) (byte) -1);
        atomikosProperties31.setConsoleFileName("");
        java.lang.String str36 = atomikosProperties31.getLogBaseName();
        long long37 = atomikosProperties31.getCheckpointInterval();
        java.lang.String str38 = atomikosProperties31.getConsoleFileName();
        long long39 = atomikosProperties31.getCheckpointInterval();
        java.lang.String str40 = atomikosProperties31.getLogBaseName();
        atomikosProperties31.setOutputDir("tmlog");
        atomikosProperties31.setDefaultJtaTimeout((long) 100);
        atomikosProperties31.setForceShutdownOnVmExit(false);
        java.util.Properties properties47 = null;
        java.util.Properties properties48 = new java.util.Properties(properties47);
        java.util.Enumeration<java.lang.Object> objEnumeration49 = properties48.elements();
        java.util.Properties properties50 = null;
        java.util.Properties properties51 = new java.util.Properties(properties50);
        java.util.Enumeration<java.lang.Object> objEnumeration52 = properties51.elements();
        java.lang.String str54 = properties51.getProperty("");
        properties48.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties51);
        java.util.Enumeration<?> wildcardEnumeration56 = properties48.propertyNames();
        java.lang.Object obj57 = properties1.put((java.lang.Object) atomikosProperties31, (java.lang.Object) wildcardEnumeration56);
        java.io.PrintStream printStream58 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printStream58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel20 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel20.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tmlog" + "'", str36, "tmlog");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "tmlog" + "'", str40, "tmlog");
        org.junit.Assert.assertNotNull(objEnumeration49);
        org.junit.Assert.assertNotNull(objEnumeration52);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(wildcardEnumeration56);
        org.junit.Assert.assertNull(obj57);
    }

    @Test
    public void test00475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00475");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        java.lang.String str14 = atomikosProperties10.getConsoleFileName();
        atomikosProperties10.setCheckpointInterval(35L);
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tm.out" + "'", str14, "tm.out");
    }

    @Test
    public void test00476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00476");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        java.util.Properties properties14 = null;
        java.util.Properties properties15 = new java.util.Properties(properties14);
        boolean boolean16 = properties15.isEmpty();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.lang.Object obj18 = properties1.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery21 = atomikosProperties19.getRecovery();
        atomikosProperties19.setEnableLogging(false);
        boolean boolean24 = properties1.equals((java.lang.Object) atomikosProperties19);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties1.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setCheckpointInterval((long) (byte) -1);
        atomikosProperties26.setConsoleFileName("");
        java.lang.String str31 = atomikosProperties26.getLogBaseName();
        long long32 = atomikosProperties26.getCheckpointInterval();
        java.lang.String str33 = atomikosProperties26.getConsoleFileName();
        long long34 = atomikosProperties26.getCheckpointInterval();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery35 = atomikosProperties26.getRecovery();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setLogBaseDir("");
        java.lang.String str40 = atomikosProperties36.getTransactionManagerUniqueName();
        long long41 = atomikosProperties36.getCheckpointInterval();
        int int42 = atomikosProperties36.getConsoleFileCount();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean45 = properties1.remove((java.lang.Object) recovery35, (java.lang.Object) false);
        long long46 = recovery35.getRetryInterval();
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(recovery21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertNotNull(recovery35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 500L + "'", long41 == 500L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10000L + "'", long46 == 10000L);
    }

    @Test
    public void test00477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00477");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = atomikosProperties10.getConsoleLogLevel();
        int int15 = atomikosProperties10.getConsoleFileCount();
        int int16 = atomikosProperties10.getConsoleFileCount();
        atomikosProperties10.setConsoleFileLimit((int) (short) 10);
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel14 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel14.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test00478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00478");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) (byte) -1);
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        java.util.Properties properties5 = null;
        java.util.Properties properties6 = new java.util.Properties(properties5);
        java.util.Enumeration<java.lang.Object> objEnumeration7 = properties6.elements();
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties9.elements();
        java.lang.String str12 = properties9.getProperty("");
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties15.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj18 = properties6.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties15);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel19 = atomikosProperties15.getConsoleLogLevel();
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel19);
        atomikosProperties0.setLogBaseName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        java.util.Properties properties23 = atomikosProperties0.asProperties();
        java.util.Properties properties24 = new java.util.Properties();
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties26.elements();
        java.util.Properties properties28 = null;
        java.util.Properties properties29 = new java.util.Properties(properties28);
        java.util.Enumeration<java.lang.Object> objEnumeration30 = properties29.elements();
        java.lang.String str32 = properties29.getProperty("");
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        java.util.Properties properties35 = null;
        java.util.Properties properties36 = new java.util.Properties(properties35);
        boolean boolean37 = properties36.isEmpty();
        boolean boolean38 = properties26.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean37);
        boolean boolean39 = properties26.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration40 = properties26.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties41.setCheckpointInterval((long) (byte) -1);
        atomikosProperties41.setConsoleFileName("");
        java.lang.String str46 = atomikosProperties41.getLogBaseName();
        long long47 = atomikosProperties41.getCheckpointInterval();
        java.lang.String str48 = atomikosProperties41.getLogBaseDir();
        atomikosProperties41.setEnableLogging(true);
        java.lang.Object obj51 = properties24.putIfAbsent((java.lang.Object) objEnumeration40, (java.lang.Object) atomikosProperties41);
        java.util.Properties properties52 = null;
        java.util.Properties properties53 = new java.util.Properties(properties52);
        boolean boolean54 = properties53.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery55 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int56 = recovery55.getMaxRetries();
        boolean boolean57 = properties53.containsKey((java.lang.Object) recovery55);
        recovery55.setRetryInterval((long) (short) -1);
        recovery55.setDelay(10L);
        java.util.Properties properties62 = null;
        java.util.Properties properties63 = new java.util.Properties(properties62);
        boolean boolean64 = properties63.isEmpty();
        java.lang.Object obj65 = properties24.getOrDefault((java.lang.Object) recovery55, (java.lang.Object) properties63);
        boolean boolean66 = properties23.contains((java.lang.Object) properties24);
        java.util.Properties properties67 = new java.util.Properties(properties24);
        java.util.Properties properties68 = null;
        java.util.Properties properties69 = new java.util.Properties(properties68);
        boolean boolean70 = properties69.isEmpty();
        boolean boolean72 = properties69.contains((java.lang.Object) 1L);
        java.util.Set<java.lang.Object> objSet73 = properties69.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties74 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str75 = atomikosProperties74.getLogBaseDir();
        java.lang.String str76 = atomikosProperties74.getLogBaseDir();
        boolean boolean77 = atomikosProperties74.isAllowSubTransactions();
        boolean boolean78 = atomikosProperties74.isSerialJtaTransactions();
        boolean boolean79 = properties24.remove((java.lang.Object) objSet73, (java.lang.Object) boolean78);
        java.io.OutputStream outputStream80 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties24.storeToXML(outputStream80, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration7);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel19 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel19.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNotNull(objEnumeration30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objEnumeration40);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "tmlog" + "'", str46, "tmlog");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5 + "'", int56 == 5);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "{}");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objSet73);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test00479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00479");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        boolean boolean3 = properties1.isEmpty();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties5.elements();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Enumeration<java.lang.Object> objEnumeration9 = properties8.elements();
        java.lang.String str11 = properties8.getProperty("");
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties14.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj17 = properties5.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties14);
        java.util.Properties properties18 = null;
        java.util.Properties properties19 = new java.util.Properties(properties18);
        boolean boolean20 = properties19.isEmpty();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties19);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.setCheckpointInterval((long) (byte) -1);
        atomikosProperties22.setConsoleFileName("");
        java.lang.String str27 = atomikosProperties22.getLogBaseName();
        long long28 = atomikosProperties22.getCheckpointInterval();
        atomikosProperties22.setForceShutdownOnVmExit(false);
        java.util.Properties properties31 = atomikosProperties22.asProperties();
        boolean boolean32 = atomikosProperties22.isAllowSubTransactions();
        java.lang.Object obj33 = null;
        java.lang.Object obj34 = properties5.getOrDefault((java.lang.Object) boolean32, obj33);
        java.util.Properties properties35 = null;
        java.util.Properties properties36 = new java.util.Properties(properties35);
        boolean boolean37 = properties36.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery38 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int39 = recovery38.getMaxRetries();
        boolean boolean40 = properties36.containsKey((java.lang.Object) recovery38);
        properties36.clear();
        boolean boolean43 = properties36.containsKey((java.lang.Object) "hi!");
        java.util.Properties properties44 = null;
        java.util.Properties properties45 = new java.util.Properties(properties44);
        boolean boolean46 = properties45.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties47.setCheckpointInterval((long) (byte) -1);
        atomikosProperties47.setConsoleFileName("");
        java.lang.String str52 = atomikosProperties47.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties53.setCheckpointInterval((long) (byte) -1);
        atomikosProperties53.setThreadedTwoPhaseCommit(true);
        java.util.Properties properties58 = null;
        java.util.Properties properties59 = new java.util.Properties(properties58);
        java.util.Enumeration<java.lang.Object> objEnumeration60 = properties59.elements();
        java.util.Properties properties61 = null;
        java.util.Properties properties62 = new java.util.Properties(properties61);
        java.util.Enumeration<java.lang.Object> objEnumeration63 = properties62.elements();
        java.lang.String str65 = properties62.getProperty("");
        properties59.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties62);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties68.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj71 = properties59.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties68);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel72 = atomikosProperties68.getConsoleLogLevel();
        atomikosProperties53.setConsoleLogLevel(atomikosLoggingLevel72);
        atomikosProperties47.setConsoleLogLevel(atomikosLoggingLevel72);
        boolean boolean76 = properties36.replace((java.lang.Object) properties45, (java.lang.Object) atomikosProperties47, (java.lang.Object) 10.0d);
        java.util.Set<java.lang.Object> objSet77 = properties45.keySet();
        boolean boolean78 = properties5.containsValue((java.lang.Object) properties45);
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.util.Set<java.lang.Object> objSet80 = properties1.keySet();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNotNull(objEnumeration9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "tmlog" + "'", str52, "tmlog");
        org.junit.Assert.assertNotNull(objEnumeration60);
        org.junit.Assert.assertNotNull(objEnumeration63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel72 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel72.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(objSet77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(objSet80);
    }

    @Test
    public void test00480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00480");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        java.util.Properties properties14 = null;
        java.util.Properties properties15 = new java.util.Properties(properties14);
        boolean boolean16 = properties15.isEmpty();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.lang.Object obj18 = properties1.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setCheckpointInterval((long) (byte) -1);
        atomikosProperties19.setThreadedTwoPhaseCommit(true);
        java.lang.String str24 = atomikosProperties19.getOutputDir();
        java.util.Properties properties25 = atomikosProperties19.asProperties();
        java.lang.Object obj26 = properties1.remove((java.lang.Object) properties25);
        java.util.Properties properties27 = new java.util.Properties(properties25);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet28 = properties27.entrySet();
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEntrySet28);
    }

    @Test
    public void test00481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00481");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        properties1.clear();
        boolean boolean8 = properties1.containsKey((java.lang.Object) "hi!");
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        boolean boolean11 = properties10.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setCheckpointInterval((long) (byte) -1);
        atomikosProperties12.setConsoleFileName("");
        java.lang.String str17 = atomikosProperties12.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setCheckpointInterval((long) (byte) -1);
        atomikosProperties18.setThreadedTwoPhaseCommit(true);
        java.util.Properties properties23 = null;
        java.util.Properties properties24 = new java.util.Properties(properties23);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties24.elements();
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties27.elements();
        java.lang.String str30 = properties27.getProperty("");
        properties24.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj36 = properties24.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties33);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel37 = atomikosProperties33.getConsoleLogLevel();
        atomikosProperties18.setConsoleLogLevel(atomikosLoggingLevel37);
        atomikosProperties12.setConsoleLogLevel(atomikosLoggingLevel37);
        boolean boolean41 = properties1.replace((java.lang.Object) properties10, (java.lang.Object) atomikosProperties12, (java.lang.Object) 10.0d);
        java.util.Properties properties42 = new java.util.Properties(properties1);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet43 = properties1.entrySet();
        java.io.Writer writer44 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(writer44, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel37 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel37.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objEntrySet43);
    }

    @Test
    public void test00482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00482");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        boolean boolean4 = properties1.contains((java.lang.Object) 1L);
        int int5 = properties1.size();
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties1.keys();
        java.io.OutputStream outputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.save(outputStream7, "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(objEnumeration6);
    }

    @Test
    public void test00483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00483");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        boolean boolean3 = properties1.isEmpty();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties5.elements();
        boolean boolean8 = properties5.containsKey((java.lang.Object) 100);
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties10.elements();
        java.util.Properties properties12 = null;
        java.util.Properties properties13 = new java.util.Properties(properties12);
        java.util.Enumeration<java.lang.Object> objEnumeration14 = properties13.elements();
        java.lang.String str16 = properties13.getProperty("");
        properties10.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties13);
        java.util.Properties properties19 = null;
        java.util.Properties properties20 = new java.util.Properties(properties19);
        boolean boolean21 = properties20.isEmpty();
        boolean boolean22 = properties10.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean21);
        boolean boolean23 = properties10.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties10.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties25.setCheckpointInterval((long) (byte) -1);
        atomikosProperties25.setConsoleFileName("");
        java.lang.String str30 = atomikosProperties25.getLogBaseName();
        long long31 = atomikosProperties25.getCheckpointInterval();
        atomikosProperties25.setForceShutdownOnVmExit(false);
        atomikosProperties25.setTransactionManagerUniqueName("tmlog");
        atomikosProperties25.setLogBaseDir("");
        java.util.Properties properties38 = null;
        java.util.Properties properties39 = new java.util.Properties(properties38);
        java.util.Enumeration<java.lang.Object> objEnumeration40 = properties39.elements();
        java.util.Properties properties41 = null;
        java.util.Properties properties42 = new java.util.Properties(properties41);
        java.util.Enumeration<java.lang.Object> objEnumeration43 = properties42.elements();
        java.lang.String str45 = properties42.getProperty("");
        properties39.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties42);
        java.util.Properties properties48 = null;
        java.util.Properties properties49 = new java.util.Properties(properties48);
        boolean boolean50 = properties49.isEmpty();
        boolean boolean51 = properties39.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean50);
        boolean boolean52 = properties10.remove((java.lang.Object) "", (java.lang.Object) boolean51);
        java.util.Properties properties53 = null;
        java.util.Properties properties54 = new java.util.Properties(properties53);
        java.util.Enumeration<java.lang.Object> objEnumeration55 = properties54.elements();
        java.util.Properties properties56 = null;
        java.util.Properties properties57 = new java.util.Properties(properties56);
        java.util.Enumeration<java.lang.Object> objEnumeration58 = properties57.elements();
        java.lang.String str60 = properties57.getProperty("");
        properties54.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties57);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties63.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj66 = properties54.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties63);
        java.util.Properties properties67 = null;
        java.util.Properties properties68 = new java.util.Properties(properties67);
        boolean boolean69 = properties68.isEmpty();
        properties54.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties68);
        java.lang.Object obj71 = properties54.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties72 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties72.setCheckpointInterval((long) (byte) -1);
        atomikosProperties72.setThreadedTwoPhaseCommit(true);
        java.lang.String str77 = atomikosProperties72.getOutputDir();
        java.util.Properties properties78 = atomikosProperties72.asProperties();
        java.lang.Object obj79 = properties54.remove((java.lang.Object) properties78);
        boolean boolean80 = properties10.containsKey((java.lang.Object) properties54);
        java.lang.Object obj81 = properties1.put((java.lang.Object) properties5, (java.lang.Object) boolean80);
        java.lang.Object obj83 = properties1.remove((java.lang.Object) (short) -1);
        java.io.Reader reader84 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(reader84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertNotNull(objEnumeration14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "tmlog" + "'", str30, "tmlog");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertNotNull(objEnumeration40);
        org.junit.Assert.assertNotNull(objEnumeration43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objEnumeration55);
        org.junit.Assert.assertNotNull(objEnumeration58);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(properties78);
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(obj81);
        org.junit.Assert.assertNull(obj83);
    }

    @Test
    public void test00484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00484");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        boolean boolean3 = properties1.isEmpty();
        java.util.Set<java.lang.String> strSet4 = properties1.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties5.setCheckpointInterval((long) (byte) -1);
        atomikosProperties5.setThreadedTwoPhaseCommit(true);
        java.lang.String str10 = atomikosProperties5.getOutputDir();
        java.util.Properties properties11 = atomikosProperties5.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setCheckpointInterval((long) (byte) -1);
        atomikosProperties12.setThreadedTwoPhaseCommit(true);
        atomikosProperties12.setSerialJtaTransactions(false);
        atomikosProperties12.setOutputDir("");
        java.lang.String str21 = atomikosProperties12.getConsoleFileName();
        java.lang.String str22 = atomikosProperties12.getLogBaseName();
        atomikosProperties12.setDefaultJtaTimeout(0L);
        java.lang.Object obj25 = properties1.putIfAbsent((java.lang.Object) atomikosProperties5, (java.lang.Object) atomikosProperties12);
        atomikosProperties5.setConsoleFileLimit(52);
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tm.out" + "'", str21, "tm.out");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertNull(obj25);
    }

    @Test
    public void test00485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00485");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean13 = properties1.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean12);
        boolean boolean14 = properties1.isEmpty();
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties16.elements();
        boolean boolean19 = properties16.containsKey((java.lang.Object) 10.0f);
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties16);
        java.lang.String str21 = properties1.toString();
        java.lang.String str23 = properties1.getProperty("hi!");
        boolean boolean24 = properties1.isEmpty();
        java.io.PrintWriter printWriter25 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printWriter25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{}" + "'", str21, "{}");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test00486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00486");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean12 = properties11.isEmpty();
        boolean boolean13 = properties1.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean12);
        boolean boolean14 = properties1.isEmpty();
        java.util.Properties properties15 = new java.util.Properties();
        java.util.Properties properties16 = null;
        java.util.Properties properties17 = new java.util.Properties(properties16);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties17.elements();
        java.util.Properties properties19 = null;
        java.util.Properties properties20 = new java.util.Properties(properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties20.elements();
        java.lang.String str23 = properties20.getProperty("");
        properties17.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties20);
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        boolean boolean28 = properties27.isEmpty();
        boolean boolean29 = properties17.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean28);
        boolean boolean30 = properties17.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties17.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties32.setCheckpointInterval((long) (byte) -1);
        atomikosProperties32.setConsoleFileName("");
        java.lang.String str37 = atomikosProperties32.getLogBaseName();
        long long38 = atomikosProperties32.getCheckpointInterval();
        java.lang.String str39 = atomikosProperties32.getLogBaseDir();
        atomikosProperties32.setEnableLogging(true);
        java.lang.Object obj42 = properties15.putIfAbsent((java.lang.Object) objEnumeration31, (java.lang.Object) atomikosProperties32);
        java.util.Properties properties43 = null;
        java.util.Properties properties44 = new java.util.Properties(properties43);
        boolean boolean45 = properties44.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery46 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int47 = recovery46.getMaxRetries();
        boolean boolean48 = properties44.containsKey((java.lang.Object) recovery46);
        recovery46.setRetryInterval((long) (short) -1);
        recovery46.setDelay(10L);
        java.util.Properties properties53 = null;
        java.util.Properties properties54 = new java.util.Properties(properties53);
        boolean boolean55 = properties54.isEmpty();
        java.lang.Object obj56 = properties15.getOrDefault((java.lang.Object) recovery46, (java.lang.Object) properties54);
        java.util.Properties properties57 = null;
        java.util.Properties properties58 = new java.util.Properties(properties57);
        boolean boolean59 = properties58.isEmpty();
        java.lang.String str61 = properties58.getProperty("hi!");
        java.util.Set<java.lang.String> strSet62 = properties58.stringPropertyNames();
        java.lang.Object obj63 = properties58.clone();
        java.util.Properties properties64 = null;
        java.util.Properties properties65 = new java.util.Properties(properties64);
        java.util.Enumeration<java.lang.Object> objEnumeration66 = properties65.elements();
        java.util.Properties properties67 = null;
        java.util.Properties properties68 = new java.util.Properties(properties67);
        java.util.Enumeration<java.lang.Object> objEnumeration69 = properties68.elements();
        java.lang.String str71 = properties68.getProperty("");
        properties65.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties68);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties74 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties74.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj77 = properties65.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties74);
        atomikosProperties74.setSerialJtaTransactions(false);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel80 = atomikosProperties74.getConsoleLogLevel();
        java.lang.String str81 = atomikosProperties74.getTransactionManagerUniqueName();
        atomikosProperties74.setOutputDir("{10=#}");
        boolean boolean84 = properties1.replace((java.lang.Object) properties54, (java.lang.Object) properties58, (java.lang.Object) "{10=#}");
        java.io.InputStream inputStream85 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(inputStream85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objEnumeration31);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tmlog" + "'", str37, "tmlog");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "{}");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals(obj63.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "{}");
        org.junit.Assert.assertNotNull(objEnumeration66);
        org.junit.Assert.assertNotNull(objEnumeration69);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel80 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel80.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test00487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00487");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet3 = properties1.entrySet();
        java.util.Set<java.lang.String> strSet4 = properties1.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties5.setCheckpointInterval((long) (byte) -1);
        atomikosProperties5.setConsoleFileName("");
        java.lang.String str10 = atomikosProperties5.getLogBaseName();
        long long11 = atomikosProperties5.getCheckpointInterval();
        java.lang.String str12 = atomikosProperties5.getLogBaseDir();
        atomikosProperties5.setEnableLogging(true);
        long long15 = atomikosProperties5.getDefaultJtaTimeout();
        boolean boolean16 = atomikosProperties5.isSerialJtaTransactions();
        java.lang.String str17 = atomikosProperties5.getOutputDir();
        atomikosProperties5.setTransactionManagerUniqueName("{}");
        java.util.Properties properties20 = null;
        java.util.Properties properties21 = new java.util.Properties(properties20);
        java.util.Enumeration<java.lang.Object> objEnumeration22 = properties21.elements();
        boolean boolean24 = properties21.containsKey((java.lang.Object) 10.0f);
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties26.elements();
        java.util.Properties properties28 = null;
        java.util.Properties properties29 = new java.util.Properties(properties28);
        java.util.Enumeration<java.lang.Object> objEnumeration30 = properties29.elements();
        java.lang.String str32 = properties29.getProperty("");
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        java.util.Enumeration<?> wildcardEnumeration34 = properties26.propertyNames();
        boolean boolean35 = properties21.containsValue((java.lang.Object) wildcardEnumeration34);
        java.lang.Object obj36 = properties1.put((java.lang.Object) atomikosProperties5, (java.lang.Object) properties21);
        java.lang.Object obj37 = properties1.clone();
        boolean boolean38 = properties1.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration<?> wildcardEnumeration39 = properties1.propertyNames();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.springframework.boot.jta.atomikos.AtomikosProperties cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objEntrySet3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(objEnumeration22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNotNull(objEnumeration30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(wildcardEnumeration34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test00488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00488");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = atomikosProperties10.getConsoleLogLevel();
        atomikosProperties10.setConsoleFileLimit((int) '4');
        atomikosProperties10.setMaxActives((int) ' ');
        int int19 = atomikosProperties10.getConsoleFileCount();
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel14 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel14.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test00489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00489");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        boolean boolean3 = properties1.isEmpty();
        java.io.InputStream inputStream4 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(inputStream4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test00490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00490");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.lang.String str4 = properties1.getProperty("hi!");
        boolean boolean6 = properties1.contains((java.lang.Object) 10.0f);
        boolean boolean7 = properties1.isEmpty();
        java.util.Collection<java.lang.Object> objCollection8 = properties1.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery9.setRetryInterval((long) 100);
        recovery9.setDelay((long) 50);
        recovery9.setDelay(300000L);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery16 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery16.setRetryInterval((long) 100);
        int int19 = recovery16.getMaxRetries();
        recovery16.setDelay((long) (short) 100);
        recovery16.setDelay((long) (byte) 1);
        boolean boolean24 = properties1.remove((java.lang.Object) recovery9, (java.lang.Object) recovery16);
        recovery16.setDelay((long) (byte) 10);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objCollection8);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test00491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00491");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        boolean boolean4 = properties1.contains((java.lang.Object) 1L);
        java.util.Set<java.lang.Object> objSet5 = properties1.keySet();
        java.lang.Object obj8 = properties1.setProperty("", "");
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        boolean boolean11 = properties10.isEmpty();
        java.lang.String str13 = properties10.getProperty("hi!");
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        boolean boolean17 = properties16.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int19 = recovery18.getMaxRetries();
        boolean boolean20 = properties16.containsKey((java.lang.Object) recovery18);
        recovery18.setRetryInterval((long) (short) -1);
        recovery18.setRetryInterval((long) 0);
        recovery18.setMaxRetries((int) (byte) 10);
        java.lang.Class<?> wildcardClass27 = recovery18.getClass();
        java.lang.Object obj28 = properties10.replace((java.lang.Object) (byte) -1, (java.lang.Object) recovery18);
        java.util.Properties properties29 = null;
        java.util.Properties properties30 = new java.util.Properties(properties29);
        boolean boolean31 = properties30.isEmpty();
        java.lang.String str33 = properties30.getProperty("hi!");
        java.util.Set<java.lang.String> strSet34 = properties30.stringPropertyNames();
        java.lang.Object obj35 = new java.lang.Object();
        boolean boolean36 = properties1.replace((java.lang.Object) (byte) -1, (java.lang.Object) properties30, obj35);
        java.util.Properties properties37 = null;
        java.util.Properties properties38 = new java.util.Properties(properties37);
        java.util.Enumeration<java.lang.Object> objEnumeration39 = properties38.elements();
        boolean boolean40 = properties38.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration41 = properties38.keys();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties43.setCheckpointInterval((long) (byte) -1);
        atomikosProperties43.setThreadedTwoPhaseCommit(true);
        atomikosProperties43.setSerialJtaTransactions(false);
        atomikosProperties43.setOutputDir("");
        atomikosProperties43.setThreadedTwoPhaseCommit(true);
        atomikosProperties43.setThreadedTwoPhaseCommit(false);
        atomikosProperties43.setCheckpointInterval((long) (short) 1);
        boolean boolean58 = atomikosProperties43.isThreadedTwoPhaseCommit();
        java.lang.Object obj59 = properties38.remove((java.lang.Object) atomikosProperties43);
        properties38.clear();
        java.util.Set<java.lang.Object> objSet61 = properties38.keySet();
        int int62 = properties38.size();
        java.io.InputStream inputStream63 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties38.load(inputStream63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objSet5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objEnumeration39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objEnumeration41);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNotNull(objSet61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test00492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00492");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties7.elements();
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties10.elements();
        java.lang.String str13 = properties10.getProperty("");
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj19 = properties7.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties16);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel20 = atomikosProperties16.getConsoleLogLevel();
        int int21 = atomikosProperties16.getConsoleFileCount();
        java.lang.Object obj22 = properties1.get((java.lang.Object) atomikosProperties16);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties23.setCheckpointInterval((long) (byte) -1);
        atomikosProperties23.setConsoleFileName("");
        java.lang.String str28 = atomikosProperties23.getLogBaseName();
        long long29 = atomikosProperties23.getCheckpointInterval();
        java.lang.Object obj30 = properties1.get((java.lang.Object) atomikosProperties23);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties31.setCheckpointInterval((long) (byte) -1);
        atomikosProperties31.setThreadedTwoPhaseCommit(true);
        java.lang.String str36 = atomikosProperties31.getOutputDir();
        java.lang.String str37 = atomikosProperties31.getTransactionManagerUniqueName();
        int int38 = atomikosProperties31.getConsoleFileCount();
        boolean boolean39 = atomikosProperties31.isThreadedTwoPhaseCommit();
        java.lang.Object obj41 = properties1.put((java.lang.Object) boolean39, (java.lang.Object) 0L);
        java.io.InputStream inputStream42 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.loadFromXML(inputStream42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel20 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel20.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(obj41);
    }

    @Test
    public void test00493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00493");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj13 = properties1.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties10);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = atomikosProperties10.getConsoleLogLevel();
        atomikosProperties10.setConsoleFileLimit((int) '4');
        atomikosProperties10.setEnableLogging(false);
        java.util.Properties properties19 = atomikosProperties10.asProperties();
        java.lang.Class<?> wildcardClass20 = properties19.getClass();
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel14 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel14.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test00494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00494");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties4.elements();
        java.lang.String str7 = properties4.getProperty("");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Enumeration<?> wildcardEnumeration9 = properties1.propertyNames();
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        java.util.Enumeration<java.lang.Object> objEnumeration12 = properties11.elements();
        java.util.Properties properties13 = null;
        java.util.Properties properties14 = new java.util.Properties(properties13);
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties14.elements();
        java.lang.String str17 = properties14.getProperty("");
        properties11.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties14);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj23 = properties11.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties20);
        atomikosProperties20.setSerialJtaTransactions(false);
        atomikosProperties20.setOutputDir("");
        boolean boolean28 = properties1.containsKey((java.lang.Object) "");
        java.util.Properties properties30 = null;
        java.util.Properties properties31 = new java.util.Properties(properties30);
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties31.elements();
        java.util.Properties properties33 = null;
        java.util.Properties properties34 = new java.util.Properties(properties33);
        java.util.Enumeration<java.lang.Object> objEnumeration35 = properties34.elements();
        java.lang.String str37 = properties34.getProperty("");
        properties31.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties34);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties40.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj43 = properties31.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties40);
        atomikosProperties40.setSerialJtaTransactions(false);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel46 = atomikosProperties40.getConsoleLogLevel();
        java.lang.String str47 = atomikosProperties40.getTransactionManagerUniqueName();
        java.lang.Object obj48 = properties1.replace((java.lang.Object) "hi!", (java.lang.Object) atomikosProperties40);
        java.util.Collection<java.lang.Object> objCollection49 = properties1.values();
        java.lang.Object obj50 = properties1.clone();
        java.util.Collection<java.lang.Object> objCollection51 = properties1.values();
        java.io.OutputStream outputStream52 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream52, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(wildcardEnumeration9);
        org.junit.Assert.assertNotNull(objEnumeration12);
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objEnumeration32);
        org.junit.Assert.assertNotNull(objEnumeration35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel46 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel46.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(objCollection49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "{}");
        org.junit.Assert.assertNotNull(objCollection51);
    }

    @Test
    public void test00495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00495");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) (byte) -1);
        atomikosProperties0.setConsoleFileName("");
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        int int7 = atomikosProperties0.getMaxActives();
        java.lang.String str8 = atomikosProperties0.getService();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test00496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00496");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int4 = recovery3.getMaxRetries();
        boolean boolean5 = properties1.containsKey((java.lang.Object) recovery3);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet6 = properties1.entrySet();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Enumeration<java.lang.Object> objEnumeration9 = properties8.elements();
        boolean boolean11 = properties8.containsKey((java.lang.Object) 10.0f);
        java.lang.String str13 = properties8.getProperty("hi!");
        java.util.Set<java.lang.String> strSet14 = properties8.stringPropertyNames();
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties16.elements();
        boolean boolean18 = properties16.isEmpty();
        java.lang.Object obj19 = properties1.replace((java.lang.Object) properties8, (java.lang.Object) properties16);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.setCheckpointInterval((long) (byte) -1);
        atomikosProperties20.setConsoleFileName("");
        java.lang.String str25 = atomikosProperties20.getOutputDir();
        int int26 = atomikosProperties20.getConsoleFileCount();
        atomikosProperties20.setOutputDir("{10=#}");
        java.lang.Object obj29 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj30 = properties16.putIfAbsent((java.lang.Object) "{10=#}", obj29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objEntrySet6);
        org.junit.Assert.assertNotNull(objEnumeration9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test00497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00497");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        boolean boolean4 = properties1.containsKey((java.lang.Object) 10.0f);
        java.util.Set<java.lang.String> strSet5 = properties1.stringPropertyNames();
        int int6 = properties1.size();
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test00498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00498");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        boolean boolean4 = properties1.contains((java.lang.Object) 1L);
        java.util.Set<java.lang.Object> objSet5 = properties1.keySet();
        java.lang.Object obj8 = properties1.setProperty("", "");
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        boolean boolean11 = properties10.isEmpty();
        java.lang.String str13 = properties10.getProperty("hi!");
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        boolean boolean17 = properties16.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int19 = recovery18.getMaxRetries();
        boolean boolean20 = properties16.containsKey((java.lang.Object) recovery18);
        recovery18.setRetryInterval((long) (short) -1);
        recovery18.setRetryInterval((long) 0);
        recovery18.setMaxRetries((int) (byte) 10);
        java.lang.Class<?> wildcardClass27 = recovery18.getClass();
        java.lang.Object obj28 = properties10.replace((java.lang.Object) (byte) -1, (java.lang.Object) recovery18);
        java.util.Properties properties29 = null;
        java.util.Properties properties30 = new java.util.Properties(properties29);
        boolean boolean31 = properties30.isEmpty();
        java.lang.String str33 = properties30.getProperty("hi!");
        java.util.Set<java.lang.String> strSet34 = properties30.stringPropertyNames();
        java.lang.Object obj35 = new java.lang.Object();
        boolean boolean36 = properties1.replace((java.lang.Object) (byte) -1, (java.lang.Object) properties30, obj35);
        java.util.Properties properties37 = null;
        java.util.Properties properties38 = new java.util.Properties(properties37);
        java.util.Enumeration<java.lang.Object> objEnumeration39 = properties38.elements();
        boolean boolean40 = properties38.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration41 = properties38.keys();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties38);
        java.util.Properties properties43 = null;
        java.util.Properties properties44 = new java.util.Properties(properties43);
        java.util.Enumeration<java.lang.Object> objEnumeration45 = properties44.elements();
        java.util.Properties properties46 = null;
        java.util.Properties properties47 = new java.util.Properties(properties46);
        java.util.Enumeration<java.lang.Object> objEnumeration48 = properties47.elements();
        java.lang.String str50 = properties47.getProperty("");
        properties44.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties53.setCheckpointInterval((long) (byte) -1);
        java.lang.Object obj56 = properties44.putIfAbsent((java.lang.Object) 1.0d, (java.lang.Object) atomikosProperties53);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel57 = atomikosProperties53.getConsoleLogLevel();
        boolean boolean58 = atomikosProperties53.isForceShutdownOnVmExit();
        java.lang.String str59 = atomikosProperties53.getService();
        boolean boolean60 = properties38.containsKey((java.lang.Object) atomikosProperties53);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int62 = atomikosProperties61.getMaxActives();
        java.lang.String str63 = atomikosProperties61.getTransactionManagerUniqueName();
        boolean boolean64 = atomikosProperties61.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties65.setCheckpointInterval((long) (byte) -1);
        atomikosProperties65.setThreadedTwoPhaseCommit(true);
        atomikosProperties65.setSerialJtaTransactions(false);
        atomikosProperties65.setOutputDir("");
        java.lang.String str74 = atomikosProperties65.getConsoleFileName();
        java.lang.String str75 = atomikosProperties65.getLogBaseName();
        atomikosProperties65.setDefaultJtaTimeout(0L);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel78 = atomikosProperties65.getConsoleLogLevel();
        atomikosProperties61.setConsoleLogLevel(atomikosLoggingLevel78);
        atomikosProperties61.setConsoleFileCount((int) (byte) 0);
        atomikosProperties61.setMaxActives((int) (byte) 100);
        boolean boolean84 = properties38.containsKey((java.lang.Object) (byte) 100);
        java.io.Writer writer85 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties38.store(writer85, "{10=#}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objSet5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objEnumeration39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objEnumeration41);
        org.junit.Assert.assertNotNull(objEnumeration45);
        org.junit.Assert.assertNotNull(objEnumeration48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel57 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel57.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 50 + "'", int62 == 50);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "tm.out" + "'", str74, "tm.out");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "tmlog" + "'", str75, "tmlog");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel78 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel78.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test00499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00499");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        boolean boolean4 = properties1.contains((java.lang.Object) 1L);
        java.util.Set<java.lang.Object> objSet5 = properties1.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties6.getRecovery();
        atomikosProperties6.setEnableLogging(false);
        atomikosProperties6.setSerialJtaTransactions(true);
        java.util.Properties properties13 = null;
        java.util.Properties properties14 = new java.util.Properties(properties13);
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties14.elements();
        java.util.Properties properties16 = null;
        java.util.Properties properties17 = new java.util.Properties(properties16);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties17.elements();
        java.lang.String str20 = properties17.getProperty("");
        properties14.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties17);
        java.util.Properties properties23 = null;
        java.util.Properties properties24 = new java.util.Properties(properties23);
        boolean boolean25 = properties24.isEmpty();
        boolean boolean26 = properties14.remove((java.lang.Object) 100.0d, (java.lang.Object) boolean25);
        java.util.Properties properties27 = null;
        java.util.Properties properties28 = new java.util.Properties(properties27);
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties28.elements();
        java.util.Properties properties30 = null;
        java.util.Properties properties31 = new java.util.Properties(properties30);
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties31.elements();
        java.lang.String str34 = properties31.getProperty("");
        properties28.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties31);
        boolean boolean36 = properties14.contains((java.lang.Object) properties28);
        java.util.Set<java.lang.Object> objSet37 = properties28.keySet();
        java.lang.Object obj38 = properties1.getOrDefault((java.lang.Object) true, (java.lang.Object) properties28);
        properties28.clear();
        java.lang.String str40 = properties28.toString();
        java.util.Properties properties41 = null;
        java.util.Properties properties42 = new java.util.Properties(properties41);
        boolean boolean43 = properties42.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration44 = properties42.elements();
        java.util.Properties properties45 = null;
        java.util.Properties properties46 = new java.util.Properties(properties45);
        boolean boolean47 = properties46.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet48 = properties46.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery49 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int50 = recovery49.getMaxRetries();
        recovery49.setForgetOrphanedLogEntriesDelay((-1L));
        recovery49.setForgetOrphanedLogEntriesDelay((long) (-1));
        boolean boolean55 = properties42.remove((java.lang.Object) properties46, (java.lang.Object) (-1));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str57 = atomikosProperties56.getLogBaseDir();
        java.lang.String str58 = atomikosProperties56.getLogBaseDir();
        int int59 = atomikosProperties56.getConsoleFileCount();
        java.util.Properties properties60 = null;
        java.util.Properties properties61 = new java.util.Properties(properties60);
        boolean boolean62 = properties61.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration63 = properties61.elements();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet64 = properties61.entrySet();
        boolean boolean66 = properties46.replace((java.lang.Object) atomikosProperties56, (java.lang.Object) properties61, (java.lang.Object) 1);
        java.util.Properties properties67 = null;
        java.util.Properties properties68 = new java.util.Properties(properties67);
        boolean boolean69 = properties68.isEmpty();
        boolean boolean70 = properties68.isEmpty();
        properties61.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties68);
        boolean boolean72 = properties28.containsKey((java.lang.Object) properties61);
        java.lang.String str75 = properties61.getProperty("", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objSet5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertNotNull(objEnumeration32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objSet37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "{}");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "{}" + "'", str40, "{}");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objEnumeration44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objEntrySet48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 5 + "'", int50 == 5);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(objEnumeration63);
        org.junit.Assert.assertNotNull(objEntrySet64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str75, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=-1, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
    }

    @Test
    public void test00500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00500");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) (byte) -1);
        atomikosProperties0.setAllowSubTransactions(false);
        atomikosProperties0.setTransactionManagerUniqueName("tmlog");
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
    }
}
