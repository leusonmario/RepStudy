/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 08 18:45:10 GMT 2021
 */

package org.springframework.boot.jta.atomikos;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.springframework.boot.jta.atomikos.AtomikosLoggingLevel;
import org.springframework.boot.jta.atomikos.AtomikosProperties;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AtomikosProperties_ESTest extends AtomikosProperties_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      
      String string0 = "oltpFrcWtry_interval";
      atomikosProperties0.setConsoleFileName(string0);
      assertEquals("oltpFrcWtry_interval", atomikosProperties0.getConsoleFileName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      
      atomikosProperties0.setLogBaseDir(string0);
      assertEquals("oltpFrcWtry_interval", atomikosProperties0.getConsoleFileName());
      assertEquals("oltpFrcWtry_interval", atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      long long0 = 1869L;
      atomikosProperties0.setMaxTimeout(long0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1869L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      AtomikosLoggingLevel atomikosLoggingLevel0 = AtomikosLoggingLevel.INFO;
      atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1869L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      String string0 = "hS^\"5egr~T0&'M";
      atomikosProperties0.setTransactionManagerUniqueName(string0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1869L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("hS^\"5egr~T0&'M", atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      atomikosProperties0.setCheckpointInterval(long0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1869L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("hS^\"5egr~T0&'M", atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1869L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      int int0 = (-1823);
      atomikosProperties0.setConsoleFileCount(int0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1869L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1823), atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("hS^\"5egr~T0&'M", atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1869L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      atomikosProperties0.setLogBaseName(string0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1869L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1823), atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("hS^\"5egr~T0&'M", atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1869L, atomikosProperties0.getCheckpointInterval());
      assertEquals("hS^\"5egr~T0&'M", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = atomikosProperties0.getRecovery();
      assertNotNull(atomikosProperties_Recovery0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1869L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1823), atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("hS^\"5egr~T0&'M", atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1869L, atomikosProperties0.getCheckpointInterval());
      assertEquals("hS^\"5egr~T0&'M", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      
      atomikosProperties_Recovery0.setDelay(long0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1869L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1823), atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("hS^\"5egr~T0&'M", atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1869L, atomikosProperties0.getCheckpointInterval());
      assertEquals("hS^\"5egr~T0&'M", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(1869L, atomikosProperties_Recovery0.getDelay());
      
      atomikosProperties_Recovery0.setMaxRetries(int0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1869L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1823), atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("hS^\"5egr~T0&'M", atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1869L, atomikosProperties0.getCheckpointInterval());
      assertEquals("hS^\"5egr~T0&'M", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals((-1823), atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(1869L, atomikosProperties_Recovery0.getDelay());
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      boolean boolean0 = atomikosProperties0.isForceShutdownOnVmExit();
      assertFalse(boolean0);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      atomikosProperties0.setForceShutdownOnVmExit(boolean0);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      long long0 = (-163L);
      atomikosProperties0.setSerialJtaTransactions(boolean0);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      int int0 = (-65);
      atomikosProperties0.setMaxActives(int0);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-65), atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      atomikosProperties0.setDefaultJtaTimeout(long0);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals((-163L), atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-65), atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      atomikosProperties0.setConsoleFileLimit(int0);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-65), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals((-163L), atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-65), atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      atomikosProperties0.setEnableLogging(boolean0);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-65), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals((-163L), atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-65), atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      Properties properties0 = atomikosProperties0.asProperties();
      assertNotNull(properties0);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-65), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals((-163L), atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-65), atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(18, properties0.size());
      assertFalse(properties0.isEmpty());
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = new AtomikosProperties.Recovery();
      assertNotNull(atomikosProperties_Recovery0);
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      
      long long0 = 18L;
      atomikosProperties_Recovery0.setRetryInterval(long0);
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(18L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      
      atomikosProperties_Recovery0.setForgetOrphanedLogEntriesDelay(long0);
      assertEquals(18L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(18L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      boolean boolean0 = true;
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      String string0 = "9";
      atomikosProperties0.setService(string0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("9", atomikosProperties0.getService());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      atomikosProperties0.setAllowSubTransactions(boolean0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("9", atomikosProperties0.getService());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      atomikosProperties0.setOutputDir(string0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("9", atomikosProperties0.getService());
      assertEquals("9", atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = new AtomikosProperties.Recovery();
      assertNotNull(atomikosProperties_Recovery0);
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      
      long long0 = atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay();
      assertEquals(86400000L, long0);
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      
      AtomikosLoggingLevel atomikosLoggingLevel0 = atomikosProperties0.getConsoleLogLevel();
      assertEquals(AtomikosLoggingLevel.WARN, atomikosLoggingLevel0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      
      long long0 = 0L;
      atomikosProperties0.setMaxTimeout(long0);
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      
      long long1 = 0L;
      atomikosProperties0.setCheckpointInterval(long1);
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      long long0 = (-3292L);
      atomikosProperties0.setDefaultJtaTimeout(long0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals((-3292L), atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      
      Properties properties0 = atomikosProperties0.asProperties();
      assertNotNull(properties0);
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertFalse(properties0.isEmpty());
      assertEquals(18, properties0.size());
      
      boolean boolean0 = true;
      atomikosProperties0.setAllowSubTransactions(boolean0);
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      
      boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      
      String string0 = "IPCLXMW(;z.?Bs";
      atomikosProperties0.setTransactionManagerUniqueName(string0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("IPCLXMW(;z.?Bs", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      boolean boolean0 = true;
      atomikosProperties0.setSerialJtaTransactions(boolean0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = atomikosProperties0.getRecovery();
      assertNotNull(atomikosProperties_Recovery0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      
      long long0 = atomikosProperties_Recovery0.getRetryInterval();
      assertEquals(10000L, long0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      
      boolean boolean0 = atomikosProperties0.isAllowSubTransactions();
      assertTrue(boolean0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      
      String string0 = "=Hpa";
      atomikosProperties0.setConsoleFileName(string0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("=Hpa", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      
      atomikosProperties0.setForceShutdownOnVmExit(boolean0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("=Hpa", atomikosProperties0.getConsoleFileName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      
      String string0 = "";
      atomikosProperties0.setLogBaseName(string0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("", atomikosProperties0.getLogBaseName());
      
      long long0 = atomikosProperties0.getCheckpointInterval();
      assertEquals(500L, long0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("", atomikosProperties0.getLogBaseName());
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = new AtomikosProperties.Recovery();
      assertNotNull(atomikosProperties_Recovery0);
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      
      int int0 = (-709);
      atomikosProperties_Recovery0.setMaxRetries(int0);
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals((-709), atomikosProperties_Recovery0.getMaxRetries());
      
      boolean boolean0 = false;
      atomikosProperties0.setForceShutdownOnVmExit(boolean0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("", atomikosProperties0.getLogBaseName());
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      AtomikosLoggingLevel atomikosLoggingLevel0 = AtomikosLoggingLevel.INFO;
      atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      String string0 = "s8_";
      atomikosProperties0.setService(string0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("s8_", atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      int int0 = (-777);
      atomikosProperties0.setConsoleFileCount(int0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-777), atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("s8_", atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = new AtomikosProperties.Recovery();
      assertNotNull(atomikosProperties_Recovery0);
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      
      long long0 = 3331L;
      atomikosProperties_Recovery0.setForgetOrphanedLogEntriesDelay(long0);
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(3331L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      
      long long1 = atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay();
      assertTrue(long1 == long0);
      assertEquals(3331L, long1);
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(3331L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      boolean boolean0 = true;
      atomikosProperties0.setAllowSubTransactions(boolean0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      int int0 = atomikosProperties0.getConsoleFileLimit();
      assertEquals((-1), int0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = new AtomikosProperties.Recovery();
      assertNotNull(atomikosProperties_Recovery0);
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      long long0 = 861L;
      atomikosProperties_Recovery0.setDelay(long0);
      assertEquals(861L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      long long1 = atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay();
      assertFalse(long1 == long0);
      assertEquals(86400000L, long1);
      assertEquals(861L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      atomikosProperties0.setDefaultJtaTimeout(long0);
      assertFalse(long0 == long1);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(861L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      
      boolean boolean0 = false;
      atomikosProperties0.setEnableLogging(boolean0);
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = atomikosProperties0.getRecovery();
      assertNotNull(atomikosProperties_Recovery0);
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      
      int int0 = 3;
      atomikosProperties_Recovery0.setMaxRetries(int0);
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(3, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = atomikosProperties0.getRecovery();
      assertNotNull(atomikosProperties_Recovery0);
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      
      long long0 = 786L;
      atomikosProperties_Recovery0.setRetryInterval(long0);
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(786L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      
      long long1 = atomikosProperties_Recovery0.getDelay();
      assertFalse(long1 == long0);
      assertEquals(10000L, long1);
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(786L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      String string0 = "output_dir";
      atomikosProperties0.setOutputDir(string0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("output_dir", atomikosProperties0.getOutputDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      String string1 = atomikosProperties0.getOutputDir();
      assertNotNull(string1);
      assertEquals("output_dir", string1);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("output_dir", atomikosProperties0.getOutputDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertSame(string1, string0);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      
      int int0 = 0;
      atomikosProperties0.setMaxActives(int0);
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      
      long long0 = 1L;
      atomikosProperties0.setMaxTimeout(long0);
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(1L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      
      String string0 = "Kz\"X8bp6l6bVsK:[vH";
      atomikosProperties0.setConsoleFileName(string0);
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("Kz\"X8bp6l6bVsK:[vH", atomikosProperties0.getConsoleFileName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      
      String string1 = "";
      atomikosProperties0.setLogBaseDir(string1);
      assertFalse(string1.equals((Object)string0));
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("Kz\"X8bp6l6bVsK:[vH", atomikosProperties0.getConsoleFileName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNotSame(string1, string0);
      
      String string2 = atomikosProperties0.getTransactionManagerUniqueName();
      assertNull(string2);
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("Kz\"X8bp6l6bVsK:[vH", atomikosProperties0.getConsoleFileName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      
      boolean boolean0 = true;
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      
      String string0 = "";
      atomikosProperties0.setTransactionManagerUniqueName(string0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      
      int int0 = 0;
      atomikosProperties0.setConsoleFileLimit(int0);
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      
      String string0 = "max_actives";
      atomikosProperties0.setService(string0);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("max_actives", atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      
      boolean boolean0 = atomikosProperties0.isThreadedTwoPhaseCommit();
      assertFalse(boolean0);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("max_actives", atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      
      int int0 = atomikosProperties0.getMaxActives();
      assertEquals(50, int0);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("max_actives", atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = new AtomikosProperties.Recovery();
      assertNotNull(atomikosProperties_Recovery0);
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      long long0 = atomikosProperties_Recovery0.getDelay();
      assertEquals(10000L, long0);
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      atomikosProperties0.setTransactionManagerUniqueName(string0);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("max_actives", atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("max_actives", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      
      atomikosProperties_Recovery0.setRetryInterval(int0);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("max_actives", atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("max_actives", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(50L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      String string0 = "WARN";
      atomikosProperties0.setService(string0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("WARN", atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      String string1 = "";
      atomikosProperties0.setConsoleFileName(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals("WARN", atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNotSame(string1, string0);
      
      int int0 = 0;
      atomikosProperties0.setConsoleFileLimit(int0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals("WARN", atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      boolean boolean0 = false;
      atomikosProperties0.setSerialJtaTransactions(boolean0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals("WARN", atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      boolean boolean1 = false;
      atomikosProperties0.setForceShutdownOnVmExit(boolean1);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals("WARN", atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean1);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals("WARN", atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      String string2 = "2M\\K6ceXj";
      atomikosProperties0.setService(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("2M\\K6ceXj", atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      atomikosProperties0.setAllowSubTransactions(boolean1);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("2M\\K6ceXj", atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      long long0 = 0L;
      int int1 = (-662);
      atomikosProperties0.setConsoleFileCount(int1);
      assertFalse(int1 == int0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("2M\\K6ceXj", atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals((-662), atomikosProperties0.getConsoleFileCount());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      atomikosProperties0.setCheckpointInterval(long0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("2M\\K6ceXj", atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals((-662), atomikosProperties0.getConsoleFileCount());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      boolean boolean2 = atomikosProperties0.isSerialJtaTransactions();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("2M\\K6ceXj", atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals((-662), atomikosProperties0.getConsoleFileCount());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      String string3 = atomikosProperties0.getService();
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("2M\\K6ceXj", string3);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("2M\\K6ceXj", atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals((-662), atomikosProperties0.getConsoleFileCount());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertNotSame(string3, string0);
      
      AtomikosLoggingLevel atomikosLoggingLevel0 = AtomikosLoggingLevel.INFO;
      atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("2M\\K6ceXj", atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals((-662), atomikosProperties0.getConsoleFileCount());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      String string0 = "LiOi$c8,+r:lw[9Q";
      atomikosProperties0.setTransactionManagerUniqueName(string0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("LiOi$c8,+r:lw[9Q", atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      boolean boolean0 = atomikosProperties0.isSerialJtaTransactions();
      assertTrue(boolean0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("LiOi$c8,+r:lw[9Q", atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      atomikosProperties0.setAllowSubTransactions(boolean0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("LiOi$c8,+r:lw[9Q", atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      long long0 = (-2239L);
      atomikosProperties0.setMaxTimeout(long0);
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("LiOi$c8,+r:lw[9Q", atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-2239L), atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      String string1 = null;
      atomikosProperties0.setCheckpointInterval(long0);
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-2239L), atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("LiOi$c8,+r:lw[9Q", atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-2239L), atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      atomikosProperties0.setTransactionManagerUniqueName(string1);
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-2239L), atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-2239L), atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      String string2 = atomikosProperties0.getOutputDir();
      assertNull(string2);
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-2239L), atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-2239L), atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      boolean boolean1 = false;
      atomikosProperties0.setAllowSubTransactions(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-2239L), atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-2239L), atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      
      boolean boolean2 = false;
      atomikosProperties0.setSerialJtaTransactions(boolean2);
      assertFalse(boolean2 == boolean0);
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-2239L), atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-2239L), atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      
      atomikosProperties0.setEnableLogging(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-2239L), atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-2239L), atomikosProperties0.getMaxTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      
      atomikosProperties0.setDefaultJtaTimeout(long0);
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-2239L), atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-2239L), atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-2239L), atomikosProperties0.getMaxTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      String string0 = "INFO";
      atomikosProperties0.setConsoleFileName(string0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("INFO", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      boolean boolean0 = false;
      atomikosProperties0.setForceShutdownOnVmExit(boolean0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("INFO", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      long long0 = atomikosProperties0.getMaxTimeout();
      assertEquals(300000L, long0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("INFO", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      
      boolean boolean0 = atomikosProperties0.isEnableLogging();
      assertTrue(boolean0);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = atomikosProperties0.getRecovery();
      assertNotNull(atomikosProperties_Recovery0);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      
      long long0 = atomikosProperties_Recovery0.getDelay();
      assertEquals(10000L, long0);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = new AtomikosProperties.Recovery();
      assertNotNull(atomikosProperties_Recovery0);
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      
      int int0 = 0;
      int int1 = (-1);
      atomikosProperties_Recovery0.setMaxRetries(int1);
      assertFalse(int1 == int0);
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals((-1), atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      long long0 = 300000L;
      atomikosProperties_Recovery0.setForgetOrphanedLogEntriesDelay(long0);
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals((-1), atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(300000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      atomikosProperties_Recovery0.setMaxRetries(int0);
      assertFalse(int0 == int1);
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(0, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(300000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      long long1 = (-1L);
      atomikosProperties_Recovery0.setRetryInterval(long1);
      assertFalse(long1 == long0);
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(0, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals((-1L), atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(300000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      long long2 = 1L;
      atomikosProperties_Recovery0.setRetryInterval(long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(0, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(1L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(300000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      String string0 = atomikosProperties0.getLogBaseDir();
      assertNull(string0);
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      long long0 = (-3280L);
      atomikosProperties0.setDefaultJtaTimeout(long0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals((-3280L), atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      String string0 = atomikosProperties0.getLogBaseName();
      assertNotNull(string0);
      assertEquals("tmlog", string0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals((-3280L), atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      String string1 = atomikosProperties0.getConsoleFileName();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("tm.out", string1);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals((-3280L), atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNotSame(string1, string0);
      
      String string2 = atomikosProperties0.getLogBaseName();
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("tmlog", string2);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals((-3280L), atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertSame(string2, string0);
      assertNotSame(string2, string1);
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      Properties properties0 = atomikosProperties0.asProperties();
      assertNotNull(properties0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(properties0.isEmpty());
      assertEquals(18, properties0.size());
      
      AtomikosLoggingLevel atomikosLoggingLevel0 = AtomikosLoggingLevel.WARN;
      atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      String string0 = "";
      atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      atomikosProperties0.setService(string0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      atomikosProperties0.setOutputDir(string0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getService());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      String string1 = atomikosProperties0.getConsoleFileName();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("tm.out", string1);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getService());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNotSame(string1, string0);
      
      long long0 = atomikosProperties0.getMaxTimeout();
      assertEquals(300000L, long0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getService());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      boolean boolean0 = atomikosProperties0.isEnableLogging();
      assertTrue(boolean0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getService());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = new AtomikosProperties.Recovery();
      assertNotNull(atomikosProperties_Recovery0);
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      
      atomikosProperties_Recovery0.setForgetOrphanedLogEntriesDelay(long0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getService());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(300000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      
      int int0 = 78;
      atomikosProperties_Recovery0.setMaxRetries(int0);
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(300000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(78, atomikosProperties_Recovery0.getMaxRetries());
      
      long long1 = 1069L;
      long long2 = 0L;
      atomikosProperties_Recovery0.setDelay(long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(300000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(0L, atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(78, atomikosProperties_Recovery0.getMaxRetries());
      
      atomikosProperties_Recovery0.setForgetOrphanedLogEntriesDelay(long1);
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertEquals(0L, atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(1069L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(78, atomikosProperties_Recovery0.getMaxRetries());
      
      long long3 = 0L;
      atomikosProperties_Recovery0.setDelay(long3);
      assertFalse(long3 == long1);
      assertFalse(long3 == long0);
      assertEquals(0L, atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(1069L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(78, atomikosProperties_Recovery0.getMaxRetries());
      
      atomikosProperties_Recovery0.setRetryInterval(long0);
      assertFalse(long0 == long3);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getService());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(0L, atomikosProperties_Recovery0.getDelay());
      assertEquals(1069L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(78, atomikosProperties_Recovery0.getMaxRetries());
      
      long long4 = 1L;
      atomikosProperties0.setCheckpointInterval(long4);
      assertFalse(long4 == long0);
      assertFalse(long4 == long3);
      assertFalse(long4 == long2);
      assertFalse(long4 == long1);
      assertEquals(1L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getService());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      boolean boolean1 = true;
      atomikosProperties0.setAllowSubTransactions(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getService());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      String string2 = atomikosProperties0.getLogBaseDir();
      assertNull(string2);
      assertEquals(1L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getService());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      String string3 = atomikosProperties0.getService();
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(1L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getService());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNotSame(string3, string1);
      assertSame(string3, string0);
      
      boolean boolean2 = atomikosProperties0.isThreadedTwoPhaseCommit();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(1L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getService());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      String string4 = atomikosProperties0.getService();
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      assertEquals(1L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getService());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertSame(string4, string3);
      assertSame(string4, string0);
      assertNotSame(string4, string1);
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      int int0 = (-2650);
      atomikosProperties0.setConsoleFileLimit(int0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-2650), atomikosProperties0.getConsoleFileLimit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      boolean boolean0 = false;
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-2650), atomikosProperties0.getConsoleFileLimit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      boolean boolean1 = false;
      atomikosProperties0.setMaxTimeout(int0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-2650L), atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-2650), atomikosProperties0.getConsoleFileLimit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      int int1 = 1;
      atomikosProperties0.setConsoleFileCount(int1);
      assertFalse(int1 == int0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-2650L), atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-2650), atomikosProperties0.getConsoleFileLimit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      atomikosProperties0.setConsoleFileCount(int0);
      assertFalse(int0 == int1);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-2650L), atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals((-2650), atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-2650), atomikosProperties0.getConsoleFileLimit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean1);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-2650L), atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals((-2650), atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-2650), atomikosProperties0.getConsoleFileLimit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      AtomikosLoggingLevel atomikosLoggingLevel0 = AtomikosLoggingLevel.DEBUG;
      atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-2650L), atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals((-2650), atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-2650), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      atomikosProperties0.setSerialJtaTransactions(boolean1);
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-2650L), atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals((-2650), atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-2650), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      atomikosProperties0.setConsoleFileCount(int0);
      assertFalse(int0 == int1);
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-2650L), atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals((-2650), atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-2650), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      int int2 = atomikosProperties0.getConsoleFileCount();
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-2650), int2);
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-2650L), atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals((-2650), atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-2650), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      boolean boolean0 = true;
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      long long0 = atomikosProperties0.getDefaultJtaTimeout();
      assertEquals(10000L, long0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      int int0 = atomikosProperties0.getConsoleFileLimit();
      assertEquals((-1), int0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      
      long long0 = (-2310L);
      atomikosProperties0.setDefaultJtaTimeout(long0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-2310L), atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      
      int int0 = 0;
      long long1 = (-389L);
      atomikosProperties0.setDefaultJtaTimeout(long1);
      assertFalse(long1 == long0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-389L), atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      
      Properties properties0 = atomikosProperties0.asProperties();
      assertNotNull(properties0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-389L), atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(18, properties0.size());
      assertFalse(properties0.isEmpty());
      
      boolean boolean0 = true;
      AtomikosLoggingLevel atomikosLoggingLevel0 = AtomikosLoggingLevel.INFO;
      atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-389L), atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      
      atomikosProperties0.setSerialJtaTransactions(boolean0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-389L), atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      
      String string0 = "console_file_limit";
      atomikosProperties0.setAllowSubTransactions(boolean0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-389L), atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      
      String string1 = "com.atomikos.icatch.";
      atomikosProperties0.setOutputDir(string0);
      assertFalse(string0.equals((Object)string1));
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("console_file_limit", atomikosProperties0.getOutputDir());
      assertEquals((-389L), atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNotSame(string0, string1);
      
      AtomikosLoggingLevel atomikosLoggingLevel1 = AtomikosLoggingLevel.WARN;
      atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel1);
      assertFalse(atomikosLoggingLevel1.equals((Object)atomikosLoggingLevel0));
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("console_file_limit", atomikosProperties0.getOutputDir());
      assertEquals((-389L), atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNotSame(atomikosLoggingLevel1, atomikosLoggingLevel0);
      
      atomikosProperties0.setOutputDir(string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("com.atomikos.icatch.", atomikosProperties0.getOutputDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-389L), atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNotSame(string1, string0);
      
      atomikosProperties0.setLogBaseDir(string0);
      assertFalse(string0.equals((Object)string1));
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("console_file_limit", atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("com.atomikos.icatch.", atomikosProperties0.getOutputDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-389L), atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNotSame(string0, string1);
      
      atomikosProperties0.setMaxActives(int0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("console_file_limit", atomikosProperties0.getLogBaseDir());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("com.atomikos.icatch.", atomikosProperties0.getOutputDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-389L), atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      
      boolean boolean1 = atomikosProperties0.isThreadedTwoPhaseCommit();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("console_file_limit", atomikosProperties0.getLogBaseDir());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("com.atomikos.icatch.", atomikosProperties0.getOutputDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-389L), atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      
      String string2 = atomikosProperties0.getLogBaseDir();
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("console_file_limit", string2);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("console_file_limit", atomikosProperties0.getLogBaseDir());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("com.atomikos.icatch.", atomikosProperties0.getOutputDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-389L), atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      
      String string3 = atomikosProperties0.getLogBaseName();
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("tmlog", string3);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("console_file_limit", atomikosProperties0.getLogBaseDir());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("com.atomikos.icatch.", atomikosProperties0.getOutputDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-389L), atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      
      int int1 = atomikosProperties0.getMaxActives();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("console_file_limit", atomikosProperties0.getLogBaseDir());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("com.atomikos.icatch.", atomikosProperties0.getOutputDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-389L), atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      
      AtomikosLoggingLevel atomikosLoggingLevel2 = AtomikosLoggingLevel.DEBUG;
      atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel2);
      assertFalse(atomikosLoggingLevel2.equals((Object)atomikosLoggingLevel0));
      assertFalse(atomikosLoggingLevel2.equals((Object)atomikosLoggingLevel1));
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("console_file_limit", atomikosProperties0.getLogBaseDir());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("com.atomikos.icatch.", atomikosProperties0.getOutputDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-389L), atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNotSame(atomikosLoggingLevel2, atomikosLoggingLevel0);
      assertNotSame(atomikosLoggingLevel2, atomikosLoggingLevel1);
      
      String string4 = atomikosProperties0.getLogBaseDir();
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("console_file_limit", string4);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("console_file_limit", atomikosProperties0.getLogBaseDir());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("com.atomikos.icatch.", atomikosProperties0.getOutputDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-389L), atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertSame(string4, string0);
      assertSame(string4, string2);
      
      boolean boolean2 = atomikosProperties0.isSerialJtaTransactions();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("console_file_limit", atomikosProperties0.getLogBaseDir());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("com.atomikos.icatch.", atomikosProperties0.getOutputDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-389L), atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      
      String string5 = atomikosProperties0.getService();
      assertNull(string5);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("console_file_limit", atomikosProperties0.getLogBaseDir());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("com.atomikos.icatch.", atomikosProperties0.getOutputDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-389L), atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      
      String string6 = atomikosProperties0.getConsoleFileName();
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("tm.out", string6);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("console_file_limit", atomikosProperties0.getLogBaseDir());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("com.atomikos.icatch.", atomikosProperties0.getOutputDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-389L), atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string2);
      assertNotSame(string6, string3);
      assertNotSame(string6, string4);
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = new AtomikosProperties.Recovery();
      assertNotNull(atomikosProperties_Recovery0);
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      
      int int0 = 0;
      atomikosProperties_Recovery0.setMaxRetries(int0);
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(0, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      
      long long0 = 0L;
      atomikosProperties_Recovery0.setDelay(long0);
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(0, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(0L, atomikosProperties_Recovery0.getDelay());
      
      atomikosProperties_Recovery0.setMaxRetries(int0);
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(0, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(0L, atomikosProperties_Recovery0.getDelay());
      
      int int1 = atomikosProperties_Recovery0.getMaxRetries();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(0, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(0L, atomikosProperties_Recovery0.getDelay());
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      
      int int2 = atomikosProperties0.getConsoleFileCount();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      String string0 = "";
      atomikosProperties0.setLogBaseDir(string0);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = new AtomikosProperties.Recovery();
      assertNotNull(atomikosProperties_Recovery0);
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      
      atomikosProperties0.setTransactionManagerUniqueName(string0);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      
      boolean boolean0 = false;
      atomikosProperties0.setSerialJtaTransactions(boolean0);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      
      int int0 = atomikosProperties_Recovery0.getMaxRetries();
      assertEquals(5, int0);
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      
      boolean boolean1 = false;
      atomikosProperties_Recovery0.setRetryInterval(int0);
      assertEquals(5L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      
      long long0 = 0L;
      atomikosProperties_Recovery0.setDelay(long0);
      assertEquals(5L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(0L, atomikosProperties_Recovery0.getDelay());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      atomikosProperties0.setForceShutdownOnVmExit(boolean1);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      
      atomikosProperties_Recovery0.setDelay(int0);
      assertEquals(5L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      String string1 = atomikosProperties0.getTransactionManagerUniqueName();
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertSame(string1, string0);
      
      String string2 = "";
      atomikosProperties0.setService(string2);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("", atomikosProperties0.getService());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertSame(string2, string1);
      assertSame(string2, string0);
      
      atomikosProperties0.setSerialJtaTransactions(boolean1);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("", atomikosProperties0.getService());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      
      atomikosProperties0.setDefaultJtaTimeout(int0);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("", atomikosProperties0.getService());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(5L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(5L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      atomikosProperties0.setConsoleFileName(string1);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("", atomikosProperties0.getService());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(5L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertSame(string1, string0);
      assertSame(string1, string2);
      
      long long1 = (-902L);
      atomikosProperties0.setMaxTimeout(long1);
      assertFalse(long1 == long0);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getService());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(5L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-902L), atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      
      int int1 = atomikosProperties_Recovery0.getMaxRetries();
      assertTrue(int1 == int0);
      assertEquals(5, int1);
      assertEquals(5L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      boolean boolean0 = true;
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      Properties properties0 = atomikosProperties0.asProperties();
      assertNotNull(properties0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(properties0.isEmpty());
      assertEquals(18, properties0.size());
      
      String string0 = "";
      AtomikosLoggingLevel atomikosLoggingLevel0 = AtomikosLoggingLevel.WARN;
      atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      atomikosProperties0.setOutputDir(string0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      long long0 = atomikosProperties0.getCheckpointInterval();
      assertEquals(500L, long0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      atomikosProperties0.setConsoleFileName(string0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      Properties properties1 = atomikosProperties0.asProperties();
      assertFalse(properties1.equals((Object)properties0));
      assertNotNull(properties1);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(properties1.isEmpty());
      assertEquals(19, properties1.size());
      assertNotSame(properties1, properties0);
      
      String string1 = "A,d0M\\Wp#b#TL'9";
      atomikosProperties0.setLogBaseName(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertEquals("A,d0M\\Wp#b#TL'9", atomikosProperties0.getLogBaseName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNotSame(string1, string0);
      
      boolean boolean1 = true;
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean1);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertEquals("A,d0M\\Wp#b#TL'9", atomikosProperties0.getLogBaseName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      Properties properties2 = atomikosProperties0.asProperties();
      assertFalse(properties2.equals((Object)properties1));
      assertFalse(properties2.equals((Object)properties0));
      assertNotNull(properties2);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertEquals("A,d0M\\Wp#b#TL'9", atomikosProperties0.getLogBaseName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(properties2.isEmpty());
      assertEquals(19, properties2.size());
      assertNotSame(properties2, properties1);
      assertNotSame(properties2, properties0);
      
      AtomikosLoggingLevel atomikosLoggingLevel1 = AtomikosLoggingLevel.WARN;
      atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel1);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertEquals("A,d0M\\Wp#b#TL'9", atomikosProperties0.getLogBaseName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertSame(atomikosLoggingLevel1, atomikosLoggingLevel0);
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = atomikosProperties0.getRecovery();
      assertNotNull(atomikosProperties_Recovery0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertEquals("A,d0M\\Wp#b#TL'9", atomikosProperties0.getLogBaseName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      
      int int0 = 5223;
      atomikosProperties_Recovery0.setMaxRetries(int0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertEquals("A,d0M\\Wp#b#TL'9", atomikosProperties0.getLogBaseName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5223, atomikosProperties_Recovery0.getMaxRetries());
      
      String string2 = atomikosProperties0.getOutputDir();
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertEquals("A,d0M\\Wp#b#TL'9", atomikosProperties0.getLogBaseName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      
      atomikosProperties0.setLogBaseName(string0);
      assertFalse(string0.equals((Object)string1));
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      
      atomikosProperties_Recovery0.setRetryInterval(int0);
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5223L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5223, atomikosProperties_Recovery0.getMaxRetries());
      
      atomikosProperties_Recovery0.setDelay(int0);
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(5223L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5223, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(5223L, atomikosProperties_Recovery0.getDelay());
      
      long long1 = 0L;
      atomikosProperties_Recovery0.setForgetOrphanedLogEntriesDelay(long1);
      assertFalse(long1 == long0);
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5223L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5223, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(5223L, atomikosProperties_Recovery0.getDelay());
      
      String string3 = "Mm}54dzd&";
      atomikosProperties0.setService(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("Mm}54dzd&", atomikosProperties0.getService());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      
      int int1 = atomikosProperties_Recovery0.getMaxRetries();
      assertTrue(int1 == int0);
      assertEquals(5223, int1);
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("Mm}54dzd&", atomikosProperties0.getService());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5223L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5223, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(5223L, atomikosProperties_Recovery0.getDelay());
      
      long long2 = atomikosProperties0.getCheckpointInterval();
      assertFalse(long2 == long1);
      assertTrue(long2 == long0);
      assertEquals(500L, long2);
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("Mm}54dzd&", atomikosProperties0.getService());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      
      boolean boolean0 = false;
      atomikosProperties0.setEnableLogging(boolean0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      
      String string0 = null;
      atomikosProperties0.setConsoleFileName(string0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getConsoleFileName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      String string1 = "";
      atomikosProperties0.setLogBaseName(string1);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getConsoleFileName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("", atomikosProperties0.getLogBaseName());
      
      int int0 = 1;
      atomikosProperties0.setMaxActives(int0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getConsoleFileName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("", atomikosProperties0.getLogBaseName());
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = new AtomikosProperties.Recovery();
      assertNotNull(atomikosProperties_Recovery0);
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      
      int int1 = 1075;
      atomikosProperties_Recovery0.setMaxRetries(int1);
      assertFalse(int1 == int0);
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(1075, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      
      int int2 = atomikosProperties_Recovery0.getMaxRetries();
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1075, int2);
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(1075, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      
      int int3 = 50;
      atomikosProperties_Recovery0.setMaxRetries(int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(50, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      
      boolean boolean1 = atomikosProperties0.isEnableLogging();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getConsoleFileName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("", atomikosProperties0.getLogBaseName());
      
      atomikosProperties0.setConsoleFileLimit(int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(50, atomikosProperties0.getConsoleFileLimit());
      assertEquals(1, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("", atomikosProperties0.getLogBaseName());
      
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(50, atomikosProperties0.getConsoleFileLimit());
      assertEquals(1, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("", atomikosProperties0.getLogBaseName());
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      String string0 = "";
      atomikosProperties0.setLogBaseDir(string0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      atomikosProperties0.setService(string0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      String string1 = "mYRx3u";
      long long0 = 0L;
      atomikosProperties0.setDefaultJtaTimeout(long0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      atomikosProperties0.setOutputDir(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("mYRx3u", atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNotSame(string1, string0);
      
      String string2 = atomikosProperties0.getLogBaseDir();
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals("mYRx3u", atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      
      boolean boolean0 = false;
      atomikosProperties0.setEnableLogging(boolean0);
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals("mYRx3u", atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      String string3 = null;
      atomikosProperties0.setLogBaseDir(string3);
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals("mYRx3u", atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = new AtomikosProperties.Recovery();
      assertNotNull(atomikosProperties_Recovery0);
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      
      long long1 = 1015L;
      atomikosProperties_Recovery0.setRetryInterval(long1);
      assertFalse(long1 == long0);
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(1015L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      
      atomikosProperties_Recovery0.setForgetOrphanedLogEntriesDelay(long0);
      assertFalse(long0 == long1);
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(1015L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(0L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      long long2 = atomikosProperties_Recovery0.getDelay();
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals(10000L, long2);
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(1015L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(0L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      AtomikosProperties.Recovery atomikosProperties_Recovery1 = atomikosProperties0.getRecovery();
      assertFalse(atomikosProperties_Recovery1.equals((Object)atomikosProperties_Recovery0));
      assertNotNull(atomikosProperties_Recovery1);
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals("mYRx3u", atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties_Recovery1.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery1.getDelay());
      assertEquals(5, atomikosProperties_Recovery1.getMaxRetries());
      assertEquals(86400000L, atomikosProperties_Recovery1.getForgetOrphanedLogEntriesDelay());
      assertNotSame(atomikosProperties_Recovery1, atomikosProperties_Recovery0);
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      
      AtomikosLoggingLevel atomikosLoggingLevel0 = AtomikosLoggingLevel.DEBUG;
      atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      
      String string0 = "WARN";
      atomikosProperties0.setTransactionManagerUniqueName(string0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("WARN", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      
      String string1 = "";
      long long0 = 103L;
      atomikosProperties0.setCheckpointInterval(long0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("WARN", atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(103L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      
      atomikosProperties0.setConsoleFileName(string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("WARN", atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(103L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNotSame(string1, string0);
      
      AtomikosLoggingLevel atomikosLoggingLevel1 = atomikosProperties0.getConsoleLogLevel();
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosLoggingLevel1);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("WARN", atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(103L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertSame(atomikosLoggingLevel1, atomikosLoggingLevel0);
      
      String string2 = atomikosProperties0.getConsoleFileName();
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("WARN", atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(103L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNotSame(string2, string0);
      assertSame(string2, string1);
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      
      long long0 = (-865L);
      atomikosProperties0.setMaxTimeout(long0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-865L), atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      
      boolean boolean0 = atomikosProperties0.isForceShutdownOnVmExit();
      assertFalse(boolean0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-865L), atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      
      long long1 = atomikosProperties0.getMaxTimeout();
      assertTrue(long1 == long0);
      assertEquals((-865L), long1);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-865L), atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      
      boolean boolean1 = false;
      atomikosProperties0.setSerialJtaTransactions(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-865L), atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-865L), atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      
      int int0 = 1578;
      atomikosProperties0.setConsoleFileCount(int0);
      assertEquals(1578, atomikosProperties0.getConsoleFileCount());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-865L), atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = new AtomikosProperties.Recovery();
      assertNotNull(atomikosProperties_Recovery0);
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      
      atomikosProperties_Recovery0.setRetryInterval(int0);
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(1578L, atomikosProperties_Recovery0.getRetryInterval());
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      String string0 = "`";
      boolean boolean0 = false;
      atomikosProperties0.setSerialJtaTransactions(boolean0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      atomikosProperties0.setAllowSubTransactions(boolean0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      atomikosProperties0.setService(string0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("`", atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      String string1 = atomikosProperties0.getOutputDir();
      assertNull(string1);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("`", atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      long long0 = atomikosProperties0.getCheckpointInterval();
      assertEquals(500L, long0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("`", atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      int int0 = atomikosProperties0.getMaxActives();
      assertEquals(50, int0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("`", atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      long long1 = 0L;
      atomikosProperties0.setMaxTimeout(long1);
      assertFalse(long1 == long0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("`", atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      String string2 = "!s.dZ6h61l;UFwdG";
      atomikosProperties0.setLogBaseDir(string1);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("`", atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      atomikosProperties0.setMaxActives(int0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("`", atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      atomikosProperties0.setTransactionManagerUniqueName(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("`", atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("!s.dZ6h61l;UFwdG", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNotSame(string2, string0);
      
      boolean boolean1 = atomikosProperties0.isAllowSubTransactions();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("`", atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("!s.dZ6h61l;UFwdG", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      String string3 = atomikosProperties0.getConsoleFileName();
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("tm.out", string3);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("`", atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("!s.dZ6h61l;UFwdG", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      
      String string4 = atomikosProperties0.getLogBaseName();
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("tmlog", string4);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("`", atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("!s.dZ6h61l;UFwdG", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      
      String string5 = atomikosProperties0.getLogBaseName();
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("tmlog", string5);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("`", atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("!s.dZ6h61l;UFwdG", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNotSame(string5, string0);
      assertSame(string5, string4);
      assertNotSame(string5, string3);
      assertNotSame(string5, string2);
      
      String string6 = atomikosProperties0.getConsoleFileName();
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("tm.out", string6);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("`", atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("!s.dZ6h61l;UFwdG", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNotSame(string6, string4);
      assertNotSame(string6, string5);
      assertNotSame(string6, string2);
      assertSame(string6, string3);
      assertNotSame(string6, string0);
      
      String string7 = "*A!sIOv7WU;>Ukfc";
      atomikosProperties0.setLogBaseName(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("`", atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("!s.dZ6h61l;UFwdG", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("*A!sIOv7WU;>Ukfc", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNotSame(string7, string3);
      assertNotSame(string7, string2);
      assertNotSame(string7, string0);
      assertNotSame(string7, string5);
      assertNotSame(string7, string4);
      assertNotSame(string7, string6);
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = new AtomikosProperties.Recovery();
      assertNotNull(atomikosProperties_Recovery0);
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      int int1 = 0;
      atomikosProperties_Recovery0.setMaxRetries(int1);
      assertFalse(int1 == int0);
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(0, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      
      String string0 = "Q7Q-3~<~3J-";
      atomikosProperties0.setConsoleFileName(string0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("Q7Q-3~<~3J-", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = atomikosProperties0.getRecovery();
      assertNotNull(atomikosProperties_Recovery0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("Q7Q-3~<~3J-", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      
      long long0 = (-2076L);
      atomikosProperties_Recovery0.setRetryInterval(long0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("Q7Q-3~<~3J-", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-2076L), atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      
      atomikosProperties_Recovery0.setForgetOrphanedLogEntriesDelay(long0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("Q7Q-3~<~3J-", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-2076L), atomikosProperties_Recovery0.getRetryInterval());
      assertEquals((-2076L), atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      
      long long1 = 832L;
      atomikosProperties_Recovery0.setForgetOrphanedLogEntriesDelay(long1);
      assertFalse(long1 == long0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("Q7Q-3~<~3J-", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-2076L), atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(832L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      long long2 = (-182L);
      atomikosProperties_Recovery0.setForgetOrphanedLogEntriesDelay(long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("Q7Q-3~<~3J-", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-2076L), atomikosProperties_Recovery0.getRetryInterval());
      assertEquals((-182L), atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      
      long long3 = atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay();
      assertFalse(long3 == long1);
      assertFalse(long3 == long0);
      assertTrue(long3 == long2);
      assertEquals((-182L), long3);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("Q7Q-3~<~3J-", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-2076L), atomikosProperties_Recovery0.getRetryInterval());
      assertEquals((-182L), atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      
      int int0 = 5;
      atomikosProperties0.setConsoleFileLimit(int0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("Q7Q-3~<~3J-", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(5, atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      
      int int1 = atomikosProperties_Recovery0.getMaxRetries();
      assertTrue(int1 == int0);
      assertEquals(5, int1);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("Q7Q-3~<~3J-", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(5, atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-2076L), atomikosProperties_Recovery0.getRetryInterval());
      assertEquals((-182L), atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      
      AtomikosProperties.Recovery atomikosProperties_Recovery1 = atomikosProperties0.getRecovery();
      assertNotNull(atomikosProperties_Recovery1);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("Q7Q-3~<~3J-", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(5, atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-2076L), atomikosProperties_Recovery1.getRetryInterval());
      assertEquals((-182L), atomikosProperties_Recovery1.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery1.getDelay());
      assertEquals(5, atomikosProperties_Recovery1.getMaxRetries());
      assertSame(atomikosProperties_Recovery1, atomikosProperties_Recovery0);
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      String string0 = "checkpoint_interval";
      atomikosProperties0.setLogBaseDir(string0);
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("checkpoint_interval", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      boolean boolean0 = true;
      atomikosProperties0.setAllowSubTransactions(boolean0);
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("checkpoint_interval", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      atomikosProperties0.setEnableLogging(boolean0);
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("checkpoint_interval", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      int int0 = atomikosProperties0.getConsoleFileLimit();
      assertEquals((-1), int0);
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("checkpoint_interval", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      atomikosProperties0.setMaxActives(int0);
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("checkpoint_interval", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      boolean boolean1 = true;
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean1);
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("checkpoint_interval", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals((-1), atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      String string1 = "J%fk&moxx;f";
      atomikosProperties0.setLogBaseName(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("J%fk&moxx;f", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("checkpoint_interval", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals((-1), atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNotSame(string1, string0);
      
      int int1 = atomikosProperties0.getMaxActives();
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("J%fk&moxx;f", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("checkpoint_interval", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals((-1), atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = new AtomikosProperties.Recovery();
      assertNotNull(atomikosProperties_Recovery0);
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      atomikosProperties_Recovery0.setMaxRetries(int0);
      assertTrue(int0 == int1);
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("J%fk&moxx;f", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("checkpoint_interval", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals((-1), atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals((-1), atomikosProperties_Recovery0.getMaxRetries());
      
      long long0 = atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay();
      assertEquals(86400000L, long0);
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals((-1), atomikosProperties_Recovery0.getMaxRetries());
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      
      String string0 = "";
      atomikosProperties0.setLogBaseName(string0);
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      
      int int0 = (-2062);
      atomikosProperties0.setConsoleFileCount(int0);
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-2062), atomikosProperties0.getConsoleFileCount());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      
      int int1 = 1761;
      boolean boolean0 = false;
      atomikosProperties0.setAllowSubTransactions(boolean0);
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-2062), atomikosProperties0.getConsoleFileCount());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      
      boolean boolean1 = false;
      atomikosProperties0.setSerialJtaTransactions(boolean1);
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-2062), atomikosProperties0.getConsoleFileCount());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      
      atomikosProperties0.setMaxActives(int1);
      assertFalse(int1 == int0);
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(1761, atomikosProperties0.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-2062), atomikosProperties0.getConsoleFileCount());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      
      boolean boolean2 = true;
      atomikosProperties0.setEnableLogging(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(1761, atomikosProperties0.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-2062), atomikosProperties0.getConsoleFileCount());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      
      atomikosProperties0.setService(string0);
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(1761, atomikosProperties0.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-2062), atomikosProperties0.getConsoleFileCount());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getService());
      
      Properties properties0 = atomikosProperties0.asProperties();
      assertNotNull(properties0);
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(1761, atomikosProperties0.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-2062), atomikosProperties0.getConsoleFileCount());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getService());
      assertFalse(properties0.isEmpty());
      assertEquals(19, properties0.size());
      
      atomikosProperties0.setConsoleFileName(string0);
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(1761, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-2062), atomikosProperties0.getConsoleFileCount());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getService());
      
      long long0 = atomikosProperties0.getDefaultJtaTimeout();
      assertEquals(10000L, long0);
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(1761, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-2062), atomikosProperties0.getConsoleFileCount());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getService());
      
      boolean boolean3 = atomikosProperties0.isThreadedTwoPhaseCommit();
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(1761, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-2062), atomikosProperties0.getConsoleFileCount());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getService());
      
      atomikosProperties0.setLogBaseName(string0);
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(1761, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-2062), atomikosProperties0.getConsoleFileCount());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getService());
      
      boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(1761, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-2062), atomikosProperties0.getConsoleFileCount());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getService());
      
      long long1 = atomikosProperties0.getCheckpointInterval();
      assertFalse(long1 == long0);
      assertEquals(500L, long1);
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(1761, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-2062), atomikosProperties0.getConsoleFileCount());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getService());
      
      String string1 = atomikosProperties0.getLogBaseName();
      assertNotNull(string1);
      assertEquals("", string1);
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(1761, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-2062), atomikosProperties0.getConsoleFileCount());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getService());
      assertSame(string1, string0);
      
      String string2 = atomikosProperties0.getOutputDir();
      assertNull(string2);
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(1761, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-2062), atomikosProperties0.getConsoleFileCount());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getService());
      
      int int2 = atomikosProperties0.getConsoleFileCount();
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-2062), int2);
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(1761, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-2062), atomikosProperties0.getConsoleFileCount());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getService());
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = new AtomikosProperties.Recovery();
      assertNotNull(atomikosProperties_Recovery0);
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      int int0 = 3;
      atomikosProperties_Recovery0.setMaxRetries(int0);
      assertEquals(3, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      long long0 = 1L;
      int int1 = 0;
      atomikosProperties_Recovery0.setMaxRetries(int1);
      assertFalse(int1 == int0);
      assertEquals(0, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      atomikosProperties_Recovery0.setForgetOrphanedLogEntriesDelay(long0);
      assertEquals(0, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(1L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      
      int int2 = 1083;
      atomikosProperties_Recovery0.setMaxRetries(int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(1083, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      
      long long1 = atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay();
      assertTrue(long1 == long0);
      assertEquals(1L, long1);
      assertEquals(1L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(1083, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      
      long long2 = (-3806L);
      boolean boolean0 = false;
      atomikosProperties0.setAllowSubTransactions(boolean0);
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      
      atomikosProperties0.setCheckpointInterval(long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-3806L), atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      
      int int3 = 4081;
      atomikosProperties_Recovery0.setMaxRetries(int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(1L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(4081, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      
      String string0 = "'6Az&Xf}ph{A[Ea-nI9";
      atomikosProperties0.setTransactionManagerUniqueName(string0);
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("'6Az&Xf}ph{A[Ea-nI9", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-3806L), atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      
      atomikosProperties0.setMaxActives(int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("'6Az&Xf}ph{A[Ea-nI9", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-3806L), atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      
      atomikosProperties0.setOutputDir(string0);
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("'6Az&Xf}ph{A[Ea-nI9", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-3806L), atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("'6Az&Xf}ph{A[Ea-nI9", atomikosProperties0.getOutputDir());
      
      boolean boolean1 = false;
      atomikosProperties0.setAllowSubTransactions(boolean1);
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("'6Az&Xf}ph{A[Ea-nI9", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-3806L), atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("'6Az&Xf}ph{A[Ea-nI9", atomikosProperties0.getOutputDir());
      
      long long3 = atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay();
      assertTrue(long3 == long0);
      assertFalse(long3 == long2);
      assertTrue(long3 == long1);
      assertEquals(1L, long3);
      assertEquals(1L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(4081, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      
      String string1 = atomikosProperties0.getTransactionManagerUniqueName();
      assertNotNull(string1);
      assertEquals("'6Az&Xf}ph{A[Ea-nI9", string1);
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("'6Az&Xf}ph{A[Ea-nI9", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-3806L), atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("'6Az&Xf}ph{A[Ea-nI9", atomikosProperties0.getOutputDir());
      assertSame(string1, string0);
      
      AtomikosLoggingLevel atomikosLoggingLevel0 = atomikosProperties0.getConsoleLogLevel();
      assertEquals(AtomikosLoggingLevel.WARN, atomikosLoggingLevel0);
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("'6Az&Xf}ph{A[Ea-nI9", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-3806L), atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("'6Az&Xf}ph{A[Ea-nI9", atomikosProperties0.getOutputDir());
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      String string0 = "";
      int int0 = 0;
      atomikosProperties0.setMaxActives(int0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      atomikosProperties0.setTransactionManagerUniqueName(string0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      long long0 = 0L;
      boolean boolean0 = true;
      boolean boolean1 = true;
      atomikosProperties0.setEnableLogging(boolean1);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      atomikosProperties0.setMaxTimeout(long0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      atomikosProperties0.setService(string0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      String string1 = atomikosProperties0.getLogBaseDir();
      assertNull(string1);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = atomikosProperties0.getRecovery();
      assertNotNull(atomikosProperties_Recovery0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      
      long long1 = 0L;
      atomikosProperties0.setMaxTimeout(long1);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      atomikosProperties0.setForceShutdownOnVmExit(boolean1);
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean1);
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      boolean boolean2 = atomikosProperties0.isEnableLogging();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      int int1 = atomikosProperties0.getMaxActives();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      AtomikosProperties.Recovery atomikosProperties_Recovery1 = atomikosProperties0.getRecovery();
      assertNotNull(atomikosProperties_Recovery1);
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties_Recovery1.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery1.getDelay());
      assertEquals(5, atomikosProperties_Recovery1.getMaxRetries());
      assertEquals(86400000L, atomikosProperties_Recovery1.getForgetOrphanedLogEntriesDelay());
      assertSame(atomikosProperties_Recovery1, atomikosProperties_Recovery0);
      
      atomikosProperties0.setConsoleFileLimit(int0);
      assertTrue(int0 == int1);
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getService());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      long long2 = atomikosProperties_Recovery1.getDelay();
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals(10000L, long2);
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getService());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties_Recovery1.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery1.getDelay());
      assertEquals(5, atomikosProperties_Recovery1.getMaxRetries());
      assertEquals(86400000L, atomikosProperties_Recovery1.getForgetOrphanedLogEntriesDelay());
      assertSame(atomikosProperties_Recovery1, atomikosProperties_Recovery0);
      
      int int2 = atomikosProperties0.getConsoleFileLimit();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getService());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      AtomikosLoggingLevel atomikosLoggingLevel0 = AtomikosLoggingLevel.INFO;
      atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel0);
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getService());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      String string2 = "INFO";
      atomikosProperties0.setLogBaseDir(string1);
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getService());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      atomikosProperties0.setLogBaseName(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("INFO", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("", atomikosProperties0.getService());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNotSame(string2, string0);
      
      String string3 = atomikosProperties0.getService();
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("INFO", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("", atomikosProperties0.getService());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertSame(string3, string0);
      assertNotSame(string3, string2);
      
      String string4 = "";
      atomikosProperties0.setOutputDir(string4);
      assertFalse(string4.equals((Object)string2));
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("INFO", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("", atomikosProperties0.getService());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNotSame(string4, string2);
      assertSame(string4, string3);
      assertSame(string4, string0);
      
      String string5 = atomikosProperties0.getLogBaseName();
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("INFO", string5);
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("INFO", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("", atomikosProperties0.getService());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertSame(string5, string2);
      assertNotSame(string5, string3);
      
      boolean boolean3 = false;
      atomikosProperties0.setSerialJtaTransactions(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("INFO", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("", atomikosProperties0.getService());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      String string0 = "gEb";
      long long0 = 0L;
      atomikosProperties0.setDefaultJtaTimeout(long0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      atomikosProperties0.setLogBaseName(string0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("gEb", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      long long1 = atomikosProperties0.getDefaultJtaTimeout();
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("gEb", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      boolean boolean0 = false;
      atomikosProperties0.setEnableLogging(boolean0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals("gEb", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      long long2 = atomikosProperties0.getCheckpointInterval();
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals(500L, long2);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals("gEb", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      AtomikosProperties atomikosProperties1 = new AtomikosProperties();
      assertFalse(atomikosProperties1.equals((Object)atomikosProperties0));
      assertNotNull(atomikosProperties1);
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getOutputDir());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getService());
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = atomikosProperties1.getRecovery();
      assertFalse(atomikosProperties1.equals((Object)atomikosProperties0));
      assertNotNull(atomikosProperties_Recovery0);
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getOutputDir());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getService());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertNotSame(atomikosProperties1, atomikosProperties0);
      
      long long3 = atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay();
      assertFalse(atomikosProperties1.equals((Object)atomikosProperties0));
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      assertEquals(86400000L, long3);
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getOutputDir());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getService());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertNotSame(atomikosProperties1, atomikosProperties0);
      
      long long4 = atomikosProperties0.getDefaultJtaTimeout();
      assertFalse(atomikosProperties0.equals((Object)atomikosProperties1));
      assertTrue(long4 == long1);
      assertFalse(long4 == long2);
      assertTrue(long4 == long0);
      assertFalse(long4 == long3);
      assertEquals(0L, long4);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals("gEb", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNotSame(atomikosProperties0, atomikosProperties1);
      
      AtomikosLoggingLevel atomikosLoggingLevel0 = AtomikosLoggingLevel.WARN;
      atomikosProperties1.setConsoleLogLevel(atomikosLoggingLevel0);
      assertFalse(atomikosProperties1.equals((Object)atomikosProperties0));
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getOutputDir());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getService());
      assertNotSame(atomikosProperties1, atomikosProperties0);
      
      int int0 = 0;
      atomikosProperties0.setConsoleFileCount(int0);
      assertFalse(atomikosProperties0.equals((Object)atomikosProperties1));
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals("gEb", atomikosProperties0.getLogBaseName());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNotSame(atomikosProperties0, atomikosProperties1);
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      
      String string0 = "&W$Imj";
      atomikosProperties0.setLogBaseName(string0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("&W$Imj", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      
      long long0 = 0L;
      atomikosProperties0.setMaxTimeout(long0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("&W$Imj", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = new AtomikosProperties.Recovery();
      assertNotNull(atomikosProperties_Recovery0);
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      
      long long1 = 300000L;
      atomikosProperties0.setCheckpointInterval(long0);
      assertFalse(long0 == long1);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals("&W$Imj", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      
      atomikosProperties_Recovery0.setDelay(long1);
      assertFalse(long1 == long0);
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(300000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      
      int int0 = 3;
      atomikosProperties0.setConsoleFileLimit(int0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals("&W$Imj", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(3, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      
      long long2 = atomikosProperties0.getCheckpointInterval();
      assertTrue(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(0L, long2);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals("&W$Imj", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(3, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      
      long long3 = (-912L);
      atomikosProperties_Recovery0.setDelay(long3);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      assertFalse(long3 == long0);
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals((-912L), atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      
      boolean boolean0 = atomikosProperties0.isAllowSubTransactions();
      assertTrue(boolean0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals("&W$Imj", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(3, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      
      int int1 = atomikosProperties0.getConsoleFileLimit();
      assertTrue(int1 == int0);
      assertEquals(3, int1);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals("&W$Imj", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(3, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      
      long long4 = (-319L);
      atomikosProperties_Recovery0.setForgetOrphanedLogEntriesDelay(long4);
      assertFalse(long4 == long0);
      assertFalse(long4 == long3);
      assertFalse(long4 == long1);
      assertFalse(long4 == long2);
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals((-319L), atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals((-912L), atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      
      atomikosProperties0.setConsoleFileLimit(int1);
      assertTrue(int1 == int0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals("&W$Imj", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(3, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      
      atomikosProperties_Recovery0.setDelay(int0);
      assertTrue(int0 == int1);
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals((-319L), atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(3L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      
      atomikosProperties0.setConsoleFileLimit(int1);
      assertTrue(int1 == int0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals("&W$Imj", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(3, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      
      long long5 = atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay();
      assertFalse(long5 == long2);
      assertTrue(long5 == long4);
      assertFalse(long5 == long1);
      assertFalse(long5 == long3);
      assertFalse(long5 == long0);
      assertEquals((-319L), long5);
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals((-319L), atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(3L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      
      AtomikosProperties.Recovery atomikosProperties_Recovery1 = atomikosProperties0.getRecovery();
      assertFalse(atomikosProperties_Recovery1.equals((Object)atomikosProperties_Recovery0));
      assertNotNull(atomikosProperties_Recovery1);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals("&W$Imj", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(3, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(86400000L, atomikosProperties_Recovery1.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery1.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery1.getDelay());
      assertEquals(5, atomikosProperties_Recovery1.getMaxRetries());
      assertNotSame(atomikosProperties_Recovery1, atomikosProperties_Recovery0);
      
      atomikosProperties_Recovery0.setForgetOrphanedLogEntriesDelay(int1);
      assertFalse(atomikosProperties_Recovery0.equals((Object)atomikosProperties_Recovery1));
      assertTrue(int1 == int0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals("&W$Imj", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(3, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(3L, atomikosProperties_Recovery0.getDelay());
      assertEquals(3L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertNotSame(atomikosProperties_Recovery0, atomikosProperties_Recovery1);
      
      String string1 = atomikosProperties0.getConsoleFileName();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("tm.out", string1);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals("&W$Imj", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(3, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNotSame(string1, string0);
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      String string0 = "";
      int int0 = 1;
      atomikosProperties0.setService(string0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      atomikosProperties0.setConsoleFileLimit(int0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      atomikosProperties0.setLogBaseName(string0);
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      
      long long0 = (-777L);
      atomikosProperties0.setDefaultJtaTimeout(long0);
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-777L), atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      
      long long1 = atomikosProperties0.getCheckpointInterval();
      assertFalse(long1 == long0);
      assertEquals(500L, long1);
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-777L), atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      
      String string1 = atomikosProperties0.getLogBaseDir();
      assertNull(string1);
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-777L), atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      
      int int1 = 0;
      atomikosProperties0.setConsoleFileCount(int1);
      assertFalse(int1 == int0);
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-777L), atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      
      atomikosProperties0.setConsoleFileCount(int1);
      assertFalse(int1 == int0);
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-777L), atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      
      AtomikosLoggingLevel atomikosLoggingLevel0 = AtomikosLoggingLevel.INFO;
      atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel0);
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-777L), atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      
      long long2 = atomikosProperties0.getDefaultJtaTimeout();
      assertTrue(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals((-777L), long2);
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-777L), atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      
      String string0 = "";
      atomikosProperties0.setConsoleFileName(string0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      
      boolean boolean0 = true;
      atomikosProperties0.setForceShutdownOnVmExit(boolean0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      
      int int0 = 50;
      atomikosProperties0.setMaxActives(int0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      
      boolean boolean1 = atomikosProperties0.isThreadedTwoPhaseCommit();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = new AtomikosProperties.Recovery();
      assertNotNull(atomikosProperties_Recovery0);
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      long long0 = 500L;
      atomikosProperties_Recovery0.setForgetOrphanedLogEntriesDelay(long0);
      assertEquals(500L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      
      atomikosProperties_Recovery0.setDelay(long0);
      assertEquals(500L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(500L, atomikosProperties_Recovery0.getDelay());
      
      long long1 = 2732L;
      atomikosProperties0.setOutputDir(string0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      
      long long2 = 0L;
      atomikosProperties_Recovery0.setDelay(long2);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals(0L, atomikosProperties_Recovery0.getDelay());
      assertEquals(500L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      
      atomikosProperties_Recovery0.setForgetOrphanedLogEntriesDelay(long2);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals(0L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(0L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      atomikosProperties_Recovery0.setRetryInterval(long1);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertEquals(2732L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(0L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(0L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      String string1 = atomikosProperties0.getConsoleFileName();
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertSame(string1, string0);
      
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      
      atomikosProperties_Recovery0.setForgetOrphanedLogEntriesDelay(long1);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertEquals(2732L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(0L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(2732L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      boolean boolean2 = atomikosProperties0.isEnableLogging();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      
      String string2 = "";
      atomikosProperties0.setLogBaseDir(string2);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertSame(string2, string1);
      assertSame(string2, string0);
      
      int int1 = (-1693);
      atomikosProperties0.setMaxActives(int1);
      assertFalse(int1 == int0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-1693), atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      
      boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-1693), atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      
      String string3 = atomikosProperties0.getLogBaseName();
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("tmlog", string3);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-1693), atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      
      int int2 = atomikosProperties_Recovery0.getMaxRetries();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(5, int2);
      assertEquals(2732L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(0L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(2732L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      String string4 = atomikosProperties0.getLogBaseName();
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("tmlog", string4);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-1693), atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertNotSame(string4, string0);
      assertSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      
      int int3 = atomikosProperties0.getConsoleFileCount();
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(1, int3);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-1693), atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      
      String string5 = atomikosProperties0.getService();
      assertNull(string5);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-1693), atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      
      Properties properties0 = atomikosProperties0.asProperties();
      assertNotNull(properties0);
      assertEquals(20, properties0.size());
      assertFalse(properties0.isEmpty());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-1693), atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      long long0 = 1131L;
      boolean boolean0 = false;
      atomikosProperties0.setForceShutdownOnVmExit(boolean0);
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      atomikosProperties0.setCheckpointInterval(long0);
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(1131L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      String string0 = "";
      atomikosProperties0.setLogBaseName(string0);
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(1131L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      boolean boolean1 = true;
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(1131L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      
      boolean boolean2 = true;
      atomikosProperties0.setEnableLogging(boolean2);
      assertFalse(boolean2 == boolean0);
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(1131L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      
      boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(1131L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      
      Properties properties0 = atomikosProperties0.asProperties();
      assertNotNull(properties0);
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(1131L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(18, properties0.size());
      assertFalse(properties0.isEmpty());
      
      atomikosProperties0.setDefaultJtaTimeout(long0);
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(1131L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1131L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      
      boolean boolean4 = atomikosProperties0.isThreadedTwoPhaseCommit();
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4);
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(1131L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1131L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      
      AtomikosLoggingLevel atomikosLoggingLevel0 = AtomikosLoggingLevel.WARN;
      atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel0);
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(1131L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1131L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = new AtomikosProperties.Recovery();
      assertNotNull(atomikosProperties_Recovery0);
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      int int0 = (-1100);
      long long1 = 2420L;
      atomikosProperties_Recovery0.setDelay(long1);
      assertFalse(long1 == long0);
      assertEquals(2420L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      atomikosProperties_Recovery0.setMaxRetries(int0);
      assertEquals(2420L, atomikosProperties_Recovery0.getDelay());
      assertEquals((-1100), atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      long long2 = atomikosProperties_Recovery0.getDelay();
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertEquals(2420L, long2);
      assertEquals(2420L, atomikosProperties_Recovery0.getDelay());
      assertEquals((-1100), atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      boolean boolean5 = true;
      atomikosProperties0.setForceShutdownOnVmExit(boolean5);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean3);
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(1131L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1131L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      
      boolean boolean6 = atomikosProperties0.isEnableLogging();
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean0);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6);
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(1131L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1131L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      long long0 = (-605L);
      String string0 = "=";
      boolean boolean0 = true;
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      atomikosProperties0.setLogBaseName(string0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("=", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      String string1 = "sI<H2Bmg\\V0A|9R#+x=";
      atomikosProperties0.setOutputDir(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("sI<H2Bmg\\V0A|9R#+x=", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("=", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNotSame(string1, string0);
      
      atomikosProperties0.setCheckpointInterval(long0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("sI<H2Bmg\\V0A|9R#+x=", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-605L), atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("=", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = atomikosProperties0.getRecovery();
      assertNotNull(atomikosProperties_Recovery0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("sI<H2Bmg\\V0A|9R#+x=", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-605L), atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("=", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      
      atomikosProperties_Recovery0.setDelay(long0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("sI<H2Bmg\\V0A|9R#+x=", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-605L), atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("=", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals((-605L), atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      
      long long1 = (-3336L);
      atomikosProperties_Recovery0.setDelay(long1);
      assertFalse(long1 == long0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("sI<H2Bmg\\V0A|9R#+x=", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-605L), atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("=", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals((-3336L), atomikosProperties_Recovery0.getDelay());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      
      long long2 = 1L;
      long long3 = 0L;
      atomikosProperties0.setCheckpointInterval(long2);
      assertFalse(long2 == long3);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("sI<H2Bmg\\V0A|9R#+x=", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("=", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      atomikosProperties_Recovery0.setDelay(long3);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("sI<H2Bmg\\V0A|9R#+x=", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("=", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      
      atomikosProperties_Recovery0.setRetryInterval(long2);
      assertFalse(long2 == long3);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("sI<H2Bmg\\V0A|9R#+x=", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("=", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(1L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      boolean boolean1 = atomikosProperties0.isForceShutdownOnVmExit();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("sI<H2Bmg\\V0A|9R#+x=", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("=", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      atomikosProperties0.setCheckpointInterval(long0);
      assertFalse(long0 == long2);
      assertFalse(long0 == long3);
      assertFalse(long0 == long1);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("sI<H2Bmg\\V0A|9R#+x=", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-605L), atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("=", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      int int0 = atomikosProperties0.getConsoleFileCount();
      assertEquals(1, int0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("sI<H2Bmg\\V0A|9R#+x=", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-605L), atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("=", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      AtomikosLoggingLevel atomikosLoggingLevel0 = AtomikosLoggingLevel.INFO;
      atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("sI<H2Bmg\\V0A|9R#+x=", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals((-605L), atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("=", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      long long4 = atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay();
      assertFalse(long4 == long0);
      assertFalse(long4 == long3);
      assertFalse(long4 == long1);
      assertFalse(long4 == long2);
      assertEquals(86400000L, long4);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("sI<H2Bmg\\V0A|9R#+x=", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals((-605L), atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("=", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(1L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      boolean boolean2 = atomikosProperties0.isEnableLogging();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("sI<H2Bmg\\V0A|9R#+x=", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals((-605L), atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("=", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      long long5 = atomikosProperties0.getDefaultJtaTimeout();
      assertFalse(long5 == long4);
      assertFalse(long5 == long3);
      assertFalse(long5 == long1);
      assertFalse(long5 == long0);
      assertFalse(long5 == long2);
      assertEquals(10000L, long5);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("sI<H2Bmg\\V0A|9R#+x=", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals((-605L), atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("=", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      long long6 = 0L;
      atomikosProperties_Recovery0.setForgetOrphanedLogEntriesDelay(long6);
      assertFalse(long6 == long4);
      assertFalse(long6 == long0);
      assertFalse(long6 == long5);
      assertFalse(long6 == long1);
      assertFalse(long6 == long2);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("sI<H2Bmg\\V0A|9R#+x=", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals((-605L), atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("=", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(1L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(0L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("sI<H2Bmg\\V0A|9R#+x=", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals((-605L), atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("=", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      long long7 = atomikosProperties0.getCheckpointInterval();
      assertFalse(long7 == long4);
      assertFalse(long7 == long3);
      assertFalse(long7 == long5);
      assertTrue(long7 == long0);
      assertFalse(long7 == long6);
      assertFalse(long7 == long2);
      assertFalse(long7 == long1);
      assertEquals((-605L), long7);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("sI<H2Bmg\\V0A|9R#+x=", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals((-605L), atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("=", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      long long8 = atomikosProperties_Recovery0.getDelay();
      assertFalse(long8 == long2);
      assertTrue(long8 == long3);
      assertFalse(long8 == long5);
      assertFalse(long8 == long1);
      assertFalse(long8 == long0);
      assertFalse(long8 == long4);
      assertTrue(long8 == long6);
      assertFalse(long8 == long7);
      assertEquals(0L, long8);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("sI<H2Bmg\\V0A|9R#+x=", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals((-605L), atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("=", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(1L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(0L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("sI<H2Bmg\\V0A|9R#+x=", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals((-605L), atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("=", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      long long9 = atomikosProperties_Recovery0.getRetryInterval();
      assertFalse(long9 == long0);
      assertFalse(long9 == long3);
      assertFalse(long9 == long4);
      assertFalse(long9 == long7);
      assertFalse(long9 == long5);
      assertFalse(long9 == long8);
      assertFalse(long9 == long6);
      assertTrue(long9 == long2);
      assertFalse(long9 == long1);
      assertEquals(1L, long9);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("sI<H2Bmg\\V0A|9R#+x=", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals((-605L), atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("=", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(1L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(0L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      String string2 = atomikosProperties0.getLogBaseName();
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("=", string2);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("sI<H2Bmg\\V0A|9R#+x=", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals((-605L), atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("=", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      
      int int1 = 0;
      atomikosProperties0.setConsoleFileLimit(int1);
      assertFalse(int1 == int0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("sI<H2Bmg\\V0A|9R#+x=", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals((-605L), atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertEquals("=", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      int int0 = 2;
      atomikosProperties0.setMaxActives(int0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(2, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      boolean boolean0 = true;
      atomikosProperties0.setSerialJtaTransactions(boolean0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(2, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      String string0 = "";
      atomikosProperties0.setLogBaseDir(string0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(2, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      atomikosProperties0.setMaxTimeout(int0);
      assertEquals(2, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(2L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      boolean boolean1 = true;
      atomikosProperties0.setEnableLogging(boolean1);
      assertEquals(2, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(2L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = atomikosProperties0.getRecovery();
      assertNotNull(atomikosProperties_Recovery0);
      assertEquals(2, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(2L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      
      long long0 = atomikosProperties_Recovery0.getDelay();
      assertEquals(10000L, long0);
      assertEquals(2, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(2L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      
      long long1 = 2932L;
      boolean boolean2 = false;
      atomikosProperties0.setAllowSubTransactions(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(2, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(2L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      atomikosProperties_Recovery0.setDelay(long1);
      assertFalse(long1 == long0);
      assertEquals(2, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(2L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(2932L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      
      int int1 = 3;
      atomikosProperties_Recovery0.setMaxRetries(int1);
      assertFalse(int1 == int0);
      assertEquals(2, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(2L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(2932L, atomikosProperties_Recovery0.getDelay());
      assertEquals(3, atomikosProperties_Recovery0.getMaxRetries());
      
      int int2 = (-1467);
      int int3 = (-1231);
      atomikosProperties_Recovery0.setMaxRetries(int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(2, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(2L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1231), atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(2932L, atomikosProperties_Recovery0.getDelay());
      
      atomikosProperties0.setMaxActives(int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals((-1467), atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(2L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      int int4 = atomikosProperties_Recovery0.getMaxRetries();
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertTrue(int4 == int3);
      assertFalse(int4 == int0);
      assertEquals((-1231), int4);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals((-1467), atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(2L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1231), atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(2932L, atomikosProperties_Recovery0.getDelay());
      
      atomikosProperties0.setService(string0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals((-1467), atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(2L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      boolean boolean3 = atomikosProperties0.isSerialJtaTransactions();
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals((-1467), atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(2L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      AtomikosProperties.Recovery atomikosProperties_Recovery1 = atomikosProperties0.getRecovery();
      assertNotNull(atomikosProperties_Recovery1);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals((-1467), atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(2L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(2932L, atomikosProperties_Recovery1.getDelay());
      assertEquals(86400000L, atomikosProperties_Recovery1.getForgetOrphanedLogEntriesDelay());
      assertEquals((-1231), atomikosProperties_Recovery1.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery1.getRetryInterval());
      assertSame(atomikosProperties_Recovery1, atomikosProperties_Recovery0);
      
      atomikosProperties0.setMaxActives(int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int4);
      assertFalse(int0 == int3);
      assertEquals(2, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(2L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      AtomikosLoggingLevel atomikosLoggingLevel0 = atomikosProperties0.getConsoleLogLevel();
      assertEquals(AtomikosLoggingLevel.WARN, atomikosLoggingLevel0);
      assertEquals(2, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(2L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      String string1 = atomikosProperties0.getOutputDir();
      assertNull(string1);
      assertEquals(2, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(2L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      
      long long0 = 2259L;
      atomikosProperties0.setDefaultJtaTimeout(long0);
      assertEquals(2259L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      
      boolean boolean0 = false;
      atomikosProperties0.setSerialJtaTransactions(boolean0);
      assertEquals(2259L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      
      String string0 = "";
      atomikosProperties0.setTransactionManagerUniqueName(string0);
      assertEquals(2259L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      
      boolean boolean1 = false;
      atomikosProperties0.setAllowSubTransactions(boolean1);
      assertEquals(2259L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      
      int int0 = 0;
      atomikosProperties0.setConsoleFileLimit(int0);
      assertEquals(2259L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      
      atomikosProperties0.setConsoleFileCount(int0);
      assertEquals(2259L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = atomikosProperties0.getRecovery();
      assertNotNull(atomikosProperties_Recovery0);
      assertEquals(2259L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      long long1 = 0L;
      atomikosProperties_Recovery0.setForgetOrphanedLogEntriesDelay(long1);
      assertFalse(long1 == long0);
      assertEquals(2259L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(0L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      int int1 = 2069;
      atomikosProperties_Recovery0.setMaxRetries(int1);
      assertFalse(int1 == int0);
      assertEquals(2259L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertEquals(2069, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(0L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      atomikosProperties_Recovery0.setMaxRetries(int0);
      assertFalse(int0 == int1);
      assertEquals(2259L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertEquals(0, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(0L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      long long2 = atomikosProperties_Recovery0.getDelay();
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(10000L, long2);
      assertEquals(2259L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertEquals(0, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(0L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      boolean boolean2 = true;
      long long3 = 92L;
      atomikosProperties_Recovery0.setRetryInterval(long3);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertEquals(2259L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertEquals(0, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(92L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(0L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(2259L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      
      long long4 = 1L;
      atomikosProperties_Recovery0.setMaxRetries(int0);
      assertFalse(int0 == int1);
      assertEquals(2259L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertEquals(0, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(92L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(0L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      int int2 = (-4714);
      atomikosProperties_Recovery0.setMaxRetries(int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(2259L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertEquals((-4714), atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(92L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(0L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      atomikosProperties_Recovery0.setDelay(long4);
      assertFalse(long4 == long1);
      assertFalse(long4 == long2);
      assertFalse(long4 == long3);
      assertFalse(long4 == long0);
      assertEquals(2259L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertEquals((-4714), atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(92L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(0L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(1L, atomikosProperties_Recovery0.getDelay());
      
      atomikosProperties_Recovery0.setRetryInterval(long2);
      assertFalse(long2 == long4);
      assertFalse(long2 == long0);
      assertFalse(long2 == long3);
      assertFalse(long2 == long1);
      assertEquals(2259L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertEquals((-4714), atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(0L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(1L, atomikosProperties_Recovery0.getDelay());
      
      boolean boolean3 = atomikosProperties0.isAllowSubTransactions();
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      assertEquals(2259L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      
      atomikosProperties_Recovery0.setDelay(int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertEquals(2259L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertEquals((-4714), atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(0L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(2069L, atomikosProperties_Recovery0.getDelay());
      
      int int3 = atomikosProperties0.getConsoleFileCount();
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
      assertEquals(2259L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      
      long long5 = atomikosProperties_Recovery0.getDelay();
      assertFalse(long5 == long2);
      assertFalse(long5 == long4);
      assertFalse(long5 == long1);
      assertFalse(long5 == long3);
      assertFalse(long5 == long0);
      assertEquals(2069L, long5);
      assertEquals(2259L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertEquals((-4714), atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(0L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(2069L, atomikosProperties_Recovery0.getDelay());
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      int int0 = (-338);
      atomikosProperties0.setMaxActives(int0);
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-338), atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      String string0 = atomikosProperties0.getLogBaseName();
      assertNotNull(string0);
      assertEquals("tmlog", string0);
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-338), atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      int int1 = 0;
      long long0 = atomikosProperties0.getCheckpointInterval();
      assertEquals(500L, long0);
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-338), atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      boolean boolean0 = true;
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean0);
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-338), atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      boolean boolean1 = false;
      atomikosProperties0.setEnableLogging(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-338), atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      long long1 = 0L;
      atomikosProperties0.setMaxTimeout(long1);
      assertFalse(long1 == long0);
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-338), atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      String string1 = null;
      atomikosProperties0.setLogBaseName(string1);
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-338), atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      AtomikosLoggingLevel atomikosLoggingLevel0 = AtomikosLoggingLevel.INFO;
      atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel0);
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-338), atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      String string2 = atomikosProperties0.getConsoleFileName();
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("tm.out", string2);
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-338), atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNotSame(string2, string0);
      
      boolean boolean2 = true;
      atomikosProperties0.setSerialJtaTransactions(boolean2);
      assertFalse(boolean2 == boolean1);
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-338), atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      String string3 = atomikosProperties0.getLogBaseName();
      assertNull(string3);
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-338), atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = atomikosProperties0.getRecovery();
      assertNotNull(atomikosProperties_Recovery0);
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-338), atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      
      long long2 = atomikosProperties0.getMaxTimeout();
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals(0L, long2);
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-338), atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      
      boolean boolean0 = atomikosProperties0.isThreadedTwoPhaseCommit();
      assertFalse(boolean0);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = atomikosProperties0.getRecovery();
      assertNotNull(atomikosProperties_Recovery0);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      int int0 = 0;
      atomikosProperties0.setConsoleFileCount(int0);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      
      atomikosProperties_Recovery0.setRetryInterval(int0);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(0L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      long long0 = (-4056L);
      atomikosProperties_Recovery0.setForgetOrphanedLogEntriesDelay(long0);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals((-4056L), atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(0L, atomikosProperties_Recovery0.getRetryInterval());
      
      String string0 = "org.springframework.boot.jta.atomikos.AtomikosLoggingLevel";
      atomikosProperties0.setService(string0);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("org.springframework.boot.jta.atomikos.AtomikosLoggingLevel", atomikosProperties0.getService());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      
      AtomikosProperties.Recovery atomikosProperties_Recovery1 = atomikosProperties0.getRecovery();
      assertNotNull(atomikosProperties_Recovery1);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("org.springframework.boot.jta.atomikos.AtomikosLoggingLevel", atomikosProperties0.getService());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-4056L), atomikosProperties_Recovery1.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery1.getDelay());
      assertEquals(0L, atomikosProperties_Recovery1.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery1.getMaxRetries());
      assertSame(atomikosProperties_Recovery1, atomikosProperties_Recovery0);
      
      AtomikosLoggingLevel atomikosLoggingLevel0 = atomikosProperties0.getConsoleLogLevel();
      assertEquals(AtomikosLoggingLevel.WARN, atomikosLoggingLevel0);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("org.springframework.boot.jta.atomikos.AtomikosLoggingLevel", atomikosProperties0.getService());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      String string0 = null;
      boolean boolean0 = true;
      atomikosProperties0.setSerialJtaTransactions(boolean0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      boolean boolean1 = true;
      atomikosProperties0.setSerialJtaTransactions(boolean1);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      atomikosProperties0.setConsoleFileName(string0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      String string1 = "=HMHVySVY']p+_|";
      atomikosProperties0.setTransactionManagerUniqueName(string1);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("=HMHVySVY']p+_|", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      int int0 = 2;
      atomikosProperties0.setMaxActives(int0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("=HMHVySVY']p+_|", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(2, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      boolean boolean2 = true;
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean2);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("=HMHVySVY']p+_|", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(2, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      atomikosProperties0.setLogBaseDir(string1);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getConsoleFileName());
      assertEquals("=HMHVySVY']p+_|", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("=HMHVySVY']p+_|", atomikosProperties0.getLogBaseDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(2, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      String string2 = "GcM>7'9l~8o|Fem\"";
      atomikosProperties0.setLogBaseName(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getConsoleFileName());
      assertEquals("=HMHVySVY']p+_|", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("GcM>7'9l~8o|Fem\"", atomikosProperties0.getLogBaseName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("=HMHVySVY']p+_|", atomikosProperties0.getLogBaseDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(2, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNotSame(string2, string1);
      
      AtomikosLoggingLevel atomikosLoggingLevel0 = atomikosProperties0.getConsoleLogLevel();
      assertEquals(AtomikosLoggingLevel.WARN, atomikosLoggingLevel0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getConsoleFileName());
      assertEquals("=HMHVySVY']p+_|", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("GcM>7'9l~8o|Fem\"", atomikosProperties0.getLogBaseName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("=HMHVySVY']p+_|", atomikosProperties0.getLogBaseDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(2, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      
      atomikosProperties0.setOutputDir(string0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getConsoleFileName());
      assertEquals("=HMHVySVY']p+_|", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("GcM>7'9l~8o|Fem\"", atomikosProperties0.getLogBaseName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("=HMHVySVY']p+_|", atomikosProperties0.getLogBaseDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(2, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      
      String string3 = atomikosProperties0.getConsoleFileName();
      assertNull(string3);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getConsoleFileName());
      assertEquals("=HMHVySVY']p+_|", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("GcM>7'9l~8o|Fem\"", atomikosProperties0.getLogBaseName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("=HMHVySVY']p+_|", atomikosProperties0.getLogBaseDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(2, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      
      String string4 = atomikosProperties0.getConsoleFileName();
      assertNull(string4);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getConsoleFileName());
      assertEquals("=HMHVySVY']p+_|", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("GcM>7'9l~8o|Fem\"", atomikosProperties0.getLogBaseName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("=HMHVySVY']p+_|", atomikosProperties0.getLogBaseDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(2, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      
      String string5 = atomikosProperties0.getConsoleFileName();
      assertNull(string5);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getConsoleFileName());
      assertEquals("=HMHVySVY']p+_|", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("GcM>7'9l~8o|Fem\"", atomikosProperties0.getLogBaseName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("=HMHVySVY']p+_|", atomikosProperties0.getLogBaseDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(2, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      
      AtomikosLoggingLevel atomikosLoggingLevel1 = atomikosProperties0.getConsoleLogLevel();
      assertEquals(AtomikosLoggingLevel.WARN, atomikosLoggingLevel1);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getConsoleFileName());
      assertEquals("=HMHVySVY']p+_|", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("GcM>7'9l~8o|Fem\"", atomikosProperties0.getLogBaseName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("=HMHVySVY']p+_|", atomikosProperties0.getLogBaseDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(2, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertSame(atomikosLoggingLevel1, atomikosLoggingLevel0);
      
      Properties properties0 = atomikosProperties0.asProperties();
      assertNotNull(properties0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getConsoleFileName());
      assertEquals("=HMHVySVY']p+_|", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("GcM>7'9l~8o|Fem\"", atomikosProperties0.getLogBaseName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("=HMHVySVY']p+_|", atomikosProperties0.getLogBaseDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(2, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(properties0.isEmpty());
      assertEquals(19, properties0.size());
      
      String string6 = atomikosProperties0.getConsoleFileName();
      assertNull(string6);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getConsoleFileName());
      assertEquals("=HMHVySVY']p+_|", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("GcM>7'9l~8o|Fem\"", atomikosProperties0.getLogBaseName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("=HMHVySVY']p+_|", atomikosProperties0.getLogBaseDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(2, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      
      String string0 = "Q7Q-3~<~3J-";
      atomikosProperties0.setConsoleFileName(string0);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("Q7Q-3~<~3J-", atomikosProperties0.getConsoleFileName());
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = atomikosProperties0.getRecovery();
      assertNotNull(atomikosProperties_Recovery0);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("Q7Q-3~<~3J-", atomikosProperties0.getConsoleFileName());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      long long0 = (-2076L);
      atomikosProperties_Recovery0.setDelay(long0);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("Q7Q-3~<~3J-", atomikosProperties0.getConsoleFileName());
      assertEquals((-2076L), atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      atomikosProperties_Recovery0.setRetryInterval(long0);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("Q7Q-3~<~3J-", atomikosProperties0.getConsoleFileName());
      assertEquals((-2076L), atomikosProperties_Recovery0.getRetryInterval());
      assertEquals((-2076L), atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      atomikosProperties_Recovery0.setForgetOrphanedLogEntriesDelay(long0);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("Q7Q-3~<~3J-", atomikosProperties0.getConsoleFileName());
      assertEquals((-2076L), atomikosProperties_Recovery0.getRetryInterval());
      assertEquals((-2076L), atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals((-2076L), atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      long long1 = 832L;
      atomikosProperties_Recovery0.setForgetOrphanedLogEntriesDelay(long1);
      assertFalse(long1 == long0);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("Q7Q-3~<~3J-", atomikosProperties0.getConsoleFileName());
      assertEquals((-2076L), atomikosProperties_Recovery0.getRetryInterval());
      assertEquals((-2076L), atomikosProperties_Recovery0.getDelay());
      assertEquals(832L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      
      long long2 = (-182L);
      atomikosProperties_Recovery0.setForgetOrphanedLogEntriesDelay(long2);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("Q7Q-3~<~3J-", atomikosProperties0.getConsoleFileName());
      assertEquals((-2076L), atomikosProperties_Recovery0.getRetryInterval());
      assertEquals((-182L), atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals((-2076L), atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      
      long long3 = atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay();
      assertTrue(long3 == long2);
      assertFalse(long3 == long1);
      assertFalse(long3 == long0);
      assertEquals((-182L), long3);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("Q7Q-3~<~3J-", atomikosProperties0.getConsoleFileName());
      assertEquals((-2076L), atomikosProperties_Recovery0.getRetryInterval());
      assertEquals((-182L), atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals((-2076L), atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      
      int int0 = 5;
      atomikosProperties0.setConsoleFileLimit(int0);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(5, atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("Q7Q-3~<~3J-", atomikosProperties0.getConsoleFileName());
      
      int int1 = atomikosProperties_Recovery0.getMaxRetries();
      assertTrue(int1 == int0);
      assertEquals(5, int1);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(5, atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("Q7Q-3~<~3J-", atomikosProperties0.getConsoleFileName());
      assertEquals((-2076L), atomikosProperties_Recovery0.getRetryInterval());
      assertEquals((-182L), atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals((-2076L), atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      
      AtomikosProperties.Recovery atomikosProperties_Recovery1 = atomikosProperties0.getRecovery();
      assertNotNull(atomikosProperties_Recovery1);
      assertEquals(5, atomikosProperties_Recovery1.getMaxRetries());
      assertEquals((-2076L), atomikosProperties_Recovery1.getRetryInterval());
      assertEquals((-182L), atomikosProperties_Recovery1.getForgetOrphanedLogEntriesDelay());
      assertEquals((-2076L), atomikosProperties_Recovery1.getDelay());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(5, atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("Q7Q-3~<~3J-", atomikosProperties0.getConsoleFileName());
      assertSame(atomikosProperties_Recovery1, atomikosProperties_Recovery0);
      
      AtomikosProperties.Recovery atomikosProperties_Recovery2 = atomikosProperties0.getRecovery();
      assertNotNull(atomikosProperties_Recovery2);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(5, atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("Q7Q-3~<~3J-", atomikosProperties0.getConsoleFileName());
      assertEquals((-2076L), atomikosProperties_Recovery2.getRetryInterval());
      assertEquals((-2076L), atomikosProperties_Recovery2.getDelay());
      assertEquals((-182L), atomikosProperties_Recovery2.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery2.getMaxRetries());
      assertSame(atomikosProperties_Recovery2, atomikosProperties_Recovery1);
      assertSame(atomikosProperties_Recovery2, atomikosProperties_Recovery0);
      
      AtomikosProperties.Recovery atomikosProperties_Recovery3 = atomikosProperties0.getRecovery();
      assertNotNull(atomikosProperties_Recovery3);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(5, atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("Q7Q-3~<~3J-", atomikosProperties0.getConsoleFileName());
      assertEquals((-2076L), atomikosProperties_Recovery3.getDelay());
      assertEquals((-182L), atomikosProperties_Recovery3.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery3.getMaxRetries());
      assertEquals((-2076L), atomikosProperties_Recovery3.getRetryInterval());
      assertSame(atomikosProperties_Recovery3, atomikosProperties_Recovery2);
      assertSame(atomikosProperties_Recovery3, atomikosProperties_Recovery0);
      assertSame(atomikosProperties_Recovery3, atomikosProperties_Recovery1);
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      
      boolean boolean0 = false;
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      
      String string0 = "7?1\"o*qf^YlV]uH:";
      atomikosProperties0.setSerialJtaTransactions(boolean0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      
      atomikosProperties0.setLogBaseName(string0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("7?1\"o*qf^YlV]uH:", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      
      atomikosProperties0.setOutputDir(string0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("7?1\"o*qf^YlV]uH:", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("7?1\"o*qf^YlV]uH:", atomikosProperties0.getOutputDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      
      int int0 = 0;
      atomikosProperties0.setMaxActives(int0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("7?1\"o*qf^YlV]uH:", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("7?1\"o*qf^YlV]uH:", atomikosProperties0.getOutputDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      
      AtomikosLoggingLevel atomikosLoggingLevel0 = atomikosProperties0.getConsoleLogLevel();
      assertEquals(AtomikosLoggingLevel.WARN, atomikosLoggingLevel0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("7?1\"o*qf^YlV]uH:", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("7?1\"o*qf^YlV]uH:", atomikosProperties0.getOutputDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      
      atomikosProperties0.setMaxTimeout(int0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("7?1\"o*qf^YlV]uH:", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("7?1\"o*qf^YlV]uH:", atomikosProperties0.getOutputDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      
      String string1 = "oltp_max_retries";
      atomikosProperties0.setOutputDir(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("oltp_max_retries", atomikosProperties0.getOutputDir());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("7?1\"o*qf^YlV]uH:", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertNotSame(string1, string0);
      
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("oltp_max_retries", atomikosProperties0.getOutputDir());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("7?1\"o*qf^YlV]uH:", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      
      atomikosProperties0.setConsoleFileLimit(int0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("oltp_max_retries", atomikosProperties0.getOutputDir());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("7?1\"o*qf^YlV]uH:", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = atomikosProperties0.getRecovery();
      assertNotNull(atomikosProperties_Recovery0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("oltp_max_retries", atomikosProperties0.getOutputDir());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("7?1\"o*qf^YlV]uH:", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      long long0 = (-479L);
      long long1 = 1L;
      atomikosProperties0.setConsoleFileLimit(int0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("oltp_max_retries", atomikosProperties0.getOutputDir());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("7?1\"o*qf^YlV]uH:", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      
      long long2 = 0L;
      atomikosProperties_Recovery0.setForgetOrphanedLogEntriesDelay(long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("oltp_max_retries", atomikosProperties0.getOutputDir());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("7?1\"o*qf^YlV]uH:", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(0L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      atomikosProperties_Recovery0.setRetryInterval(long1);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("oltp_max_retries", atomikosProperties0.getOutputDir());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("7?1\"o*qf^YlV]uH:", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(1L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(0L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      atomikosProperties_Recovery0.setForgetOrphanedLogEntriesDelay(long1);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("oltp_max_retries", atomikosProperties0.getOutputDir());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("7?1\"o*qf^YlV]uH:", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(1L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(1L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      long long3 = 500L;
      atomikosProperties_Recovery0.setDelay(long3);
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("oltp_max_retries", atomikosProperties0.getOutputDir());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("7?1\"o*qf^YlV]uH:", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(1L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(1L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(500L, atomikosProperties_Recovery0.getDelay());
      
      atomikosProperties_Recovery0.setDelay(int0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("oltp_max_retries", atomikosProperties0.getOutputDir());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("7?1\"o*qf^YlV]uH:", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(0L, atomikosProperties_Recovery0.getDelay());
      assertEquals(1L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(1L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      long long4 = 0L;
      atomikosProperties_Recovery0.setForgetOrphanedLogEntriesDelay(long4);
      assertFalse(long4 == long3);
      assertFalse(long4 == long0);
      assertFalse(long4 == long1);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("oltp_max_retries", atomikosProperties0.getOutputDir());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("7?1\"o*qf^YlV]uH:", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(0L, atomikosProperties_Recovery0.getDelay());
      assertEquals(1L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(0L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      atomikosProperties0.setConsoleFileName(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("oltp_max_retries", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("oltp_max_retries", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("7?1\"o*qf^YlV]uH:", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertNotSame(string1, string0);
      
      String string2 = atomikosProperties0.getService();
      assertNull(string2);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("oltp_max_retries", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("oltp_max_retries", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("7?1\"o*qf^YlV]uH:", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      
      String string3 = atomikosProperties0.getLogBaseName();
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("7?1\"o*qf^YlV]uH:", string3);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("oltp_max_retries", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("oltp_max_retries", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("7?1\"o*qf^YlV]uH:", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertSame(string3, string0);
      assertNotSame(string3, string1);
      
      atomikosProperties0.setSerialJtaTransactions(boolean0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("oltp_max_retries", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("oltp_max_retries", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("7?1\"o*qf^YlV]uH:", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("oltp_max_retries", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("oltp_max_retries", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("7?1\"o*qf^YlV]uH:", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      
      String string4 = "*v";
      atomikosProperties0.setConsoleFileLimit(int0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("oltp_max_retries", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("oltp_max_retries", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("7?1\"o*qf^YlV]uH:", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      
      atomikosProperties0.setService(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("oltp_max_retries", atomikosProperties0.getOutputDir());
      assertEquals("*v", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("oltp_max_retries", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("7?1\"o*qf^YlV]uH:", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      
      String string5 = "";
      atomikosProperties0.setService(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("oltp_max_retries", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("oltp_max_retries", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("7?1\"o*qf^YlV]uH:", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("", atomikosProperties0.getService());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertNotSame(string5, string0);
      assertNotSame(string5, string4);
      assertNotSame(string5, string3);
      assertNotSame(string5, string1);
      
      AtomikosProperties.Recovery atomikosProperties_Recovery1 = atomikosProperties0.getRecovery();
      assertNotNull(atomikosProperties_Recovery1);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("oltp_max_retries", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("oltp_max_retries", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("7?1\"o*qf^YlV]uH:", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("", atomikosProperties0.getService());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals(5, atomikosProperties_Recovery1.getMaxRetries());
      assertEquals(1L, atomikosProperties_Recovery1.getRetryInterval());
      assertEquals(0L, atomikosProperties_Recovery1.getDelay());
      assertEquals(0L, atomikosProperties_Recovery1.getForgetOrphanedLogEntriesDelay());
      assertSame(atomikosProperties_Recovery1, atomikosProperties_Recovery0);
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      AtomikosLoggingLevel atomikosLoggingLevel0 = AtomikosLoggingLevel.DEBUG;
      String string0 = null;
      Properties properties0 = atomikosProperties0.asProperties();
      assertNotNull(properties0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(18, properties0.size());
      assertFalse(properties0.isEmpty());
      
      boolean boolean0 = false;
      atomikosProperties0.setForceShutdownOnVmExit(boolean0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      atomikosProperties0.setTransactionManagerUniqueName(string0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      AtomikosLoggingLevel atomikosLoggingLevel1 = atomikosProperties0.getConsoleLogLevel();
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosLoggingLevel1);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertSame(atomikosLoggingLevel1, atomikosLoggingLevel0);
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = atomikosProperties0.getRecovery();
      assertNotNull(atomikosProperties_Recovery0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      
      int int0 = 0;
      atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertSame(atomikosLoggingLevel0, atomikosLoggingLevel1);
      
      atomikosProperties_Recovery0.setMaxRetries(int0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(0, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      
      long long0 = 2407L;
      atomikosProperties_Recovery0.setDelay(long0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(2407L, atomikosProperties_Recovery0.getDelay());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(0, atomikosProperties_Recovery0.getMaxRetries());
      
      long long1 = atomikosProperties_Recovery0.getRetryInterval();
      assertFalse(long1 == long0);
      assertEquals(10000L, long1);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(2407L, atomikosProperties_Recovery0.getDelay());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(0, atomikosProperties_Recovery0.getMaxRetries());
      
      atomikosProperties0.setMaxTimeout(long1);
      assertFalse(long1 == long0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(2407L, atomikosProperties_Recovery0.getDelay());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(0, atomikosProperties_Recovery0.getMaxRetries());
      
      String string1 = atomikosProperties0.getOutputDir();
      assertNull(string1);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      AtomikosLoggingLevel atomikosLoggingLevel2 = AtomikosLoggingLevel.WARN;
      atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel2);
      assertFalse(atomikosLoggingLevel2.equals((Object)atomikosLoggingLevel1));
      assertFalse(atomikosLoggingLevel2.equals((Object)atomikosLoggingLevel0));
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNotSame(atomikosLoggingLevel2, atomikosLoggingLevel1);
      assertNotSame(atomikosLoggingLevel2, atomikosLoggingLevel0);
      
      String string2 = atomikosProperties0.getConsoleFileName();
      assertNotNull(string2);
      assertEquals("tm.out", string2);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      AtomikosProperties.Recovery atomikosProperties_Recovery1 = atomikosProperties0.getRecovery();
      assertNotNull(atomikosProperties_Recovery1);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(2407L, atomikosProperties_Recovery1.getDelay());
      assertEquals(86400000L, atomikosProperties_Recovery1.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery1.getRetryInterval());
      assertEquals(0, atomikosProperties_Recovery1.getMaxRetries());
      assertSame(atomikosProperties_Recovery1, atomikosProperties_Recovery0);
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      
      long long0 = 1875L;
      atomikosProperties0.setMaxTimeout(long0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1875L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      
      AtomikosLoggingLevel atomikosLoggingLevel0 = AtomikosLoggingLevel.DEBUG;
      AtomikosLoggingLevel atomikosLoggingLevel1 = null;
      atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel1);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1875L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      
      String string0 = "hS^\"5egr~T0&'M";
      atomikosProperties0.setTransactionManagerUniqueName(string0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("hS^\"5egr~T0&'M", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1875L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      
      atomikosProperties0.setCheckpointInterval(long0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("hS^\"5egr~T0&'M", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1875L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(1875L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      
      int int0 = (-217);
      atomikosProperties0.setConsoleFileCount(int0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("hS^\"5egr~T0&'M", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1875L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getConsoleLogLevel());
      assertEquals((-217), atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1875L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      
      atomikosProperties0.setLogBaseName(string0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("hS^\"5egr~T0&'M", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1875L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getConsoleLogLevel());
      assertEquals((-217), atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1875L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("hS^\"5egr~T0&'M", atomikosProperties0.getLogBaseName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = atomikosProperties0.getRecovery();
      assertNotNull(atomikosProperties_Recovery0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("hS^\"5egr~T0&'M", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1875L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getConsoleLogLevel());
      assertEquals((-217), atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1875L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("hS^\"5egr~T0&'M", atomikosProperties0.getLogBaseName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      
      atomikosProperties_Recovery0.setDelay(long0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("hS^\"5egr~T0&'M", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1875L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getConsoleLogLevel());
      assertEquals((-217), atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1875L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("hS^\"5egr~T0&'M", atomikosProperties0.getLogBaseName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(1875L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      
      atomikosProperties_Recovery0.setMaxRetries(int0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("hS^\"5egr~T0&'M", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1875L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getConsoleLogLevel());
      assertEquals((-217), atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1875L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("hS^\"5egr~T0&'M", atomikosProperties0.getLogBaseName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(1875L, atomikosProperties_Recovery0.getDelay());
      assertEquals((-217), atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      
      atomikosProperties0.getConsoleLogLevel();
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("hS^\"5egr~T0&'M", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1875L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getConsoleLogLevel());
      assertEquals((-217), atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1875L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("hS^\"5egr~T0&'M", atomikosProperties0.getLogBaseName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
  }
}
