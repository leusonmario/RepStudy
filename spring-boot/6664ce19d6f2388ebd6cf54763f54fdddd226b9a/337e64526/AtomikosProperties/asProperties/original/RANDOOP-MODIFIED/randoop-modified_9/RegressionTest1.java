import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test00501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00501");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties1.elements();
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection6 = properties5.values();
        java.util.Properties properties7 = new java.util.Properties(properties5);
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties7.elements();
        boolean boolean9 = properties7.isEmpty();
        boolean boolean10 = properties1.containsValue((java.lang.Object) boolean9);
        java.util.Properties properties11 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.getConsoleFileName();
        java.lang.Object obj15 = properties11.put((java.lang.Object) atomikosProperties12, (java.lang.Object) 0L);
        atomikosProperties12.setThreadedTwoPhaseCommit(false);
        atomikosProperties12.setConsoleFileLimit((int) ' ');
        java.lang.String str20 = atomikosProperties12.getTransactionManagerUniqueName();
        java.util.Properties properties21 = atomikosProperties12.asProperties();
        java.lang.String str22 = properties21.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str24 = atomikosProperties23.getConsoleFileName();
        atomikosProperties23.setOutputDir("hi!");
        int int27 = atomikosProperties23.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel28 = atomikosProperties23.getConsoleLogLevel();
        atomikosProperties23.setDefaultJtaTimeout((long) (byte) 100);
        atomikosProperties23.setMaxTimeout(0L);
        boolean boolean33 = properties21.contains((java.lang.Object) 0L);
        java.util.Properties properties34 = new java.util.Properties();
        java.util.Properties properties35 = new java.util.Properties(properties34);
        properties35.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str39 = atomikosProperties38.getConsoleFileName();
        atomikosProperties38.setOutputDir("hi!");
        int int42 = atomikosProperties38.getConsoleFileLimit();
        java.lang.Object obj43 = properties35.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties38);
        boolean boolean44 = atomikosProperties38.isForceShutdownOnVmExit();
        atomikosProperties38.setConsoleFileName("");
        java.lang.String str47 = atomikosProperties38.getService();
        java.util.Properties properties48 = atomikosProperties38.asProperties();
        atomikosProperties38.setThreadedTwoPhaseCommit(true);
        java.lang.Object obj51 = properties1.putIfAbsent((java.lang.Object) boolean33, (java.lang.Object) true);
        java.io.Writer writer52 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(writer52, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=32, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tm.out" + "'", str13, "tm.out");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(properties21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=32, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str22, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=32, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tm.out" + "'", str24, "tm.out");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel28 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel28.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "tm.out" + "'", str39, "tm.out");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(properties48);
        org.junit.Assert.assertNull(obj51);
    }

    @Test
    public void test00502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00502");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        java.lang.String str2 = atomikosProperties0.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str4 = atomikosProperties3.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = atomikosProperties3.getConsoleLogLevel();
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        atomikosProperties0.setSerialJtaTransactions(false);
        boolean boolean10 = atomikosProperties0.isForceShutdownOnVmExit();
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.getConsoleFileName();
        atomikosProperties12.setOutputDir("hi!");
        int int16 = atomikosProperties12.getConsoleFileLimit();
        java.lang.String str17 = atomikosProperties12.getService();
        java.lang.String str18 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setOutputDir("tmlog");
        long long21 = atomikosProperties12.getMaxTimeout();
        java.lang.String str22 = atomikosProperties12.getLogBaseName();
        int int23 = atomikosProperties12.getConsoleFileCount();
        atomikosProperties12.setSerialJtaTransactions(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str27 = atomikosProperties26.getConsoleFileName();
        atomikosProperties26.setOutputDir("hi!");
        int int30 = atomikosProperties26.getConsoleFileLimit();
        boolean boolean31 = atomikosProperties26.isForceShutdownOnVmExit();
        java.lang.Object obj32 = properties11.replace((java.lang.Object) atomikosProperties12, (java.lang.Object) boolean31);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.setConsoleFileCount(100);
        atomikosProperties33.setAllowSubTransactions(true);
        atomikosProperties33.setMaxTimeout((long) '4');
        java.lang.String str40 = atomikosProperties33.getLogBaseDir();
        int int41 = atomikosProperties33.getConsoleFileCount();
        int int42 = atomikosProperties33.getMaxActives();
        int int43 = atomikosProperties33.getMaxActives();
        boolean boolean44 = properties11.contains((java.lang.Object) atomikosProperties33);
        java.lang.Class<?> wildcardClass45 = properties11.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tm.out" + "'", str4, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel5 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel5.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tm.out" + "'", str13, "tm.out");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 300000L + "'", long21 == 300000L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tm.out" + "'", str27, "tm.out");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 50 + "'", int42 == 50);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 50 + "'", int43 == 50);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test00503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00503");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties1.setProperty("", "hi!");
        java.util.Properties properties9 = new java.util.Properties(properties1);
        java.util.Enumeration<?> wildcardEnumeration10 = properties9.propertyNames();
        java.io.InputStream inputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties9.load(inputStream11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(wildcardEnumeration10);
    }

    @Test
    public void test00504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00504");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.lang.String str25 = atomikosProperties19.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setConsoleFileCount((-1));
        java.util.Properties properties29 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection30 = properties29.values();
        java.util.Properties properties31 = null;
        java.util.Properties properties32 = new java.util.Properties(properties31);
        java.util.Properties properties33 = new java.util.Properties();
        java.util.Properties properties34 = new java.util.Properties(properties33);
        properties34.clear();
        properties32.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties34);
        java.lang.Object obj39 = properties32.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties29.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties32);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties41.setConsoleFileCount((-1));
        java.lang.String str44 = atomikosProperties41.getOutputDir();
        atomikosProperties41.setLogBaseName("tm.out");
        boolean boolean47 = properties32.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties48.setConsoleFileCount(100);
        atomikosProperties48.setAllowSubTransactions(true);
        java.lang.Object obj53 = properties32.remove((java.lang.Object) atomikosProperties48);
        atomikosProperties48.setAllowSubTransactions(false);
        atomikosProperties48.setSerialJtaTransactions(true);
        java.util.Properties properties58 = new java.util.Properties();
        java.util.Properties properties59 = new java.util.Properties(properties58);
        properties59.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties62 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str63 = atomikosProperties62.getConsoleFileName();
        atomikosProperties62.setOutputDir("hi!");
        int int66 = atomikosProperties62.getConsoleFileLimit();
        java.lang.Object obj67 = properties59.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties62);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel68 = atomikosProperties62.getConsoleLogLevel();
        atomikosProperties48.setConsoleLogLevel(atomikosLoggingLevel68);
        atomikosProperties26.setConsoleLogLevel(atomikosLoggingLevel68);
        atomikosProperties19.setConsoleLogLevel(atomikosLoggingLevel68);
        atomikosProperties19.setEnableLogging(true);
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(objCollection30);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "tm.out" + "'", str63, "tm.out");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel68 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel68.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test00505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00505");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet6 = properties5.stringPropertyNames();
        java.util.Properties properties7 = new java.util.Properties(properties5);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Properties properties11 = new java.util.Properties(properties10);
        properties11.clear();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.lang.Object obj16 = properties11.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet17 = properties11.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setConsoleFileCount((-1));
        java.lang.String str21 = atomikosProperties18.getOutputDir();
        atomikosProperties18.setLogBaseName("tm.out");
        int int24 = atomikosProperties18.getConsoleFileCount();
        boolean boolean25 = properties11.containsKey((java.lang.Object) atomikosProperties18);
        atomikosProperties18.setConsoleFileCount((int) (byte) -1);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery28 = atomikosProperties18.getRecovery();
        java.util.Properties properties29 = new java.util.Properties();
        java.util.Properties properties30 = new java.util.Properties(properties29);
        properties30.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.getConsoleFileName();
        atomikosProperties33.setOutputDir("hi!");
        int int37 = atomikosProperties33.getConsoleFileLimit();
        java.lang.Object obj38 = properties30.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties33);
        atomikosProperties33.setLogBaseName("tm.out");
        atomikosProperties33.setForceShutdownOnVmExit(false);
        java.lang.Object obj43 = properties7.replace((java.lang.Object) recovery28, (java.lang.Object) atomikosProperties33);
        java.util.Enumeration<java.lang.Object> objEnumeration44 = properties7.keys();
        java.io.PrintStream printStream45 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties7.list(printStream45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(recovery28);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tm.out" + "'", str34, "tm.out");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(objEnumeration44);
    }

    @Test
    public void test00506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00506");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean5 = atomikosProperties0.isForceShutdownOnVmExit();
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        atomikosProperties0.setConsoleFileName("");
        boolean boolean9 = atomikosProperties0.isSerialJtaTransactions();
        boolean boolean10 = atomikosProperties0.isEnableLogging();
        java.lang.String str11 = atomikosProperties0.getService();
        atomikosProperties0.setMaxTimeout((long) 5);
        atomikosProperties0.setSerialJtaTransactions(true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test00507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00507");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery4 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (short) 1);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertNotNull(recovery4);
    }

    @Test
    public void test00508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00508");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        boolean boolean10 = atomikosProperties4.isForceShutdownOnVmExit();
        atomikosProperties4.setConsoleFileName("");
        java.lang.String str13 = atomikosProperties4.getService();
        atomikosProperties4.setTransactionManagerUniqueName("");
        atomikosProperties4.setOutputDir("hi!");
        atomikosProperties4.setSerialJtaTransactions(true);
        boolean boolean20 = atomikosProperties4.isForceShutdownOnVmExit();
        long long21 = atomikosProperties4.getCheckpointInterval();
        atomikosProperties4.setConsoleFileCount(0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
    }

    @Test
    public void test00509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00509");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        java.util.Set<java.lang.Object> objSet26 = properties3.keySet();
        java.util.Properties properties27 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection28 = properties27.values();
        java.util.Properties properties29 = new java.util.Properties(properties27);
        java.util.Enumeration<java.lang.Object> objEnumeration30 = properties27.keys();
        java.util.Properties properties31 = null;
        java.util.Properties properties32 = new java.util.Properties(properties31);
        java.util.Properties properties33 = new java.util.Properties();
        java.util.Properties properties34 = new java.util.Properties(properties33);
        properties34.clear();
        properties32.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties34);
        java.lang.Object obj39 = properties32.setProperty("", "hi!");
        java.lang.Object obj40 = properties27.remove((java.lang.Object) "");
        java.util.Properties properties41 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection42 = properties41.values();
        java.util.Properties properties43 = null;
        java.util.Properties properties44 = new java.util.Properties(properties43);
        java.util.Properties properties45 = new java.util.Properties();
        java.util.Properties properties46 = new java.util.Properties(properties45);
        properties46.clear();
        properties44.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties46);
        java.lang.Object obj51 = properties44.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties41.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties44);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties53.setConsoleFileCount((-1));
        java.lang.String str56 = atomikosProperties53.getOutputDir();
        atomikosProperties53.setLogBaseName("tm.out");
        boolean boolean59 = properties44.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties60.setConsoleFileCount(100);
        atomikosProperties60.setAllowSubTransactions(true);
        java.lang.Object obj65 = properties44.remove((java.lang.Object) atomikosProperties60);
        java.util.Properties properties66 = new java.util.Properties(properties44);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties67 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str68 = atomikosProperties67.getConsoleFileName();
        atomikosProperties67.setOutputDir("hi!");
        int int71 = atomikosProperties67.getConsoleFileLimit();
        java.lang.String str72 = atomikosProperties67.getService();
        java.lang.String str73 = atomikosProperties67.getOutputDir();
        atomikosProperties67.setOutputDir("tmlog");
        long long76 = atomikosProperties67.getMaxTimeout();
        boolean boolean77 = properties66.contains((java.lang.Object) atomikosProperties67);
        java.util.Properties properties78 = new java.util.Properties(properties66);
        java.lang.Object obj79 = properties3.replace((java.lang.Object) properties27, (java.lang.Object) properties78);
        java.io.OutputStream outputStream80 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.storeToXML(outputStream80, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertNotNull(objSet26);
        org.junit.Assert.assertNotNull(objCollection28);
        org.junit.Assert.assertNotNull(objEnumeration30);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "tm.out" + "'", str68, "tm.out");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "hi!" + "'", str73, "hi!");
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 300000L + "'", long76 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(obj79);
    }

    @Test
    public void test00510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00510");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.util.Properties properties28 = new java.util.Properties();
        java.util.Properties properties29 = new java.util.Properties(properties28);
        properties29.clear();
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        java.lang.Object obj32 = properties3.get((java.lang.Object) properties29);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.setConsoleFileCount((-1));
        atomikosProperties33.setAllowSubTransactions(false);
        boolean boolean38 = properties3.contains((java.lang.Object) false);
        java.util.Properties properties39 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str41 = atomikosProperties40.getConsoleFileName();
        java.lang.Object obj43 = properties39.put((java.lang.Object) atomikosProperties40, (java.lang.Object) 0L);
        java.util.Properties properties44 = new java.util.Properties();
        java.util.Properties properties45 = new java.util.Properties(properties44);
        properties45.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str49 = atomikosProperties48.getConsoleFileName();
        atomikosProperties48.setOutputDir("hi!");
        int int52 = atomikosProperties48.getConsoleFileLimit();
        java.lang.Object obj53 = properties45.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties48);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet54 = properties45.entrySet();
        java.util.Properties properties55 = new java.util.Properties(properties45);
        boolean boolean56 = properties3.remove((java.lang.Object) 0L, (java.lang.Object) properties45);
        java.io.PrintStream printStream57 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties45.list(printStream57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "tm.out" + "'", str41, "tm.out");
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tm.out" + "'", str49, "tm.out");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNotNull(objEntrySet54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test00511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00511");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long4 = recovery3.getForgetOrphanedLogEntriesDelay();
        java.lang.Class<?> wildcardClass5 = recovery3.getClass();
        boolean boolean6 = properties1.containsKey((java.lang.Object) wildcardClass5);
        java.io.Writer writer7 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(writer7, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 86400000L + "'", long4 == 86400000L);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test00512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00512");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getTransactionManagerUniqueName();
        boolean boolean2 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setAllowSubTransactions(false);
        atomikosProperties0.setLogBaseName("");
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        java.util.Properties properties8 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection9 = properties8.values();
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        java.util.Properties properties12 = new java.util.Properties();
        java.util.Properties properties13 = new java.util.Properties(properties12);
        properties13.clear();
        properties11.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties13);
        java.lang.Object obj18 = properties11.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.setConsoleFileCount((-1));
        java.lang.String str23 = atomikosProperties20.getOutputDir();
        atomikosProperties20.setLogBaseName("tm.out");
        boolean boolean26 = properties11.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.setConsoleFileCount(100);
        atomikosProperties27.setAllowSubTransactions(true);
        java.lang.Object obj32 = properties11.remove((java.lang.Object) atomikosProperties27);
        atomikosProperties27.setAllowSubTransactions(false);
        long long35 = atomikosProperties27.getCheckpointInterval();
        boolean boolean36 = atomikosProperties27.isSerialJtaTransactions();
        boolean boolean37 = properties7.equals((java.lang.Object) atomikosProperties27);
        java.io.Reader reader38 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties7.load(reader38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 500L + "'", long35 == 500L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test00513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00513");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties8.getConsoleLogLevel();
        java.lang.Object obj14 = properties1.putIfAbsent((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosLoggingLevel13);
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.Object obj17 = properties15.get((java.lang.Object) (byte) -1);
        java.util.Properties properties18 = new java.util.Properties(properties15);
        boolean boolean19 = properties1.equals((java.lang.Object) properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties1.keys();
        java.util.Properties properties21 = new java.util.Properties(properties1);
        java.lang.String str24 = properties1.getProperty("{10=10.0}", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str24, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
    }

    @Test
    public void test00514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00514");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Properties properties25 = new java.util.Properties();
        java.util.Properties properties26 = new java.util.Properties(properties25);
        properties26.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.getConsoleFileName();
        atomikosProperties29.setOutputDir("hi!");
        int int33 = atomikosProperties29.getConsoleFileLimit();
        java.lang.Object obj34 = properties26.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties29);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet35 = properties26.entrySet();
        boolean boolean36 = properties3.containsValue((java.lang.Object) properties26);
        java.util.Properties properties37 = new java.util.Properties(properties26);
        java.io.Writer writer38 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties26.store(writer38, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "tm.out" + "'", str30, "tm.out");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(objEntrySet35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test00515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00515");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str3 = atomikosProperties2.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel4 = atomikosProperties2.getConsoleLogLevel();
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel4);
        atomikosProperties0.setSerialJtaTransactions(false);
        int int8 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.Object> objSet10 = properties9.keySet();
        java.io.InputStream inputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties9.loadFromXML(inputStream11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "tm.out" + "'", str3, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel4 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel4.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(objSet10);
    }

    @Test
    public void test00516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00516");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties1.setProperty("tm.out", "");
        java.util.Properties properties9 = new java.util.Properties(properties1);
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection11 = properties10.values();
        java.util.Properties properties12 = null;
        java.util.Properties properties13 = new java.util.Properties(properties12);
        java.util.Properties properties14 = new java.util.Properties();
        java.util.Properties properties15 = new java.util.Properties(properties14);
        properties15.clear();
        properties13.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.lang.Object obj20 = properties13.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties10.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties13);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.setConsoleFileCount((-1));
        java.lang.String str25 = atomikosProperties22.getOutputDir();
        atomikosProperties22.setLogBaseName("tm.out");
        boolean boolean28 = properties13.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setConsoleFileCount(100);
        atomikosProperties29.setAllowSubTransactions(true);
        java.lang.Object obj34 = properties13.remove((java.lang.Object) atomikosProperties29);
        java.util.Properties properties35 = new java.util.Properties();
        java.util.Properties properties36 = new java.util.Properties(properties35);
        properties36.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str40 = atomikosProperties39.getConsoleFileName();
        atomikosProperties39.setOutputDir("hi!");
        int int43 = atomikosProperties39.getConsoleFileLimit();
        java.lang.Object obj44 = properties36.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties39);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet45 = properties36.entrySet();
        boolean boolean46 = properties13.containsValue((java.lang.Object) properties36);
        java.util.Properties properties47 = new java.util.Properties(properties36);
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties36);
        java.util.Set<java.lang.String> strSet49 = properties36.stringPropertyNames();
        java.io.PrintStream printStream50 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties36.list(printStream50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "tm.out" + "'", str40, "tm.out");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(objEntrySet45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strSet49);
    }

    @Test
    public void test00517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00517");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties1.setProperty("tm.out", "");
        java.util.Properties properties9 = new java.util.Properties(properties1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setConsoleFileCount(100);
        atomikosProperties10.setAllowSubTransactions(true);
        java.lang.String str15 = atomikosProperties10.getConsoleFileName();
        atomikosProperties10.setDefaultJtaTimeout((long) 0);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long19 = recovery18.getForgetOrphanedLogEntriesDelay();
        recovery18.setDelay((long) (short) 1);
        recovery18.setDelay((long) (-1));
        recovery18.setForgetOrphanedLogEntriesDelay((long) (short) 10);
        long long26 = recovery18.getRetryInterval();
        java.lang.Object obj27 = properties9.getOrDefault((java.lang.Object) 0, (java.lang.Object) long26);
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tm.out" + "'", str15, "tm.out");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 86400000L + "'", long19 == 86400000L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10000L + "'", long26 == 10000L);
        org.junit.Assert.assertEquals("'" + obj27 + "' != '" + 10000L + "'", obj27, 10000L);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test00518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00518");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        long long4 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setEnableLogging(false);
        int int7 = atomikosProperties0.getMaxActives();
        boolean boolean8 = atomikosProperties0.isAllowSubTransactions();
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 500L + "'", long4 == 500L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(properties9);
    }

    @Test
    public void test00519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00519");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.lang.Object obj7 = properties0.setProperty("", "");
        java.util.Properties properties8 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str10 = atomikosProperties9.getConsoleFileName();
        atomikosProperties9.setOutputDir("hi!");
        int int13 = atomikosProperties9.getConsoleFileLimit();
        java.util.Properties properties14 = atomikosProperties9.asProperties();
        java.util.Properties properties15 = new java.util.Properties();
        java.util.Properties properties16 = new java.util.Properties(properties15);
        properties16.clear();
        properties14.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties16);
        java.util.Properties properties19 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str21 = atomikosProperties20.getConsoleFileName();
        java.lang.Object obj23 = properties19.put((java.lang.Object) atomikosProperties20, (java.lang.Object) 0L);
        java.lang.Object obj26 = properties19.setProperty("", "");
        java.util.Properties properties27 = new java.util.Properties(properties19);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str29 = atomikosProperties28.getConsoleFileName();
        atomikosProperties28.setOutputDir("hi!");
        int int32 = atomikosProperties28.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel33 = atomikosProperties28.getConsoleLogLevel();
        java.lang.Object obj34 = properties14.getOrDefault((java.lang.Object) properties19, (java.lang.Object) atomikosProperties28);
        boolean boolean35 = properties0.contains((java.lang.Object) properties19);
        int int36 = properties19.size();
        java.io.InputStream inputStream37 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties19.loadFromXML(inputStream37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tm.out" + "'", str10, "tm.out");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tm.out" + "'", str21, "tm.out");
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tm.out" + "'", str29, "tm.out");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel33 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel33.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
    }

    @Test
    public void test00520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00520");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        int int3 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setOutputDir("");
        java.lang.String str6 = atomikosProperties0.getConsoleFileName();
        int int7 = atomikosProperties0.getConsoleFileCount();
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        java.lang.String str9 = atomikosProperties0.getConsoleFileName();
        long long10 = atomikosProperties0.getMaxTimeout();
        java.lang.Class<?> wildcardClass11 = atomikosProperties0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tm.out" + "'", str6, "tm.out");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 300000L + "'", long10 == 300000L);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test00521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00521");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        java.util.Set<java.lang.Object> objSet26 = properties3.keySet();
        java.util.Properties properties27 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection28 = properties27.values();
        java.util.Properties properties29 = new java.util.Properties(properties27);
        java.util.Enumeration<java.lang.Object> objEnumeration30 = properties27.keys();
        java.util.Properties properties31 = null;
        java.util.Properties properties32 = new java.util.Properties(properties31);
        java.util.Properties properties33 = new java.util.Properties();
        java.util.Properties properties34 = new java.util.Properties(properties33);
        properties34.clear();
        properties32.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties34);
        java.lang.Object obj39 = properties32.setProperty("", "hi!");
        java.lang.Object obj40 = properties27.remove((java.lang.Object) "");
        java.util.Properties properties41 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection42 = properties41.values();
        java.util.Properties properties43 = null;
        java.util.Properties properties44 = new java.util.Properties(properties43);
        java.util.Properties properties45 = new java.util.Properties();
        java.util.Properties properties46 = new java.util.Properties(properties45);
        properties46.clear();
        properties44.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties46);
        java.lang.Object obj51 = properties44.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties41.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties44);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties53.setConsoleFileCount((-1));
        java.lang.String str56 = atomikosProperties53.getOutputDir();
        atomikosProperties53.setLogBaseName("tm.out");
        boolean boolean59 = properties44.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties60.setConsoleFileCount(100);
        atomikosProperties60.setAllowSubTransactions(true);
        java.lang.Object obj65 = properties44.remove((java.lang.Object) atomikosProperties60);
        java.util.Properties properties66 = new java.util.Properties(properties44);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties67 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str68 = atomikosProperties67.getConsoleFileName();
        atomikosProperties67.setOutputDir("hi!");
        int int71 = atomikosProperties67.getConsoleFileLimit();
        java.lang.String str72 = atomikosProperties67.getService();
        java.lang.String str73 = atomikosProperties67.getOutputDir();
        atomikosProperties67.setOutputDir("tmlog");
        long long76 = atomikosProperties67.getMaxTimeout();
        boolean boolean77 = properties66.contains((java.lang.Object) atomikosProperties67);
        java.util.Properties properties78 = new java.util.Properties(properties66);
        java.lang.Object obj79 = properties3.replace((java.lang.Object) properties27, (java.lang.Object) properties78);
        boolean boolean80 = properties3.isEmpty();
        java.io.OutputStream outputStream81 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.save(outputStream81, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertNotNull(objSet26);
        org.junit.Assert.assertNotNull(objCollection28);
        org.junit.Assert.assertNotNull(objEnumeration30);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "tm.out" + "'", str68, "tm.out");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "hi!" + "'", str73, "hi!");
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 300000L + "'", long76 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test00522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00522");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean5 = atomikosProperties0.isForceShutdownOnVmExit();
        int int6 = atomikosProperties0.getConsoleFileCount();
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str10 = atomikosProperties9.getConsoleFileName();
        atomikosProperties9.setOutputDir("hi!");
        int int13 = atomikosProperties9.getConsoleFileLimit();
        java.util.Properties properties14 = atomikosProperties9.asProperties();
        java.lang.String str15 = atomikosProperties9.getService();
        atomikosProperties9.setService("hi!");
        atomikosProperties9.setConsoleFileName("tm.out");
        java.lang.String str20 = atomikosProperties9.getTransactionManagerUniqueName();
        long long21 = atomikosProperties9.getMaxTimeout();
        int int22 = atomikosProperties9.getConsoleFileLimit();
        java.lang.Object obj23 = properties8.get((java.lang.Object) atomikosProperties9);
        java.util.Set<java.lang.Object> objSet24 = properties8.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet25 = properties8.entrySet();
        java.lang.Object obj26 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj27 = properties8.remove(obj26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tm.out" + "'", str10, "tm.out");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 300000L + "'", long21 == 300000L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(objSet24);
        org.junit.Assert.assertNotNull(objEntrySet25);
    }

    @Test
    public void test00523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00523");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel10 = atomikosProperties4.getConsoleLogLevel();
        java.lang.String str11 = atomikosProperties4.getTransactionManagerUniqueName();
        boolean boolean12 = atomikosProperties4.isThreadedTwoPhaseCommit();
        atomikosProperties4.setConsoleFileLimit((int) '#');
        java.util.Properties properties15 = atomikosProperties4.asProperties();
        java.io.Writer writer16 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties15.store(writer16, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=hi!, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel10 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel10.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(properties15);
    }

    @Test
    public void test00524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00524");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str3 = atomikosProperties2.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel4 = atomikosProperties2.getConsoleLogLevel();
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel4);
        atomikosProperties0.setSerialJtaTransactions(false);
        int int8 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        java.util.Properties properties11 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.getConsoleFileName();
        java.lang.Object obj15 = properties11.put((java.lang.Object) atomikosProperties12, (java.lang.Object) 0L);
        java.util.Properties properties16 = new java.util.Properties(properties11);
        java.util.Set<java.lang.Object> objSet17 = properties16.keySet();
        java.lang.Object obj20 = properties16.setProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.getConsoleFileName();
        atomikosProperties21.setOutputDir("hi!");
        int int25 = atomikosProperties21.getConsoleFileLimit();
        atomikosProperties21.setDefaultJtaTimeout(1L);
        atomikosProperties21.setForceShutdownOnVmExit(false);
        atomikosProperties21.setLogBaseDir("tmlog");
        boolean boolean32 = properties16.containsValue((java.lang.Object) "tmlog");
        java.util.Collection<java.lang.Object> objCollection33 = properties16.values();
        boolean boolean34 = properties9.remove((java.lang.Object) '4', (java.lang.Object) objCollection33);
        java.util.Properties properties35 = new java.util.Properties(properties9);
        java.io.Reader reader36 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties9.load(reader36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "tm.out" + "'", str3, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel4 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel4.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tm.out" + "'", str13, "tm.out");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(objSet17);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tm.out" + "'", str22, "tm.out");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objCollection33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test00525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00525");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties1.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet5 = properties1.entrySet();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection7 = properties6.values();
        java.util.Properties properties8 = new java.util.Properties(properties6);
        java.util.Enumeration<java.lang.Object> objEnumeration9 = properties8.elements();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties8.entrySet();
        java.util.Properties properties11 = new java.util.Properties();
        java.util.Properties properties12 = new java.util.Properties(properties11);
        int int13 = properties12.size();
        boolean boolean14 = properties12.isEmpty();
        java.util.Set<java.lang.Object> objSet15 = properties12.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.getConsoleFileName();
        atomikosProperties16.setOutputDir("hi!");
        int int20 = atomikosProperties16.getConsoleFileLimit();
        java.util.Properties properties21 = atomikosProperties16.asProperties();
        java.lang.String str22 = atomikosProperties16.getService();
        int int23 = atomikosProperties16.getMaxActives();
        boolean boolean24 = properties12.equals((java.lang.Object) atomikosProperties16);
        java.lang.Object obj25 = properties1.putIfAbsent((java.lang.Object) objEntrySet10, (java.lang.Object) boolean24);
        java.util.Properties properties26 = new java.util.Properties(properties1);
        java.io.Writer writer27 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties26.store(writer27, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objEntrySet5);
        org.junit.Assert.assertNotNull(objCollection7);
        org.junit.Assert.assertNotNull(objEnumeration9);
        org.junit.Assert.assertNotNull(objEntrySet10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objSet15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tm.out" + "'", str17, "tm.out");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 50 + "'", int23 == 50);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(obj25);
    }

    @Test
    public void test00526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00526");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties8.getConsoleLogLevel();
        java.lang.Object obj14 = properties1.putIfAbsent((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosLoggingLevel13);
        boolean boolean15 = atomikosProperties4.isSerialJtaTransactions();
        java.lang.String str16 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setService("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=hi!, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        java.util.Properties properties19 = atomikosProperties4.asProperties();
        java.io.Writer writer20 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties19.store(writer20, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=hi!, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(properties19);
    }

    @Test
    public void test00527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00527");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Properties properties25 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str27 = atomikosProperties26.getConsoleFileName();
        atomikosProperties26.setOutputDir("hi!");
        int int30 = atomikosProperties26.getConsoleFileLimit();
        java.lang.String str31 = atomikosProperties26.getService();
        java.lang.String str32 = atomikosProperties26.getOutputDir();
        atomikosProperties26.setOutputDir("tmlog");
        long long35 = atomikosProperties26.getMaxTimeout();
        boolean boolean36 = properties25.contains((java.lang.Object) atomikosProperties26);
        java.util.Properties properties37 = new java.util.Properties(properties25);
        java.util.Properties properties38 = new java.util.Properties(properties25);
        java.lang.String str41 = properties25.getProperty("{hi!=10}", "{}");
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tm.out" + "'", str27, "tm.out");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 300000L + "'", long35 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "{}" + "'", str41, "{}");
    }

    @Test
    public void test00528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00528");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties1.setProperty("tm.out", "");
        java.util.Properties properties9 = new java.util.Properties(properties1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setConsoleFileCount(100);
        atomikosProperties10.setAllowSubTransactions(true);
        boolean boolean15 = atomikosProperties10.isForceShutdownOnVmExit();
        int int16 = atomikosProperties10.getConsoleFileCount();
        java.lang.Object obj17 = properties9.get((java.lang.Object) atomikosProperties10);
        java.io.OutputStream outputStream18 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties9.storeToXML(outputStream18, "{=hi!}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertNull(obj17);
    }

    @Test
    public void test00529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00529");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        java.lang.String str5 = properties2.getProperty("hi!");
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties7.setConsoleFileCount(100);
        atomikosProperties7.setAllowSubTransactions(true);
        boolean boolean12 = atomikosProperties7.isForceShutdownOnVmExit();
        int int13 = atomikosProperties7.getConsoleFileCount();
        java.util.Properties properties14 = atomikosProperties7.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery15 = atomikosProperties7.getRecovery();
        java.util.Properties properties16 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection17 = properties16.values();
        java.util.Properties properties18 = null;
        java.util.Properties properties19 = new java.util.Properties(properties18);
        java.util.Properties properties20 = new java.util.Properties();
        java.util.Properties properties21 = new java.util.Properties(properties20);
        properties21.clear();
        properties19.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.lang.Object obj26 = properties19.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties16.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties19);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties28.setConsoleFileCount((-1));
        java.lang.String str31 = atomikosProperties28.getOutputDir();
        atomikosProperties28.setLogBaseName("tm.out");
        boolean boolean34 = properties19.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setConsoleFileCount(100);
        atomikosProperties35.setAllowSubTransactions(true);
        java.lang.Object obj40 = properties19.remove((java.lang.Object) atomikosProperties35);
        atomikosProperties35.setAllowSubTransactions(false);
        int int43 = atomikosProperties35.getConsoleFileCount();
        java.util.Properties properties44 = atomikosProperties35.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel45 = atomikosProperties35.getConsoleLogLevel();
        java.lang.Object obj46 = properties2.getOrDefault((java.lang.Object) recovery15, (java.lang.Object) atomikosProperties35);
        java.util.Set<java.lang.Object> objSet47 = properties2.keySet();
        java.util.Properties properties48 = new java.util.Properties(properties2);
        java.lang.Object obj49 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean50 = properties48.containsValue(obj49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(recovery15);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertNotNull(properties44);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel45 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel45.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertNotNull(objSet47);
    }

    @Test
    public void test00530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00530");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        atomikosProperties0.setDefaultJtaTimeout(1L);
        atomikosProperties0.setForceShutdownOnVmExit(false);
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        java.lang.String str11 = properties9.getProperty("{hi!=}");
        properties9.clear();
        java.lang.String str15 = properties9.getProperty("hi!", "{}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{}" + "'", str15, "{}");
    }

    @Test
    public void test00531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00531");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties8.getConsoleLogLevel();
        java.lang.Object obj14 = properties1.putIfAbsent((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosLoggingLevel13);
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.Object obj17 = properties15.get((java.lang.Object) (byte) -1);
        java.util.Properties properties18 = new java.util.Properties(properties15);
        boolean boolean19 = properties1.equals((java.lang.Object) properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties1.keys();
        java.util.Set<java.lang.String> strSet21 = properties1.stringPropertyNames();
        java.util.Properties properties22 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection23 = properties22.values();
        java.util.Properties properties24 = null;
        java.util.Properties properties25 = new java.util.Properties(properties24);
        java.util.Properties properties26 = new java.util.Properties();
        java.util.Properties properties27 = new java.util.Properties(properties26);
        properties27.clear();
        properties25.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties27);
        java.lang.Object obj32 = properties25.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties22.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties25);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties34.setConsoleFileCount((-1));
        java.lang.String str37 = atomikosProperties34.getOutputDir();
        atomikosProperties34.setLogBaseName("tm.out");
        boolean boolean40 = properties25.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties41.setConsoleFileCount(100);
        atomikosProperties41.setAllowSubTransactions(true);
        java.lang.Object obj46 = properties25.remove((java.lang.Object) atomikosProperties41);
        java.util.Set<java.lang.Object> objSet47 = properties25.keySet();
        java.util.Properties properties48 = new java.util.Properties(properties25);
        java.util.Properties properties49 = new java.util.Properties(properties48);
        java.util.Properties properties50 = new java.util.Properties(properties49);
        java.util.Properties properties51 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection52 = properties51.values();
        java.util.Properties properties53 = null;
        java.util.Properties properties54 = new java.util.Properties(properties53);
        java.util.Properties properties55 = new java.util.Properties();
        java.util.Properties properties56 = new java.util.Properties(properties55);
        properties56.clear();
        properties54.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties56);
        java.lang.Object obj61 = properties54.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties51.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties54);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties63.setConsoleFileCount((-1));
        java.lang.String str66 = atomikosProperties63.getOutputDir();
        atomikosProperties63.setLogBaseName("tm.out");
        boolean boolean69 = properties54.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties70 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties70.setConsoleFileCount(100);
        atomikosProperties70.setAllowSubTransactions(true);
        java.lang.Object obj75 = properties54.remove((java.lang.Object) atomikosProperties70);
        atomikosProperties70.setAllowSubTransactions(false);
        long long78 = atomikosProperties70.getCheckpointInterval();
        boolean boolean79 = atomikosProperties70.isSerialJtaTransactions();
        atomikosProperties70.setConsoleFileCount((int) 'a');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties82 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties82.setConsoleFileCount(100);
        int int85 = atomikosProperties82.getConsoleFileCount();
        java.lang.Object obj86 = properties50.getOrDefault((java.lang.Object) atomikosProperties70, (java.lang.Object) atomikosProperties82);
        java.lang.Object obj87 = properties1.remove(obj86);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass88 = obj87.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(objCollection23);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(objSet47);
        org.junit.Assert.assertNotNull(objCollection52);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 500L + "'", long78 == 500L);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 100 + "'", int85 == 100);
        org.junit.Assert.assertNotNull(obj86);
        org.junit.Assert.assertNull(obj87);
    }

    @Test
    public void test00532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00532");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery4 = atomikosProperties0.getRecovery();
        recovery4.setMaxRetries((int) (short) 0);
        recovery4.setRetryInterval((long) (short) 0);
        recovery4.setDelay(1L);
        recovery4.setDelay((long) (byte) 1);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertNotNull(recovery4);
    }

    @Test
    public void test00533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00533");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        atomikosProperties0.setAllowSubTransactions(false);
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Enumeration<?> wildcardEnumeration6 = properties5.propertyNames();
        java.util.Properties properties7 = new java.util.Properties();
        java.lang.Object obj9 = properties7.get((java.lang.Object) (byte) -1);
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties7.elements();
        java.util.Properties properties11 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection12 = properties11.values();
        java.util.Properties properties13 = null;
        java.util.Properties properties14 = new java.util.Properties(properties13);
        java.util.Properties properties15 = new java.util.Properties();
        java.util.Properties properties16 = new java.util.Properties(properties15);
        properties16.clear();
        properties14.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties16);
        java.lang.Object obj21 = properties14.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties11.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties14);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties23.setConsoleFileCount((-1));
        java.lang.String str26 = atomikosProperties23.getOutputDir();
        atomikosProperties23.setLogBaseName("tm.out");
        boolean boolean29 = properties14.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties30.setConsoleFileCount(100);
        atomikosProperties30.setAllowSubTransactions(true);
        java.lang.Object obj35 = properties14.remove((java.lang.Object) atomikosProperties30);
        java.util.Set<java.lang.Object> objSet36 = properties14.keySet();
        java.util.Properties properties37 = null;
        java.util.Properties properties38 = new java.util.Properties(properties37);
        java.util.Properties properties39 = new java.util.Properties();
        java.util.Properties properties40 = new java.util.Properties(properties39);
        properties40.clear();
        properties38.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties40);
        java.lang.Object obj43 = properties14.get((java.lang.Object) properties40);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setConsoleFileCount((-1));
        atomikosProperties44.setAllowSubTransactions(false);
        boolean boolean49 = properties14.contains((java.lang.Object) false);
        java.util.Properties properties50 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str52 = atomikosProperties51.getConsoleFileName();
        java.lang.Object obj54 = properties50.put((java.lang.Object) atomikosProperties51, (java.lang.Object) 0L);
        java.util.Properties properties55 = new java.util.Properties();
        java.util.Properties properties56 = new java.util.Properties(properties55);
        properties56.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str60 = atomikosProperties59.getConsoleFileName();
        atomikosProperties59.setOutputDir("hi!");
        int int63 = atomikosProperties59.getConsoleFileLimit();
        java.lang.Object obj64 = properties56.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties59);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet65 = properties56.entrySet();
        java.util.Properties properties66 = new java.util.Properties(properties56);
        boolean boolean67 = properties14.remove((java.lang.Object) 0L, (java.lang.Object) properties56);
        java.lang.Object obj70 = properties56.setProperty("tm.out", "");
        java.lang.Object obj71 = properties5.getOrDefault((java.lang.Object) properties7, (java.lang.Object) "");
        java.lang.Object obj74 = properties7.setProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=100}", "");
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(wildcardEnumeration6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertNotNull(objCollection12);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(objSet36);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "tm.out" + "'", str52, "tm.out");
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "tm.out" + "'", str60, "tm.out");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNotNull(objEntrySet65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertEquals("'" + obj71 + "' != '" + "" + "'", obj71, "");
        org.junit.Assert.assertNull(obj74);
    }

    @Test
    public void test00534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00534");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int1 = recovery0.getMaxRetries();
        recovery0.setForgetOrphanedLogEntriesDelay((long) (short) -1);
        recovery0.setMaxRetries((int) '4');
        recovery0.setRetryInterval(86400000L);
        long long8 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.setDelay(5L);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 5 + "'", int1 == 5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
    }

    @Test
    public void test00535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00535");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        atomikosProperties4.setLogBaseName("tm.out");
        long long12 = atomikosProperties4.getDefaultJtaTimeout();
        atomikosProperties4.setSerialJtaTransactions(true);
        atomikosProperties4.setCheckpointInterval(10000L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.getConsoleFileName();
        atomikosProperties17.setOutputDir("hi!");
        java.lang.String str21 = atomikosProperties17.getOutputDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.setConsoleFileCount((-1));
        java.util.Properties properties25 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection26 = properties25.values();
        java.util.Properties properties27 = null;
        java.util.Properties properties28 = new java.util.Properties(properties27);
        java.util.Properties properties29 = new java.util.Properties();
        java.util.Properties properties30 = new java.util.Properties(properties29);
        properties30.clear();
        properties28.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties30);
        java.lang.Object obj35 = properties28.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties25.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties37.setConsoleFileCount((-1));
        java.lang.String str40 = atomikosProperties37.getOutputDir();
        atomikosProperties37.setLogBaseName("tm.out");
        boolean boolean43 = properties28.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setConsoleFileCount(100);
        atomikosProperties44.setAllowSubTransactions(true);
        java.lang.Object obj49 = properties28.remove((java.lang.Object) atomikosProperties44);
        atomikosProperties44.setAllowSubTransactions(false);
        atomikosProperties44.setSerialJtaTransactions(true);
        java.util.Properties properties54 = new java.util.Properties();
        java.util.Properties properties55 = new java.util.Properties(properties54);
        properties55.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str59 = atomikosProperties58.getConsoleFileName();
        atomikosProperties58.setOutputDir("hi!");
        int int62 = atomikosProperties58.getConsoleFileLimit();
        java.lang.Object obj63 = properties55.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties58);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel64 = atomikosProperties58.getConsoleLogLevel();
        atomikosProperties44.setConsoleLogLevel(atomikosLoggingLevel64);
        atomikosProperties22.setConsoleLogLevel(atomikosLoggingLevel64);
        atomikosProperties17.setConsoleLogLevel(atomikosLoggingLevel64);
        atomikosProperties4.setConsoleLogLevel(atomikosLoggingLevel64);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel69 = atomikosProperties4.getConsoleLogLevel();
        long long70 = atomikosProperties4.getDefaultJtaTimeout();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tm.out" + "'", str18, "tm.out");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNotNull(objCollection26);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "tm.out" + "'", str59, "tm.out");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel64 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel64.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel69 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel69.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 10000L + "'", long70 == 10000L);
    }

    @Test
    public void test00536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00536");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        java.lang.String str2 = atomikosProperties0.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel3 = atomikosProperties0.getConsoleLogLevel();
        atomikosProperties0.setLogBaseDir("tm.out");
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection8 = properties7.values();
        java.util.Properties properties9 = new java.util.Properties(properties7);
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties9.elements();
        boolean boolean11 = properties9.isEmpty();
        java.util.Properties properties12 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection13 = properties12.values();
        java.util.Properties properties14 = null;
        java.util.Properties properties15 = new java.util.Properties(properties14);
        java.util.Properties properties16 = new java.util.Properties();
        java.util.Properties properties17 = new java.util.Properties(properties16);
        properties17.clear();
        properties15.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties17);
        java.lang.Object obj22 = properties15.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties12.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.util.Properties properties24 = null;
        java.util.Properties properties25 = new java.util.Properties(properties24);
        boolean boolean27 = properties25.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties25.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet29 = properties25.entrySet();
        java.util.Properties properties30 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection31 = properties30.values();
        java.util.Properties properties32 = null;
        java.util.Properties properties33 = new java.util.Properties(properties32);
        java.util.Properties properties34 = new java.util.Properties();
        java.util.Properties properties35 = new java.util.Properties(properties34);
        properties35.clear();
        properties33.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties35);
        java.lang.Object obj40 = properties33.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties30.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties33);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties42.setConsoleFileCount((-1));
        java.lang.String str45 = atomikosProperties42.getOutputDir();
        atomikosProperties42.setLogBaseName("tm.out");
        boolean boolean48 = properties33.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties49.setConsoleFileCount(100);
        atomikosProperties49.setAllowSubTransactions(true);
        java.lang.Object obj54 = properties33.remove((java.lang.Object) atomikosProperties49);
        java.util.Set<java.lang.Object> objSet55 = properties33.keySet();
        boolean boolean56 = properties9.replace((java.lang.Object) properties15, (java.lang.Object) objEntrySet29, (java.lang.Object) properties33);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str58 = atomikosProperties57.getConsoleFileName();
        atomikosProperties57.setOutputDir("hi!");
        int int61 = atomikosProperties57.getConsoleFileLimit();
        java.util.Properties properties62 = atomikosProperties57.asProperties();
        java.util.Properties properties63 = new java.util.Properties();
        java.util.Properties properties64 = new java.util.Properties(properties63);
        properties64.clear();
        properties62.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties64);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties67 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str68 = atomikosProperties67.getConsoleFileName();
        atomikosProperties67.setOutputDir("hi!");
        int int71 = atomikosProperties67.getConsoleFileLimit();
        java.util.Properties properties72 = atomikosProperties67.asProperties();
        java.lang.String str73 = atomikosProperties67.getService();
        atomikosProperties67.setService("hi!");
        atomikosProperties67.setConsoleFileName("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery78 = atomikosProperties67.getRecovery();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties79 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str80 = atomikosProperties79.getConsoleFileName();
        atomikosProperties79.setOutputDir("hi!");
        java.lang.String str83 = atomikosProperties79.getOutputDir();
        boolean boolean84 = properties33.replace((java.lang.Object) properties64, (java.lang.Object) atomikosProperties67, (java.lang.Object) atomikosProperties79);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties85 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str86 = atomikosProperties85.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties87 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str88 = atomikosProperties87.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel89 = atomikosProperties87.getConsoleLogLevel();
        atomikosProperties85.setConsoleLogLevel(atomikosLoggingLevel89);
        atomikosProperties67.setConsoleLogLevel(atomikosLoggingLevel89);
        boolean boolean92 = properties6.containsValue((java.lang.Object) atomikosLoggingLevel89);
        java.io.OutputStream outputStream93 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties6.store(outputStream93, "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel3 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel3.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNotNull(objCollection8);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objCollection13);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertNotNull(objEntrySet29);
        org.junit.Assert.assertNotNull(objCollection31);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNotNull(objSet55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "tm.out" + "'", str58, "tm.out");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(properties62);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "tm.out" + "'", str68, "tm.out");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(properties72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(recovery78);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "tm.out" + "'", str80, "tm.out");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "hi!" + "'", str83, "hi!");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "tm.out" + "'", str88, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel89 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel89.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test00537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00537");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        java.util.Set<java.lang.Object> objSet26 = properties3.keySet();
        java.util.Properties properties27 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection28 = properties27.values();
        java.util.Properties properties29 = new java.util.Properties(properties27);
        java.util.Enumeration<java.lang.Object> objEnumeration30 = properties27.keys();
        java.util.Properties properties31 = null;
        java.util.Properties properties32 = new java.util.Properties(properties31);
        java.util.Properties properties33 = new java.util.Properties();
        java.util.Properties properties34 = new java.util.Properties(properties33);
        properties34.clear();
        properties32.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties34);
        java.lang.Object obj39 = properties32.setProperty("", "hi!");
        java.lang.Object obj40 = properties27.remove((java.lang.Object) "");
        java.util.Properties properties41 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection42 = properties41.values();
        java.util.Properties properties43 = null;
        java.util.Properties properties44 = new java.util.Properties(properties43);
        java.util.Properties properties45 = new java.util.Properties();
        java.util.Properties properties46 = new java.util.Properties(properties45);
        properties46.clear();
        properties44.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties46);
        java.lang.Object obj51 = properties44.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties41.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties44);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties53.setConsoleFileCount((-1));
        java.lang.String str56 = atomikosProperties53.getOutputDir();
        atomikosProperties53.setLogBaseName("tm.out");
        boolean boolean59 = properties44.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties60.setConsoleFileCount(100);
        atomikosProperties60.setAllowSubTransactions(true);
        java.lang.Object obj65 = properties44.remove((java.lang.Object) atomikosProperties60);
        java.util.Properties properties66 = new java.util.Properties(properties44);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties67 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str68 = atomikosProperties67.getConsoleFileName();
        atomikosProperties67.setOutputDir("hi!");
        int int71 = atomikosProperties67.getConsoleFileLimit();
        java.lang.String str72 = atomikosProperties67.getService();
        java.lang.String str73 = atomikosProperties67.getOutputDir();
        atomikosProperties67.setOutputDir("tmlog");
        long long76 = atomikosProperties67.getMaxTimeout();
        boolean boolean77 = properties66.contains((java.lang.Object) atomikosProperties67);
        java.util.Properties properties78 = new java.util.Properties(properties66);
        java.lang.Object obj79 = properties3.replace((java.lang.Object) properties27, (java.lang.Object) properties78);
        java.io.OutputStream outputStream80 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.store(outputStream80, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertNotNull(objSet26);
        org.junit.Assert.assertNotNull(objCollection28);
        org.junit.Assert.assertNotNull(objEnumeration30);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "tm.out" + "'", str68, "tm.out");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "hi!" + "'", str73, "hi!");
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 300000L + "'", long76 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(obj79);
    }

    @Test
    public void test00538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00538");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Properties properties25 = new java.util.Properties();
        java.util.Properties properties26 = new java.util.Properties(properties25);
        properties26.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.getConsoleFileName();
        atomikosProperties29.setOutputDir("hi!");
        int int33 = atomikosProperties29.getConsoleFileLimit();
        java.lang.Object obj34 = properties26.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties29);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet35 = properties26.entrySet();
        boolean boolean36 = properties3.containsValue((java.lang.Object) properties26);
        java.util.Properties properties37 = new java.util.Properties(properties26);
        java.io.Reader reader38 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties37.load(reader38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "tm.out" + "'", str30, "tm.out");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(objEntrySet35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test00539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00539");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties3.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet9 = properties3.stringPropertyNames();
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Properties properties11 = new java.util.Properties(properties10);
        int int12 = properties11.size();
        boolean boolean13 = properties11.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration14 = properties11.elements();
        java.util.Properties properties15 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection16 = properties15.values();
        java.util.Properties properties17 = new java.util.Properties(properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties17.elements();
        boolean boolean19 = properties17.isEmpty();
        boolean boolean20 = properties11.containsValue((java.lang.Object) boolean19);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties11.elements();
        properties11.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties23.setConsoleFileCount((-1));
        java.lang.String str26 = atomikosProperties23.getOutputDir();
        atomikosProperties23.setLogBaseName("tm.out");
        atomikosProperties23.setForceShutdownOnVmExit(true);
        int int31 = atomikosProperties23.getConsoleFileCount();
        atomikosProperties23.setThreadedTwoPhaseCommit(true);
        atomikosProperties23.setMaxTimeout((long) (short) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery36 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long37 = recovery36.getForgetOrphanedLogEntriesDelay();
        recovery36.setDelay((long) (short) 1);
        long long40 = recovery36.getRetryInterval();
        long long41 = recovery36.getForgetOrphanedLogEntriesDelay();
        int int42 = recovery36.getMaxRetries();
        java.lang.Object obj43 = properties11.put((java.lang.Object) atomikosProperties23, (java.lang.Object) recovery36);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean44 = properties3.contains(obj43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objEnumeration14);
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 86400000L + "'", long37 == 86400000L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10000L + "'", long40 == 10000L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 86400000L + "'", long41 == 86400000L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
        org.junit.Assert.assertNull(obj43);
    }

    @Test
    public void test00540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00540");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Properties properties7 = new java.util.Properties(properties6);
        properties7.clear();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties5.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long12 = recovery11.getForgetOrphanedLogEntriesDelay();
        recovery11.setForgetOrphanedLogEntriesDelay((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery15 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long16 = recovery15.getForgetOrphanedLogEntriesDelay();
        recovery15.setDelay((long) (short) 1);
        recovery15.setMaxRetries((int) (byte) 10);
        java.lang.Object obj21 = properties5.getOrDefault((java.lang.Object) (byte) 100, (java.lang.Object) (byte) 10);
        java.util.Enumeration<java.lang.Object> objEnumeration22 = properties5.keys();
        java.lang.Class<?> wildcardClass23 = objEnumeration22.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(objEntrySet10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 86400000L + "'", long12 == 86400000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 86400000L + "'", long16 == 86400000L);
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + (byte) 10 + "'", obj21, (byte) 10);
        org.junit.Assert.assertNotNull(objEnumeration22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test00541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00541");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        java.lang.String str3 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseName("tm.out");
        atomikosProperties0.setLogBaseDir("tm.out");
        java.lang.String str8 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setDefaultJtaTimeout(10L);
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery12 = atomikosProperties0.getRecovery();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery13 = atomikosProperties0.getRecovery();
        recovery13.setForgetOrphanedLogEntriesDelay(300000L);
        recovery13.setMaxRetries((int) (byte) 100);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tm.out" + "'", str8, "tm.out");
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(recovery12);
        org.junit.Assert.assertNotNull(recovery13);
    }

    @Test
    public void test00542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00542");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        int int3 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setOutputDir("");
        java.lang.String str6 = atomikosProperties0.getConsoleFileName();
        boolean boolean7 = atomikosProperties0.isEnableLogging();
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        java.io.OutputStream outputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.store(outputStream9, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tm.out" + "'", str6, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(properties8);
    }

    @Test
    public void test00543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00543");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Properties properties4 = new java.util.Properties(properties1);
        java.util.Properties properties5 = new java.util.Properties(properties1);
        int int6 = properties1.size();
        java.util.Properties properties7 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        java.util.Properties properties13 = atomikosProperties8.asProperties();
        java.lang.String str14 = atomikosProperties8.getService();
        atomikosProperties8.setService("hi!");
        java.lang.Object obj18 = properties7.putIfAbsent((java.lang.Object) "hi!", (java.lang.Object) 10L);
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        properties1.clear();
        java.util.Properties properties21 = new java.util.Properties(properties1);
        java.io.OutputStream outputStream22 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties21.store(outputStream22, "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj18);
    }

    @Test
    public void test00544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00544");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        java.util.Collection<java.lang.Object> objCollection4 = properties1.values();
        java.util.Set<java.lang.Object> objSet5 = properties1.keySet();
        java.lang.String str8 = properties1.getProperty("tmlog", "{=hi!}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNotNull(objSet5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{=hi!}" + "'", str8, "{=hi!}");
    }

    @Test
    public void test00545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00545");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Properties properties7 = new java.util.Properties(properties6);
        properties7.clear();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties5.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long12 = recovery11.getForgetOrphanedLogEntriesDelay();
        recovery11.setForgetOrphanedLogEntriesDelay((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery15 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long16 = recovery15.getForgetOrphanedLogEntriesDelay();
        recovery15.setDelay((long) (short) 1);
        recovery15.setMaxRetries((int) (byte) 10);
        java.lang.Object obj21 = properties5.getOrDefault((java.lang.Object) (byte) 100, (java.lang.Object) (byte) 10);
        java.util.Enumeration<java.lang.Object> objEnumeration22 = properties5.keys();
        java.io.Writer writer23 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.store(writer23, "{=hi!}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(objEntrySet10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 86400000L + "'", long12 == 86400000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 86400000L + "'", long16 == 86400000L);
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + (byte) 10 + "'", obj21, (byte) 10);
        org.junit.Assert.assertNotNull(objEnumeration22);
    }

    @Test
    public void test00546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00546");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        long long5 = atomikosProperties1.getCheckpointInterval();
        java.lang.String str6 = atomikosProperties1.getConsoleFileName();
        java.util.Properties properties7 = atomikosProperties1.asProperties();
        atomikosProperties1.setOutputDir("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=hi!, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        int int10 = atomikosProperties1.getConsoleFileCount();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tm.out" + "'", str6, "tm.out");
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test00547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00547");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.lang.Object obj3 = null;
        boolean boolean4 = properties0.equals(obj3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.keys();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Properties properties7 = new java.util.Properties(properties6);
        int int8 = properties7.size();
        boolean boolean9 = properties7.isEmpty();
        java.util.Properties properties10 = new java.util.Properties(properties7);
        java.util.Properties properties11 = new java.util.Properties(properties7);
        int int12 = properties7.size();
        java.util.Properties properties13 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str15 = atomikosProperties14.getConsoleFileName();
        atomikosProperties14.setOutputDir("hi!");
        int int18 = atomikosProperties14.getConsoleFileLimit();
        java.util.Properties properties19 = atomikosProperties14.asProperties();
        java.lang.String str20 = atomikosProperties14.getService();
        atomikosProperties14.setService("hi!");
        java.lang.Object obj24 = properties13.putIfAbsent((java.lang.Object) "hi!", (java.lang.Object) 10L);
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties13);
        properties7.clear();
        java.util.Properties properties27 = new java.util.Properties(properties7);
        boolean boolean28 = properties0.contains((java.lang.Object) properties27);
        java.util.Set<java.lang.String> strSet29 = properties0.stringPropertyNames();
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tm.out" + "'", str15, "tm.out");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strSet29);
    }

    @Test
    public void test00548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00548");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        java.lang.String str5 = properties2.getProperty("tmlog");
        java.util.Properties properties6 = new java.util.Properties(properties2);
        java.io.InputStream inputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties6.loadFromXML(inputStream7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test00549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00549");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties3.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        properties10.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str14 = atomikosProperties13.getConsoleFileName();
        atomikosProperties13.setOutputDir("hi!");
        int int17 = atomikosProperties13.getConsoleFileLimit();
        java.lang.Object obj18 = properties10.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties13);
        atomikosProperties13.setLogBaseName("tm.out");
        boolean boolean21 = properties3.containsKey((java.lang.Object) "tm.out");
        java.util.Properties properties22 = null;
        java.util.Properties properties23 = new java.util.Properties(properties22);
        java.util.Properties properties24 = new java.util.Properties();
        java.util.Properties properties25 = new java.util.Properties(properties24);
        properties25.clear();
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties25);
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties23);
        java.lang.String str31 = properties3.getProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=32, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tm.out" + "'", str14, "tm.out");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str31, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
    }

    @Test
    public void test00550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00550");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.lang.Object obj3 = null;
        boolean boolean4 = properties0.equals(obj3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties0.elements();
        java.util.Properties properties7 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        java.lang.Object obj11 = properties7.put((java.lang.Object) atomikosProperties8, (java.lang.Object) 0L);
        boolean boolean12 = properties0.containsValue((java.lang.Object) properties7);
        java.lang.Object obj13 = properties7.clone();
        java.util.Properties properties14 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection15 = properties14.values();
        java.util.Properties properties16 = null;
        java.util.Properties properties17 = new java.util.Properties(properties16);
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Properties properties19 = new java.util.Properties(properties18);
        properties19.clear();
        properties17.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties19);
        java.lang.Object obj24 = properties17.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties14.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties17);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setConsoleFileCount((-1));
        java.lang.String str29 = atomikosProperties26.getOutputDir();
        atomikosProperties26.setLogBaseName("tm.out");
        boolean boolean32 = properties17.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.setConsoleFileCount(100);
        atomikosProperties33.setAllowSubTransactions(true);
        java.lang.Object obj38 = properties17.remove((java.lang.Object) atomikosProperties33);
        java.lang.Object obj39 = null;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties40.setConsoleFileCount((-1));
        java.lang.String str43 = atomikosProperties40.getOutputDir();
        atomikosProperties40.setLogBaseName("tm.out");
        atomikosProperties40.setForceShutdownOnVmExit(true);
        atomikosProperties40.setMaxTimeout((long) (short) 1);
        atomikosProperties40.setForceShutdownOnVmExit(true);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean52 = properties7.replace((java.lang.Object) properties17, obj39, (java.lang.Object) atomikosProperties40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(objCollection15);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNull(str43);
    }

    @Test
    public void test00551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00551");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties1.elements();
        java.util.Properties properties5 = new java.util.Properties(properties1);
        java.util.Enumeration<?> wildcardEnumeration6 = properties1.propertyNames();
        java.util.Enumeration<?> wildcardEnumeration7 = properties1.propertyNames();
        java.io.OutputStream outputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream8, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=32, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(wildcardEnumeration6);
        org.junit.Assert.assertNotNull(wildcardEnumeration7);
    }

    @Test
    public void test00552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00552");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties1.setProperty("", "hi!");
        java.util.Properties properties9 = new java.util.Properties(properties1);
        java.util.Enumeration<?> wildcardEnumeration10 = properties9.propertyNames();
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties9.elements();
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(wildcardEnumeration10);
        org.junit.Assert.assertNotNull(objEnumeration11);
    }

    @Test
    public void test00553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00553");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        atomikosProperties1.setOutputDir("hi!");
        int int5 = atomikosProperties1.getConsoleFileLimit();
        java.util.Properties properties6 = atomikosProperties1.asProperties();
        java.lang.String str7 = atomikosProperties1.getService();
        atomikosProperties1.setService("hi!");
        java.lang.Object obj11 = properties0.putIfAbsent((java.lang.Object) "hi!", (java.lang.Object) 10L);
        java.util.Enumeration<java.lang.Object> objEnumeration12 = properties0.elements();
        java.io.Writer writer13 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(writer13, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=hi!, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(objEnumeration12);
    }

    @Test
    public void test00554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00554");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties1.setProperty("", "hi!");
        java.util.Properties properties9 = new java.util.Properties(properties1);
        boolean boolean10 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.getConsoleFileName();
        atomikosProperties11.setOutputDir("hi!");
        int int15 = atomikosProperties11.getConsoleFileLimit();
        java.lang.String str16 = atomikosProperties11.getService();
        java.lang.String str17 = atomikosProperties11.getOutputDir();
        boolean boolean18 = properties1.contains((java.lang.Object) str17);
        java.io.OutputStream outputStream19 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream19, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=hi!, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tm.out" + "'", str12, "tm.out");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test00555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00555");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties1.setProperty("", "hi!");
        java.util.Properties properties9 = new java.util.Properties(properties1);
        java.util.Enumeration<?> wildcardEnumeration10 = properties9.propertyNames();
        java.util.Properties properties11 = new java.util.Properties(properties9);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount(100);
        int int15 = atomikosProperties12.getConsoleFileCount();
        atomikosProperties12.setOutputDir("");
        java.lang.String str18 = atomikosProperties12.getConsoleFileName();
        int int19 = atomikosProperties12.getConsoleFileCount();
        boolean boolean20 = atomikosProperties12.isEnableLogging();
        java.lang.String str21 = atomikosProperties12.getConsoleFileName();
        java.lang.String str22 = atomikosProperties12.getTransactionManagerUniqueName();
        atomikosProperties12.setEnableLogging(true);
        atomikosProperties12.setService("tmlog");
        java.lang.Object obj27 = properties11.remove((java.lang.Object) "tmlog");
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(wildcardEnumeration10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tm.out" + "'", str18, "tm.out");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tm.out" + "'", str21, "tm.out");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(obj27);
    }

    @Test
    public void test00556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00556");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        long long5 = atomikosProperties1.getCheckpointInterval();
        java.lang.String str6 = atomikosProperties1.getService();
        boolean boolean7 = atomikosProperties1.isSerialJtaTransactions();
        java.lang.String str8 = atomikosProperties1.getOutputDir();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test00557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00557");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        int int2 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setMaxTimeout((long) (-1));
        int int5 = atomikosProperties0.getConsoleFileLimit();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test00558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00558");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties3.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet9 = properties3.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setConsoleFileCount((-1));
        java.lang.String str13 = atomikosProperties10.getOutputDir();
        atomikosProperties10.setLogBaseName("tm.out");
        int int16 = atomikosProperties10.getConsoleFileCount();
        boolean boolean17 = properties3.containsKey((java.lang.Object) atomikosProperties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long19 = recovery18.getForgetOrphanedLogEntriesDelay();
        recovery18.setDelay((long) (short) 1);
        recovery18.setRetryInterval(100L);
        java.lang.Object obj24 = properties3.get((java.lang.Object) 100L);
        java.io.Reader reader25 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.load(reader25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 86400000L + "'", long19 == 86400000L);
        org.junit.Assert.assertNull(obj24);
    }

    @Test
    public void test00559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00559");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Properties properties25 = new java.util.Properties();
        java.util.Properties properties26 = new java.util.Properties(properties25);
        properties26.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.getConsoleFileName();
        atomikosProperties29.setOutputDir("hi!");
        int int33 = atomikosProperties29.getConsoleFileLimit();
        java.lang.Object obj34 = properties26.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties29);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet35 = properties26.entrySet();
        boolean boolean36 = properties3.containsValue((java.lang.Object) properties26);
        java.util.Properties properties37 = null;
        java.util.Properties properties38 = new java.util.Properties(properties37);
        boolean boolean40 = properties38.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration41 = properties38.keys();
        java.util.Properties properties42 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection43 = properties42.values();
        java.util.Properties properties44 = null;
        java.util.Properties properties45 = new java.util.Properties(properties44);
        java.util.Properties properties46 = new java.util.Properties();
        java.util.Properties properties47 = new java.util.Properties(properties46);
        properties47.clear();
        properties45.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties47);
        java.lang.Object obj52 = properties45.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties42.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties45);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties54.setConsoleFileCount((-1));
        java.lang.String str57 = atomikosProperties54.getOutputDir();
        atomikosProperties54.setLogBaseName("tm.out");
        boolean boolean60 = properties45.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties61.setConsoleFileCount(100);
        atomikosProperties61.setAllowSubTransactions(true);
        java.lang.Object obj66 = properties45.remove((java.lang.Object) atomikosProperties61);
        atomikosProperties61.setAllowSubTransactions(false);
        atomikosProperties61.setSerialJtaTransactions(true);
        boolean boolean71 = properties38.containsKey((java.lang.Object) atomikosProperties61);
        java.util.Collection<java.lang.Object> objCollection72 = properties38.values();
        java.util.Properties properties73 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection74 = properties73.values();
        java.util.Properties properties75 = new java.util.Properties(properties73);
        java.util.Enumeration<java.lang.Object> objEnumeration76 = properties73.keys();
        java.lang.Class<?> wildcardClass77 = properties73.getClass();
        java.lang.Object obj78 = properties26.getOrDefault((java.lang.Object) properties38, (java.lang.Object) wildcardClass77);
        java.io.InputStream inputStream79 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties26.loadFromXML(inputStream79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "tm.out" + "'", str30, "tm.out");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(objEntrySet35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objEnumeration41);
        org.junit.Assert.assertNotNull(objCollection43);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(objCollection72);
        org.junit.Assert.assertNotNull(objCollection74);
        org.junit.Assert.assertNotNull(objEnumeration76);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(obj78);
        org.junit.Assert.assertEquals(obj78.toString(), "class java.util.Properties");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj78), "class java.util.Properties");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj78), "class java.util.Properties");
    }

    @Test
    public void test00560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00560");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        atomikosProperties0.setCheckpointInterval((long) (short) 10);
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = new java.util.Properties(properties5);
        java.util.Enumeration<?> wildcardEnumeration7 = properties6.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getTransactionManagerUniqueName();
        boolean boolean10 = atomikosProperties8.isForceShutdownOnVmExit();
        java.util.Properties properties11 = atomikosProperties8.asProperties();
        int int12 = properties11.size();
        boolean boolean13 = properties11.isEmpty();
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.getConsoleFileName();
        long long17 = atomikosProperties15.getMaxTimeout();
        java.util.Properties properties18 = atomikosProperties15.asProperties();
        atomikosProperties15.setOutputDir("tm.out");
        int int21 = atomikosProperties15.getMaxActives();
        java.lang.Object obj22 = properties11.remove((java.lang.Object) atomikosProperties15);
        java.io.PrintStream printStream23 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties11.list(printStream23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(wildcardEnumeration7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 18 + "'", int12 == 18);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tm.out" + "'", str16, "tm.out");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 300000L + "'", long17 == 300000L);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 50 + "'", int21 == 50);
        org.junit.Assert.assertNull(obj22);
    }

    @Test
    public void test00561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00561");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Collection<java.lang.Object> objCollection6 = properties3.values();
        java.util.Properties properties7 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties8.setConsoleFileCount(100);
        atomikosProperties8.setAllowSubTransactions(true);
        java.lang.String str13 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setSerialJtaTransactions(false);
        boolean boolean16 = atomikosProperties8.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel17 = atomikosProperties8.getConsoleLogLevel();
        boolean boolean18 = properties7.contains((java.lang.Object) atomikosLoggingLevel17);
        java.util.Properties properties19 = new java.util.Properties(properties7);
        java.io.Writer writer20 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties7.store(writer20, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=hi!, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tm.out" + "'", str13, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel17 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel17.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test00562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00562");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties3.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet9 = properties3.stringPropertyNames();
        java.lang.Object obj10 = new java.lang.Object();
        java.lang.Object obj11 = properties3.get(obj10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.getConsoleFileName();
        atomikosProperties12.setOutputDir("hi!");
        int int16 = atomikosProperties12.getConsoleFileLimit();
        java.util.Properties properties17 = atomikosProperties12.asProperties();
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Properties properties19 = new java.util.Properties(properties18);
        properties19.clear();
        properties17.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties19);
        java.util.Properties properties22 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str24 = atomikosProperties23.getConsoleFileName();
        java.lang.Object obj26 = properties22.put((java.lang.Object) atomikosProperties23, (java.lang.Object) 0L);
        java.lang.Object obj29 = properties22.setProperty("", "");
        java.util.Properties properties30 = new java.util.Properties(properties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str32 = atomikosProperties31.getConsoleFileName();
        atomikosProperties31.setOutputDir("hi!");
        int int35 = atomikosProperties31.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel36 = atomikosProperties31.getConsoleLogLevel();
        java.lang.Object obj37 = properties17.getOrDefault((java.lang.Object) properties22, (java.lang.Object) atomikosProperties31);
        java.util.Properties properties38 = null;
        java.util.Properties properties39 = new java.util.Properties(properties38);
        java.util.Properties properties40 = new java.util.Properties();
        java.util.Properties properties41 = new java.util.Properties(properties40);
        properties41.clear();
        properties39.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties41);
        java.util.Collection<java.lang.Object> objCollection44 = properties41.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str46 = atomikosProperties45.getConsoleFileName();
        atomikosProperties45.setOutputDir("hi!");
        int int49 = atomikosProperties45.getConsoleFileLimit();
        java.util.Properties properties50 = atomikosProperties45.asProperties();
        boolean boolean51 = properties41.containsValue((java.lang.Object) atomikosProperties45);
        java.util.Enumeration<java.lang.Object> objEnumeration52 = properties41.elements();
        java.util.Enumeration<java.lang.Object> objEnumeration53 = properties41.elements();
        java.lang.Object obj54 = properties3.putIfAbsent((java.lang.Object) atomikosProperties31, (java.lang.Object) properties41);
        java.lang.Object obj55 = null;
        boolean boolean56 = properties41.equals(obj55);
        java.util.Properties properties57 = null;
        java.util.Properties properties58 = new java.util.Properties(properties57);
        java.util.Properties properties59 = new java.util.Properties();
        java.util.Properties properties60 = new java.util.Properties(properties59);
        properties60.clear();
        properties58.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties60);
        java.util.Collection<java.lang.Object> objCollection63 = properties60.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str65 = atomikosProperties64.getConsoleFileName();
        atomikosProperties64.setOutputDir("hi!");
        int int68 = atomikosProperties64.getConsoleFileLimit();
        java.util.Properties properties69 = atomikosProperties64.asProperties();
        boolean boolean70 = properties60.containsValue((java.lang.Object) atomikosProperties64);
        int int71 = atomikosProperties64.getConsoleFileLimit();
        java.lang.String str72 = atomikosProperties64.getService();
        java.util.Properties properties73 = null;
        java.util.Properties properties74 = new java.util.Properties(properties73);
        boolean boolean76 = properties74.containsValue((java.lang.Object) 10L);
        java.util.Collection<java.lang.Object> objCollection77 = properties74.values();
        java.util.Set<java.lang.Object> objSet78 = properties74.keySet();
        java.lang.Object obj79 = properties41.putIfAbsent((java.lang.Object) atomikosProperties64, (java.lang.Object) properties74);
        atomikosProperties64.setTransactionManagerUniqueName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tm.out" + "'", str13, "tm.out");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tm.out" + "'", str24, "tm.out");
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tm.out" + "'", str32, "tm.out");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel36 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel36.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(objCollection44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "tm.out" + "'", str46, "tm.out");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objEnumeration52);
        org.junit.Assert.assertNotNull(objEnumeration53);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objCollection63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "tm.out" + "'", str65, "tm.out");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(properties69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(objCollection77);
        org.junit.Assert.assertNotNull(objSet78);
        org.junit.Assert.assertNull(obj79);
    }

    @Test
    public void test00563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00563");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties8.getConsoleLogLevel();
        java.lang.Object obj14 = properties1.putIfAbsent((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosLoggingLevel13);
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.Object obj17 = properties15.get((java.lang.Object) (byte) -1);
        java.util.Properties properties18 = new java.util.Properties(properties15);
        boolean boolean19 = properties1.equals((java.lang.Object) properties15);
        java.util.Properties properties20 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.getConsoleFileName();
        java.lang.Object obj24 = properties20.put((java.lang.Object) atomikosProperties21, (java.lang.Object) 0L);
        java.util.Properties properties25 = new java.util.Properties(properties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setConsoleFileCount((-1));
        atomikosProperties26.setTransactionManagerUniqueName("tm.out");
        java.lang.Object obj31 = properties20.remove((java.lang.Object) atomikosProperties26);
        boolean boolean32 = atomikosProperties26.isForceShutdownOnVmExit();
        java.util.Properties properties33 = atomikosProperties26.asProperties();
        java.util.Properties properties34 = null;
        java.util.Properties properties35 = new java.util.Properties(properties34);
        boolean boolean37 = properties35.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str39 = atomikosProperties38.getTransactionManagerUniqueName();
        atomikosProperties38.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str43 = atomikosProperties42.getConsoleFileName();
        atomikosProperties42.setOutputDir("hi!");
        int int46 = atomikosProperties42.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel47 = atomikosProperties42.getConsoleLogLevel();
        java.lang.Object obj48 = properties35.putIfAbsent((java.lang.Object) atomikosProperties38, (java.lang.Object) atomikosLoggingLevel47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str50 = atomikosProperties49.getConsoleFileName();
        atomikosProperties49.setOutputDir("hi!");
        int int53 = atomikosProperties49.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel54 = atomikosProperties49.getConsoleLogLevel();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery55 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long56 = recovery55.getForgetOrphanedLogEntriesDelay();
        java.util.Properties properties57 = new java.util.Properties();
        java.util.Properties properties58 = new java.util.Properties(properties57);
        properties58.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str62 = atomikosProperties61.getConsoleFileName();
        atomikosProperties61.setOutputDir("hi!");
        int int65 = atomikosProperties61.getConsoleFileLimit();
        java.lang.Object obj66 = properties58.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties61);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel67 = atomikosProperties61.getConsoleLogLevel();
        java.lang.String str68 = atomikosProperties61.getTransactionManagerUniqueName();
        atomikosProperties61.setThreadedTwoPhaseCommit(false);
        boolean boolean71 = properties35.replace((java.lang.Object) atomikosProperties49, (java.lang.Object) recovery55, (java.lang.Object) false);
        java.lang.Object obj72 = properties15.replace((java.lang.Object) atomikosProperties26, (java.lang.Object) properties35);
        java.util.Enumeration<java.lang.Object> objEnumeration73 = properties15.keys();
        java.lang.Object obj76 = properties15.setProperty("{}", "");
        java.io.Reader reader77 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties15.load(reader77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tm.out" + "'", str22, "tm.out");
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tm.out" + "'", str43, "tm.out");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel47 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel47.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tm.out" + "'", str50, "tm.out");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel54 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel54.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 86400000L + "'", long56 == 86400000L);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tm.out" + "'", str62, "tm.out");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel67 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel67.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertNotNull(objEnumeration73);
        org.junit.Assert.assertNull(obj76);
    }

    @Test
    public void test00564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00564");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean5 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setConsoleFileCount(10);
        atomikosProperties0.setConsoleFileCount(50);
        atomikosProperties0.setMaxTimeout((long) (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test00565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00565");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        atomikosProperties19.setAllowSubTransactions(false);
        atomikosProperties19.setSerialJtaTransactions(true);
        java.util.Properties properties29 = atomikosProperties19.asProperties();
        atomikosProperties19.setConsoleFileLimit((int) '#');
        atomikosProperties19.setAllowSubTransactions(false);
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(properties29);
    }

    @Test
    public void test00566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00566");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Collection<java.lang.Object> objCollection6 = properties3.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str8 = atomikosProperties7.getConsoleFileName();
        atomikosProperties7.setOutputDir("hi!");
        int int11 = atomikosProperties7.getConsoleFileLimit();
        java.util.Properties properties12 = atomikosProperties7.asProperties();
        boolean boolean13 = properties3.containsValue((java.lang.Object) atomikosProperties7);
        int int14 = atomikosProperties7.getConsoleFileLimit();
        java.lang.String str15 = atomikosProperties7.getService();
        boolean boolean16 = atomikosProperties7.isSerialJtaTransactions();
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tm.out" + "'", str8, "tm.out");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test00567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00567");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties1.elements();
        java.util.Properties properties5 = new java.util.Properties(properties1);
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Properties properties7 = new java.util.Properties(properties6);
        int int8 = properties7.size();
        boolean boolean9 = properties7.isEmpty();
        java.util.Properties properties10 = new java.util.Properties(properties7);
        java.util.Properties properties11 = new java.util.Properties(properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.getConsoleFileName();
        atomikosProperties12.setOutputDir("hi!");
        int int16 = atomikosProperties12.getConsoleFileLimit();
        java.util.Properties properties17 = atomikosProperties12.asProperties();
        java.lang.String str18 = atomikosProperties12.getService();
        atomikosProperties12.setService("hi!");
        atomikosProperties12.setForceShutdownOnVmExit(true);
        atomikosProperties12.setThreadedTwoPhaseCommit(false);
        java.util.Properties properties25 = atomikosProperties12.asProperties();
        java.util.Properties properties27 = new java.util.Properties();
        java.util.Properties properties28 = new java.util.Properties(properties27);
        int int29 = properties28.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery30 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long31 = recovery30.getForgetOrphanedLogEntriesDelay();
        java.lang.Class<?> wildcardClass32 = recovery30.getClass();
        boolean boolean33 = properties28.containsKey((java.lang.Object) wildcardClass32);
        boolean boolean34 = properties7.replace((java.lang.Object) properties25, (java.lang.Object) 1.0f, (java.lang.Object) wildcardClass32);
        java.util.Properties properties35 = new java.util.Properties(properties25);
        java.util.Properties properties36 = new java.util.Properties();
        java.util.Properties properties37 = new java.util.Properties(properties36);
        properties37.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str41 = atomikosProperties40.getConsoleFileName();
        atomikosProperties40.setOutputDir("hi!");
        int int44 = atomikosProperties40.getConsoleFileLimit();
        java.lang.Object obj45 = properties37.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties40);
        boolean boolean46 = atomikosProperties40.isForceShutdownOnVmExit();
        atomikosProperties40.setConsoleFileName("");
        java.lang.String str49 = atomikosProperties40.getService();
        java.util.Properties properties50 = atomikosProperties40.asProperties();
        boolean boolean51 = properties1.remove((java.lang.Object) properties25, (java.lang.Object) atomikosProperties40);
        atomikosProperties40.setEnableLogging(false);
        java.util.Properties properties54 = atomikosProperties40.asProperties();
        int int55 = atomikosProperties40.getConsoleFileCount();
        boolean boolean56 = atomikosProperties40.isForceShutdownOnVmExit();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tm.out" + "'", str13, "tm.out");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 86400000L + "'", long31 == 86400000L);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "tm.out" + "'", str41, "tm.out");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(properties54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test00568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00568");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.lang.Object obj3 = null;
        boolean boolean4 = properties0.equals(obj3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.keys();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection7 = properties6.values();
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Properties properties11 = new java.util.Properties(properties10);
        properties11.clear();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.lang.Object obj16 = properties9.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setConsoleFileCount((-1));
        java.lang.String str21 = atomikosProperties18.getOutputDir();
        atomikosProperties18.setLogBaseName("tm.out");
        boolean boolean24 = properties9.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties25.setConsoleFileCount(100);
        atomikosProperties25.setAllowSubTransactions(true);
        java.lang.Object obj30 = properties9.remove((java.lang.Object) atomikosProperties25);
        atomikosProperties25.setAllowSubTransactions(false);
        int int33 = atomikosProperties25.getConsoleFileCount();
        java.util.Properties properties34 = atomikosProperties25.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setConsoleFileCount((-1));
        atomikosProperties35.setTransactionManagerUniqueName("tm.out");
        java.lang.String str40 = atomikosProperties35.getLogBaseName();
        atomikosProperties35.setConsoleFileLimit((int) (byte) 1);
        atomikosProperties35.setLogBaseName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        java.lang.Object obj45 = properties0.put((java.lang.Object) properties34, (java.lang.Object) "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        java.util.Enumeration<java.lang.Object> objEnumeration46 = properties34.keys();
        java.io.PrintStream printStream47 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties34.list(printStream47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(objCollection7);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "tmlog" + "'", str40, "tmlog");
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNotNull(objEnumeration46);
    }

    @Test
    public void test00569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00569");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.lang.String str6 = atomikosProperties0.getService();
        atomikosProperties0.setService("hi!");
        atomikosProperties0.setConsoleFileName("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = atomikosProperties0.getRecovery();
        java.util.Properties properties12 = atomikosProperties0.asProperties();
        java.util.Properties properties13 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection14 = properties13.values();
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        java.util.Properties properties17 = new java.util.Properties();
        java.util.Properties properties18 = new java.util.Properties(properties17);
        properties18.clear();
        properties16.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties18);
        java.lang.Object obj23 = properties16.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties13.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties16);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties25.setConsoleFileCount((-1));
        java.lang.String str28 = atomikosProperties25.getOutputDir();
        atomikosProperties25.setLogBaseName("tm.out");
        boolean boolean31 = properties16.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties32.setConsoleFileCount(100);
        atomikosProperties32.setAllowSubTransactions(true);
        java.lang.Object obj37 = properties16.remove((java.lang.Object) atomikosProperties32);
        java.lang.String str38 = atomikosProperties32.getLogBaseDir();
        java.lang.Class<?> wildcardClass39 = atomikosProperties32.getClass();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties40.setConsoleFileLimit((int) (byte) 10);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel43 = atomikosProperties40.getConsoleLogLevel();
        java.lang.Object obj44 = properties12.put((java.lang.Object) wildcardClass39, (java.lang.Object) atomikosLoggingLevel43);
        java.util.Enumeration<java.lang.Object> objEnumeration45 = properties12.elements();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(recovery11);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertNotNull(objCollection14);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel43 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel43.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(objEnumeration45);
    }

    @Test
    public void test00570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00570");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.lang.Object obj4 = properties0.setProperty("hi!", "");
        java.util.Properties properties5 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.getConsoleFileName();
        java.lang.Object obj9 = properties5.put((java.lang.Object) atomikosProperties6, (java.lang.Object) 0L);
        java.lang.Object obj12 = properties5.setProperty("", "");
        java.util.Properties properties13 = new java.util.Properties(properties5);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties13);
        java.util.Properties properties15 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.getConsoleFileName();
        java.lang.Object obj19 = properties15.put((java.lang.Object) atomikosProperties16, (java.lang.Object) 0L);
        java.util.Properties properties20 = new java.util.Properties(properties15);
        java.util.Properties properties21 = new java.util.Properties(properties20);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.io.InputStream inputStream23 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.loadFromXML(inputStream23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tm.out" + "'", str7, "tm.out");
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tm.out" + "'", str17, "tm.out");
        org.junit.Assert.assertNull(obj19);
    }

    @Test
    public void test00571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00571");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        boolean boolean10 = atomikosProperties4.isForceShutdownOnVmExit();
        atomikosProperties4.setConsoleFileName("");
        java.lang.String str13 = atomikosProperties4.getService();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery14 = atomikosProperties4.getRecovery();
        recovery14.setRetryInterval((long) 50);
        recovery14.setDelay((long) (short) 100);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(recovery14);
    }

    @Test
    public void test00572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00572");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        java.lang.String str2 = atomikosProperties0.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str4 = atomikosProperties3.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = atomikosProperties3.getConsoleLogLevel();
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        atomikosProperties0.setSerialJtaTransactions(false);
        boolean boolean10 = atomikosProperties0.isForceShutdownOnVmExit();
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.getConsoleFileName();
        atomikosProperties12.setOutputDir("hi!");
        int int16 = atomikosProperties12.getConsoleFileLimit();
        java.lang.String str17 = atomikosProperties12.getService();
        java.lang.String str18 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setOutputDir("tmlog");
        long long21 = atomikosProperties12.getMaxTimeout();
        java.lang.String str22 = atomikosProperties12.getLogBaseName();
        int int23 = atomikosProperties12.getConsoleFileCount();
        atomikosProperties12.setSerialJtaTransactions(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str27 = atomikosProperties26.getConsoleFileName();
        atomikosProperties26.setOutputDir("hi!");
        int int30 = atomikosProperties26.getConsoleFileLimit();
        boolean boolean31 = atomikosProperties26.isForceShutdownOnVmExit();
        java.lang.Object obj32 = properties11.replace((java.lang.Object) atomikosProperties12, (java.lang.Object) boolean31);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.setConsoleFileCount(100);
        atomikosProperties33.setAllowSubTransactions(true);
        atomikosProperties33.setMaxTimeout((long) '4');
        java.lang.String str40 = atomikosProperties33.getLogBaseDir();
        int int41 = atomikosProperties33.getConsoleFileCount();
        int int42 = atomikosProperties33.getMaxActives();
        int int43 = atomikosProperties33.getMaxActives();
        boolean boolean44 = properties11.contains((java.lang.Object) atomikosProperties33);
        java.util.Set<java.lang.String> strSet45 = properties11.stringPropertyNames();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tm.out" + "'", str4, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel5 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel5.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tm.out" + "'", str13, "tm.out");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 300000L + "'", long21 == 300000L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tm.out" + "'", str27, "tm.out");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 50 + "'", int42 == 50);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 50 + "'", int43 == 50);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strSet45);
    }

    @Test
    public void test00573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00573");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        boolean boolean10 = atomikosProperties4.isForceShutdownOnVmExit();
        atomikosProperties4.setConsoleFileName("");
        java.lang.String str13 = atomikosProperties4.getService();
        java.util.Properties properties14 = atomikosProperties4.asProperties();
        java.lang.Object obj15 = null;
        boolean boolean16 = properties14.equals(obj15);
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        boolean boolean20 = properties18.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.getTransactionManagerUniqueName();
        atomikosProperties21.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str26 = atomikosProperties25.getConsoleFileName();
        atomikosProperties25.setOutputDir("hi!");
        int int29 = atomikosProperties25.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel30 = atomikosProperties25.getConsoleLogLevel();
        java.lang.Object obj31 = properties18.putIfAbsent((java.lang.Object) atomikosProperties21, (java.lang.Object) atomikosLoggingLevel30);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery32 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery32.setRetryInterval((long) (byte) 10);
        int int35 = recovery32.getMaxRetries();
        recovery32.setDelay(10L);
        recovery32.setRetryInterval((long) (short) 10);
        java.lang.Object obj40 = properties14.replace((java.lang.Object) atomikosLoggingLevel30, (java.lang.Object) recovery32);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery41 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long42 = recovery41.getForgetOrphanedLogEntriesDelay();
        recovery41.setDelay((long) (short) 1);
        long long45 = recovery41.getForgetOrphanedLogEntriesDelay();
        recovery41.setDelay((long) '4');
        int int48 = recovery41.getMaxRetries();
        recovery41.setDelay((long) (short) 0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties51.setConsoleFileCount((-1));
        java.lang.String str54 = atomikosProperties51.getOutputDir();
        atomikosProperties51.setLogBaseName("tm.out");
        atomikosProperties51.setForceShutdownOnVmExit(true);
        int int59 = atomikosProperties51.getConsoleFileCount();
        atomikosProperties51.setThreadedTwoPhaseCommit(true);
        atomikosProperties51.setMaxTimeout((long) (short) 100);
        java.lang.Object obj64 = properties14.replace((java.lang.Object) (short) 0, (java.lang.Object) atomikosProperties51);
        java.lang.Object obj65 = null;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties66.setConsoleFileCount(100);
        atomikosProperties66.setCheckpointInterval((long) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj71 = properties14.putIfAbsent(obj65, (java.lang.Object) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "tm.out" + "'", str26, "tm.out");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel30 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel30.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 86400000L + "'", long42 == 86400000L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 86400000L + "'", long45 == 86400000L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNull(obj64);
    }

    @Test
    public void test00574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00574");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.setRetryInterval((long) (byte) 10);
        int int3 = recovery0.getMaxRetries();
        recovery0.setDelay(10L);
        long long6 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long7 = recovery0.getDelay();
        long long8 = recovery0.getRetryInterval();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 86400000L + "'", long6 == 86400000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L);
    }

    @Test
    public void test00575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00575");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        atomikosProperties19.setAllowSubTransactions(false);
        int int27 = atomikosProperties19.getConsoleFileCount();
        atomikosProperties19.setThreadedTwoPhaseCommit(false);
        atomikosProperties19.setCheckpointInterval((long) (short) -1);
        boolean boolean32 = atomikosProperties19.isThreadedTwoPhaseCommit();
        long long33 = atomikosProperties19.getMaxTimeout();
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 300000L + "'", long33 == 300000L);
    }

    @Test
    public void test00576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00576");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties1.elements();
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection6 = properties5.values();
        java.util.Properties properties7 = new java.util.Properties(properties5);
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties7.elements();
        boolean boolean9 = properties7.isEmpty();
        boolean boolean10 = properties1.containsValue((java.lang.Object) boolean9);
        java.io.InputStream inputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.loadFromXML(inputStream11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test00577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00577");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int1 = recovery0.getMaxRetries();
        recovery0.setForgetOrphanedLogEntriesDelay((long) (short) -1);
        long long4 = recovery0.getRetryInterval();
        recovery0.setMaxRetries(35);
        long long7 = recovery0.getDelay();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 5 + "'", int1 == 5);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
    }

    @Test
    public void test00578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00578");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties3.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet9 = properties3.stringPropertyNames();
        java.lang.Object obj10 = new java.lang.Object();
        java.lang.Object obj11 = properties3.get(obj10);
        java.util.Collection<java.lang.Object> objCollection12 = properties3.values();
        java.lang.String str15 = properties3.getProperty("{hi!=10}", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=32, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(objCollection12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=32, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str15, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=32, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
    }

    @Test
    public void test00579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00579");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties8.getConsoleLogLevel();
        java.lang.Object obj14 = properties1.putIfAbsent((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosLoggingLevel13);
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.Object obj17 = properties15.get((java.lang.Object) (byte) -1);
        java.util.Properties properties18 = new java.util.Properties(properties15);
        boolean boolean19 = properties1.equals((java.lang.Object) properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties1.keys();
        java.util.Properties properties21 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection22 = properties21.values();
        java.util.Properties properties23 = new java.util.Properties(properties21);
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties23.elements();
        boolean boolean25 = properties1.equals((java.lang.Object) properties23);
        java.io.PrintWriter printWriter26 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties23.list(printWriter26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertNotNull(objCollection22);
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test00580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00580");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties8.getConsoleLogLevel();
        java.lang.Object obj14 = properties1.putIfAbsent((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosLoggingLevel13);
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.Object obj17 = properties15.get((java.lang.Object) (byte) -1);
        java.util.Properties properties18 = new java.util.Properties(properties15);
        boolean boolean19 = properties1.equals((java.lang.Object) properties15);
        java.util.Set<java.lang.Object> objSet20 = properties1.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.getConsoleFileName();
        atomikosProperties21.setOutputDir("hi!");
        int int25 = atomikosProperties21.getConsoleFileLimit();
        java.util.Properties properties26 = atomikosProperties21.asProperties();
        java.util.Properties properties27 = null;
        java.util.Properties properties28 = new java.util.Properties(properties27);
        java.util.Properties properties29 = new java.util.Properties();
        java.util.Properties properties30 = new java.util.Properties(properties29);
        properties30.clear();
        properties28.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties30);
        java.lang.Object obj35 = properties30.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        boolean boolean36 = properties26.equals(obj35);
        java.lang.Object obj39 = properties26.setProperty("", "");
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        java.io.Writer writer41 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties26.store(writer41, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=32, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objSet20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tm.out" + "'", str22, "tm.out");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(obj39);
    }

    @Test
    public void test00581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00581");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Properties properties4 = new java.util.Properties(properties1);
        java.util.Properties properties5 = new java.util.Properties(properties1);
        java.util.Properties properties6 = new java.util.Properties(properties5);
        java.util.Properties properties7 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        java.lang.Object obj11 = properties7.put((java.lang.Object) atomikosProperties8, (java.lang.Object) 0L);
        long long12 = atomikosProperties8.getCheckpointInterval();
        int int13 = atomikosProperties8.getConsoleFileCount();
        boolean boolean14 = atomikosProperties8.isAllowSubTransactions();
        java.lang.Object obj15 = properties5.remove((java.lang.Object) boolean14);
        java.io.Reader reader16 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.load(reader16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj15);
    }

    @Test
    public void test00582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00582");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet6 = properties5.stringPropertyNames();
        java.util.Properties properties7 = new java.util.Properties(properties5);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Properties properties11 = new java.util.Properties(properties10);
        properties11.clear();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.lang.Object obj16 = properties11.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet17 = properties11.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setConsoleFileCount((-1));
        java.lang.String str21 = atomikosProperties18.getOutputDir();
        atomikosProperties18.setLogBaseName("tm.out");
        int int24 = atomikosProperties18.getConsoleFileCount();
        boolean boolean25 = properties11.containsKey((java.lang.Object) atomikosProperties18);
        atomikosProperties18.setConsoleFileCount((int) (byte) -1);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery28 = atomikosProperties18.getRecovery();
        java.util.Properties properties29 = new java.util.Properties();
        java.util.Properties properties30 = new java.util.Properties(properties29);
        properties30.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.getConsoleFileName();
        atomikosProperties33.setOutputDir("hi!");
        int int37 = atomikosProperties33.getConsoleFileLimit();
        java.lang.Object obj38 = properties30.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties33);
        atomikosProperties33.setLogBaseName("tm.out");
        atomikosProperties33.setForceShutdownOnVmExit(false);
        java.lang.Object obj43 = properties7.replace((java.lang.Object) recovery28, (java.lang.Object) atomikosProperties33);
        java.util.Properties properties44 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str46 = atomikosProperties45.getConsoleFileName();
        java.lang.Object obj48 = properties44.put((java.lang.Object) atomikosProperties45, (java.lang.Object) 0L);
        properties44.clear();
        java.util.Properties properties50 = new java.util.Properties(properties44);
        java.lang.String str52 = properties50.getProperty("{}");
        boolean boolean53 = properties7.containsKey((java.lang.Object) "{}");
        java.io.InputStream inputStream54 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties7.load(inputStream54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(recovery28);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tm.out" + "'", str34, "tm.out");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "tm.out" + "'", str46, "tm.out");
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test00583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00583");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        atomikosProperties19.setAllowSubTransactions(false);
        atomikosProperties19.setSerialJtaTransactions(true);
        java.util.Properties properties29 = atomikosProperties19.asProperties();
        atomikosProperties19.setMaxActives(10);
        java.lang.String str32 = atomikosProperties19.getLogBaseName();
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tmlog" + "'", str32, "tmlog");
    }

    @Test
    public void test00584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00584");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties3.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet9 = properties3.stringPropertyNames();
        java.lang.Object obj10 = new java.lang.Object();
        java.lang.Object obj11 = properties3.get(obj10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.getConsoleFileName();
        atomikosProperties12.setOutputDir("hi!");
        int int16 = atomikosProperties12.getConsoleFileLimit();
        java.util.Properties properties17 = atomikosProperties12.asProperties();
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Properties properties19 = new java.util.Properties(properties18);
        properties19.clear();
        properties17.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties19);
        java.util.Properties properties22 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str24 = atomikosProperties23.getConsoleFileName();
        java.lang.Object obj26 = properties22.put((java.lang.Object) atomikosProperties23, (java.lang.Object) 0L);
        java.lang.Object obj29 = properties22.setProperty("", "");
        java.util.Properties properties30 = new java.util.Properties(properties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str32 = atomikosProperties31.getConsoleFileName();
        atomikosProperties31.setOutputDir("hi!");
        int int35 = atomikosProperties31.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel36 = atomikosProperties31.getConsoleLogLevel();
        java.lang.Object obj37 = properties17.getOrDefault((java.lang.Object) properties22, (java.lang.Object) atomikosProperties31);
        java.util.Properties properties38 = null;
        java.util.Properties properties39 = new java.util.Properties(properties38);
        java.util.Properties properties40 = new java.util.Properties();
        java.util.Properties properties41 = new java.util.Properties(properties40);
        properties41.clear();
        properties39.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties41);
        java.util.Collection<java.lang.Object> objCollection44 = properties41.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str46 = atomikosProperties45.getConsoleFileName();
        atomikosProperties45.setOutputDir("hi!");
        int int49 = atomikosProperties45.getConsoleFileLimit();
        java.util.Properties properties50 = atomikosProperties45.asProperties();
        boolean boolean51 = properties41.containsValue((java.lang.Object) atomikosProperties45);
        java.util.Enumeration<java.lang.Object> objEnumeration52 = properties41.elements();
        java.util.Enumeration<java.lang.Object> objEnumeration53 = properties41.elements();
        java.lang.Object obj54 = properties3.putIfAbsent((java.lang.Object) atomikosProperties31, (java.lang.Object) properties41);
        java.util.Properties properties55 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str57 = atomikosProperties56.getConsoleFileName();
        java.lang.Object obj59 = properties55.put((java.lang.Object) atomikosProperties56, (java.lang.Object) 0L);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet60 = properties55.entrySet();
        java.util.Properties properties61 = new java.util.Properties(properties55);
        java.util.Properties properties62 = new java.util.Properties();
        java.util.Properties properties63 = new java.util.Properties(properties62);
        properties63.clear();
        java.lang.Object obj65 = properties3.getOrDefault((java.lang.Object) properties55, (java.lang.Object) properties63);
        java.io.OutputStream outputStream66 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties63.save(outputStream66, "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tm.out" + "'", str13, "tm.out");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tm.out" + "'", str24, "tm.out");
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tm.out" + "'", str32, "tm.out");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel36 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel36.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(objCollection44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "tm.out" + "'", str46, "tm.out");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objEnumeration52);
        org.junit.Assert.assertNotNull(objEnumeration53);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "tm.out" + "'", str57, "tm.out");
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNotNull(objEntrySet60);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "{}");
    }

    @Test
    public void test00585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00585");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Properties properties7 = new java.util.Properties(properties6);
        properties7.clear();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        boolean boolean10 = properties5.isEmpty();
        java.io.OutputStream outputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.storeToXML(outputStream11, "{=hi!}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test00586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00586");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str3 = atomikosProperties2.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel4 = atomikosProperties2.getConsoleLogLevel();
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel4);
        atomikosProperties0.setSerialJtaTransactions(false);
        int int8 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.Object> objSet10 = properties9.keySet();
        java.util.Properties properties11 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection12 = properties11.values();
        java.util.Properties properties13 = null;
        java.util.Properties properties14 = new java.util.Properties(properties13);
        java.util.Properties properties15 = new java.util.Properties();
        java.util.Properties properties16 = new java.util.Properties(properties15);
        properties16.clear();
        properties14.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties16);
        java.lang.Object obj21 = properties14.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties11.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties14);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties23.setConsoleFileCount((-1));
        java.lang.String str26 = atomikosProperties23.getOutputDir();
        atomikosProperties23.setLogBaseName("tm.out");
        boolean boolean29 = properties14.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties30.setConsoleFileCount(100);
        atomikosProperties30.setAllowSubTransactions(true);
        java.lang.Object obj35 = properties14.remove((java.lang.Object) atomikosProperties30);
        java.util.Set<java.lang.Object> objSet36 = properties14.keySet();
        java.util.Properties properties37 = new java.util.Properties(properties14);
        java.lang.Object obj40 = properties14.setProperty("hi!", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=32, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean41 = properties9.containsValue(obj40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "tm.out" + "'", str3, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel4 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel4.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(objSet10);
        org.junit.Assert.assertNotNull(objCollection12);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(objSet36);
        org.junit.Assert.assertNull(obj40);
    }

    @Test
    public void test00587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00587");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        boolean boolean10 = atomikosProperties4.isForceShutdownOnVmExit();
        atomikosProperties4.setConsoleFileName("");
        java.lang.String str13 = atomikosProperties4.getService();
        atomikosProperties4.setForceShutdownOnVmExit(true);
        boolean boolean16 = atomikosProperties4.isForceShutdownOnVmExit();
        boolean boolean17 = atomikosProperties4.isThreadedTwoPhaseCommit();
        atomikosProperties4.setSerialJtaTransactions(true);
        atomikosProperties4.setOutputDir("{10=10.0}");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test00588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00588");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        atomikosProperties0.setTransactionManagerUniqueName("tm.out");
        java.lang.String str5 = atomikosProperties0.getLogBaseDir();
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test00589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00589");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Properties properties4 = new java.util.Properties(properties1);
        java.util.Properties properties5 = new java.util.Properties(properties1);
        boolean boolean6 = properties5.isEmpty();
        java.io.Reader reader7 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.load(reader7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test00590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00590");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        java.util.Set<java.lang.String> strSet3 = properties1.stringPropertyNames();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Properties properties7 = new java.util.Properties(properties6);
        properties7.clear();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.util.Collection<java.lang.Object> objCollection10 = properties7.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.getConsoleFileName();
        atomikosProperties11.setOutputDir("hi!");
        int int15 = atomikosProperties11.getConsoleFileLimit();
        java.util.Properties properties16 = atomikosProperties11.asProperties();
        boolean boolean17 = properties7.containsValue((java.lang.Object) atomikosProperties11);
        boolean boolean18 = properties1.containsValue((java.lang.Object) properties7);
        java.io.InputStream inputStream19 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(inputStream19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(objCollection10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tm.out" + "'", str12, "tm.out");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test00591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00591");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        boolean boolean10 = atomikosProperties4.isForceShutdownOnVmExit();
        atomikosProperties4.setConsoleFileName("");
        java.lang.String str13 = atomikosProperties4.getService();
        boolean boolean14 = atomikosProperties4.isEnableLogging();
        int int15 = atomikosProperties4.getMaxActives();
        atomikosProperties4.setLogBaseName("{hi!=}");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 50 + "'", int15 == 50);
    }

    @Test
    public void test00592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00592");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        long long4 = atomikosProperties0.getCheckpointInterval();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.io.Writer writer6 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.store(writer6, "{=hi!}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 500L + "'", long4 == 500L);
        org.junit.Assert.assertNotNull(properties5);
    }

    @Test
    public void test00593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00593");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("", "hi!");
        java.util.Properties properties4 = new java.util.Properties(properties0);
        java.io.OutputStream outputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties4.store(outputStream5, "{hi!=}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj3);
    }

    @Test
    public void test00594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00594");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet6 = properties5.stringPropertyNames();
        java.util.Properties properties7 = new java.util.Properties(properties5);
        int int8 = properties7.size();
        java.lang.String str11 = properties7.getProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=32, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=32, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str11, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=32, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
    }

    @Test
    public void test00595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00595");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        java.util.Set<java.lang.Object> objSet6 = properties5.keySet();
        java.lang.Object obj9 = properties5.setProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str11 = atomikosProperties10.getConsoleFileName();
        atomikosProperties10.setOutputDir("hi!");
        int int14 = atomikosProperties10.getConsoleFileLimit();
        atomikosProperties10.setDefaultJtaTimeout(1L);
        atomikosProperties10.setForceShutdownOnVmExit(false);
        atomikosProperties10.setLogBaseDir("tmlog");
        boolean boolean21 = properties5.containsValue((java.lang.Object) "tmlog");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.getConsoleFileName();
        java.lang.String str24 = atomikosProperties22.getTransactionManagerUniqueName();
        atomikosProperties22.setCheckpointInterval((long) (byte) 0);
        atomikosProperties22.setConsoleFileName("hi!");
        java.util.Properties properties29 = atomikosProperties22.asProperties();
        java.util.Set<java.lang.Object> objSet30 = properties29.keySet();
        java.lang.Object obj31 = properties5.get((java.lang.Object) properties29);
        java.util.Collection<java.lang.Object> objCollection32 = properties5.values();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(objSet6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tm.out" + "'", str11, "tm.out");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tm.out" + "'", str23, "tm.out");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertNotNull(objSet30);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(objCollection32);
    }

    @Test
    public void test00596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00596");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Properties properties25 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str27 = atomikosProperties26.getConsoleFileName();
        atomikosProperties26.setOutputDir("hi!");
        int int30 = atomikosProperties26.getConsoleFileLimit();
        java.lang.String str31 = atomikosProperties26.getService();
        java.lang.String str32 = atomikosProperties26.getOutputDir();
        atomikosProperties26.setOutputDir("tmlog");
        long long35 = atomikosProperties26.getMaxTimeout();
        boolean boolean36 = properties25.contains((java.lang.Object) atomikosProperties26);
        java.lang.String str38 = properties25.getProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=32, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        java.lang.String str41 = properties25.getProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=100}", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tm.out" + "'", str27, "tm.out");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 300000L + "'", long35 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str41, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
    }

    @Test
    public void test00597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00597");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties1.keys();
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection6 = properties5.values();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        properties10.clear();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.lang.Object obj15 = properties8.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setConsoleFileCount((-1));
        java.lang.String str20 = atomikosProperties17.getOutputDir();
        atomikosProperties17.setLogBaseName("tm.out");
        boolean boolean23 = properties8.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.setConsoleFileCount(100);
        atomikosProperties24.setAllowSubTransactions(true);
        java.lang.Object obj29 = properties8.remove((java.lang.Object) atomikosProperties24);
        atomikosProperties24.setAllowSubTransactions(false);
        atomikosProperties24.setSerialJtaTransactions(true);
        boolean boolean34 = properties1.containsKey((java.lang.Object) atomikosProperties24);
        java.util.Properties properties35 = new java.util.Properties(properties1);
        java.lang.Object obj38 = properties35.setProperty("{}", "hi!");
        java.lang.String str41 = properties35.getProperty("{10=10.0}", "{hi!=10}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "{hi!=10}" + "'", str41, "{hi!=10}");
    }

    @Test
    public void test00598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00598");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        java.util.Properties properties26 = new java.util.Properties(properties3);
        java.util.Set<java.lang.String> strSet27 = properties26.stringPropertyNames();
        java.util.Properties properties28 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection29 = properties28.values();
        java.util.Properties properties30 = null;
        java.util.Properties properties31 = new java.util.Properties(properties30);
        java.util.Properties properties32 = new java.util.Properties();
        java.util.Properties properties33 = new java.util.Properties(properties32);
        properties33.clear();
        properties31.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties33);
        java.lang.Object obj38 = properties31.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties28.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties31);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties40.setConsoleFileCount((-1));
        java.lang.String str43 = atomikosProperties40.getOutputDir();
        atomikosProperties40.setLogBaseName("tm.out");
        boolean boolean46 = properties31.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties47.setConsoleFileCount(100);
        atomikosProperties47.setAllowSubTransactions(true);
        java.lang.Object obj52 = properties31.remove((java.lang.Object) atomikosProperties47);
        atomikosProperties47.setAllowSubTransactions(false);
        atomikosProperties47.setSerialJtaTransactions(true);
        boolean boolean57 = atomikosProperties47.isSerialJtaTransactions();
        atomikosProperties47.setOutputDir("{}");
        atomikosProperties47.setThreadedTwoPhaseCommit(true);
        atomikosProperties47.setConsoleFileLimit(10);
        java.lang.Object obj64 = properties26.remove((java.lang.Object) atomikosProperties47);
        java.lang.Object obj65 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj66 = properties26.remove(obj65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(objCollection29);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNull(obj64);
    }

    @Test
    public void test00599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00599");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        boolean boolean10 = atomikosProperties4.isForceShutdownOnVmExit();
        atomikosProperties4.setConsoleFileName("");
        java.lang.String str13 = atomikosProperties4.getService();
        boolean boolean14 = atomikosProperties4.isEnableLogging();
        java.util.Properties properties15 = atomikosProperties4.asProperties();
        java.lang.String str16 = atomikosProperties4.getLogBaseDir();
        java.lang.String str17 = atomikosProperties4.getLogBaseDir();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test00600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00600");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        atomikosProperties19.setAllowSubTransactions(false);
        atomikosProperties19.setSerialJtaTransactions(true);
        java.util.Properties properties29 = atomikosProperties19.asProperties();
        java.lang.String str30 = atomikosProperties19.getService();
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test00601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00601");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        atomikosProperties0.setTransactionManagerUniqueName("tm.out");
        java.lang.String str5 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setConsoleFileLimit((int) (byte) 1);
        atomikosProperties0.setService("tm.out");
        boolean boolean10 = atomikosProperties0.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.getConsoleFileName();
        java.lang.String str13 = atomikosProperties11.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = atomikosProperties11.getConsoleLogLevel();
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel14);
        atomikosProperties0.setMaxActives(18);
        java.lang.String str18 = atomikosProperties0.getService();
        atomikosProperties0.setCheckpointInterval((long) (short) 1);
        atomikosProperties0.setAllowSubTransactions(true);
        java.lang.String str23 = atomikosProperties0.getLogBaseName();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tm.out" + "'", str12, "tm.out");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel14 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel14.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tm.out" + "'", str18, "tm.out");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tmlog" + "'", str23, "tmlog");
    }

    @Test
    public void test00602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00602");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Set<java.lang.Object> objSet4 = properties1.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.getConsoleFileName();
        atomikosProperties5.setOutputDir("hi!");
        int int9 = atomikosProperties5.getConsoleFileLimit();
        java.util.Properties properties10 = atomikosProperties5.asProperties();
        java.lang.String str11 = atomikosProperties5.getService();
        int int12 = atomikosProperties5.getMaxActives();
        boolean boolean13 = properties1.equals((java.lang.Object) atomikosProperties5);
        int int14 = atomikosProperties5.getConsoleFileCount();
        java.util.Properties properties15 = atomikosProperties5.asProperties();
        java.util.Properties properties16 = new java.util.Properties();
        java.util.Properties properties17 = new java.util.Properties(properties16);
        properties17.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str21 = atomikosProperties20.getConsoleFileName();
        atomikosProperties20.setOutputDir("hi!");
        int int24 = atomikosProperties20.getConsoleFileLimit();
        java.lang.Object obj25 = properties17.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties20);
        atomikosProperties20.setLogBaseName("tm.out");
        long long28 = atomikosProperties20.getDefaultJtaTimeout();
        atomikosProperties20.setSerialJtaTransactions(true);
        atomikosProperties20.setCheckpointInterval(10000L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.getConsoleFileName();
        atomikosProperties33.setOutputDir("hi!");
        java.lang.String str37 = atomikosProperties33.getOutputDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties38.setConsoleFileCount((-1));
        java.util.Properties properties41 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection42 = properties41.values();
        java.util.Properties properties43 = null;
        java.util.Properties properties44 = new java.util.Properties(properties43);
        java.util.Properties properties45 = new java.util.Properties();
        java.util.Properties properties46 = new java.util.Properties(properties45);
        properties46.clear();
        properties44.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties46);
        java.lang.Object obj51 = properties44.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties41.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties44);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties53.setConsoleFileCount((-1));
        java.lang.String str56 = atomikosProperties53.getOutputDir();
        atomikosProperties53.setLogBaseName("tm.out");
        boolean boolean59 = properties44.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties60.setConsoleFileCount(100);
        atomikosProperties60.setAllowSubTransactions(true);
        java.lang.Object obj65 = properties44.remove((java.lang.Object) atomikosProperties60);
        atomikosProperties60.setAllowSubTransactions(false);
        atomikosProperties60.setSerialJtaTransactions(true);
        java.util.Properties properties70 = new java.util.Properties();
        java.util.Properties properties71 = new java.util.Properties(properties70);
        properties71.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties74 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str75 = atomikosProperties74.getConsoleFileName();
        atomikosProperties74.setOutputDir("hi!");
        int int78 = atomikosProperties74.getConsoleFileLimit();
        java.lang.Object obj79 = properties71.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties74);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel80 = atomikosProperties74.getConsoleLogLevel();
        atomikosProperties60.setConsoleLogLevel(atomikosLoggingLevel80);
        atomikosProperties38.setConsoleLogLevel(atomikosLoggingLevel80);
        atomikosProperties33.setConsoleLogLevel(atomikosLoggingLevel80);
        atomikosProperties20.setConsoleLogLevel(atomikosLoggingLevel80);
        boolean boolean85 = properties15.containsValue((java.lang.Object) atomikosProperties20);
        long long86 = atomikosProperties20.getMaxTimeout();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objSet4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tm.out" + "'", str6, "tm.out");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tm.out" + "'", str21, "tm.out");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10000L + "'", long28 == 10000L);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tm.out" + "'", str34, "tm.out");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "tm.out" + "'", str75, "tm.out");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel80 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel80.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 300000L + "'", long86 == 300000L);
    }

    @Test
    public void test00603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00603");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Properties properties25 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str27 = atomikosProperties26.getConsoleFileName();
        atomikosProperties26.setOutputDir("hi!");
        int int30 = atomikosProperties26.getConsoleFileLimit();
        java.lang.String str31 = atomikosProperties26.getService();
        java.lang.String str32 = atomikosProperties26.getOutputDir();
        atomikosProperties26.setOutputDir("tmlog");
        long long35 = atomikosProperties26.getMaxTimeout();
        boolean boolean36 = properties25.contains((java.lang.Object) atomikosProperties26);
        java.util.Properties properties37 = atomikosProperties26.asProperties();
        java.io.PrintWriter printWriter38 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties37.list(printWriter38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tm.out" + "'", str27, "tm.out");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 300000L + "'", long35 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(properties37);
    }

    @Test
    public void test00604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00604");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        atomikosProperties4.setLogBaseName("tm.out");
        atomikosProperties4.setDefaultJtaTimeout((long) (short) 1);
        atomikosProperties4.setCheckpointInterval((long) (short) -1);
        java.lang.Class<?> wildcardClass16 = atomikosProperties4.getClass();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test00605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00605");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties1.entrySet();
        java.util.Properties properties11 = new java.util.Properties(properties1);
        java.util.Properties properties12 = new java.util.Properties();
        java.lang.Object obj14 = properties12.get((java.lang.Object) (byte) -1);
        java.util.Properties properties15 = new java.util.Properties(properties12);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.getConsoleFileName();
        java.lang.String str18 = atomikosProperties16.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel19 = atomikosProperties16.getConsoleLogLevel();
        boolean boolean20 = properties12.equals((java.lang.Object) atomikosProperties16);
        java.lang.String str21 = properties12.toString();
        java.util.Properties properties22 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection23 = properties22.values();
        java.util.Properties properties24 = new java.util.Properties(properties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str26 = atomikosProperties25.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel29 = atomikosProperties27.getConsoleLogLevel();
        atomikosProperties25.setConsoleLogLevel(atomikosLoggingLevel29);
        atomikosProperties25.setSerialJtaTransactions(false);
        boolean boolean33 = properties24.containsValue((java.lang.Object) atomikosProperties25);
        atomikosProperties25.setEnableLogging(false);
        java.lang.String str36 = atomikosProperties25.getLogBaseName();
        java.lang.Object obj37 = properties11.put((java.lang.Object) str21, (java.lang.Object) atomikosProperties25);
        java.util.Properties properties38 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection39 = properties38.values();
        java.util.Properties properties40 = null;
        java.util.Properties properties41 = new java.util.Properties(properties40);
        java.util.Properties properties42 = new java.util.Properties();
        java.util.Properties properties43 = new java.util.Properties(properties42);
        properties43.clear();
        properties41.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties43);
        java.lang.Object obj48 = properties41.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties38.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties41);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties50.setConsoleFileCount((-1));
        java.lang.String str53 = atomikosProperties50.getOutputDir();
        atomikosProperties50.setLogBaseName("tm.out");
        boolean boolean56 = properties41.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties57.setConsoleFileCount(100);
        atomikosProperties57.setAllowSubTransactions(true);
        java.lang.Object obj62 = properties41.remove((java.lang.Object) atomikosProperties57);
        boolean boolean63 = properties11.containsValue((java.lang.Object) properties41);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties64.setConsoleFileCount(100);
        atomikosProperties64.setAllowSubTransactions(true);
        boolean boolean69 = atomikosProperties64.isForceShutdownOnVmExit();
        int int70 = atomikosProperties64.getConsoleFileCount();
        java.util.Properties properties71 = atomikosProperties64.asProperties();
        java.util.Properties properties72 = atomikosProperties64.asProperties();
        java.util.Properties properties73 = atomikosProperties64.asProperties();
        java.lang.Object obj74 = properties41.get((java.lang.Object) properties73);
        java.lang.Class<?> wildcardClass75 = properties41.getClass();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(objEntrySet10);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tm.out" + "'", str17, "tm.out");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel19 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel19.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{}" + "'", str21, "{}");
        org.junit.Assert.assertNotNull(objCollection23);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tm.out" + "'", str28, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel29 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel29.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tmlog" + "'", str36, "tmlog");
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(objCollection39);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 100 + "'", int70 == 100);
        org.junit.Assert.assertNotNull(properties71);
        org.junit.Assert.assertNotNull(properties72);
        org.junit.Assert.assertNotNull(properties73);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test00606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00606");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setConsoleFileCount((-1));
        atomikosProperties6.setTransactionManagerUniqueName("tm.out");
        java.lang.Object obj11 = properties0.remove((java.lang.Object) atomikosProperties6);
        boolean boolean12 = atomikosProperties6.isForceShutdownOnVmExit();
        atomikosProperties6.setAllowSubTransactions(false);
        atomikosProperties6.setMaxActives((-1));
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        boolean boolean20 = properties18.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.getTransactionManagerUniqueName();
        atomikosProperties21.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str26 = atomikosProperties25.getConsoleFileName();
        atomikosProperties25.setOutputDir("hi!");
        int int29 = atomikosProperties25.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel30 = atomikosProperties25.getConsoleLogLevel();
        java.lang.Object obj31 = properties18.putIfAbsent((java.lang.Object) atomikosProperties21, (java.lang.Object) atomikosLoggingLevel30);
        atomikosProperties6.setConsoleLogLevel(atomikosLoggingLevel30);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel33 = atomikosProperties6.getConsoleLogLevel();
        int int34 = atomikosProperties6.getConsoleFileCount();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "tm.out" + "'", str26, "tm.out");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel30 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel30.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel33 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel33.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
    }

    @Test
    public void test00607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00607");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties3.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Properties properties9 = new java.util.Properties(properties3);
        java.util.Properties properties10 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.getConsoleFileName();
        java.lang.Object obj14 = properties10.put((java.lang.Object) atomikosProperties11, (java.lang.Object) 0L);
        atomikosProperties11.setLogBaseName("tm.out");
        java.lang.Object obj17 = properties9.remove((java.lang.Object) atomikosProperties11);
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection19 = properties18.values();
        java.util.Properties properties20 = new java.util.Properties(properties18);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties20.elements();
        boolean boolean22 = properties20.isEmpty();
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection24 = properties23.values();
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        java.util.Properties properties27 = new java.util.Properties();
        java.util.Properties properties28 = new java.util.Properties(properties27);
        properties28.clear();
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        java.lang.Object obj33 = properties26.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        java.util.Properties properties35 = null;
        java.util.Properties properties36 = new java.util.Properties(properties35);
        boolean boolean38 = properties36.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration39 = properties36.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet40 = properties36.entrySet();
        java.util.Properties properties41 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection42 = properties41.values();
        java.util.Properties properties43 = null;
        java.util.Properties properties44 = new java.util.Properties(properties43);
        java.util.Properties properties45 = new java.util.Properties();
        java.util.Properties properties46 = new java.util.Properties(properties45);
        properties46.clear();
        properties44.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties46);
        java.lang.Object obj51 = properties44.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties41.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties44);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties53.setConsoleFileCount((-1));
        java.lang.String str56 = atomikosProperties53.getOutputDir();
        atomikosProperties53.setLogBaseName("tm.out");
        boolean boolean59 = properties44.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties60.setConsoleFileCount(100);
        atomikosProperties60.setAllowSubTransactions(true);
        java.lang.Object obj65 = properties44.remove((java.lang.Object) atomikosProperties60);
        java.util.Set<java.lang.Object> objSet66 = properties44.keySet();
        boolean boolean67 = properties20.replace((java.lang.Object) properties26, (java.lang.Object) objEntrySet40, (java.lang.Object) properties44);
        java.lang.String str69 = properties26.getProperty("{}");
        java.util.Properties properties70 = new java.util.Properties(properties26);
        java.util.Properties properties71 = new java.util.Properties(properties70);
        java.lang.Object obj72 = properties9.remove((java.lang.Object) properties71);
        java.lang.String str73 = properties71.toString();
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tm.out" + "'", str12, "tm.out");
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(objCollection19);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objEnumeration39);
        org.junit.Assert.assertNotNull(objEntrySet40);
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNotNull(objSet66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "{}" + "'", str73, "{}");
    }

    @Test
    public void test00608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00608");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        boolean boolean10 = atomikosProperties4.isForceShutdownOnVmExit();
        atomikosProperties4.setConsoleFileName("");
        long long13 = atomikosProperties4.getMaxTimeout();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 300000L + "'", long13 == 300000L);
    }

    @Test
    public void test00609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00609");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        java.lang.String str3 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseName("tm.out");
        int int6 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setMaxTimeout(10000L);
        boolean boolean9 = atomikosProperties0.isThreadedTwoPhaseCommit();
        java.lang.String str10 = atomikosProperties0.getLogBaseName();
        java.lang.String str11 = atomikosProperties0.getTransactionManagerUniqueName();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tm.out" + "'", str10, "tm.out");
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test00610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00610");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties8.getConsoleLogLevel();
        java.lang.Object obj14 = properties1.putIfAbsent((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosLoggingLevel13);
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.Object obj17 = properties15.get((java.lang.Object) (byte) -1);
        java.util.Properties properties18 = new java.util.Properties(properties15);
        boolean boolean19 = properties1.equals((java.lang.Object) properties15);
        java.util.Properties properties20 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.getConsoleFileName();
        java.lang.Object obj24 = properties20.put((java.lang.Object) atomikosProperties21, (java.lang.Object) 0L);
        java.util.Properties properties25 = new java.util.Properties(properties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setConsoleFileCount((-1));
        atomikosProperties26.setTransactionManagerUniqueName("tm.out");
        java.lang.Object obj31 = properties20.remove((java.lang.Object) atomikosProperties26);
        boolean boolean32 = atomikosProperties26.isForceShutdownOnVmExit();
        java.util.Properties properties33 = atomikosProperties26.asProperties();
        java.util.Properties properties34 = null;
        java.util.Properties properties35 = new java.util.Properties(properties34);
        boolean boolean37 = properties35.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str39 = atomikosProperties38.getTransactionManagerUniqueName();
        atomikosProperties38.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str43 = atomikosProperties42.getConsoleFileName();
        atomikosProperties42.setOutputDir("hi!");
        int int46 = atomikosProperties42.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel47 = atomikosProperties42.getConsoleLogLevel();
        java.lang.Object obj48 = properties35.putIfAbsent((java.lang.Object) atomikosProperties38, (java.lang.Object) atomikosLoggingLevel47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str50 = atomikosProperties49.getConsoleFileName();
        atomikosProperties49.setOutputDir("hi!");
        int int53 = atomikosProperties49.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel54 = atomikosProperties49.getConsoleLogLevel();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery55 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long56 = recovery55.getForgetOrphanedLogEntriesDelay();
        java.util.Properties properties57 = new java.util.Properties();
        java.util.Properties properties58 = new java.util.Properties(properties57);
        properties58.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str62 = atomikosProperties61.getConsoleFileName();
        atomikosProperties61.setOutputDir("hi!");
        int int65 = atomikosProperties61.getConsoleFileLimit();
        java.lang.Object obj66 = properties58.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties61);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel67 = atomikosProperties61.getConsoleLogLevel();
        java.lang.String str68 = atomikosProperties61.getTransactionManagerUniqueName();
        atomikosProperties61.setThreadedTwoPhaseCommit(false);
        boolean boolean71 = properties35.replace((java.lang.Object) atomikosProperties49, (java.lang.Object) recovery55, (java.lang.Object) false);
        java.lang.Object obj72 = properties15.replace((java.lang.Object) atomikosProperties26, (java.lang.Object) properties35);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery73 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery73.setDelay((long) 5);
        recovery73.setMaxRetries((-1));
        int int78 = recovery73.getMaxRetries();
        java.lang.Object obj79 = properties35.get((java.lang.Object) int78);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery80 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery80.setRetryInterval((long) (byte) 10);
        int int83 = recovery80.getMaxRetries();
        recovery80.setDelay(10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery86 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long87 = recovery86.getForgetOrphanedLogEntriesDelay();
        recovery86.setDelay((long) (short) 1);
        long long90 = recovery86.getForgetOrphanedLogEntriesDelay();
        recovery86.setDelay((long) '4');
        int int93 = recovery86.getMaxRetries();
        recovery86.setMaxRetries(1);
        java.lang.Object obj96 = properties35.put((java.lang.Object) recovery80, (java.lang.Object) recovery86);
        java.lang.Object obj97 = properties35.clone();
        java.util.Set<java.lang.String> strSet98 = properties35.stringPropertyNames();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tm.out" + "'", str22, "tm.out");
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tm.out" + "'", str43, "tm.out");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel47 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel47.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tm.out" + "'", str50, "tm.out");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel54 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel54.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 86400000L + "'", long56 == 86400000L);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tm.out" + "'", str62, "tm.out");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel67 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel67.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 5 + "'", int83 == 5);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 86400000L + "'", long87 == 86400000L);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 86400000L + "'", long90 == 86400000L);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 5 + "'", int93 == 5);
        org.junit.Assert.assertNull(obj96);
        org.junit.Assert.assertNotNull(obj97);
        org.junit.Assert.assertNotNull(strSet98);
    }

    @Test
    public void test00611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00611");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        java.util.Set<java.lang.String> strSet3 = properties1.stringPropertyNames();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Properties properties7 = new java.util.Properties(properties6);
        properties7.clear();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.util.Collection<java.lang.Object> objCollection10 = properties7.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.getConsoleFileName();
        atomikosProperties11.setOutputDir("hi!");
        int int15 = atomikosProperties11.getConsoleFileLimit();
        java.util.Properties properties16 = atomikosProperties11.asProperties();
        boolean boolean17 = properties7.containsValue((java.lang.Object) atomikosProperties11);
        boolean boolean18 = properties1.containsValue((java.lang.Object) properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str21 = atomikosProperties20.getConsoleFileName();
        atomikosProperties20.setOutputDir("hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery24 = atomikosProperties20.getRecovery();
        java.lang.Object obj25 = properties7.putIfAbsent((java.lang.Object) "{hi!=}", (java.lang.Object) atomikosProperties20);
        atomikosProperties20.setService("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=hi!, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(objCollection10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tm.out" + "'", str12, "tm.out");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tm.out" + "'", str21, "tm.out");
        org.junit.Assert.assertNotNull(recovery24);
        org.junit.Assert.assertNull(obj25);
    }

    @Test
    public void test00612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00612");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        atomikosProperties0.setCheckpointInterval((long) (short) 10);
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = new java.util.Properties(properties5);
        java.util.Enumeration<?> wildcardEnumeration7 = properties6.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getTransactionManagerUniqueName();
        boolean boolean10 = atomikosProperties8.isForceShutdownOnVmExit();
        java.util.Properties properties11 = atomikosProperties8.asProperties();
        int int12 = properties11.size();
        boolean boolean13 = properties11.isEmpty();
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.io.Writer writer15 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties11.store(writer15, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=false, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(wildcardEnumeration7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 18 + "'", int12 == 18);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test00613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00613");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setConsoleFileCount(100);
        atomikosProperties6.setAllowSubTransactions(true);
        boolean boolean11 = atomikosProperties6.isForceShutdownOnVmExit();
        boolean boolean12 = properties5.contains((java.lang.Object) atomikosProperties6);
        java.util.Properties properties13 = new java.util.Properties();
        java.util.Properties properties14 = new java.util.Properties(properties13);
        properties14.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.getConsoleFileName();
        atomikosProperties17.setOutputDir("hi!");
        int int21 = atomikosProperties17.getConsoleFileLimit();
        java.lang.Object obj22 = properties14.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties17);
        boolean boolean23 = atomikosProperties17.isForceShutdownOnVmExit();
        atomikosProperties17.setConsoleFileName("");
        java.lang.String str26 = atomikosProperties17.getService();
        atomikosProperties17.setTransactionManagerUniqueName("");
        java.lang.Object obj29 = properties5.get((java.lang.Object) "");
        java.util.Properties properties30 = new java.util.Properties();
        java.util.Properties properties31 = new java.util.Properties(properties30);
        int int32 = properties31.size();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties31);
        java.util.Set<java.lang.String> strSet34 = properties5.stringPropertyNames();
        java.io.OutputStream outputStream35 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.save(outputStream35, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=32, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tm.out" + "'", str18, "tm.out");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(strSet34);
    }

    @Test
    public void test00614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00614");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        atomikosProperties4.setLogBaseName("tm.out");
        atomikosProperties4.setForceShutdownOnVmExit(false);
        int int14 = atomikosProperties4.getMaxActives();
        int int15 = atomikosProperties4.getMaxActives();
        boolean boolean16 = atomikosProperties4.isEnableLogging();
        boolean boolean17 = atomikosProperties4.isSerialJtaTransactions();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 50 + "'", int14 == 50);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 50 + "'", int15 == 50);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test00615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00615");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Properties properties7 = new java.util.Properties(properties6);
        properties7.clear();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Properties properties11 = new java.util.Properties(properties10);
        properties11.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str15 = atomikosProperties14.getConsoleFileName();
        atomikosProperties14.setOutputDir("hi!");
        int int18 = atomikosProperties14.getConsoleFileLimit();
        java.lang.Object obj19 = properties11.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties14);
        atomikosProperties14.setLogBaseName("tm.out");
        atomikosProperties14.setForceShutdownOnVmExit(false);
        boolean boolean24 = properties7.containsValue((java.lang.Object) atomikosProperties14);
        atomikosProperties14.setService("hi!");
        atomikosProperties14.setService("");
        java.util.Properties properties29 = new java.util.Properties();
        java.util.Properties properties30 = new java.util.Properties(properties29);
        properties30.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.getConsoleFileName();
        atomikosProperties33.setOutputDir("hi!");
        int int37 = atomikosProperties33.getConsoleFileLimit();
        java.lang.Object obj38 = properties30.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties33);
        atomikosProperties33.setOutputDir("hi!");
        atomikosProperties33.setLogBaseDir("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel43 = atomikosProperties33.getConsoleLogLevel();
        atomikosProperties14.setConsoleLogLevel(atomikosLoggingLevel43);
        java.lang.Class<?> wildcardClass45 = atomikosLoggingLevel43.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tm.out" + "'", str15, "tm.out");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tm.out" + "'", str34, "tm.out");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel43 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel43.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test00616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00616");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Properties properties8 = new java.util.Properties();
        java.util.Properties properties9 = new java.util.Properties(properties8);
        properties9.clear();
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        java.lang.Object obj14 = properties9.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        boolean boolean15 = properties5.equals(obj14);
        java.util.Collection<java.lang.Object> objCollection16 = properties5.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.getConsoleFileName();
        atomikosProperties17.setOutputDir("hi!");
        int int21 = atomikosProperties17.getConsoleFileLimit();
        java.util.Properties properties22 = atomikosProperties17.asProperties();
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Properties properties24 = new java.util.Properties(properties23);
        properties24.clear();
        properties22.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.setConsoleFileCount((-1));
        java.lang.String str30 = atomikosProperties27.getOutputDir();
        atomikosProperties27.setLogBaseName("tm.out");
        int int33 = atomikosProperties27.getMaxActives();
        boolean boolean34 = properties5.remove((java.lang.Object) properties22, (java.lang.Object) int33);
        java.util.Set<java.lang.String> strSet35 = properties22.stringPropertyNames();
        java.util.Properties properties36 = new java.util.Properties(properties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery37 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery37.setDelay((long) 5);
        boolean boolean40 = properties22.containsKey((java.lang.Object) 5);
        java.io.InputStream inputStream41 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties22.loadFromXML(inputStream41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tm.out" + "'", str18, "tm.out");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test00617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00617");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        java.lang.String str2 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.setCheckpointInterval((long) (byte) 0);
        atomikosProperties0.setConsoleFileName("hi!");
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        java.lang.String str8 = atomikosProperties0.getLogBaseName();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tmlog" + "'", str8, "tmlog");
    }

    @Test
    public void test00618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00618");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.setRetryInterval((long) (byte) 10);
        int int3 = recovery0.getMaxRetries();
        recovery0.setDelay(10L);
        long long6 = recovery0.getForgetOrphanedLogEntriesDelay();
        int int7 = recovery0.getMaxRetries();
        long long8 = recovery0.getDelay();
        recovery0.setRetryInterval((long) (byte) 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 86400000L + "'", long6 == 86400000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L);
    }

    @Test
    public void test00619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00619");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.lang.Object obj3 = null;
        boolean boolean4 = properties0.equals(obj3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties0.elements();
        java.util.Properties properties7 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        java.lang.Object obj11 = properties7.put((java.lang.Object) atomikosProperties8, (java.lang.Object) 0L);
        boolean boolean12 = properties0.containsValue((java.lang.Object) properties7);
        java.util.Collection<java.lang.Object> objCollection13 = properties0.values();
        java.io.InputStream inputStream14 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.load(inputStream14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objCollection13);
    }

    @Test
    public void test00620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00620");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Properties properties4 = new java.util.Properties(properties1);
        java.util.Properties properties5 = new java.util.Properties(properties1);
        int int6 = properties1.size();
        java.util.Properties properties7 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        java.util.Properties properties13 = atomikosProperties8.asProperties();
        java.lang.String str14 = atomikosProperties8.getService();
        atomikosProperties8.setService("hi!");
        java.lang.Object obj18 = properties7.putIfAbsent((java.lang.Object) "hi!", (java.lang.Object) 10L);
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.util.Properties properties20 = null;
        java.util.Properties properties21 = new java.util.Properties(properties20);
        java.util.Properties properties22 = new java.util.Properties();
        java.util.Properties properties23 = new java.util.Properties(properties22);
        properties23.clear();
        properties21.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties23);
        java.lang.Object obj28 = properties23.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet29 = properties23.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties30.setConsoleFileCount((-1));
        java.lang.String str33 = atomikosProperties30.getOutputDir();
        atomikosProperties30.setLogBaseName("tm.out");
        int int36 = atomikosProperties30.getConsoleFileCount();
        boolean boolean37 = properties23.containsKey((java.lang.Object) atomikosProperties30);
        atomikosProperties30.setConsoleFileCount((int) (byte) -1);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery40 = atomikosProperties30.getRecovery();
        java.util.Properties properties41 = null;
        java.util.Properties properties42 = new java.util.Properties(properties41);
        boolean boolean44 = properties42.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str46 = atomikosProperties45.getTransactionManagerUniqueName();
        atomikosProperties45.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str50 = atomikosProperties49.getConsoleFileName();
        atomikosProperties49.setOutputDir("hi!");
        int int53 = atomikosProperties49.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel54 = atomikosProperties49.getConsoleLogLevel();
        java.lang.Object obj55 = properties42.putIfAbsent((java.lang.Object) atomikosProperties45, (java.lang.Object) atomikosLoggingLevel54);
        java.util.Properties properties56 = new java.util.Properties();
        java.lang.Object obj58 = properties56.get((java.lang.Object) (byte) -1);
        java.util.Properties properties59 = new java.util.Properties(properties56);
        boolean boolean60 = properties42.equals((java.lang.Object) properties56);
        java.util.Enumeration<java.lang.Object> objEnumeration61 = properties42.keys();
        java.lang.Object obj62 = properties1.getOrDefault((java.lang.Object) atomikosProperties30, (java.lang.Object) properties42);
        java.util.Properties properties63 = new java.util.Properties();
        java.util.Properties properties64 = new java.util.Properties(properties63);
        int int65 = properties64.size();
        boolean boolean66 = properties64.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration67 = properties64.elements();
        java.util.Properties properties68 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection69 = properties68.values();
        java.util.Properties properties70 = new java.util.Properties(properties68);
        java.util.Enumeration<java.lang.Object> objEnumeration71 = properties70.elements();
        boolean boolean72 = properties70.isEmpty();
        boolean boolean73 = properties64.containsValue((java.lang.Object) boolean72);
        java.util.Properties properties74 = new java.util.Properties();
        java.util.Properties properties75 = new java.util.Properties(properties74);
        boolean boolean77 = properties74.containsValue((java.lang.Object) 10000L);
        java.lang.Object obj78 = properties1.replace((java.lang.Object) boolean73, (java.lang.Object) properties74);
        java.io.InputStream inputStream79 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties74.loadFromXML(inputStream79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(recovery40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tm.out" + "'", str50, "tm.out");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel54 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel54.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objEnumeration61);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(objEnumeration67);
        org.junit.Assert.assertNotNull(objCollection69);
        org.junit.Assert.assertNotNull(objEnumeration71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(obj78);
    }

    @Test
    public void test00621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00621");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        boolean boolean4 = properties2.isEmpty();
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection6 = properties5.values();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        properties10.clear();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.lang.Object obj15 = properties8.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        boolean boolean20 = properties18.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties18.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet22 = properties18.entrySet();
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection24 = properties23.values();
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        java.util.Properties properties27 = new java.util.Properties();
        java.util.Properties properties28 = new java.util.Properties(properties27);
        properties28.clear();
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        java.lang.Object obj33 = properties26.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setConsoleFileCount((-1));
        java.lang.String str38 = atomikosProperties35.getOutputDir();
        atomikosProperties35.setLogBaseName("tm.out");
        boolean boolean41 = properties26.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties42.setConsoleFileCount(100);
        atomikosProperties42.setAllowSubTransactions(true);
        java.lang.Object obj47 = properties26.remove((java.lang.Object) atomikosProperties42);
        java.util.Set<java.lang.Object> objSet48 = properties26.keySet();
        boolean boolean49 = properties2.replace((java.lang.Object) properties8, (java.lang.Object) objEntrySet22, (java.lang.Object) properties26);
        int int50 = properties2.size();
        java.lang.Class<?> wildcardClass51 = properties2.getClass();
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNotNull(objEntrySet22);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(objSet48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test00622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00622");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet3 = properties1.entrySet();
        java.util.Properties properties4 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.getConsoleFileName();
        java.lang.Object obj8 = properties4.put((java.lang.Object) atomikosProperties5, (java.lang.Object) 0L);
        long long9 = atomikosProperties5.getCheckpointInterval();
        java.lang.String str10 = atomikosProperties5.getConsoleFileName();
        boolean boolean11 = properties1.containsValue((java.lang.Object) str10);
        boolean boolean12 = properties1.isEmpty();
        java.lang.String str14 = properties1.getProperty("{hi!=10}");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(objEntrySet3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tm.out" + "'", str6, "tm.out");
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tm.out" + "'", str10, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test00623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00623");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        boolean boolean10 = atomikosProperties4.isForceShutdownOnVmExit();
        atomikosProperties4.setOutputDir("tm.out");
        java.lang.String str13 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setOutputDir("{hi!=}");
        atomikosProperties4.setService("{hi!=}");
        atomikosProperties4.setMaxActives((int) (byte) 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test00624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00624");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties3.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        properties10.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str14 = atomikosProperties13.getConsoleFileName();
        atomikosProperties13.setOutputDir("hi!");
        int int17 = atomikosProperties13.getConsoleFileLimit();
        java.lang.Object obj18 = properties10.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties13);
        atomikosProperties13.setLogBaseName("tm.out");
        boolean boolean21 = properties3.containsKey((java.lang.Object) "tm.out");
        java.util.Properties properties22 = null;
        java.util.Properties properties23 = new java.util.Properties(properties22);
        java.util.Properties properties24 = new java.util.Properties();
        java.util.Properties properties25 = new java.util.Properties(properties24);
        properties25.clear();
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties25);
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties23);
        java.util.Properties properties29 = new java.util.Properties(properties23);
        java.util.Properties properties30 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection31 = properties30.values();
        java.util.Properties properties32 = new java.util.Properties(properties30);
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties30);
        java.io.InputStream inputStream34 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties23.load(inputStream34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tm.out" + "'", str14, "tm.out");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objCollection31);
    }

    @Test
    public void test00625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00625");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties8.getConsoleLogLevel();
        java.lang.Object obj14 = properties1.putIfAbsent((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosLoggingLevel13);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.getConsoleFileName();
        atomikosProperties15.setOutputDir("hi!");
        int int19 = atomikosProperties15.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel20 = atomikosProperties15.getConsoleLogLevel();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery21 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long22 = recovery21.getForgetOrphanedLogEntriesDelay();
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Properties properties24 = new java.util.Properties(properties23);
        properties24.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.getConsoleFileName();
        atomikosProperties27.setOutputDir("hi!");
        int int31 = atomikosProperties27.getConsoleFileLimit();
        java.lang.Object obj32 = properties24.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties27);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel33 = atomikosProperties27.getConsoleLogLevel();
        java.lang.String str34 = atomikosProperties27.getTransactionManagerUniqueName();
        atomikosProperties27.setThreadedTwoPhaseCommit(false);
        boolean boolean37 = properties1.replace((java.lang.Object) atomikosProperties15, (java.lang.Object) recovery21, (java.lang.Object) false);
        int int38 = atomikosProperties15.getConsoleFileCount();
        long long39 = atomikosProperties15.getMaxTimeout();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tm.out" + "'", str16, "tm.out");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel20 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel20.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 86400000L + "'", long22 == 86400000L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tm.out" + "'", str28, "tm.out");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel33 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel33.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 300000L + "'", long39 == 300000L);
    }

    @Test
    public void test00626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00626");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.setDelay((long) (short) 1);
        long long4 = recovery0.getRetryInterval();
        long long5 = recovery0.getForgetOrphanedLogEntriesDelay();
        int int6 = recovery0.getMaxRetries();
        int int7 = recovery0.getMaxRetries();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 86400000L + "'", long1 == 86400000L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 86400000L + "'", long5 == 86400000L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
    }

    @Test
    public void test00627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00627");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        boolean boolean12 = properties0.isEmpty();
        java.io.OutputStream outputStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream13, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test00628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00628");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        atomikosProperties19.setAllowSubTransactions(false);
        atomikosProperties19.setSerialJtaTransactions(true);
        java.util.Properties properties29 = new java.util.Properties();
        java.util.Properties properties30 = new java.util.Properties(properties29);
        properties30.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.getConsoleFileName();
        atomikosProperties33.setOutputDir("hi!");
        int int37 = atomikosProperties33.getConsoleFileLimit();
        java.lang.Object obj38 = properties30.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties33);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel39 = atomikosProperties33.getConsoleLogLevel();
        atomikosProperties19.setConsoleLogLevel(atomikosLoggingLevel39);
        atomikosProperties19.setDefaultJtaTimeout((long) 10);
        java.lang.String str43 = atomikosProperties19.getOutputDir();
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tm.out" + "'", str34, "tm.out");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel39 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel39.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str43);
    }

    @Test
    public void test00629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00629");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        boolean boolean10 = atomikosProperties4.isForceShutdownOnVmExit();
        atomikosProperties4.setConsoleFileName("");
        java.lang.String str13 = atomikosProperties4.getService();
        atomikosProperties4.setForceShutdownOnVmExit(true);
        boolean boolean16 = atomikosProperties4.isForceShutdownOnVmExit();
        atomikosProperties4.setSerialJtaTransactions(false);
        atomikosProperties4.setThreadedTwoPhaseCommit(false);
        atomikosProperties4.setForceShutdownOnVmExit(false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test00630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00630");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        boolean boolean4 = properties2.isEmpty();
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection6 = properties5.values();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        properties10.clear();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.lang.Object obj15 = properties8.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        boolean boolean20 = properties18.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties18.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet22 = properties18.entrySet();
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection24 = properties23.values();
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        java.util.Properties properties27 = new java.util.Properties();
        java.util.Properties properties28 = new java.util.Properties(properties27);
        properties28.clear();
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        java.lang.Object obj33 = properties26.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setConsoleFileCount((-1));
        java.lang.String str38 = atomikosProperties35.getOutputDir();
        atomikosProperties35.setLogBaseName("tm.out");
        boolean boolean41 = properties26.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties42.setConsoleFileCount(100);
        atomikosProperties42.setAllowSubTransactions(true);
        java.lang.Object obj47 = properties26.remove((java.lang.Object) atomikosProperties42);
        java.util.Set<java.lang.Object> objSet48 = properties26.keySet();
        boolean boolean49 = properties2.replace((java.lang.Object) properties8, (java.lang.Object) objEntrySet22, (java.lang.Object) properties26);
        java.lang.String str51 = properties8.getProperty("{}");
        java.util.Properties properties52 = new java.util.Properties(properties8);
        java.util.Properties properties53 = new java.util.Properties(properties52);
        java.lang.String str54 = properties52.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str56 = atomikosProperties55.getConsoleFileName();
        int int57 = atomikosProperties55.getMaxActives();
        long long58 = atomikosProperties55.getDefaultJtaTimeout();
        boolean boolean59 = atomikosProperties55.isSerialJtaTransactions();
        atomikosProperties55.setSerialJtaTransactions(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery62 = atomikosProperties55.getRecovery();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties63.setConsoleFileCount(100);
        atomikosProperties63.setAllowSubTransactions(true);
        atomikosProperties63.setMaxTimeout((long) '4');
        java.lang.String str70 = atomikosProperties63.getLogBaseDir();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj71 = properties52.replace((java.lang.Object) atomikosProperties55, (java.lang.Object) str70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNotNull(objEntrySet22);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(objSet48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "{}" + "'", str54, "{}");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "tm.out" + "'", str56, "tm.out");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 50 + "'", int57 == 50);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 10000L + "'", long58 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(recovery62);
        org.junit.Assert.assertNull(str70);
    }

    @Test
    public void test00631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00631");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.lang.Object obj7 = properties0.setProperty("", "");
        java.util.Properties properties8 = new java.util.Properties(properties0);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection10 = properties9.values();
        java.util.Properties properties11 = new java.util.Properties(properties9);
        java.util.Enumeration<java.lang.Object> objEnumeration12 = properties11.elements();
        boolean boolean13 = properties11.isEmpty();
        java.util.Properties properties14 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection15 = properties14.values();
        java.util.Properties properties16 = null;
        java.util.Properties properties17 = new java.util.Properties(properties16);
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Properties properties19 = new java.util.Properties(properties18);
        properties19.clear();
        properties17.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties19);
        java.lang.Object obj24 = properties17.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties14.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties17);
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        boolean boolean29 = properties27.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration30 = properties27.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet31 = properties27.entrySet();
        java.util.Properties properties32 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection33 = properties32.values();
        java.util.Properties properties34 = null;
        java.util.Properties properties35 = new java.util.Properties(properties34);
        java.util.Properties properties36 = new java.util.Properties();
        java.util.Properties properties37 = new java.util.Properties(properties36);
        properties37.clear();
        properties35.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties37);
        java.lang.Object obj42 = properties35.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties32.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties35);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setConsoleFileCount((-1));
        java.lang.String str47 = atomikosProperties44.getOutputDir();
        atomikosProperties44.setLogBaseName("tm.out");
        boolean boolean50 = properties35.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties51.setConsoleFileCount(100);
        atomikosProperties51.setAllowSubTransactions(true);
        java.lang.Object obj56 = properties35.remove((java.lang.Object) atomikosProperties51);
        java.util.Set<java.lang.Object> objSet57 = properties35.keySet();
        boolean boolean58 = properties11.replace((java.lang.Object) properties17, (java.lang.Object) objEntrySet31, (java.lang.Object) properties35);
        java.lang.String str60 = properties17.getProperty("{}");
        java.util.Properties properties61 = new java.util.Properties(properties17);
        boolean boolean62 = properties8.equals((java.lang.Object) properties17);
        java.util.Properties properties63 = new java.util.Properties();
        java.util.Properties properties64 = new java.util.Properties(properties63);
        int int65 = properties64.size();
        boolean boolean66 = properties64.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration67 = properties64.elements();
        java.util.Properties properties68 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection69 = properties68.values();
        java.util.Properties properties70 = new java.util.Properties(properties68);
        java.util.Enumeration<java.lang.Object> objEnumeration71 = properties70.elements();
        boolean boolean72 = properties70.isEmpty();
        boolean boolean73 = properties64.containsValue((java.lang.Object) boolean72);
        java.util.Properties properties74 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection75 = properties74.values();
        java.util.Properties properties76 = new java.util.Properties(properties74);
        java.util.Enumeration<java.lang.Object> objEnumeration77 = properties76.keys();
        boolean boolean78 = properties64.containsKey((java.lang.Object) objEnumeration77);
        java.util.Properties properties79 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection80 = properties79.values();
        java.util.Properties properties81 = new java.util.Properties(properties79);
        java.util.Enumeration<java.lang.Object> objEnumeration82 = properties81.keys();
        java.lang.String str84 = properties81.getProperty("{}");
        java.util.Properties properties85 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection86 = properties85.values();
        java.util.Properties properties87 = new java.util.Properties(properties85);
        java.util.Enumeration<java.lang.Object> objEnumeration88 = properties85.keys();
        java.util.Properties properties89 = new java.util.Properties(properties85);
        java.util.Enumeration<java.lang.Object> objEnumeration90 = properties85.keys();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean91 = properties17.replace((java.lang.Object) boolean78, (java.lang.Object) str84, (java.lang.Object) objEnumeration90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(objCollection10);
        org.junit.Assert.assertNotNull(objEnumeration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objCollection15);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objEnumeration30);
        org.junit.Assert.assertNotNull(objEntrySet31);
        org.junit.Assert.assertNotNull(objCollection33);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(objSet57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(objEnumeration67);
        org.junit.Assert.assertNotNull(objCollection69);
        org.junit.Assert.assertNotNull(objEnumeration71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objCollection75);
        org.junit.Assert.assertNotNull(objEnumeration77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(objCollection80);
        org.junit.Assert.assertNotNull(objEnumeration82);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNotNull(objCollection86);
        org.junit.Assert.assertNotNull(objEnumeration88);
        org.junit.Assert.assertNotNull(objEnumeration90);
    }

    @Test
    public void test00632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00632");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean5 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setConsoleFileCount(10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel10 = atomikosProperties8.getConsoleLogLevel();
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel10);
        boolean boolean12 = atomikosProperties0.isSerialJtaTransactions();
        java.util.Properties properties13 = atomikosProperties0.asProperties();
        java.lang.String str14 = properties13.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties15.setConsoleFileCount((-1));
        atomikosProperties15.setAllowSubTransactions(false);
        java.util.Properties properties20 = atomikosProperties15.asProperties();
        java.lang.Class<?> wildcardClass21 = properties20.getClass();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.setConsoleFileCount((-1));
        java.lang.String str25 = atomikosProperties22.getOutputDir();
        atomikosProperties22.setLogBaseName("tm.out");
        atomikosProperties22.setForceShutdownOnVmExit(true);
        int int30 = atomikosProperties22.getConsoleFileCount();
        java.lang.Object obj31 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean32 = properties13.replace((java.lang.Object) wildcardClass21, (java.lang.Object) atomikosProperties22, obj31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel10 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel10.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(properties13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str14, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test00633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00633");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties1.keys();
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection6 = properties5.values();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        properties10.clear();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.lang.Object obj15 = properties8.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setConsoleFileCount((-1));
        java.lang.String str20 = atomikosProperties17.getOutputDir();
        atomikosProperties17.setLogBaseName("tm.out");
        boolean boolean23 = properties8.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.setConsoleFileCount(100);
        atomikosProperties24.setAllowSubTransactions(true);
        java.lang.Object obj29 = properties8.remove((java.lang.Object) atomikosProperties24);
        atomikosProperties24.setAllowSubTransactions(false);
        atomikosProperties24.setSerialJtaTransactions(true);
        boolean boolean34 = properties1.containsKey((java.lang.Object) atomikosProperties24);
        java.util.Properties properties35 = new java.util.Properties(properties1);
        java.util.Collection<java.lang.Object> objCollection36 = properties35.values();
        java.util.Properties properties37 = new java.util.Properties(properties35);
        java.io.OutputStream outputStream38 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties37.store(outputStream38, "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objCollection36);
    }

    @Test
    public void test00634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00634");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties1.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet5 = properties1.entrySet();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection7 = properties6.values();
        java.util.Properties properties8 = new java.util.Properties(properties6);
        java.util.Enumeration<java.lang.Object> objEnumeration9 = properties8.elements();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties8.entrySet();
        java.util.Properties properties11 = new java.util.Properties();
        java.util.Properties properties12 = new java.util.Properties(properties11);
        int int13 = properties12.size();
        boolean boolean14 = properties12.isEmpty();
        java.util.Set<java.lang.Object> objSet15 = properties12.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.getConsoleFileName();
        atomikosProperties16.setOutputDir("hi!");
        int int20 = atomikosProperties16.getConsoleFileLimit();
        java.util.Properties properties21 = atomikosProperties16.asProperties();
        java.lang.String str22 = atomikosProperties16.getService();
        int int23 = atomikosProperties16.getMaxActives();
        boolean boolean24 = properties12.equals((java.lang.Object) atomikosProperties16);
        java.lang.Object obj25 = properties1.putIfAbsent((java.lang.Object) objEntrySet10, (java.lang.Object) boolean24);
        java.util.Properties properties26 = new java.util.Properties(properties1);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties1.keys();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objEntrySet5);
        org.junit.Assert.assertNotNull(objCollection7);
        org.junit.Assert.assertNotNull(objEnumeration9);
        org.junit.Assert.assertNotNull(objEntrySet10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objSet15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tm.out" + "'", str17, "tm.out");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 50 + "'", int23 == 50);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(objEnumeration27);
    }

    @Test
    public void test00635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00635");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        boolean boolean4 = properties2.isEmpty();
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection6 = properties5.values();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        properties10.clear();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.lang.Object obj15 = properties8.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        boolean boolean20 = properties18.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties18.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet22 = properties18.entrySet();
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection24 = properties23.values();
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        java.util.Properties properties27 = new java.util.Properties();
        java.util.Properties properties28 = new java.util.Properties(properties27);
        properties28.clear();
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        java.lang.Object obj33 = properties26.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setConsoleFileCount((-1));
        java.lang.String str38 = atomikosProperties35.getOutputDir();
        atomikosProperties35.setLogBaseName("tm.out");
        boolean boolean41 = properties26.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties42.setConsoleFileCount(100);
        atomikosProperties42.setAllowSubTransactions(true);
        java.lang.Object obj47 = properties26.remove((java.lang.Object) atomikosProperties42);
        java.util.Set<java.lang.Object> objSet48 = properties26.keySet();
        boolean boolean49 = properties2.replace((java.lang.Object) properties8, (java.lang.Object) objEntrySet22, (java.lang.Object) properties26);
        java.lang.String str51 = properties8.getProperty("{}");
        boolean boolean52 = properties8.isEmpty();
        java.io.InputStream inputStream53 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.loadFromXML(inputStream53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNotNull(objEntrySet22);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(objSet48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test00636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00636");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        properties0.clear();
        java.io.InputStream inputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.load(inputStream7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test00637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00637");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties3.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet9 = properties3.stringPropertyNames();
        java.lang.Object obj10 = new java.lang.Object();
        java.lang.Object obj11 = properties3.get(obj10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.getConsoleFileName();
        atomikosProperties12.setOutputDir("hi!");
        int int16 = atomikosProperties12.getConsoleFileLimit();
        java.util.Properties properties17 = atomikosProperties12.asProperties();
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Properties properties19 = new java.util.Properties(properties18);
        properties19.clear();
        properties17.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties19);
        java.util.Properties properties22 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str24 = atomikosProperties23.getConsoleFileName();
        java.lang.Object obj26 = properties22.put((java.lang.Object) atomikosProperties23, (java.lang.Object) 0L);
        java.lang.Object obj29 = properties22.setProperty("", "");
        java.util.Properties properties30 = new java.util.Properties(properties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str32 = atomikosProperties31.getConsoleFileName();
        atomikosProperties31.setOutputDir("hi!");
        int int35 = atomikosProperties31.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel36 = atomikosProperties31.getConsoleLogLevel();
        java.lang.Object obj37 = properties17.getOrDefault((java.lang.Object) properties22, (java.lang.Object) atomikosProperties31);
        java.util.Properties properties38 = null;
        java.util.Properties properties39 = new java.util.Properties(properties38);
        java.util.Properties properties40 = new java.util.Properties();
        java.util.Properties properties41 = new java.util.Properties(properties40);
        properties41.clear();
        properties39.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties41);
        java.util.Collection<java.lang.Object> objCollection44 = properties41.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str46 = atomikosProperties45.getConsoleFileName();
        atomikosProperties45.setOutputDir("hi!");
        int int49 = atomikosProperties45.getConsoleFileLimit();
        java.util.Properties properties50 = atomikosProperties45.asProperties();
        boolean boolean51 = properties41.containsValue((java.lang.Object) atomikosProperties45);
        java.util.Enumeration<java.lang.Object> objEnumeration52 = properties41.elements();
        java.util.Enumeration<java.lang.Object> objEnumeration53 = properties41.elements();
        java.lang.Object obj54 = properties3.putIfAbsent((java.lang.Object) atomikosProperties31, (java.lang.Object) properties41);
        java.lang.Object obj55 = null;
        boolean boolean56 = properties41.equals(obj55);
        java.io.Writer writer57 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties41.store(writer57, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=32, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tm.out" + "'", str13, "tm.out");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tm.out" + "'", str24, "tm.out");
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tm.out" + "'", str32, "tm.out");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel36 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel36.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(objCollection44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "tm.out" + "'", str46, "tm.out");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objEnumeration52);
        org.junit.Assert.assertNotNull(objEnumeration53);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test00638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00638");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.setForgetOrphanedLogEntriesDelay((long) (byte) 100);
        long long4 = recovery0.getDelay();
        recovery0.setMaxRetries((int) (short) 100);
        recovery0.setForgetOrphanedLogEntriesDelay(10000L);
        long long9 = recovery0.getRetryInterval();
        recovery0.setDelay(0L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 86400000L + "'", long1 == 86400000L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
    }

    @Test
    public void test00639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00639");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties1.elements();
        java.util.Properties properties5 = new java.util.Properties(properties1);
        java.util.Enumeration<?> wildcardEnumeration6 = properties1.propertyNames();
        java.util.Enumeration<?> wildcardEnumeration7 = properties1.propertyNames();
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties1.elements();
        java.lang.Object obj9 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean10 = properties1.containsKey(obj9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(wildcardEnumeration6);
        org.junit.Assert.assertNotNull(wildcardEnumeration7);
        org.junit.Assert.assertNotNull(objEnumeration8);
    }

    @Test
    public void test00640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00640");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Properties properties25 = new java.util.Properties();
        java.util.Properties properties26 = new java.util.Properties(properties25);
        properties26.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.getConsoleFileName();
        atomikosProperties29.setOutputDir("hi!");
        int int33 = atomikosProperties29.getConsoleFileLimit();
        java.lang.Object obj34 = properties26.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties29);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet35 = properties26.entrySet();
        boolean boolean36 = properties3.containsValue((java.lang.Object) properties26);
        java.util.Properties properties37 = new java.util.Properties(properties26);
        java.util.Collection<java.lang.Object> objCollection38 = properties26.values();
        java.util.Properties properties39 = new java.util.Properties(properties26);
        java.io.InputStream inputStream40 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties26.load(inputStream40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "tm.out" + "'", str30, "tm.out");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(objEntrySet35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objCollection38);
    }

    @Test
    public void test00641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00641");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.lang.String str6 = atomikosProperties0.getService();
        atomikosProperties0.setService("hi!");
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        java.io.Reader reader12 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties11.load(reader12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(properties11);
    }

    @Test
    public void test00642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00642");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Properties properties7 = new java.util.Properties(properties6);
        properties7.clear();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties5.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long12 = recovery11.getForgetOrphanedLogEntriesDelay();
        recovery11.setForgetOrphanedLogEntriesDelay((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery15 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long16 = recovery15.getForgetOrphanedLogEntriesDelay();
        recovery15.setDelay((long) (short) 1);
        recovery15.setMaxRetries((int) (byte) 10);
        java.lang.Object obj21 = properties5.getOrDefault((java.lang.Object) (byte) 100, (java.lang.Object) (byte) 10);
        int int22 = properties5.size();
        java.lang.Object obj25 = properties5.setProperty("", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=32, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        java.lang.Class<?> wildcardClass26 = properties5.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(objEntrySet10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 86400000L + "'", long12 == 86400000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 86400000L + "'", long16 == 86400000L);
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + (byte) 10 + "'", obj21, (byte) 10);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 19 + "'", int22 == 19);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test00643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00643");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean5 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setConsoleFileCount(10);
        atomikosProperties0.setConsoleFileCount(50);
        java.lang.String str10 = atomikosProperties0.getTransactionManagerUniqueName();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test00644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00644");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        atomikosProperties0.setCheckpointInterval((long) (short) 10);
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        int int6 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setAllowSubTransactions(false);
        long long9 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setTransactionManagerUniqueName("tm.out");
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
    }

    @Test
    public void test00645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00645");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        boolean boolean4 = properties2.isEmpty();
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection6 = properties5.values();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        properties10.clear();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.lang.Object obj15 = properties8.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        boolean boolean20 = properties18.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties18.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet22 = properties18.entrySet();
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection24 = properties23.values();
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        java.util.Properties properties27 = new java.util.Properties();
        java.util.Properties properties28 = new java.util.Properties(properties27);
        properties28.clear();
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        java.lang.Object obj33 = properties26.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setConsoleFileCount((-1));
        java.lang.String str38 = atomikosProperties35.getOutputDir();
        atomikosProperties35.setLogBaseName("tm.out");
        boolean boolean41 = properties26.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties42.setConsoleFileCount(100);
        atomikosProperties42.setAllowSubTransactions(true);
        java.lang.Object obj47 = properties26.remove((java.lang.Object) atomikosProperties42);
        java.util.Set<java.lang.Object> objSet48 = properties26.keySet();
        boolean boolean49 = properties2.replace((java.lang.Object) properties8, (java.lang.Object) objEntrySet22, (java.lang.Object) properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str51 = atomikosProperties50.getConsoleFileName();
        atomikosProperties50.setOutputDir("hi!");
        int int54 = atomikosProperties50.getConsoleFileLimit();
        java.util.Properties properties55 = atomikosProperties50.asProperties();
        java.util.Properties properties56 = new java.util.Properties();
        java.util.Properties properties57 = new java.util.Properties(properties56);
        properties57.clear();
        properties55.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties57);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str61 = atomikosProperties60.getConsoleFileName();
        atomikosProperties60.setOutputDir("hi!");
        int int64 = atomikosProperties60.getConsoleFileLimit();
        java.util.Properties properties65 = atomikosProperties60.asProperties();
        java.lang.String str66 = atomikosProperties60.getService();
        atomikosProperties60.setService("hi!");
        atomikosProperties60.setConsoleFileName("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery71 = atomikosProperties60.getRecovery();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties72 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str73 = atomikosProperties72.getConsoleFileName();
        atomikosProperties72.setOutputDir("hi!");
        java.lang.String str76 = atomikosProperties72.getOutputDir();
        boolean boolean77 = properties26.replace((java.lang.Object) properties57, (java.lang.Object) atomikosProperties60, (java.lang.Object) atomikosProperties72);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel78 = atomikosProperties60.getConsoleLogLevel();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery79 = atomikosProperties60.getRecovery();
        long long80 = atomikosProperties60.getDefaultJtaTimeout();
        boolean boolean81 = atomikosProperties60.isAllowSubTransactions();
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNotNull(objEntrySet22);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(objSet48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "tm.out" + "'", str51, "tm.out");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(properties55);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "tm.out" + "'", str61, "tm.out");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(properties65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(recovery71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "tm.out" + "'", str73, "tm.out");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "hi!" + "'", str76, "hi!");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel78 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel78.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(recovery79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 10000L + "'", long80 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test00646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00646");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean5 = atomikosProperties0.isForceShutdownOnVmExit();
        int int6 = atomikosProperties0.getConsoleFileCount();
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        long long8 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.setCheckpointInterval((long) 52);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 300000L + "'", long8 == 300000L);
    }

    @Test
    public void test00647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00647");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties1.entrySet();
        java.util.Properties properties11 = new java.util.Properties(properties1);
        java.io.PrintStream printStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties11.list(printStream12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(objEntrySet10);
    }

    @Test
    public void test00648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00648");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.lang.Object obj7 = properties0.setProperty("", "");
        java.util.Properties properties8 = new java.util.Properties(properties0);
        java.lang.Object obj9 = properties8.clone();
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean13 = properties11.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str15 = atomikosProperties14.getTransactionManagerUniqueName();
        atomikosProperties14.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str19 = atomikosProperties18.getConsoleFileName();
        atomikosProperties18.setOutputDir("hi!");
        int int22 = atomikosProperties18.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel23 = atomikosProperties18.getConsoleLogLevel();
        java.lang.Object obj24 = properties11.putIfAbsent((java.lang.Object) atomikosProperties14, (java.lang.Object) atomikosLoggingLevel23);
        boolean boolean25 = properties8.contains((java.lang.Object) atomikosProperties14);
        atomikosProperties14.setThreadedTwoPhaseCommit(true);
        boolean boolean28 = atomikosProperties14.isAllowSubTransactions();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "{}");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tm.out" + "'", str19, "tm.out");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel23 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel23.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test00649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00649");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties1.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.getConsoleFileName();
        long long7 = atomikosProperties5.getMaxTimeout();
        java.util.Properties properties8 = atomikosProperties5.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long10 = recovery9.getForgetOrphanedLogEntriesDelay();
        recovery9.setDelay((long) (short) 1);
        recovery9.setRetryInterval(100L);
        boolean boolean15 = properties8.containsValue((java.lang.Object) 100L);
        java.util.Properties properties16 = new java.util.Properties();
        java.util.Properties properties17 = new java.util.Properties(properties16);
        int int18 = properties17.size();
        boolean boolean19 = properties17.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties17.elements();
        java.util.Properties properties21 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection22 = properties21.values();
        java.util.Properties properties23 = new java.util.Properties(properties21);
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties23.elements();
        boolean boolean25 = properties23.isEmpty();
        boolean boolean26 = properties17.containsValue((java.lang.Object) boolean25);
        java.util.Properties properties27 = new java.util.Properties(properties17);
        java.util.Enumeration<?> wildcardEnumeration28 = properties27.propertyNames();
        boolean boolean29 = properties8.containsKey((java.lang.Object) properties27);
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        properties8.clear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tm.out" + "'", str6, "tm.out");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 86400000L + "'", long10 == 86400000L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertNotNull(objCollection22);
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test00650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00650");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        java.io.OutputStream outputStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.save(outputStream6, "{hi!=10}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test00651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00651");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Set<java.lang.Object> objSet4 = properties1.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.getConsoleFileName();
        long long7 = atomikosProperties5.getMaxTimeout();
        java.util.Properties properties8 = atomikosProperties5.asProperties();
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        java.util.Properties properties11 = new java.util.Properties();
        java.util.Properties properties12 = new java.util.Properties(properties11);
        properties12.clear();
        properties10.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties12);
        java.util.Properties properties15 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.getConsoleFileName();
        java.lang.Object obj19 = properties15.put((java.lang.Object) atomikosProperties16, (java.lang.Object) 0L);
        properties15.clear();
        java.util.Properties properties21 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.getConsoleFileName();
        java.lang.Object obj25 = properties21.put((java.lang.Object) atomikosProperties22, (java.lang.Object) 0L);
        java.util.Properties properties26 = new java.util.Properties(properties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.setConsoleFileCount((-1));
        atomikosProperties27.setTransactionManagerUniqueName("tm.out");
        java.lang.Object obj32 = properties21.remove((java.lang.Object) atomikosProperties27);
        java.lang.Object obj33 = properties10.getOrDefault((java.lang.Object) properties15, (java.lang.Object) properties21);
        java.lang.Object obj34 = properties1.replace((java.lang.Object) atomikosProperties5, obj33);
        atomikosProperties5.setAllowSubTransactions(true);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objSet4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tm.out" + "'", str6, "tm.out");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tm.out" + "'", str17, "tm.out");
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tm.out" + "'", str23, "tm.out");
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertNull(obj34);
    }

    @Test
    public void test00652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00652");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties1.setProperty("", "hi!");
        java.util.Set<java.lang.Object> objSet9 = properties1.keySet();
        boolean boolean10 = properties1.isEmpty();
        java.util.Properties properties11 = new java.util.Properties(properties1);
        java.util.Properties properties12 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str14 = atomikosProperties13.getConsoleFileName();
        java.lang.Object obj16 = properties12.put((java.lang.Object) atomikosProperties13, (java.lang.Object) 0L);
        java.util.Properties properties17 = new java.util.Properties(properties12);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setConsoleFileCount((-1));
        atomikosProperties18.setTransactionManagerUniqueName("tm.out");
        java.lang.Object obj23 = properties12.remove((java.lang.Object) atomikosProperties18);
        java.lang.Object obj24 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean25 = properties1.remove((java.lang.Object) atomikosProperties18, obj24);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tm.out" + "'", str14, "tm.out");
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj23);
    }

    @Test
    public void test00653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00653");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        java.lang.String str3 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseName("tm.out");
        atomikosProperties0.setLogBaseDir("tm.out");
        java.lang.String str8 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setDefaultJtaTimeout(10L);
        atomikosProperties0.setLogBaseDir("");
        atomikosProperties0.setDefaultJtaTimeout((long) (short) 100);
        int int15 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setConsoleFileLimit(1);
        atomikosProperties0.setLogBaseName("tm.out");
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        boolean boolean22 = atomikosProperties0.isThreadedTwoPhaseCommit();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tm.out" + "'", str8, "tm.out");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test00654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00654");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.lang.Object obj4 = properties0.setProperty("hi!", "");
        java.util.Properties properties5 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.getConsoleFileName();
        java.lang.Object obj9 = properties5.put((java.lang.Object) atomikosProperties6, (java.lang.Object) 0L);
        java.lang.Object obj12 = properties5.setProperty("", "");
        java.util.Properties properties13 = new java.util.Properties(properties5);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties13);
        java.util.Properties properties15 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection16 = properties15.values();
        java.util.Properties properties17 = new java.util.Properties(properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties17.elements();
        boolean boolean19 = properties17.isEmpty();
        java.util.Properties properties20 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection21 = properties20.values();
        java.util.Properties properties22 = null;
        java.util.Properties properties23 = new java.util.Properties(properties22);
        java.util.Properties properties24 = new java.util.Properties();
        java.util.Properties properties25 = new java.util.Properties(properties24);
        properties25.clear();
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties25);
        java.lang.Object obj30 = properties23.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties20.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties23);
        java.util.Properties properties32 = null;
        java.util.Properties properties33 = new java.util.Properties(properties32);
        boolean boolean35 = properties33.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration36 = properties33.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet37 = properties33.entrySet();
        java.util.Properties properties38 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection39 = properties38.values();
        java.util.Properties properties40 = null;
        java.util.Properties properties41 = new java.util.Properties(properties40);
        java.util.Properties properties42 = new java.util.Properties();
        java.util.Properties properties43 = new java.util.Properties(properties42);
        properties43.clear();
        properties41.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties43);
        java.lang.Object obj48 = properties41.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties38.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties41);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties50.setConsoleFileCount((-1));
        java.lang.String str53 = atomikosProperties50.getOutputDir();
        atomikosProperties50.setLogBaseName("tm.out");
        boolean boolean56 = properties41.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties57.setConsoleFileCount(100);
        atomikosProperties57.setAllowSubTransactions(true);
        java.lang.Object obj62 = properties41.remove((java.lang.Object) atomikosProperties57);
        java.util.Set<java.lang.Object> objSet63 = properties41.keySet();
        boolean boolean64 = properties17.replace((java.lang.Object) properties23, (java.lang.Object) objEntrySet37, (java.lang.Object) properties41);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str66 = atomikosProperties65.getConsoleFileName();
        atomikosProperties65.setOutputDir("hi!");
        int int69 = atomikosProperties65.getConsoleFileLimit();
        java.util.Properties properties70 = atomikosProperties65.asProperties();
        java.util.Properties properties71 = new java.util.Properties();
        java.util.Properties properties72 = new java.util.Properties(properties71);
        properties72.clear();
        properties70.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties72);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties75 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str76 = atomikosProperties75.getConsoleFileName();
        atomikosProperties75.setOutputDir("hi!");
        int int79 = atomikosProperties75.getConsoleFileLimit();
        java.util.Properties properties80 = atomikosProperties75.asProperties();
        java.lang.String str81 = atomikosProperties75.getService();
        atomikosProperties75.setService("hi!");
        atomikosProperties75.setConsoleFileName("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery86 = atomikosProperties75.getRecovery();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties87 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str88 = atomikosProperties87.getConsoleFileName();
        atomikosProperties87.setOutputDir("hi!");
        java.lang.String str91 = atomikosProperties87.getOutputDir();
        boolean boolean92 = properties41.replace((java.lang.Object) properties72, (java.lang.Object) atomikosProperties75, (java.lang.Object) atomikosProperties87);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel93 = atomikosProperties75.getConsoleLogLevel();
        boolean boolean94 = properties13.contains((java.lang.Object) atomikosLoggingLevel93);
        java.io.OutputStream outputStream95 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties13.save(outputStream95, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=hi!, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tm.out" + "'", str7, "tm.out");
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objCollection21);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objEnumeration36);
        org.junit.Assert.assertNotNull(objEntrySet37);
        org.junit.Assert.assertNotNull(objCollection39);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNotNull(objSet63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "tm.out" + "'", str66, "tm.out");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(properties70);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "tm.out" + "'", str76, "tm.out");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(properties80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(recovery86);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "tm.out" + "'", str88, "tm.out");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "hi!" + "'", str91, "hi!");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel93 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel93.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test00655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00655");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Collection<java.lang.Object> objCollection6 = properties3.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str8 = atomikosProperties7.getConsoleFileName();
        atomikosProperties7.setOutputDir("hi!");
        int int11 = atomikosProperties7.getConsoleFileLimit();
        java.util.Properties properties12 = atomikosProperties7.asProperties();
        boolean boolean13 = properties3.containsValue((java.lang.Object) atomikosProperties7);
        atomikosProperties7.setTransactionManagerUniqueName("tmlog");
        atomikosProperties7.setEnableLogging(false);
        atomikosProperties7.setAllowSubTransactions(true);
        boolean boolean20 = atomikosProperties7.isAllowSubTransactions();
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tm.out" + "'", str8, "tm.out");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test00656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00656");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet6 = properties5.stringPropertyNames();
        java.util.Properties properties7 = new java.util.Properties(properties5);
        int int8 = properties7.size();
        java.io.OutputStream outputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties7.save(outputStream9, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test00657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00657");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getTransactionManagerUniqueName();
        boolean boolean2 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setAllowSubTransactions(false);
        atomikosProperties0.setLogBaseName("");
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        java.util.Properties properties8 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection9 = properties8.values();
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        java.util.Properties properties12 = new java.util.Properties();
        java.util.Properties properties13 = new java.util.Properties(properties12);
        properties13.clear();
        properties11.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties13);
        java.lang.Object obj18 = properties11.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.setConsoleFileCount((-1));
        java.lang.String str23 = atomikosProperties20.getOutputDir();
        atomikosProperties20.setLogBaseName("tm.out");
        boolean boolean26 = properties11.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.setConsoleFileCount(100);
        atomikosProperties27.setAllowSubTransactions(true);
        java.lang.Object obj32 = properties11.remove((java.lang.Object) atomikosProperties27);
        atomikosProperties27.setAllowSubTransactions(false);
        long long35 = atomikosProperties27.getCheckpointInterval();
        boolean boolean36 = atomikosProperties27.isSerialJtaTransactions();
        boolean boolean37 = properties7.equals((java.lang.Object) atomikosProperties27);
        java.util.Properties properties38 = new java.util.Properties(properties7);
        boolean boolean39 = properties7.isEmpty();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 500L + "'", long35 == 500L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test00658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00658");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getTransactionManagerUniqueName();
        boolean boolean2 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setAllowSubTransactions(false);
        atomikosProperties0.setLogBaseName("");
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(properties7);
    }

    @Test
    public void test00659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00659");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.util.Properties properties28 = new java.util.Properties();
        java.util.Properties properties29 = new java.util.Properties(properties28);
        properties29.clear();
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        java.lang.Object obj32 = properties3.get((java.lang.Object) properties29);
        properties29.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str35 = atomikosProperties34.getConsoleFileName();
        long long36 = atomikosProperties34.getMaxTimeout();
        java.util.Properties properties37 = atomikosProperties34.asProperties();
        java.util.Properties properties38 = new java.util.Properties();
        java.util.Properties properties39 = new java.util.Properties(properties38);
        int int40 = properties39.size();
        boolean boolean41 = properties39.isEmpty();
        java.util.Set<java.lang.Object> objSet42 = properties39.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setConsoleFileCount((-1));
        java.lang.String str47 = atomikosProperties44.getOutputDir();
        atomikosProperties44.setLogBaseName("tm.out");
        atomikosProperties44.setLogBaseDir("tm.out");
        int int52 = atomikosProperties44.getMaxActives();
        atomikosProperties44.setDefaultJtaTimeout((long) (short) 100);
        boolean boolean55 = properties37.replace((java.lang.Object) objSet42, (java.lang.Object) (byte) 1, (java.lang.Object) atomikosProperties44);
        java.lang.String str56 = atomikosProperties44.getService();
        java.lang.Object obj57 = properties29.remove((java.lang.Object) atomikosProperties44);
        java.io.PrintStream printStream58 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties29.list(printStream58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tm.out" + "'", str35, "tm.out");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 300000L + "'", long36 == 300000L);
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objSet42);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 50 + "'", int52 == 50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(obj57);
    }

    @Test
    public void test00660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00660");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties3.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Properties properties9 = new java.util.Properties(properties3);
        java.util.Properties properties10 = new java.util.Properties(properties3);
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        java.util.Properties properties13 = new java.util.Properties();
        java.util.Properties properties14 = new java.util.Properties(properties13);
        properties14.clear();
        properties12.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties14);
        java.lang.Object obj19 = properties14.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet20 = properties14.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.setConsoleFileCount((-1));
        java.lang.String str24 = atomikosProperties21.getOutputDir();
        atomikosProperties21.setLogBaseName("tm.out");
        int int27 = atomikosProperties21.getConsoleFileCount();
        boolean boolean28 = properties14.containsKey((java.lang.Object) atomikosProperties21);
        long long29 = atomikosProperties21.getCheckpointInterval();
        java.lang.Object obj30 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj31 = properties10.put((java.lang.Object) long29, obj30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 500L + "'", long29 == 500L);
    }

    @Test
    public void test00661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00661");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.lang.Object obj4 = properties0.setProperty("hi!", "");
        java.util.Properties properties5 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.getConsoleFileName();
        java.lang.Object obj9 = properties5.put((java.lang.Object) atomikosProperties6, (java.lang.Object) 0L);
        java.lang.Object obj12 = properties5.setProperty("", "");
        java.util.Properties properties13 = new java.util.Properties(properties5);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties13);
        java.util.Properties properties16 = new java.util.Properties();
        java.util.Properties properties17 = new java.util.Properties(properties16);
        properties17.clear();
        java.util.Set<java.lang.String> strSet19 = properties17.stringPropertyNames();
        java.lang.Object obj20 = properties0.putIfAbsent((java.lang.Object) "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", (java.lang.Object) strSet19);
        java.io.Writer writer21 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(writer21, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tm.out" + "'", str7, "tm.out");
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNull(obj20);
    }

    @Test
    public void test00662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00662");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet3 = properties1.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties4.setConsoleFileCount(100);
        atomikosProperties4.setAllowSubTransactions(true);
        boolean boolean9 = atomikosProperties4.isForceShutdownOnVmExit();
        int int10 = atomikosProperties4.getConsoleFileCount();
        java.util.Properties properties11 = atomikosProperties4.asProperties();
        boolean boolean12 = properties1.equals((java.lang.Object) atomikosProperties4);
        java.util.Set<java.lang.String> strSet13 = properties1.stringPropertyNames();
        java.util.Properties properties14 = null;
        java.util.Properties properties15 = new java.util.Properties(properties14);
        java.util.Properties properties16 = new java.util.Properties();
        java.util.Properties properties17 = new java.util.Properties(properties16);
        properties17.clear();
        properties15.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties17);
        java.lang.Object obj22 = properties15.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.lang.Object obj24 = properties15.clone();
        java.io.OutputStream outputStream25 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties15.storeToXML(outputStream25, "{hi!=10}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(objEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "{10=10.0}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "{10=10.0}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "{10=10.0}");
    }

    @Test
    public void test00663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00663");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties1.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        boolean boolean9 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties1.keys();
        java.io.OutputStream outputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.save(outputStream11, "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objEnumeration10);
    }

    @Test
    public void test00664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00664");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties8.getConsoleLogLevel();
        java.lang.Object obj14 = properties1.putIfAbsent((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosLoggingLevel13);
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.Object obj17 = properties15.get((java.lang.Object) (byte) -1);
        java.util.Properties properties18 = new java.util.Properties(properties15);
        boolean boolean19 = properties1.equals((java.lang.Object) properties15);
        java.util.Properties properties20 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.getConsoleFileName();
        java.lang.Object obj24 = properties20.put((java.lang.Object) atomikosProperties21, (java.lang.Object) 0L);
        java.util.Properties properties25 = new java.util.Properties(properties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setConsoleFileCount((-1));
        atomikosProperties26.setTransactionManagerUniqueName("tm.out");
        java.lang.Object obj31 = properties20.remove((java.lang.Object) atomikosProperties26);
        boolean boolean32 = atomikosProperties26.isForceShutdownOnVmExit();
        java.util.Properties properties33 = atomikosProperties26.asProperties();
        java.util.Properties properties34 = null;
        java.util.Properties properties35 = new java.util.Properties(properties34);
        boolean boolean37 = properties35.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str39 = atomikosProperties38.getTransactionManagerUniqueName();
        atomikosProperties38.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str43 = atomikosProperties42.getConsoleFileName();
        atomikosProperties42.setOutputDir("hi!");
        int int46 = atomikosProperties42.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel47 = atomikosProperties42.getConsoleLogLevel();
        java.lang.Object obj48 = properties35.putIfAbsent((java.lang.Object) atomikosProperties38, (java.lang.Object) atomikosLoggingLevel47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str50 = atomikosProperties49.getConsoleFileName();
        atomikosProperties49.setOutputDir("hi!");
        int int53 = atomikosProperties49.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel54 = atomikosProperties49.getConsoleLogLevel();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery55 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long56 = recovery55.getForgetOrphanedLogEntriesDelay();
        java.util.Properties properties57 = new java.util.Properties();
        java.util.Properties properties58 = new java.util.Properties(properties57);
        properties58.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str62 = atomikosProperties61.getConsoleFileName();
        atomikosProperties61.setOutputDir("hi!");
        int int65 = atomikosProperties61.getConsoleFileLimit();
        java.lang.Object obj66 = properties58.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties61);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel67 = atomikosProperties61.getConsoleLogLevel();
        java.lang.String str68 = atomikosProperties61.getTransactionManagerUniqueName();
        atomikosProperties61.setThreadedTwoPhaseCommit(false);
        boolean boolean71 = properties35.replace((java.lang.Object) atomikosProperties49, (java.lang.Object) recovery55, (java.lang.Object) false);
        java.lang.Object obj72 = properties15.replace((java.lang.Object) atomikosProperties26, (java.lang.Object) properties35);
        java.util.Enumeration<java.lang.Object> objEnumeration73 = properties15.keys();
        java.util.Collection<java.lang.Object> objCollection74 = properties15.values();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tm.out" + "'", str22, "tm.out");
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tm.out" + "'", str43, "tm.out");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel47 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel47.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tm.out" + "'", str50, "tm.out");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel54 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel54.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 86400000L + "'", long56 == 86400000L);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tm.out" + "'", str62, "tm.out");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel67 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel67.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertNotNull(objEnumeration73);
        org.junit.Assert.assertNotNull(objCollection74);
    }

    @Test
    public void test00665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00665");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        java.lang.String str5 = properties2.getProperty("hi!");
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties7.setConsoleFileCount(100);
        atomikosProperties7.setAllowSubTransactions(true);
        boolean boolean12 = atomikosProperties7.isForceShutdownOnVmExit();
        int int13 = atomikosProperties7.getConsoleFileCount();
        java.util.Properties properties14 = atomikosProperties7.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery15 = atomikosProperties7.getRecovery();
        java.util.Properties properties16 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection17 = properties16.values();
        java.util.Properties properties18 = null;
        java.util.Properties properties19 = new java.util.Properties(properties18);
        java.util.Properties properties20 = new java.util.Properties();
        java.util.Properties properties21 = new java.util.Properties(properties20);
        properties21.clear();
        properties19.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.lang.Object obj26 = properties19.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties16.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties19);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties28.setConsoleFileCount((-1));
        java.lang.String str31 = atomikosProperties28.getOutputDir();
        atomikosProperties28.setLogBaseName("tm.out");
        boolean boolean34 = properties19.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setConsoleFileCount(100);
        atomikosProperties35.setAllowSubTransactions(true);
        java.lang.Object obj40 = properties19.remove((java.lang.Object) atomikosProperties35);
        atomikosProperties35.setAllowSubTransactions(false);
        int int43 = atomikosProperties35.getConsoleFileCount();
        java.util.Properties properties44 = atomikosProperties35.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel45 = atomikosProperties35.getConsoleLogLevel();
        java.lang.Object obj46 = properties2.getOrDefault((java.lang.Object) recovery15, (java.lang.Object) atomikosProperties35);
        java.util.Set<java.lang.Object> objSet47 = properties2.keySet();
        java.util.Properties properties48 = new java.util.Properties(properties2);
        java.io.PrintWriter printWriter49 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties48.list(printWriter49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(recovery15);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertNotNull(properties44);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel45 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel45.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertNotNull(objSet47);
    }

    @Test
    public void test00666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00666");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        int int2 = atomikosProperties0.getConsoleFileCount();
        java.lang.String str3 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.setConsoleFileLimit((int) (short) 100);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test00667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00667");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        atomikosProperties0.setCheckpointInterval((long) (short) 10);
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = new java.util.Properties(properties5);
        java.io.Reader reader7 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties6.load(reader7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties5);
    }

    @Test
    public void test00668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00668");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        atomikosProperties4.setLogBaseName("tm.out");
        atomikosProperties4.setForceShutdownOnVmExit(false);
        java.lang.String str14 = atomikosProperties4.getLogBaseDir();
        java.lang.String str15 = atomikosProperties4.getLogBaseName();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tm.out" + "'", str15, "tm.out");
    }

    @Test
    public void test00669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00669");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.get((java.lang.Object) (byte) -1);
        java.util.Properties properties3 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        java.lang.String str6 = atomikosProperties4.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel7 = atomikosProperties4.getConsoleLogLevel();
        boolean boolean8 = properties0.equals((java.lang.Object) atomikosProperties4);
        int int9 = atomikosProperties4.getConsoleFileCount();
        atomikosProperties4.setAllowSubTransactions(false);
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel7 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel7.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test00670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00670");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        java.util.Properties properties26 = new java.util.Properties(properties3);
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.io.OutputStream outputStream28 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties26.store(outputStream28, "{=hi!}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
    }

    @Test
    public void test00671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00671");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        int int2 = atomikosProperties0.getMaxActives();
        long long3 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setDefaultJtaTimeout((long) 52);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 10000L + "'", long3 == 10000L);
    }

    @Test
    public void test00672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00672");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet6 = properties5.stringPropertyNames();
        java.util.Properties properties7 = new java.util.Properties(properties5);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Properties properties11 = new java.util.Properties(properties10);
        properties11.clear();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.lang.Object obj16 = properties11.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet17 = properties11.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setConsoleFileCount((-1));
        java.lang.String str21 = atomikosProperties18.getOutputDir();
        atomikosProperties18.setLogBaseName("tm.out");
        int int24 = atomikosProperties18.getConsoleFileCount();
        boolean boolean25 = properties11.containsKey((java.lang.Object) atomikosProperties18);
        atomikosProperties18.setConsoleFileCount((int) (byte) -1);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery28 = atomikosProperties18.getRecovery();
        java.util.Properties properties29 = new java.util.Properties();
        java.util.Properties properties30 = new java.util.Properties(properties29);
        properties30.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.getConsoleFileName();
        atomikosProperties33.setOutputDir("hi!");
        int int37 = atomikosProperties33.getConsoleFileLimit();
        java.lang.Object obj38 = properties30.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties33);
        atomikosProperties33.setLogBaseName("tm.out");
        atomikosProperties33.setForceShutdownOnVmExit(false);
        java.lang.Object obj43 = properties7.replace((java.lang.Object) recovery28, (java.lang.Object) atomikosProperties33);
        atomikosProperties33.setForceShutdownOnVmExit(false);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(recovery28);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tm.out" + "'", str34, "tm.out");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNull(obj43);
    }

    @Test
    public void test00673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00673");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Properties properties8 = new java.util.Properties();
        java.util.Properties properties9 = new java.util.Properties(properties8);
        properties9.clear();
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        java.lang.Object obj14 = properties9.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        boolean boolean15 = properties5.equals(obj14);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet16 = properties5.entrySet();
        int int17 = properties5.size();
        java.util.Set<java.lang.Object> objSet18 = properties5.keySet();
        java.util.Properties properties19 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str21 = atomikosProperties20.getConsoleFileName();
        java.lang.Object obj23 = properties19.put((java.lang.Object) atomikosProperties20, (java.lang.Object) 0L);
        java.lang.Object obj26 = properties19.setProperty("", "");
        java.util.Properties properties27 = new java.util.Properties(properties19);
        java.lang.Object obj28 = properties27.clone();
        java.lang.String str29 = properties27.toString();
        java.util.Properties properties30 = new java.util.Properties();
        java.util.Properties properties31 = new java.util.Properties(properties30);
        properties31.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str35 = atomikosProperties34.getConsoleFileName();
        atomikosProperties34.setOutputDir("hi!");
        int int38 = atomikosProperties34.getConsoleFileLimit();
        java.lang.Object obj39 = properties31.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties34);
        boolean boolean40 = atomikosProperties34.isForceShutdownOnVmExit();
        atomikosProperties34.setConsoleFileName("");
        java.lang.String str43 = atomikosProperties34.getService();
        atomikosProperties34.setTransactionManagerUniqueName("");
        atomikosProperties34.setOutputDir("hi!");
        atomikosProperties34.setSerialJtaTransactions(true);
        boolean boolean50 = atomikosProperties34.isEnableLogging();
        boolean boolean51 = properties27.containsValue((java.lang.Object) atomikosProperties34);
        boolean boolean52 = properties5.containsKey((java.lang.Object) boolean51);
        java.util.Properties properties53 = new java.util.Properties();
        java.util.Properties properties54 = new java.util.Properties(properties53);
        int int55 = properties54.size();
        boolean boolean56 = properties54.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration57 = properties54.elements();
        java.util.Properties properties58 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection59 = properties58.values();
        java.util.Properties properties60 = new java.util.Properties(properties58);
        java.util.Enumeration<java.lang.Object> objEnumeration61 = properties60.elements();
        boolean boolean62 = properties60.isEmpty();
        boolean boolean63 = properties54.containsValue((java.lang.Object) boolean62);
        java.util.Properties properties64 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection65 = properties64.values();
        java.util.Properties properties66 = new java.util.Properties(properties64);
        java.util.Enumeration<java.lang.Object> objEnumeration67 = properties66.keys();
        boolean boolean68 = properties54.containsKey((java.lang.Object) objEnumeration67);
        boolean boolean69 = properties5.contains((java.lang.Object) objEnumeration67);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objEntrySet16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 19 + "'", int17 == 19);
        org.junit.Assert.assertNotNull(objSet18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tm.out" + "'", str21, "tm.out");
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "{}");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{}" + "'", str29, "{}");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tm.out" + "'", str35, "tm.out");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objEnumeration57);
        org.junit.Assert.assertNotNull(objCollection59);
        org.junit.Assert.assertNotNull(objEnumeration61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objCollection65);
        org.junit.Assert.assertNotNull(objEnumeration67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test00674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00674");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Set<java.lang.Object> objSet4 = properties1.keySet();
        java.util.Properties properties5 = null;
        java.util.Properties properties6 = new java.util.Properties(properties5);
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Properties properties8 = new java.util.Properties(properties7);
        properties8.clear();
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.getConsoleFileName();
        atomikosProperties12.setOutputDir("hi!");
        int int16 = atomikosProperties12.getConsoleFileLimit();
        java.util.Properties properties17 = atomikosProperties12.asProperties();
        boolean boolean18 = properties8.containsValue((java.lang.Object) atomikosProperties12);
        boolean boolean19 = properties8.isEmpty();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Properties properties21 = new java.util.Properties(properties1);
        java.util.Enumeration<java.lang.Object> objEnumeration22 = properties1.keys();
        java.io.PrintWriter printWriter23 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printWriter23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objSet4);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tm.out" + "'", str13, "tm.out");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objEnumeration22);
    }

    @Test
    public void test00675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00675");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Collection<java.lang.Object> objCollection6 = properties3.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str8 = atomikosProperties7.getConsoleFileName();
        atomikosProperties7.setOutputDir("hi!");
        int int11 = atomikosProperties7.getConsoleFileLimit();
        java.util.Properties properties12 = atomikosProperties7.asProperties();
        boolean boolean13 = properties3.containsValue((java.lang.Object) atomikosProperties7);
        atomikosProperties7.setTransactionManagerUniqueName("tmlog");
        atomikosProperties7.setEnableLogging(false);
        atomikosProperties7.setCheckpointInterval(0L);
        java.lang.String str20 = atomikosProperties7.getOutputDir();
        java.util.Properties properties21 = atomikosProperties7.asProperties();
        java.util.Properties properties22 = new java.util.Properties(properties21);
        java.io.Reader reader23 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties22.load(reader23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tm.out" + "'", str8, "tm.out");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(properties21);
    }

    @Test
    public void test00676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00676");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        atomikosProperties0.setTransactionManagerUniqueName("tm.out");
        atomikosProperties0.setForceShutdownOnVmExit(false);
        long long7 = atomikosProperties0.getMaxTimeout();
        long long8 = atomikosProperties0.getDefaultJtaTimeout();
        java.lang.String str9 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setEnableLogging(false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10000L + "'", long8 == 10000L);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test00677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00677");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setConsoleFileCount((-1));
        atomikosProperties6.setTransactionManagerUniqueName("tm.out");
        java.lang.Object obj11 = properties0.remove((java.lang.Object) atomikosProperties6);
        boolean boolean12 = atomikosProperties6.isForceShutdownOnVmExit();
        atomikosProperties6.setAllowSubTransactions(false);
        atomikosProperties6.setMaxActives((-1));
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        boolean boolean20 = properties18.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.getTransactionManagerUniqueName();
        atomikosProperties21.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str26 = atomikosProperties25.getConsoleFileName();
        atomikosProperties25.setOutputDir("hi!");
        int int29 = atomikosProperties25.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel30 = atomikosProperties25.getConsoleLogLevel();
        java.lang.Object obj31 = properties18.putIfAbsent((java.lang.Object) atomikosProperties21, (java.lang.Object) atomikosLoggingLevel30);
        atomikosProperties6.setConsoleLogLevel(atomikosLoggingLevel30);
        long long33 = atomikosProperties6.getDefaultJtaTimeout();
        atomikosProperties6.setConsoleFileName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=100}");
        java.lang.String str36 = atomikosProperties6.getOutputDir();
        boolean boolean37 = atomikosProperties6.isThreadedTwoPhaseCommit();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "tm.out" + "'", str26, "tm.out");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel30 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel30.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10000L + "'", long33 == 10000L);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test00678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00678");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        boolean boolean10 = atomikosProperties4.isForceShutdownOnVmExit();
        atomikosProperties4.setConsoleFileName("");
        java.lang.String str13 = atomikosProperties4.getService();
        java.util.Properties properties14 = atomikosProperties4.asProperties();
        java.lang.Object obj15 = null;
        boolean boolean16 = properties14.equals(obj15);
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        boolean boolean20 = properties18.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.getTransactionManagerUniqueName();
        atomikosProperties21.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str26 = atomikosProperties25.getConsoleFileName();
        atomikosProperties25.setOutputDir("hi!");
        int int29 = atomikosProperties25.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel30 = atomikosProperties25.getConsoleLogLevel();
        java.lang.Object obj31 = properties18.putIfAbsent((java.lang.Object) atomikosProperties21, (java.lang.Object) atomikosLoggingLevel30);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery32 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery32.setRetryInterval((long) (byte) 10);
        int int35 = recovery32.getMaxRetries();
        recovery32.setDelay(10L);
        recovery32.setRetryInterval((long) (short) 10);
        java.lang.Object obj40 = properties14.replace((java.lang.Object) atomikosLoggingLevel30, (java.lang.Object) recovery32);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery41 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long42 = recovery41.getForgetOrphanedLogEntriesDelay();
        recovery41.setDelay((long) (short) 1);
        long long45 = recovery41.getForgetOrphanedLogEntriesDelay();
        recovery41.setDelay((long) '4');
        int int48 = recovery41.getMaxRetries();
        recovery41.setDelay((long) (short) 0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties51.setConsoleFileCount((-1));
        java.lang.String str54 = atomikosProperties51.getOutputDir();
        atomikosProperties51.setLogBaseName("tm.out");
        atomikosProperties51.setForceShutdownOnVmExit(true);
        int int59 = atomikosProperties51.getConsoleFileCount();
        atomikosProperties51.setThreadedTwoPhaseCommit(true);
        atomikosProperties51.setMaxTimeout((long) (short) 100);
        java.lang.Object obj64 = properties14.replace((java.lang.Object) (short) 0, (java.lang.Object) atomikosProperties51);
        java.io.OutputStream outputStream65 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties14.save(outputStream65, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=100}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "tm.out" + "'", str26, "tm.out");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel30 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel30.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 86400000L + "'", long42 == 86400000L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 86400000L + "'", long45 == 86400000L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNull(obj64);
    }

    @Test
    public void test00679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00679");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        java.lang.String str2 = atomikosProperties0.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel3 = atomikosProperties0.getConsoleLogLevel();
        atomikosProperties0.setLogBaseDir("tm.out");
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel10 = atomikosProperties8.getConsoleLogLevel();
        atomikosProperties8.setMaxTimeout(1L);
        java.lang.Object obj13 = properties6.put((java.lang.Object) 1.0f, (java.lang.Object) atomikosProperties8);
        java.util.Properties properties14 = new java.util.Properties(properties6);
        java.io.InputStream inputStream15 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties6.loadFromXML(inputStream15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel3 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel3.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel10 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel10.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test00680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00680");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        boolean boolean4 = properties2.isEmpty();
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection6 = properties5.values();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        properties10.clear();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.lang.Object obj15 = properties8.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        boolean boolean20 = properties18.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties18.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet22 = properties18.entrySet();
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection24 = properties23.values();
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        java.util.Properties properties27 = new java.util.Properties();
        java.util.Properties properties28 = new java.util.Properties(properties27);
        properties28.clear();
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        java.lang.Object obj33 = properties26.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setConsoleFileCount((-1));
        java.lang.String str38 = atomikosProperties35.getOutputDir();
        atomikosProperties35.setLogBaseName("tm.out");
        boolean boolean41 = properties26.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties42.setConsoleFileCount(100);
        atomikosProperties42.setAllowSubTransactions(true);
        java.lang.Object obj47 = properties26.remove((java.lang.Object) atomikosProperties42);
        java.util.Set<java.lang.Object> objSet48 = properties26.keySet();
        boolean boolean49 = properties2.replace((java.lang.Object) properties8, (java.lang.Object) objEntrySet22, (java.lang.Object) properties26);
        java.lang.String str51 = properties8.getProperty("{}");
        java.util.Properties properties52 = new java.util.Properties(properties8);
        java.util.Properties properties53 = new java.util.Properties(properties52);
        java.util.Set<java.lang.String> strSet54 = properties53.stringPropertyNames();
        java.io.OutputStream outputStream55 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties53.storeToXML(outputStream55, "tm.out", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNotNull(objEntrySet22);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(objSet48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(strSet54);
    }

    @Test
    public void test00681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00681");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        java.util.Properties properties26 = new java.util.Properties(properties3);
        java.util.Set<java.lang.String> strSet27 = properties26.stringPropertyNames();
        java.util.Properties properties28 = new java.util.Properties(properties26);
        boolean boolean30 = properties28.contains((java.lang.Object) 100L);
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test00682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00682");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery6 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long7 = recovery6.getForgetOrphanedLogEntriesDelay();
        recovery6.setDelay((long) (short) 1);
        recovery6.setDelay((long) (-1));
        java.lang.Object obj12 = properties3.remove((java.lang.Object) (-1));
        java.util.Properties properties13 = new java.util.Properties();
        java.util.Properties properties14 = new java.util.Properties(properties13);
        int int15 = properties14.size();
        boolean boolean16 = properties14.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties14.elements();
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection19 = properties18.values();
        java.util.Properties properties20 = new java.util.Properties(properties18);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties20.elements();
        boolean boolean22 = properties20.isEmpty();
        boolean boolean23 = properties14.containsValue((java.lang.Object) boolean22);
        java.util.Properties properties24 = new java.util.Properties(properties14);
        java.util.Properties properties25 = new java.util.Properties();
        java.util.Properties properties26 = new java.util.Properties(properties25);
        int int27 = properties26.size();
        boolean boolean28 = properties26.isEmpty();
        java.util.Properties properties29 = new java.util.Properties(properties26);
        java.util.Properties properties30 = new java.util.Properties(properties26);
        int int31 = properties26.size();
        java.util.Properties properties32 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.getConsoleFileName();
        atomikosProperties33.setOutputDir("hi!");
        int int37 = atomikosProperties33.getConsoleFileLimit();
        java.util.Properties properties38 = atomikosProperties33.asProperties();
        java.lang.String str39 = atomikosProperties33.getService();
        atomikosProperties33.setService("hi!");
        java.lang.Object obj43 = properties32.putIfAbsent((java.lang.Object) "hi!", (java.lang.Object) 10L);
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties32);
        properties26.clear();
        java.lang.Object obj46 = properties3.putIfAbsent((java.lang.Object) properties14, (java.lang.Object) properties26);
        java.io.InputStream inputStream47 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties14.loadFromXML(inputStream47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 86400000L + "'", long7 == 86400000L);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertNotNull(objCollection19);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tm.out" + "'", str34, "tm.out");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(obj46);
    }

    @Test
    public void test00683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00683");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel10 = atomikosProperties4.getConsoleLogLevel();
        java.lang.String str11 = atomikosProperties4.getTransactionManagerUniqueName();
        boolean boolean12 = atomikosProperties4.isThreadedTwoPhaseCommit();
        atomikosProperties4.setDefaultJtaTimeout((long) 10);
        atomikosProperties4.setLogBaseName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=hi!, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        java.util.Properties properties17 = new java.util.Properties();
        java.util.Properties properties18 = new java.util.Properties(properties17);
        properties18.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.getConsoleFileName();
        atomikosProperties21.setOutputDir("hi!");
        int int25 = atomikosProperties21.getConsoleFileLimit();
        java.lang.Object obj26 = properties18.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties21);
        atomikosProperties21.setLogBaseName("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel31 = atomikosProperties29.getConsoleLogLevel();
        atomikosProperties21.setConsoleLogLevel(atomikosLoggingLevel31);
        atomikosProperties4.setConsoleLogLevel(atomikosLoggingLevel31);
        java.lang.String str34 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setLogBaseName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel10 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel10.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tm.out" + "'", str22, "tm.out");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "tm.out" + "'", str30, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel31 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel31.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tm.out" + "'", str34, "tm.out");
    }

    @Test
    public void test00684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00684");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Properties properties25 = new java.util.Properties(properties3);
        java.lang.String str27 = properties25.getProperty("");
        properties25.clear();
        java.io.OutputStream outputStream29 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties25.storeToXML(outputStream29, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=32, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test00685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00685");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        boolean boolean10 = atomikosProperties4.isForceShutdownOnVmExit();
        atomikosProperties4.setConsoleFileName("");
        java.lang.String str13 = atomikosProperties4.getService();
        atomikosProperties4.setTransactionManagerUniqueName("");
        atomikosProperties4.setOutputDir("hi!");
        atomikosProperties4.setConsoleFileLimit((int) '#');
        atomikosProperties4.setEnableLogging(true);
        atomikosProperties4.setLogBaseDir("{}");
        int int24 = atomikosProperties4.getConsoleFileCount();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test00686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00686");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getTransactionManagerUniqueName();
        boolean boolean2 = atomikosProperties0.isForceShutdownOnVmExit();
        java.util.Properties properties3 = atomikosProperties0.asProperties();
        atomikosProperties0.setCheckpointInterval(100L);
        atomikosProperties0.setLogBaseName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        atomikosProperties0.setDefaultJtaTimeout(0L);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(properties3);
    }

    @Test
    public void test00687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00687");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setConsoleFileCount((-1));
        atomikosProperties6.setTransactionManagerUniqueName("tm.out");
        java.lang.Object obj11 = properties0.remove((java.lang.Object) atomikosProperties6);
        java.util.Properties properties12 = new java.util.Properties(properties0);
        java.util.Properties properties13 = null;
        java.util.Properties properties14 = new java.util.Properties(properties13);
        java.util.Properties properties15 = new java.util.Properties();
        java.util.Properties properties16 = new java.util.Properties(properties15);
        properties16.clear();
        properties14.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties16);
        java.lang.Object obj21 = properties16.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet22 = properties16.stringPropertyNames();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet23 = properties16.entrySet();
        java.util.Properties properties24 = null;
        java.util.Properties properties25 = new java.util.Properties(properties24);
        java.util.Properties properties26 = new java.util.Properties();
        java.util.Properties properties27 = new java.util.Properties(properties26);
        properties27.clear();
        properties25.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties27);
        java.lang.Object obj30 = properties12.put((java.lang.Object) properties16, (java.lang.Object) properties27);
        java.io.OutputStream outputStream31 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties16.store(outputStream31, "{=hi!}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(objEntrySet23);
        org.junit.Assert.assertNull(obj30);
    }

    @Test
    public void test00688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00688");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.lang.Object obj3 = null;
        boolean boolean4 = properties0.equals(obj3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties0.elements();
        java.util.Properties properties7 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        java.lang.Object obj11 = properties7.put((java.lang.Object) atomikosProperties8, (java.lang.Object) 0L);
        boolean boolean12 = properties0.containsValue((java.lang.Object) properties7);
        java.lang.Object obj13 = properties7.clone();
        java.lang.String str16 = properties7.getProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=100}", "tm.out");
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tm.out" + "'", str16, "tm.out");
    }

    @Test
    public void test00689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00689");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.lang.Object obj3 = null;
        boolean boolean4 = properties0.equals(obj3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties0.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str8 = atomikosProperties7.getTransactionManagerUniqueName();
        boolean boolean9 = atomikosProperties7.isForceShutdownOnVmExit();
        atomikosProperties7.setAllowSubTransactions(false);
        atomikosProperties7.setLogBaseName("");
        java.lang.Object obj14 = properties0.remove((java.lang.Object) atomikosProperties7);
        java.lang.Object obj15 = null;
        java.util.Properties properties16 = new java.util.Properties();
        java.util.Properties properties17 = new java.util.Properties(properties16);
        properties17.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str21 = atomikosProperties20.getConsoleFileName();
        atomikosProperties20.setOutputDir("hi!");
        int int24 = atomikosProperties20.getConsoleFileLimit();
        java.lang.Object obj25 = properties17.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties20);
        atomikosProperties20.setLogBaseName("tm.out");
        atomikosProperties20.setForceShutdownOnVmExit(false);
        atomikosProperties20.setEnableLogging(false);
        atomikosProperties20.setForceShutdownOnVmExit(false);
        boolean boolean34 = atomikosProperties20.isSerialJtaTransactions();
        atomikosProperties20.setService("");
        boolean boolean37 = atomikosProperties20.isEnableLogging();
        java.util.Properties properties38 = new java.util.Properties();
        java.lang.Object obj40 = properties38.get((java.lang.Object) (byte) -1);
        java.lang.Object obj43 = properties38.setProperty("{}", "tmlog");
        java.util.Properties properties44 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection45 = properties44.values();
        java.util.Properties properties46 = null;
        java.util.Properties properties47 = new java.util.Properties(properties46);
        java.util.Properties properties48 = new java.util.Properties();
        java.util.Properties properties49 = new java.util.Properties(properties48);
        properties49.clear();
        properties47.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties49);
        java.lang.Object obj54 = properties47.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties44.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties56.setConsoleFileCount((-1));
        java.lang.String str59 = atomikosProperties56.getOutputDir();
        atomikosProperties56.setLogBaseName("tm.out");
        boolean boolean62 = properties47.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties63.setConsoleFileCount(100);
        atomikosProperties63.setAllowSubTransactions(true);
        java.lang.Object obj68 = properties47.remove((java.lang.Object) atomikosProperties63);
        atomikosProperties63.setAllowSubTransactions(false);
        int int71 = atomikosProperties63.getConsoleFileCount();
        atomikosProperties63.setThreadedTwoPhaseCommit(false);
        atomikosProperties63.setCheckpointInterval((long) (short) -1);
        boolean boolean76 = atomikosProperties63.isThreadedTwoPhaseCommit();
        atomikosProperties63.setConsoleFileLimit(18);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties79 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties79.setConsoleFileCount(100);
        atomikosProperties79.setAllowSubTransactions(true);
        boolean boolean84 = atomikosProperties79.isForceShutdownOnVmExit();
        atomikosProperties79.setConsoleFileCount(10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties87 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str88 = atomikosProperties87.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel89 = atomikosProperties87.getConsoleLogLevel();
        atomikosProperties79.setConsoleLogLevel(atomikosLoggingLevel89);
        boolean boolean91 = atomikosProperties79.isSerialJtaTransactions();
        java.util.Properties properties92 = atomikosProperties79.asProperties();
        boolean boolean93 = properties38.remove((java.lang.Object) atomikosProperties63, (java.lang.Object) atomikosProperties79);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean94 = properties0.replace(obj15, (java.lang.Object) boolean37, (java.lang.Object) boolean93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tm.out" + "'", str21, "tm.out");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(objCollection45);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 100 + "'", int71 == 100);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "tm.out" + "'", str88, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel89 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel89.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(properties92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test00690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00690");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Properties properties4 = new java.util.Properties(properties1);
        java.util.Properties properties5 = new java.util.Properties(properties1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.getConsoleFileName();
        atomikosProperties6.setOutputDir("hi!");
        int int10 = atomikosProperties6.getConsoleFileLimit();
        java.util.Properties properties11 = atomikosProperties6.asProperties();
        java.lang.String str12 = atomikosProperties6.getService();
        atomikosProperties6.setService("hi!");
        atomikosProperties6.setForceShutdownOnVmExit(true);
        atomikosProperties6.setThreadedTwoPhaseCommit(false);
        java.util.Properties properties19 = atomikosProperties6.asProperties();
        java.util.Properties properties21 = new java.util.Properties();
        java.util.Properties properties22 = new java.util.Properties(properties21);
        int int23 = properties22.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery24 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long25 = recovery24.getForgetOrphanedLogEntriesDelay();
        java.lang.Class<?> wildcardClass26 = recovery24.getClass();
        boolean boolean27 = properties22.containsKey((java.lang.Object) wildcardClass26);
        boolean boolean28 = properties1.replace((java.lang.Object) properties19, (java.lang.Object) 1.0f, (java.lang.Object) wildcardClass26);
        java.util.Properties properties29 = new java.util.Properties(properties19);
        java.util.Properties properties30 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str32 = atomikosProperties31.getConsoleFileName();
        java.lang.Object obj34 = properties30.put((java.lang.Object) atomikosProperties31, (java.lang.Object) 0L);
        java.util.Properties properties35 = new java.util.Properties(properties30);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties36.setConsoleFileCount((-1));
        atomikosProperties36.setTransactionManagerUniqueName("tm.out");
        java.lang.Object obj41 = properties30.remove((java.lang.Object) atomikosProperties36);
        boolean boolean42 = atomikosProperties36.isForceShutdownOnVmExit();
        java.lang.Object obj43 = properties19.get((java.lang.Object) boolean42);
        java.util.Properties properties44 = new java.util.Properties(properties19);
        java.io.InputStream inputStream45 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties44.load(inputStream45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tm.out" + "'", str7, "tm.out");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 86400000L + "'", long25 == 86400000L);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tm.out" + "'", str32, "tm.out");
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(obj43);
    }

    @Test
    public void test00691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00691");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        java.lang.Object obj6 = properties0.clone();
        java.util.Set<java.lang.Object> objSet7 = properties0.keySet();
        java.util.Properties properties8 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties9.setConsoleFileCount(100);
        int int12 = atomikosProperties9.getConsoleFileCount();
        atomikosProperties9.setOutputDir("");
        java.lang.String str15 = atomikosProperties9.getConsoleFileName();
        boolean boolean16 = atomikosProperties9.isEnableLogging();
        java.util.Properties properties17 = atomikosProperties9.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setConsoleFileCount((-1));
        atomikosProperties18.setConsoleFileName("");
        atomikosProperties18.setDefaultJtaTimeout((long) '4');
        java.lang.Object obj25 = properties8.replace((java.lang.Object) properties17, (java.lang.Object) atomikosProperties18);
        java.util.Properties properties26 = new java.util.Properties(properties8);
        java.io.OutputStream outputStream27 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties26.save(outputStream27, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tm.out" + "'", str15, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertNull(obj25);
    }

    @Test
    public void test00692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00692");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        long long3 = atomikosProperties0.getCheckpointInterval();
        boolean boolean4 = atomikosProperties0.isAllowSubTransactions();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.io.OutputStream outputStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.store(outputStream6, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 500L + "'", long3 == 500L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(properties5);
    }

    @Test
    public void test00693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00693");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str2 = properties0.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str4 = atomikosProperties3.getTransactionManagerUniqueName();
        boolean boolean5 = atomikosProperties3.isForceShutdownOnVmExit();
        java.util.Properties properties6 = atomikosProperties3.asProperties();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties6);
        java.util.Set<java.lang.String> strSet8 = properties0.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties9.setConsoleFileCount(100);
        atomikosProperties9.setAllowSubTransactions(true);
        java.lang.String str14 = atomikosProperties9.getConsoleFileName();
        atomikosProperties9.setDefaultJtaTimeout((long) 0);
        boolean boolean17 = atomikosProperties9.isAllowSubTransactions();
        boolean boolean18 = atomikosProperties9.isForceShutdownOnVmExit();
        boolean boolean19 = atomikosProperties9.isAllowSubTransactions();
        java.lang.String str20 = atomikosProperties9.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.setConsoleFileCount(100);
        int int24 = atomikosProperties21.getConsoleFileCount();
        atomikosProperties21.setOutputDir("");
        java.lang.String str27 = atomikosProperties21.getConsoleFileName();
        int int28 = atomikosProperties21.getConsoleFileCount();
        boolean boolean29 = atomikosProperties21.isEnableLogging();
        java.lang.String str30 = atomikosProperties21.getConsoleFileName();
        boolean boolean31 = atomikosProperties21.isSerialJtaTransactions();
        java.lang.String str32 = atomikosProperties21.getLogBaseDir();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj33 = properties0.replace((java.lang.Object) str20, (java.lang.Object) str32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tm.out" + "'", str14, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tm.out" + "'", str27, "tm.out");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "tm.out" + "'", str30, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test00694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00694");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        int int3 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setSerialJtaTransactions(false);
        int int6 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setForceShutdownOnVmExit(false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
    }

    @Test
    public void test00695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00695");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Properties properties7 = new java.util.Properties(properties6);
        properties7.clear();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.lang.String str12 = properties5.getProperty("tmlog", "hi!");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test00696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00696");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        java.util.Properties properties26 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.getTransactionManagerUniqueName();
        boolean boolean29 = atomikosProperties27.isForceShutdownOnVmExit();
        java.util.Properties properties30 = atomikosProperties27.asProperties();
        boolean boolean31 = properties26.contains((java.lang.Object) atomikosProperties27);
        java.io.InputStream inputStream32 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties26.load(inputStream32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test00697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00697");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        java.lang.String str3 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseName("tm.out");
        atomikosProperties0.setForceShutdownOnVmExit(true);
        atomikosProperties0.setConsoleFileCount((int) (byte) 0);
        java.lang.String str10 = atomikosProperties0.getLogBaseDir();
        boolean boolean11 = atomikosProperties0.isAllowSubTransactions();
        java.lang.String str12 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.setMaxTimeout((long) 32);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test00698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00698");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.getConsoleFileName();
        atomikosProperties6.setOutputDir("hi!");
        int int10 = atomikosProperties6.getConsoleFileLimit();
        java.util.Properties properties11 = atomikosProperties6.asProperties();
        java.util.Properties properties12 = new java.util.Properties();
        java.util.Properties properties13 = new java.util.Properties(properties12);
        properties13.clear();
        properties11.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties13);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet16 = properties11.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setConsoleFileCount((-1));
        atomikosProperties17.setAllowSubTransactions(false);
        boolean boolean22 = properties11.containsValue((java.lang.Object) false);
        boolean boolean23 = properties5.contains((java.lang.Object) properties11);
        java.io.OutputStream outputStream24 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.storeToXML(outputStream24, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tm.out" + "'", str7, "tm.out");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEntrySet16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test00699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00699");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        boolean boolean7 = properties1.equals((java.lang.Object) (-1.0d));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties8.setConsoleFileCount((-1));
        java.lang.String str11 = atomikosProperties8.getOutputDir();
        atomikosProperties8.setLogBaseName("tm.out");
        atomikosProperties8.setLogBaseDir("tm.out");
        int int16 = atomikosProperties8.getMaxActives();
        atomikosProperties8.setDefaultJtaTimeout((long) (short) 100);
        java.util.Properties properties19 = atomikosProperties8.asProperties();
        java.util.Properties properties20 = atomikosProperties8.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.setConsoleFileCount(100);
        atomikosProperties21.setAllowSubTransactions(true);
        boolean boolean26 = atomikosProperties21.isForceShutdownOnVmExit();
        atomikosProperties21.setConsoleFileCount(10);
        atomikosProperties21.setConsoleFileCount(50);
        atomikosProperties21.setForceShutdownOnVmExit(true);
        java.lang.Object obj33 = properties1.putIfAbsent((java.lang.Object) atomikosProperties8, (java.lang.Object) true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 50 + "'", int16 == 50);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(obj33);
    }

    @Test
    public void test00700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00700");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        long long2 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties3 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery4 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long5 = recovery4.getForgetOrphanedLogEntriesDelay();
        recovery4.setDelay((long) (short) 1);
        recovery4.setRetryInterval(100L);
        boolean boolean10 = properties3.containsValue((java.lang.Object) 100L);
        java.util.Properties properties11 = new java.util.Properties();
        java.util.Properties properties12 = new java.util.Properties(properties11);
        int int13 = properties12.size();
        boolean boolean14 = properties12.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties12.elements();
        java.util.Properties properties16 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection17 = properties16.values();
        java.util.Properties properties18 = new java.util.Properties(properties16);
        java.util.Enumeration<java.lang.Object> objEnumeration19 = properties18.elements();
        boolean boolean20 = properties18.isEmpty();
        boolean boolean21 = properties12.containsValue((java.lang.Object) boolean20);
        java.util.Properties properties22 = new java.util.Properties(properties12);
        java.util.Enumeration<?> wildcardEnumeration23 = properties22.propertyNames();
        boolean boolean24 = properties3.containsKey((java.lang.Object) properties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str26 = atomikosProperties25.getConsoleFileName();
        atomikosProperties25.setOutputDir("hi!");
        int int29 = atomikosProperties25.getConsoleFileLimit();
        java.util.Properties properties30 = atomikosProperties25.asProperties();
        java.util.Set<java.lang.String> strSet31 = properties30.stringPropertyNames();
        java.util.Properties properties32 = new java.util.Properties(properties30);
        java.util.Properties properties33 = null;
        java.util.Properties properties34 = new java.util.Properties(properties33);
        java.util.Properties properties35 = new java.util.Properties();
        java.util.Properties properties36 = new java.util.Properties(properties35);
        properties36.clear();
        properties34.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties36);
        java.lang.Object obj41 = properties36.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet42 = properties36.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties43.setConsoleFileCount((-1));
        java.lang.String str46 = atomikosProperties43.getOutputDir();
        atomikosProperties43.setLogBaseName("tm.out");
        int int49 = atomikosProperties43.getConsoleFileCount();
        boolean boolean50 = properties36.containsKey((java.lang.Object) atomikosProperties43);
        atomikosProperties43.setConsoleFileCount((int) (byte) -1);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery53 = atomikosProperties43.getRecovery();
        java.util.Properties properties54 = new java.util.Properties();
        java.util.Properties properties55 = new java.util.Properties(properties54);
        properties55.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str59 = atomikosProperties58.getConsoleFileName();
        atomikosProperties58.setOutputDir("hi!");
        int int62 = atomikosProperties58.getConsoleFileLimit();
        java.lang.Object obj63 = properties55.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties58);
        atomikosProperties58.setLogBaseName("tm.out");
        atomikosProperties58.setForceShutdownOnVmExit(false);
        java.lang.Object obj68 = properties32.replace((java.lang.Object) recovery53, (java.lang.Object) atomikosProperties58);
        boolean boolean69 = properties22.containsValue((java.lang.Object) recovery53);
        recovery53.setRetryInterval((long) 18);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 300000L + "'", long2 == 300000L);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 86400000L + "'", long5 == 86400000L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertNotNull(objEnumeration19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "tm.out" + "'", str26, "tm.out");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(recovery53);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "tm.out" + "'", str59, "tm.out");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test00701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00701");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        java.lang.Object obj4 = properties1.get((java.lang.Object) 10L);
        java.util.Properties properties5 = new java.util.Properties(properties1);
        java.io.OutputStream outputStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.save(outputStream6, "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test00702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00702");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        atomikosProperties0.setTransactionManagerUniqueName("tm.out");
        java.lang.String str5 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setConsoleFileLimit((int) (byte) 1);
        atomikosProperties0.setService("tm.out");
        boolean boolean10 = atomikosProperties0.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.getConsoleFileName();
        java.lang.String str13 = atomikosProperties11.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = atomikosProperties11.getConsoleLogLevel();
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel14);
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.setConsoleFileCount((int) '#');
        int int20 = atomikosProperties0.getMaxActives();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tm.out" + "'", str12, "tm.out");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel14 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel14.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 50 + "'", int20 == 50);
    }

    @Test
    public void test00703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00703");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        atomikosProperties0.setLogBaseDir("{}");
        boolean boolean5 = atomikosProperties0.isForceShutdownOnVmExit();
        java.lang.String str6 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setSerialJtaTransactions(false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "{}" + "'", str6, "{}");
    }

    @Test
    public void test00704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00704");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.lang.String str6 = atomikosProperties0.getService();
        atomikosProperties0.setService("hi!");
        atomikosProperties0.setConsoleFileName("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = atomikosProperties0.getRecovery();
        java.util.Properties properties12 = atomikosProperties0.asProperties();
        java.util.Enumeration<?> wildcardEnumeration13 = properties12.propertyNames();
        int int14 = properties12.size();
        java.lang.Object obj15 = null;
        java.util.Properties properties16 = null;
        java.util.Properties properties17 = new java.util.Properties(properties16);
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Properties properties19 = new java.util.Properties(properties18);
        properties19.clear();
        properties17.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties19);
        java.lang.Object obj24 = properties17.setProperty("", "hi!");
        java.util.Properties properties25 = new java.util.Properties(properties17);
        java.util.Set<java.lang.String> strSet26 = properties17.stringPropertyNames();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean27 = properties12.remove(obj15, (java.lang.Object) strSet26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(recovery11);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertNotNull(wildcardEnumeration13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20 + "'", int14 == 20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(strSet26);
    }

    @Test
    public void test00705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00705");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Properties properties25 = new java.util.Properties(properties3);
        java.lang.String str27 = properties25.getProperty("");
        java.util.Set<java.lang.Object> objSet28 = properties25.keySet();
        java.util.Properties properties29 = null;
        java.util.Properties properties30 = new java.util.Properties(properties29);
        java.util.Collection<java.lang.Object> objCollection31 = properties30.values();
        java.util.Properties properties32 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection33 = properties32.values();
        java.util.Properties properties34 = null;
        java.util.Properties properties35 = new java.util.Properties(properties34);
        java.util.Properties properties36 = new java.util.Properties();
        java.util.Properties properties37 = new java.util.Properties(properties36);
        properties37.clear();
        properties35.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties37);
        java.lang.Object obj42 = properties35.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties32.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties35);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setConsoleFileCount((-1));
        java.lang.String str47 = atomikosProperties44.getOutputDir();
        atomikosProperties44.setLogBaseName("tm.out");
        boolean boolean50 = properties35.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties51.setConsoleFileCount(100);
        atomikosProperties51.setAllowSubTransactions(true);
        java.lang.Object obj56 = properties35.remove((java.lang.Object) atomikosProperties51);
        java.util.Set<java.lang.Object> objSet57 = properties35.keySet();
        int int58 = properties35.size();
        boolean boolean60 = properties25.replace((java.lang.Object) properties30, (java.lang.Object) properties35, (java.lang.Object) 86400000L);
        java.lang.String str63 = properties35.getProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "{}");
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(objSet28);
        org.junit.Assert.assertNotNull(objCollection31);
        org.junit.Assert.assertNotNull(objCollection33);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(objSet57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "{}" + "'", str63, "{}");
    }

    @Test
    public void test00706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00706");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Set<java.lang.Object> objSet4 = properties1.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.getConsoleFileName();
        atomikosProperties5.setOutputDir("hi!");
        int int9 = atomikosProperties5.getConsoleFileLimit();
        java.util.Properties properties10 = atomikosProperties5.asProperties();
        java.lang.String str11 = atomikosProperties5.getService();
        int int12 = atomikosProperties5.getMaxActives();
        boolean boolean13 = properties1.equals((java.lang.Object) atomikosProperties5);
        int int14 = atomikosProperties5.getConsoleFileCount();
        java.util.Properties properties15 = atomikosProperties5.asProperties();
        java.util.Properties properties16 = atomikosProperties5.asProperties();
        java.io.PrintStream printStream17 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties16.list(printStream17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objSet4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tm.out" + "'", str6, "tm.out");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertNotNull(properties16);
    }

    @Test
    public void test00707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00707");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.lang.String str5 = atomikosProperties0.getService();
        java.lang.String str6 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setOutputDir("tmlog");
        long long9 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.setEnableLogging(true);
        long long12 = atomikosProperties0.getMaxTimeout();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 300000L + "'", long9 == 300000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 300000L + "'", long12 == 300000L);
    }

    @Test
    public void test00708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00708");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties8.getConsoleLogLevel();
        java.lang.Object obj14 = properties1.putIfAbsent((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosLoggingLevel13);
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.Object obj17 = properties15.get((java.lang.Object) (byte) -1);
        java.util.Properties properties18 = new java.util.Properties(properties15);
        boolean boolean19 = properties1.equals((java.lang.Object) properties15);
        java.util.Properties properties20 = new java.util.Properties();
        java.util.Properties properties21 = new java.util.Properties(properties20);
        properties21.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str25 = atomikosProperties24.getConsoleFileName();
        atomikosProperties24.setOutputDir("hi!");
        int int28 = atomikosProperties24.getConsoleFileLimit();
        java.lang.Object obj29 = properties21.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties24);
        boolean boolean30 = atomikosProperties24.isForceShutdownOnVmExit();
        atomikosProperties24.setConsoleFileName("");
        java.lang.String str33 = atomikosProperties24.getService();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery34 = atomikosProperties24.getRecovery();
        long long35 = recovery34.getDelay();
        boolean boolean36 = properties15.containsValue((java.lang.Object) recovery34);
        recovery34.setDelay((long) 0);
        long long39 = recovery34.getRetryInterval();
        recovery34.setMaxRetries(20);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "tm.out" + "'", str25, "tm.out");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(recovery34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10000L + "'", long35 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10000L + "'", long39 == 10000L);
    }

    @Test
    public void test00709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00709");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.lang.Object obj4 = properties0.setProperty("hi!", "");
        java.util.Properties properties5 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.getConsoleFileName();
        java.lang.Object obj9 = properties5.put((java.lang.Object) atomikosProperties6, (java.lang.Object) 0L);
        java.lang.Object obj12 = properties5.setProperty("", "");
        java.util.Properties properties13 = new java.util.Properties(properties5);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties13);
        java.io.OutputStream outputStream15 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream15, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=100}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tm.out" + "'", str7, "tm.out");
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test00710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00710");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties0.containsValue((java.lang.Object) 10000L);
        java.util.Properties properties5 = null;
        java.util.Properties properties6 = new java.util.Properties(properties5);
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Properties properties8 = new java.util.Properties(properties7);
        properties8.clear();
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        java.lang.Object obj12 = properties0.putIfAbsent((java.lang.Object) (byte) 1, (java.lang.Object) properties8);
        java.lang.Object obj15 = properties8.setProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setConsoleFileCount((-1));
        java.lang.String str19 = atomikosProperties16.getOutputDir();
        java.lang.Class<?> wildcardClass20 = atomikosProperties16.getClass();
        java.util.Properties properties21 = null;
        java.util.Properties properties22 = new java.util.Properties(properties21);
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Properties properties24 = new java.util.Properties(properties23);
        properties24.clear();
        properties22.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        java.lang.Object obj29 = properties22.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        boolean boolean30 = properties22.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties22.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = properties22.entrySet();
        boolean boolean33 = properties8.remove((java.lang.Object) atomikosProperties16, (java.lang.Object) properties22);
        java.util.Properties properties34 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str36 = atomikosProperties35.getConsoleFileName();
        java.lang.Object obj38 = properties34.put((java.lang.Object) atomikosProperties35, (java.lang.Object) 0L);
        java.util.Properties properties39 = new java.util.Properties(properties34);
        java.util.Set<java.lang.Object> objSet40 = properties39.keySet();
        java.lang.Object obj43 = properties39.setProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "hi!");
        java.lang.Object obj44 = properties8.remove((java.lang.Object) "hi!");
        java.lang.String str46 = properties8.getProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=32, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        java.io.OutputStream outputStream47 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.storeToXML(outputStream47, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objEnumeration31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tm.out" + "'", str36, "tm.out");
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(objSet40);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(str46);
    }

    @Test
    public void test00711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00711");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setConsoleFileCount((-1));
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection10 = properties9.values();
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        java.util.Properties properties13 = new java.util.Properties();
        java.util.Properties properties14 = new java.util.Properties(properties13);
        properties14.clear();
        properties12.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties14);
        java.lang.Object obj19 = properties12.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties12);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.setConsoleFileCount((-1));
        java.lang.String str24 = atomikosProperties21.getOutputDir();
        atomikosProperties21.setLogBaseName("tm.out");
        boolean boolean27 = properties12.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties28.setConsoleFileCount(100);
        atomikosProperties28.setAllowSubTransactions(true);
        java.lang.Object obj33 = properties12.remove((java.lang.Object) atomikosProperties28);
        atomikosProperties28.setAllowSubTransactions(false);
        atomikosProperties28.setSerialJtaTransactions(true);
        java.util.Properties properties38 = new java.util.Properties();
        java.util.Properties properties39 = new java.util.Properties(properties38);
        properties39.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str43 = atomikosProperties42.getConsoleFileName();
        atomikosProperties42.setOutputDir("hi!");
        int int46 = atomikosProperties42.getConsoleFileLimit();
        java.lang.Object obj47 = properties39.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties42);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel48 = atomikosProperties42.getConsoleLogLevel();
        atomikosProperties28.setConsoleLogLevel(atomikosLoggingLevel48);
        atomikosProperties6.setConsoleLogLevel(atomikosLoggingLevel48);
        boolean boolean51 = properties0.containsKey((java.lang.Object) atomikosProperties6);
        boolean boolean52 = properties0.isEmpty();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(objCollection10);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tm.out" + "'", str43, "tm.out");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel48 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel48.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test00712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00712");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties8.getConsoleLogLevel();
        java.lang.Object obj14 = properties1.putIfAbsent((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosLoggingLevel13);
        boolean boolean15 = atomikosProperties4.isSerialJtaTransactions();
        long long16 = atomikosProperties4.getDefaultJtaTimeout();
        atomikosProperties4.setConsoleFileName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=100}");
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel19 = null;
        atomikosProperties4.setConsoleLogLevel(atomikosLoggingLevel19);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
    }

    @Test
    public void test00713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00713");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties0.containsValue((java.lang.Object) 10000L);
        java.util.Properties properties5 = null;
        java.util.Properties properties6 = new java.util.Properties(properties5);
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Properties properties8 = new java.util.Properties(properties7);
        properties8.clear();
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        java.lang.Object obj12 = properties0.putIfAbsent((java.lang.Object) (byte) 1, (java.lang.Object) properties8);
        java.lang.Object obj15 = properties8.setProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setConsoleFileCount((-1));
        java.lang.String str19 = atomikosProperties16.getOutputDir();
        java.lang.Class<?> wildcardClass20 = atomikosProperties16.getClass();
        java.util.Properties properties21 = null;
        java.util.Properties properties22 = new java.util.Properties(properties21);
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Properties properties24 = new java.util.Properties(properties23);
        properties24.clear();
        properties22.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        java.lang.Object obj29 = properties22.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        boolean boolean30 = properties22.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties22.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = properties22.entrySet();
        boolean boolean33 = properties8.remove((java.lang.Object) atomikosProperties16, (java.lang.Object) properties22);
        java.util.Properties properties34 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str36 = atomikosProperties35.getConsoleFileName();
        java.lang.Object obj38 = properties34.put((java.lang.Object) atomikosProperties35, (java.lang.Object) 0L);
        java.util.Properties properties39 = new java.util.Properties(properties34);
        java.util.Set<java.lang.Object> objSet40 = properties39.keySet();
        java.lang.Object obj43 = properties39.setProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "hi!");
        java.lang.Object obj44 = properties8.remove((java.lang.Object) "hi!");
        java.lang.String str46 = properties8.getProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=32, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        java.io.Reader reader47 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.load(reader47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objEnumeration31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tm.out" + "'", str36, "tm.out");
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(objSet40);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(str46);
    }

    @Test
    public void test00714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00714");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        int int26 = properties3.size();
        java.lang.String str29 = properties3.getProperty("hi!", "");
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test00715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00715");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Properties properties8 = new java.util.Properties();
        java.util.Properties properties9 = new java.util.Properties(properties8);
        properties9.clear();
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        java.lang.Object obj14 = properties9.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        boolean boolean15 = properties5.equals(obj14);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet16 = properties5.entrySet();
        int int17 = properties5.size();
        java.util.Set<java.lang.Object> objSet18 = properties5.keySet();
        java.util.Properties properties19 = new java.util.Properties();
        java.util.Properties properties20 = new java.util.Properties(properties19);
        boolean boolean22 = properties19.containsValue((java.lang.Object) 10000L);
        java.util.Properties properties24 = null;
        java.util.Properties properties25 = new java.util.Properties(properties24);
        java.util.Properties properties26 = new java.util.Properties();
        java.util.Properties properties27 = new java.util.Properties(properties26);
        properties27.clear();
        properties25.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties27);
        java.util.Collection<java.lang.Object> objCollection30 = properties27.values();
        java.lang.Object obj31 = properties19.putIfAbsent((java.lang.Object) (byte) 1, (java.lang.Object) properties27);
        java.lang.Object obj34 = properties27.setProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setConsoleFileCount((-1));
        java.lang.String str38 = atomikosProperties35.getOutputDir();
        java.lang.Class<?> wildcardClass39 = atomikosProperties35.getClass();
        java.util.Properties properties40 = null;
        java.util.Properties properties41 = new java.util.Properties(properties40);
        java.util.Properties properties42 = new java.util.Properties();
        java.util.Properties properties43 = new java.util.Properties(properties42);
        properties43.clear();
        properties41.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties43);
        java.lang.Object obj48 = properties41.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        boolean boolean49 = properties41.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration50 = properties41.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet51 = properties41.entrySet();
        boolean boolean52 = properties27.remove((java.lang.Object) atomikosProperties35, (java.lang.Object) properties41);
        java.util.Properties properties53 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str55 = atomikosProperties54.getConsoleFileName();
        java.lang.Object obj57 = properties53.put((java.lang.Object) atomikosProperties54, (java.lang.Object) 0L);
        java.util.Properties properties58 = new java.util.Properties(properties53);
        java.util.Set<java.lang.Object> objSet59 = properties58.keySet();
        java.lang.Object obj62 = properties58.setProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "hi!");
        java.lang.Object obj63 = properties27.remove((java.lang.Object) "hi!");
        boolean boolean64 = properties5.equals((java.lang.Object) "hi!");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objEntrySet16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 19 + "'", int17 == 19);
        org.junit.Assert.assertNotNull(objSet18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objCollection30);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(objEnumeration50);
        org.junit.Assert.assertNotNull(objEntrySet51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "tm.out" + "'", str55, "tm.out");
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNotNull(objSet59);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test00716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00716");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties8.getConsoleLogLevel();
        java.lang.Object obj14 = properties1.putIfAbsent((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosLoggingLevel13);
        boolean boolean15 = atomikosProperties4.isSerialJtaTransactions();
        java.lang.String str16 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setService("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=hi!, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        java.util.Properties properties19 = atomikosProperties4.asProperties();
        java.util.Enumeration<?> wildcardEnumeration20 = properties19.propertyNames();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertNotNull(wildcardEnumeration20);
    }

    @Test
    public void test00717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00717");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        atomikosProperties0.setTransactionManagerUniqueName("tm.out");
        java.lang.String str5 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setConsoleFileLimit((int) (byte) 1);
        atomikosProperties0.setSerialJtaTransactions(true);
        java.lang.String str10 = atomikosProperties0.getOutputDir();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test00718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00718");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties8.getConsoleLogLevel();
        java.lang.Object obj14 = properties1.putIfAbsent((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosLoggingLevel13);
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.Object obj17 = properties15.get((java.lang.Object) (byte) -1);
        java.util.Properties properties18 = new java.util.Properties(properties15);
        boolean boolean19 = properties1.equals((java.lang.Object) properties15);
        java.util.Properties properties20 = new java.util.Properties();
        java.util.Properties properties21 = new java.util.Properties(properties20);
        properties21.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str25 = atomikosProperties24.getConsoleFileName();
        atomikosProperties24.setOutputDir("hi!");
        int int28 = atomikosProperties24.getConsoleFileLimit();
        java.lang.Object obj29 = properties21.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties24);
        boolean boolean30 = atomikosProperties24.isForceShutdownOnVmExit();
        atomikosProperties24.setConsoleFileName("");
        java.lang.String str33 = atomikosProperties24.getService();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery34 = atomikosProperties24.getRecovery();
        long long35 = recovery34.getDelay();
        boolean boolean36 = properties15.containsValue((java.lang.Object) recovery34);
        java.util.Properties properties37 = null;
        java.util.Properties properties38 = new java.util.Properties(properties37);
        boolean boolean40 = properties38.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str42 = atomikosProperties41.getTransactionManagerUniqueName();
        atomikosProperties41.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str46 = atomikosProperties45.getConsoleFileName();
        atomikosProperties45.setOutputDir("hi!");
        int int49 = atomikosProperties45.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel50 = atomikosProperties45.getConsoleLogLevel();
        java.lang.Object obj51 = properties38.putIfAbsent((java.lang.Object) atomikosProperties41, (java.lang.Object) atomikosLoggingLevel50);
        java.util.Collection<java.lang.Object> objCollection52 = properties38.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str54 = atomikosProperties53.getTransactionManagerUniqueName();
        atomikosProperties53.setDefaultJtaTimeout((long) (byte) 100);
        java.util.Properties properties57 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str59 = atomikosProperties58.getConsoleFileName();
        java.lang.Object obj61 = properties57.put((java.lang.Object) atomikosProperties58, (java.lang.Object) 0L);
        java.util.Properties properties62 = new java.util.Properties(properties57);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties63.setConsoleFileCount(100);
        atomikosProperties63.setAllowSubTransactions(true);
        boolean boolean68 = atomikosProperties63.isForceShutdownOnVmExit();
        boolean boolean69 = properties62.contains((java.lang.Object) atomikosProperties63);
        java.util.Collection<java.lang.Object> objCollection70 = properties62.values();
        boolean boolean71 = properties15.replace((java.lang.Object) properties38, (java.lang.Object) (byte) 100, (java.lang.Object) objCollection70);
        java.util.Properties properties72 = new java.util.Properties(properties38);
        java.util.Properties properties73 = new java.util.Properties(properties38);
        java.io.OutputStream outputStream74 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties38.store(outputStream74, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "tm.out" + "'", str25, "tm.out");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(recovery34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10000L + "'", long35 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "tm.out" + "'", str46, "tm.out");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel50 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel50.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(objCollection52);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "tm.out" + "'", str59, "tm.out");
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objCollection70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test00719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00719");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Properties properties25 = new java.util.Properties();
        java.util.Properties properties26 = new java.util.Properties(properties25);
        properties26.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.getConsoleFileName();
        atomikosProperties29.setOutputDir("hi!");
        int int33 = atomikosProperties29.getConsoleFileLimit();
        java.lang.Object obj34 = properties26.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties29);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet35 = properties26.entrySet();
        boolean boolean36 = properties3.containsValue((java.lang.Object) properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str38 = atomikosProperties37.getConsoleFileName();
        atomikosProperties37.setOutputDir("hi!");
        int int41 = atomikosProperties37.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel42 = atomikosProperties37.getConsoleLogLevel();
        boolean boolean43 = properties3.containsValue((java.lang.Object) atomikosProperties37);
        java.lang.Object obj46 = properties3.setProperty("hi!", "tmlog");
        java.io.InputStream inputStream47 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.load(inputStream47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "tm.out" + "'", str30, "tm.out");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(objEntrySet35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tm.out" + "'", str38, "tm.out");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel42 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel42.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(obj46);
    }

    @Test
    public void test00720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00720");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        java.lang.Object obj4 = properties1.get((java.lang.Object) 10L);
        java.io.OutputStream outputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream5, "{hi!=}", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=100}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test00721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00721");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Collection<java.lang.Object> objCollection6 = properties3.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str8 = atomikosProperties7.getConsoleFileName();
        atomikosProperties7.setOutputDir("hi!");
        int int11 = atomikosProperties7.getConsoleFileLimit();
        java.util.Properties properties12 = atomikosProperties7.asProperties();
        boolean boolean13 = properties3.containsValue((java.lang.Object) atomikosProperties7);
        java.util.Enumeration<java.lang.Object> objEnumeration14 = properties3.elements();
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties3.elements();
        java.util.Properties properties16 = new java.util.Properties();
        java.util.Properties properties17 = new java.util.Properties(properties16);
        int int18 = properties17.size();
        boolean boolean19 = properties17.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties17.elements();
        java.util.Properties properties21 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection22 = properties21.values();
        java.util.Properties properties23 = new java.util.Properties(properties21);
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties23.elements();
        boolean boolean25 = properties23.isEmpty();
        boolean boolean26 = properties17.containsValue((java.lang.Object) boolean25);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties17.elements();
        java.lang.Class<?> wildcardClass28 = properties17.getClass();
        java.lang.Object obj29 = properties3.remove((java.lang.Object) properties17);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str31 = atomikosProperties30.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str33 = atomikosProperties32.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel34 = atomikosProperties32.getConsoleLogLevel();
        atomikosProperties30.setConsoleLogLevel(atomikosLoggingLevel34);
        atomikosProperties30.setSerialJtaTransactions(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery38 = atomikosProperties30.getRecovery();
        recovery38.setDelay(0L);
        long long41 = recovery38.getRetryInterval();
        long long42 = recovery38.getDelay();
        long long43 = recovery38.getDelay();
        java.lang.Object obj44 = properties17.get((java.lang.Object) long43);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tm.out" + "'", str8, "tm.out");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objEnumeration14);
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertNotNull(objCollection22);
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tm.out" + "'", str33, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel34 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel34.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(recovery38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10000L + "'", long41 == 10000L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNull(obj44);
    }

    @Test
    public void test00722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00722");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        java.util.Properties properties26 = new java.util.Properties(properties3);
        java.lang.Object obj29 = properties3.setProperty("hi!", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=32, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        java.io.OutputStream outputStream30 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.storeToXML(outputStream30, "{=hi!}", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=hi!, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertNull(obj29);
    }

    @Test
    public void test00723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00723");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Properties properties4 = new java.util.Properties(properties1);
        java.util.Properties properties5 = new java.util.Properties(properties1);
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        boolean boolean9 = properties7.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties7.keys();
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        java.util.Properties properties13 = new java.util.Properties();
        java.util.Properties properties14 = new java.util.Properties(properties13);
        properties14.clear();
        properties12.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties14);
        java.lang.Object obj19 = properties14.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Properties properties20 = new java.util.Properties();
        java.util.Properties properties21 = new java.util.Properties(properties20);
        properties21.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str25 = atomikosProperties24.getConsoleFileName();
        atomikosProperties24.setOutputDir("hi!");
        int int28 = atomikosProperties24.getConsoleFileLimit();
        java.lang.Object obj29 = properties21.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties24);
        atomikosProperties24.setLogBaseName("tm.out");
        boolean boolean32 = properties14.containsKey((java.lang.Object) "tm.out");
        java.util.Properties properties33 = null;
        java.util.Properties properties34 = new java.util.Properties(properties33);
        java.util.Properties properties35 = new java.util.Properties();
        java.util.Properties properties36 = new java.util.Properties(properties35);
        properties36.clear();
        properties34.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties36);
        properties14.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties34);
        java.util.Properties properties40 = new java.util.Properties(properties34);
        java.lang.String str42 = properties34.getProperty("tmlog");
        java.util.Properties properties43 = new java.util.Properties();
        java.util.Properties properties44 = new java.util.Properties(properties43);
        properties44.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str48 = atomikosProperties47.getConsoleFileName();
        atomikosProperties47.setOutputDir("hi!");
        int int51 = atomikosProperties47.getConsoleFileLimit();
        java.lang.Object obj52 = properties44.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties47);
        atomikosProperties47.setConsoleFileLimit((int) (short) 0);
        boolean boolean55 = properties34.containsValue((java.lang.Object) atomikosProperties47);
        java.lang.Object obj56 = properties1.getOrDefault((java.lang.Object) properties7, (java.lang.Object) atomikosProperties47);
        java.util.Properties properties57 = new java.util.Properties();
        java.util.Properties properties58 = new java.util.Properties(properties57);
        properties58.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str62 = atomikosProperties61.getConsoleFileName();
        atomikosProperties61.setOutputDir("hi!");
        int int65 = atomikosProperties61.getConsoleFileLimit();
        java.lang.Object obj66 = properties58.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties61);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet67 = properties58.entrySet();
        java.util.Properties properties68 = new java.util.Properties(properties58);
        java.util.Properties properties69 = new java.util.Properties(properties68);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties70 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str71 = atomikosProperties70.getConsoleFileName();
        atomikosProperties70.setOutputDir("hi!");
        int int74 = atomikosProperties70.getConsoleFileLimit();
        java.util.Properties properties75 = atomikosProperties70.asProperties();
        java.util.Properties properties76 = new java.util.Properties();
        java.util.Properties properties77 = new java.util.Properties(properties76);
        properties77.clear();
        properties75.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties77);
        java.util.Enumeration<?> wildcardEnumeration80 = properties77.propertyNames();
        java.util.Set<java.lang.Object> objSet81 = properties77.keySet();
        java.lang.Object obj82 = properties7.getOrDefault((java.lang.Object) properties68, (java.lang.Object) properties77);
        java.io.Reader reader83 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties7.load(reader83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "tm.out" + "'", str25, "tm.out");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "tm.out" + "'", str48, "tm.out");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tm.out" + "'", str62, "tm.out");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNotNull(objEntrySet67);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "tm.out" + "'", str71, "tm.out");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(properties75);
        org.junit.Assert.assertNotNull(wildcardEnumeration80);
        org.junit.Assert.assertNotNull(objSet81);
        org.junit.Assert.assertNotNull(obj82);
        org.junit.Assert.assertEquals(obj82.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj82), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj82), "{}");
    }

    @Test
    public void test00724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00724");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.get((java.lang.Object) (byte) -1);
        java.util.Properties properties3 = new java.util.Properties(properties0);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        java.lang.Object obj13 = properties5.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties8);
        boolean boolean14 = atomikosProperties8.isForceShutdownOnVmExit();
        atomikosProperties8.setConsoleFileName("");
        java.lang.String str17 = atomikosProperties8.getService();
        atomikosProperties8.setForceShutdownOnVmExit(true);
        boolean boolean20 = atomikosProperties8.isForceShutdownOnVmExit();
        java.lang.Object obj21 = properties0.remove((java.lang.Object) atomikosProperties8);
        int int22 = atomikosProperties8.getMaxActives();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 50 + "'", int22 == 50);
    }

    @Test
    public void test00725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00725");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        java.util.Set<java.lang.Object> objSet26 = properties3.keySet();
        java.lang.Object obj29 = properties3.setProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "tmlog");
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertNotNull(objSet26);
        org.junit.Assert.assertNull(obj29);
    }

    @Test
    public void test00726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00726");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.lang.Object obj7 = properties0.setProperty("", "");
        java.lang.Object obj10 = properties0.setProperty("", "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.getTransactionManagerUniqueName();
        atomikosProperties11.setAllowSubTransactions(false);
        boolean boolean15 = properties0.containsKey((java.lang.Object) atomikosProperties11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.getConsoleFileName();
        atomikosProperties16.setOutputDir("hi!");
        int int20 = atomikosProperties16.getConsoleFileLimit();
        java.util.Properties properties21 = atomikosProperties16.asProperties();
        java.util.Properties properties22 = null;
        java.util.Properties properties23 = new java.util.Properties(properties22);
        java.util.Properties properties24 = new java.util.Properties();
        java.util.Properties properties25 = new java.util.Properties(properties24);
        properties25.clear();
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties25);
        java.lang.Object obj30 = properties25.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        boolean boolean31 = properties21.equals(obj30);
        java.util.Collection<java.lang.Object> objCollection32 = properties21.values();
        java.util.Properties properties33 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection34 = properties33.values();
        java.util.Properties properties35 = null;
        java.util.Properties properties36 = new java.util.Properties(properties35);
        java.util.Properties properties37 = new java.util.Properties();
        java.util.Properties properties38 = new java.util.Properties(properties37);
        properties38.clear();
        properties36.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties38);
        java.lang.Object obj43 = properties36.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties33.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties36);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties45.setConsoleFileCount((-1));
        java.lang.String str48 = atomikosProperties45.getOutputDir();
        atomikosProperties45.setLogBaseName("tm.out");
        boolean boolean51 = properties36.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties52.setConsoleFileCount(100);
        atomikosProperties52.setAllowSubTransactions(true);
        java.lang.Object obj57 = properties36.remove((java.lang.Object) atomikosProperties52);
        java.util.Set<java.lang.Object> objSet58 = properties36.keySet();
        int int59 = properties36.size();
        java.util.Properties properties60 = new java.util.Properties(properties36);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet61 = properties36.entrySet();
        java.util.Enumeration<java.lang.Object> objEnumeration62 = properties36.elements();
        java.util.Properties properties63 = new java.util.Properties();
        java.util.Properties properties64 = new java.util.Properties(properties63);
        properties64.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties67 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str68 = atomikosProperties67.getConsoleFileName();
        atomikosProperties67.setOutputDir("hi!");
        int int71 = atomikosProperties67.getConsoleFileLimit();
        java.lang.Object obj72 = properties64.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties67);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet73 = properties64.entrySet();
        java.util.Properties properties74 = new java.util.Properties(properties64);
        java.util.Properties properties75 = new java.util.Properties(properties74);
        java.lang.String str77 = properties75.getProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        boolean boolean78 = properties0.replace((java.lang.Object) objCollection32, (java.lang.Object) objEnumeration62, (java.lang.Object) properties75);
        java.lang.Object obj79 = properties0.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties81 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str82 = atomikosProperties81.getConsoleFileName();
        long long83 = atomikosProperties81.getDefaultJtaTimeout();
        atomikosProperties81.setEnableLogging(true);
        java.lang.Object obj86 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean87 = properties0.replace((java.lang.Object) (short) 0, (java.lang.Object) atomikosProperties81, obj86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + "" + "'", obj10, "");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tm.out" + "'", str17, "tm.out");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objCollection32);
        org.junit.Assert.assertNotNull(objCollection34);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNotNull(objSet58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(objEntrySet61);
        org.junit.Assert.assertNotNull(objEnumeration62);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "tm.out" + "'", str68, "tm.out");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertNotNull(objEntrySet73);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(obj79);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "tm.out" + "'", str82, "tm.out");
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 10000L + "'", long83 == 10000L);
    }

    @Test
    public void test00727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00727");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties3.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Properties properties9 = new java.util.Properties(properties3);
        java.io.Reader reader10 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.load(reader10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test00728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00728");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        int int3 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setOutputDir("");
        java.lang.String str6 = atomikosProperties0.getConsoleFileName();
        boolean boolean7 = atomikosProperties0.isEnableLogging();
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean11 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.setMaxTimeout((long) (byte) 100);
        atomikosProperties0.setConsoleFileLimit((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tm.out" + "'", str6, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test00729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00729");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.lang.String str5 = atomikosProperties0.getService();
        java.lang.String str6 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setOutputDir("tmlog");
        long long9 = atomikosProperties0.getMaxTimeout();
        java.lang.String str10 = atomikosProperties0.getLogBaseName();
        int int11 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setSerialJtaTransactions(true);
        atomikosProperties0.setMaxActives((-1));
        atomikosProperties0.setConsoleFileCount((int) (short) -1);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 300000L + "'", long9 == 300000L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test00730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00730");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Properties properties7 = new java.util.Properties(properties6);
        properties7.clear();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Properties properties11 = new java.util.Properties(properties10);
        properties11.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str15 = atomikosProperties14.getConsoleFileName();
        atomikosProperties14.setOutputDir("hi!");
        int int18 = atomikosProperties14.getConsoleFileLimit();
        java.lang.Object obj19 = properties11.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties14);
        atomikosProperties14.setLogBaseName("tm.out");
        atomikosProperties14.setForceShutdownOnVmExit(false);
        boolean boolean24 = properties7.containsValue((java.lang.Object) atomikosProperties14);
        atomikosProperties14.setCheckpointInterval(52L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.getConsoleFileName();
        atomikosProperties27.setOutputDir("hi!");
        int int31 = atomikosProperties27.getConsoleFileLimit();
        java.util.Properties properties32 = atomikosProperties27.asProperties();
        java.lang.String str33 = atomikosProperties27.getService();
        atomikosProperties27.setService("hi!");
        atomikosProperties27.setConsoleFileName("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery38 = atomikosProperties27.getRecovery();
        java.util.Properties properties39 = atomikosProperties27.asProperties();
        java.util.Properties properties40 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection41 = properties40.values();
        java.util.Properties properties42 = null;
        java.util.Properties properties43 = new java.util.Properties(properties42);
        java.util.Properties properties44 = new java.util.Properties();
        java.util.Properties properties45 = new java.util.Properties(properties44);
        properties45.clear();
        properties43.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties45);
        java.lang.Object obj50 = properties43.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties40.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties43);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties52.setConsoleFileCount((-1));
        java.lang.String str55 = atomikosProperties52.getOutputDir();
        atomikosProperties52.setLogBaseName("tm.out");
        boolean boolean58 = properties43.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties59.setConsoleFileCount(100);
        atomikosProperties59.setAllowSubTransactions(true);
        java.lang.Object obj64 = properties43.remove((java.lang.Object) atomikosProperties59);
        java.lang.String str65 = atomikosProperties59.getLogBaseDir();
        java.lang.Class<?> wildcardClass66 = atomikosProperties59.getClass();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties67 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties67.setConsoleFileLimit((int) (byte) 10);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel70 = atomikosProperties67.getConsoleLogLevel();
        java.lang.Object obj71 = properties39.put((java.lang.Object) wildcardClass66, (java.lang.Object) atomikosLoggingLevel70);
        atomikosProperties14.setConsoleLogLevel(atomikosLoggingLevel70);
        atomikosProperties14.setService("tm.out");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tm.out" + "'", str15, "tm.out");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tm.out" + "'", str28, "tm.out");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(recovery38);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertNotNull(objCollection41);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel70 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel70.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj71);
    }

    @Test
    public void test00731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00731");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        int int3 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setOutputDir("");
        java.lang.String str6 = atomikosProperties0.getConsoleFileName();
        int int7 = atomikosProperties0.getConsoleFileCount();
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        java.lang.String str9 = atomikosProperties0.getOutputDir();
        java.util.Properties properties10 = atomikosProperties0.asProperties();
        java.io.InputStream inputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties10.load(inputStream11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tm.out" + "'", str6, "tm.out");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(properties10);
    }

    @Test
    public void test00732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00732");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        properties1.clear();
        java.io.OutputStream outputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream7, "{hi!=}", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=hi!, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00733");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.util.Properties properties28 = new java.util.Properties();
        java.util.Properties properties29 = new java.util.Properties(properties28);
        properties29.clear();
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        java.lang.Object obj32 = properties3.get((java.lang.Object) properties29);
        properties29.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str35 = atomikosProperties34.getConsoleFileName();
        long long36 = atomikosProperties34.getMaxTimeout();
        java.util.Properties properties37 = atomikosProperties34.asProperties();
        java.util.Properties properties38 = new java.util.Properties();
        java.util.Properties properties39 = new java.util.Properties(properties38);
        int int40 = properties39.size();
        boolean boolean41 = properties39.isEmpty();
        java.util.Set<java.lang.Object> objSet42 = properties39.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setConsoleFileCount((-1));
        java.lang.String str47 = atomikosProperties44.getOutputDir();
        atomikosProperties44.setLogBaseName("tm.out");
        atomikosProperties44.setLogBaseDir("tm.out");
        int int52 = atomikosProperties44.getMaxActives();
        atomikosProperties44.setDefaultJtaTimeout((long) (short) 100);
        boolean boolean55 = properties37.replace((java.lang.Object) objSet42, (java.lang.Object) (byte) 1, (java.lang.Object) atomikosProperties44);
        java.lang.String str56 = atomikosProperties44.getService();
        java.lang.Object obj57 = properties29.remove((java.lang.Object) atomikosProperties44);
        java.io.OutputStream outputStream58 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties29.storeToXML(outputStream58, "hi!", "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tm.out" + "'", str35, "tm.out");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 300000L + "'", long36 == 300000L);
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objSet42);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 50 + "'", int52 == 50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(obj57);
    }

    @Test
    public void test00734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00734");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Properties properties25 = new java.util.Properties(properties3);
        java.lang.String str27 = properties25.getProperty("");
        java.util.Set<java.lang.Object> objSet28 = properties25.keySet();
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties25.keys();
        java.io.OutputStream outputStream30 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties25.storeToXML(outputStream30, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=false, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(objSet28);
        org.junit.Assert.assertNotNull(objEnumeration29);
    }

    @Test
    public void test00735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00735");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties1.elements();
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection6 = properties5.values();
        java.util.Properties properties7 = new java.util.Properties(properties5);
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties7.elements();
        boolean boolean9 = properties7.isEmpty();
        boolean boolean10 = properties1.containsValue((java.lang.Object) boolean9);
        java.util.Properties properties11 = new java.util.Properties(properties1);
        java.util.Properties properties12 = new java.util.Properties();
        java.util.Properties properties13 = new java.util.Properties(properties12);
        java.lang.Object obj16 = properties12.setProperty("hi!", "");
        java.util.Properties properties17 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str19 = atomikosProperties18.getConsoleFileName();
        java.lang.Object obj21 = properties17.put((java.lang.Object) atomikosProperties18, (java.lang.Object) 0L);
        java.lang.Object obj24 = properties17.setProperty("", "");
        java.util.Properties properties25 = new java.util.Properties(properties17);
        properties12.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties25);
        java.util.Properties properties27 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str29 = atomikosProperties28.getConsoleFileName();
        java.lang.Object obj31 = properties27.put((java.lang.Object) atomikosProperties28, (java.lang.Object) 0L);
        java.util.Properties properties32 = new java.util.Properties(properties27);
        java.util.Properties properties33 = new java.util.Properties(properties32);
        properties12.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties33);
        boolean boolean35 = properties11.equals((java.lang.Object) properties12);
        java.util.Properties properties36 = new java.util.Properties(properties11);
        java.io.PrintWriter printWriter37 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties36.list(printWriter37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tm.out" + "'", str19, "tm.out");
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tm.out" + "'", str29, "tm.out");
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test00736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00736");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties8.getConsoleLogLevel();
        java.lang.Object obj14 = properties1.putIfAbsent((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosLoggingLevel13);
        java.util.Collection<java.lang.Object> objCollection15 = properties1.values();
        java.util.Properties properties16 = new java.util.Properties();
        java.util.Properties properties17 = new java.util.Properties(properties16);
        properties17.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str21 = atomikosProperties20.getConsoleFileName();
        atomikosProperties20.setOutputDir("hi!");
        int int24 = atomikosProperties20.getConsoleFileLimit();
        java.lang.Object obj25 = properties17.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties20);
        boolean boolean26 = properties1.equals((java.lang.Object) properties17);
        java.util.Properties properties27 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection28 = properties27.values();
        java.util.Properties properties29 = new java.util.Properties(properties27);
        java.lang.Object obj30 = null;
        boolean boolean31 = properties27.equals(obj30);
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties27.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration33 = properties27.elements();
        java.util.Properties properties34 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str36 = atomikosProperties35.getConsoleFileName();
        java.lang.Object obj38 = properties34.put((java.lang.Object) atomikosProperties35, (java.lang.Object) 0L);
        boolean boolean39 = properties27.containsValue((java.lang.Object) properties34);
        java.lang.Object obj40 = properties34.clone();
        boolean boolean41 = properties17.contains((java.lang.Object) properties34);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration<?> wildcardEnumeration42 = properties17.propertyNames();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Integer cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(objCollection15);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tm.out" + "'", str21, "tm.out");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objCollection28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objEnumeration32);
        org.junit.Assert.assertNotNull(objEnumeration33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tm.out" + "'", str36, "tm.out");
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test00737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00737");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties3.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet9 = properties3.stringPropertyNames();
        java.lang.Object obj10 = new java.lang.Object();
        java.lang.Object obj11 = properties3.get(obj10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount(100);
        atomikosProperties12.setCheckpointInterval((long) (short) 10);
        java.util.Properties properties17 = atomikosProperties12.asProperties();
        int int18 = atomikosProperties12.getConsoleFileCount();
        java.lang.String str19 = atomikosProperties12.getConsoleFileName();
        atomikosProperties12.setMaxActives((int) (byte) 100);
        java.lang.Object obj22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj23 = properties3.put((java.lang.Object) (byte) 100, obj22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tm.out" + "'", str19, "tm.out");
    }

    @Test
    public void test00738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00738");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.lang.Object obj4 = properties0.setProperty("hi!", "");
        java.io.OutputStream outputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream5, "{hi!=}", "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test00739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00739");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        int int3 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setOutputDir("");
        java.lang.String str6 = atomikosProperties0.getConsoleFileName();
        int int7 = atomikosProperties0.getConsoleFileCount();
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        java.lang.String str9 = atomikosProperties0.getConsoleFileName();
        long long10 = atomikosProperties0.getMaxTimeout();
        boolean boolean11 = atomikosProperties0.isEnableLogging();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tm.out" + "'", str6, "tm.out");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 300000L + "'", long10 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test00740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00740");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        atomikosProperties4.setLogBaseName("tm.out");
        long long12 = atomikosProperties4.getDefaultJtaTimeout();
        atomikosProperties4.setAllowSubTransactions(false);
        int int15 = atomikosProperties4.getMaxActives();
        boolean boolean16 = atomikosProperties4.isAllowSubTransactions();
        atomikosProperties4.setTransactionManagerUniqueName("");
        boolean boolean19 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.setMaxActives(19);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 50 + "'", int15 == 50);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test00741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00741");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getTransactionManagerUniqueName();
        boolean boolean2 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setAllowSubTransactions(false);
        atomikosProperties0.setLogBaseName("");
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        java.util.Properties properties8 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection9 = properties8.values();
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        java.util.Properties properties12 = new java.util.Properties();
        java.util.Properties properties13 = new java.util.Properties(properties12);
        properties13.clear();
        properties11.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties13);
        java.lang.Object obj18 = properties11.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.setConsoleFileCount((-1));
        java.lang.String str23 = atomikosProperties20.getOutputDir();
        atomikosProperties20.setLogBaseName("tm.out");
        boolean boolean26 = properties11.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.setConsoleFileCount(100);
        atomikosProperties27.setAllowSubTransactions(true);
        java.lang.Object obj32 = properties11.remove((java.lang.Object) atomikosProperties27);
        atomikosProperties27.setAllowSubTransactions(false);
        long long35 = atomikosProperties27.getCheckpointInterval();
        boolean boolean36 = atomikosProperties27.isSerialJtaTransactions();
        boolean boolean37 = properties7.equals((java.lang.Object) atomikosProperties27);
        java.io.PrintStream printStream38 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties7.list(printStream38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 500L + "'", long35 == 500L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test00742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00742");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        java.lang.String str3 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseName("tm.out");
        int int6 = atomikosProperties0.getConsoleFileCount();
        java.lang.String str7 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.setDefaultJtaTimeout((long) (byte) 100);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tm.out" + "'", str7, "tm.out");
    }

    @Test
    public void test00743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00743");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        java.lang.String str3 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseName("tm.out");
        atomikosProperties0.setLogBaseDir("tm.out");
        java.lang.String str8 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setDefaultJtaTimeout(10L);
        atomikosProperties0.setLogBaseName("tm.out");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tm.out" + "'", str8, "tm.out");
    }

    @Test
    public void test00744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00744");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties1.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        java.lang.String str10 = properties1.getProperty("{10=10.0}");
        boolean boolean11 = properties1.isEmpty();
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test00745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00745");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.lang.Object obj3 = null;
        boolean boolean4 = properties0.equals(obj3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties0.elements();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet7 = properties0.entrySet();
        int int8 = properties0.size();
        java.io.InputStream inputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.loadFromXML(inputStream9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNotNull(objEntrySet7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test00746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00746");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery6 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long7 = recovery6.getForgetOrphanedLogEntriesDelay();
        recovery6.setDelay((long) (short) 1);
        recovery6.setDelay((long) (-1));
        java.lang.Object obj12 = properties3.remove((java.lang.Object) (-1));
        java.util.Properties properties13 = new java.util.Properties();
        java.util.Properties properties14 = new java.util.Properties(properties13);
        int int15 = properties14.size();
        boolean boolean16 = properties14.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties14.elements();
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection19 = properties18.values();
        java.util.Properties properties20 = new java.util.Properties(properties18);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties20.elements();
        boolean boolean22 = properties20.isEmpty();
        boolean boolean23 = properties14.containsValue((java.lang.Object) boolean22);
        java.util.Properties properties24 = new java.util.Properties(properties14);
        java.util.Properties properties25 = new java.util.Properties();
        java.util.Properties properties26 = new java.util.Properties(properties25);
        int int27 = properties26.size();
        boolean boolean28 = properties26.isEmpty();
        java.util.Properties properties29 = new java.util.Properties(properties26);
        java.util.Properties properties30 = new java.util.Properties(properties26);
        int int31 = properties26.size();
        java.util.Properties properties32 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.getConsoleFileName();
        atomikosProperties33.setOutputDir("hi!");
        int int37 = atomikosProperties33.getConsoleFileLimit();
        java.util.Properties properties38 = atomikosProperties33.asProperties();
        java.lang.String str39 = atomikosProperties33.getService();
        atomikosProperties33.setService("hi!");
        java.lang.Object obj43 = properties32.putIfAbsent((java.lang.Object) "hi!", (java.lang.Object) 10L);
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties32);
        properties26.clear();
        java.lang.Object obj46 = properties3.putIfAbsent((java.lang.Object) properties14, (java.lang.Object) properties26);
        boolean boolean47 = properties26.isEmpty();
        properties26.clear();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 86400000L + "'", long7 == 86400000L);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertNotNull(objCollection19);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tm.out" + "'", str34, "tm.out");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test00747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00747");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        boolean boolean10 = atomikosProperties4.isForceShutdownOnVmExit();
        atomikosProperties4.setConsoleFileName("");
        java.lang.String str13 = atomikosProperties4.getService();
        boolean boolean14 = atomikosProperties4.isEnableLogging();
        long long15 = atomikosProperties4.getDefaultJtaTimeout();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
    }

    @Test
    public void test00748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00748");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties1.entrySet();
        java.util.Properties properties11 = new java.util.Properties(properties1);
        java.util.Properties properties12 = new java.util.Properties();
        java.lang.Object obj14 = properties12.get((java.lang.Object) (byte) -1);
        java.util.Properties properties15 = new java.util.Properties(properties12);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.getConsoleFileName();
        java.lang.String str18 = atomikosProperties16.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel19 = atomikosProperties16.getConsoleLogLevel();
        boolean boolean20 = properties12.equals((java.lang.Object) atomikosProperties16);
        java.lang.String str21 = properties12.toString();
        java.util.Properties properties22 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection23 = properties22.values();
        java.util.Properties properties24 = new java.util.Properties(properties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str26 = atomikosProperties25.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel29 = atomikosProperties27.getConsoleLogLevel();
        atomikosProperties25.setConsoleLogLevel(atomikosLoggingLevel29);
        atomikosProperties25.setSerialJtaTransactions(false);
        boolean boolean33 = properties24.containsValue((java.lang.Object) atomikosProperties25);
        atomikosProperties25.setEnableLogging(false);
        java.lang.String str36 = atomikosProperties25.getLogBaseName();
        java.lang.Object obj37 = properties11.put((java.lang.Object) str21, (java.lang.Object) atomikosProperties25);
        java.util.Properties properties38 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection39 = properties38.values();
        java.util.Properties properties40 = null;
        java.util.Properties properties41 = new java.util.Properties(properties40);
        java.util.Properties properties42 = new java.util.Properties();
        java.util.Properties properties43 = new java.util.Properties(properties42);
        properties43.clear();
        properties41.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties43);
        java.lang.Object obj48 = properties41.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties38.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties41);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties50.setConsoleFileCount((-1));
        java.lang.String str53 = atomikosProperties50.getOutputDir();
        atomikosProperties50.setLogBaseName("tm.out");
        boolean boolean56 = properties41.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties57.setConsoleFileCount(100);
        atomikosProperties57.setAllowSubTransactions(true);
        java.lang.Object obj62 = properties41.remove((java.lang.Object) atomikosProperties57);
        boolean boolean63 = properties11.containsValue((java.lang.Object) properties41);
        java.io.OutputStream outputStream64 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties41.storeToXML(outputStream64, "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(objEntrySet10);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tm.out" + "'", str17, "tm.out");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel19 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel19.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{}" + "'", str21, "{}");
        org.junit.Assert.assertNotNull(objCollection23);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tm.out" + "'", str28, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel29 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel29.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tmlog" + "'", str36, "tmlog");
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(objCollection39);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test00749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00749");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        java.util.Properties properties26 = new java.util.Properties(properties3);
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.util.Properties properties28 = new java.util.Properties(properties27);
        java.util.Properties properties29 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection30 = properties29.values();
        java.util.Properties properties31 = null;
        java.util.Properties properties32 = new java.util.Properties(properties31);
        java.util.Properties properties33 = new java.util.Properties();
        java.util.Properties properties34 = new java.util.Properties(properties33);
        properties34.clear();
        properties32.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties34);
        java.lang.Object obj39 = properties32.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties29.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties32);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties41.setConsoleFileCount((-1));
        java.lang.String str44 = atomikosProperties41.getOutputDir();
        atomikosProperties41.setLogBaseName("tm.out");
        boolean boolean47 = properties32.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties48.setConsoleFileCount(100);
        atomikosProperties48.setAllowSubTransactions(true);
        java.lang.Object obj53 = properties32.remove((java.lang.Object) atomikosProperties48);
        atomikosProperties48.setAllowSubTransactions(false);
        long long56 = atomikosProperties48.getCheckpointInterval();
        boolean boolean57 = atomikosProperties48.isSerialJtaTransactions();
        atomikosProperties48.setConsoleFileCount((int) 'a');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties60.setConsoleFileCount(100);
        int int63 = atomikosProperties60.getConsoleFileCount();
        java.lang.Object obj64 = properties28.getOrDefault((java.lang.Object) atomikosProperties48, (java.lang.Object) atomikosProperties60);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration<?> wildcardEnumeration65 = properties28.propertyNames();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Short cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertNotNull(objCollection30);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 500L + "'", long56 == 500L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 100 + "'", int63 == 100);
        org.junit.Assert.assertNotNull(obj64);
    }

    @Test
    public void test00750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00750");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        properties1.clear();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        boolean boolean10 = properties8.containsValue((java.lang.Object) 10L);
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        java.lang.String str13 = properties8.getProperty("hi!");
        java.util.Set<java.lang.String> strSet14 = properties8.stringPropertyNames();
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        boolean boolean18 = properties16.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.getTransactionManagerUniqueName();
        atomikosProperties19.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str24 = atomikosProperties23.getConsoleFileName();
        atomikosProperties23.setOutputDir("hi!");
        int int27 = atomikosProperties23.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel28 = atomikosProperties23.getConsoleLogLevel();
        java.lang.Object obj29 = properties16.putIfAbsent((java.lang.Object) atomikosProperties19, (java.lang.Object) atomikosLoggingLevel28);
        java.util.Properties properties30 = new java.util.Properties();
        java.lang.Object obj32 = properties30.get((java.lang.Object) (byte) -1);
        java.util.Properties properties33 = new java.util.Properties(properties30);
        boolean boolean34 = properties16.equals((java.lang.Object) properties30);
        java.util.Enumeration<java.lang.Object> objEnumeration35 = properties16.keys();
        java.util.Properties properties36 = null;
        java.util.Properties properties37 = new java.util.Properties(properties36);
        java.util.Properties properties38 = new java.util.Properties();
        java.util.Properties properties39 = new java.util.Properties(properties38);
        properties39.clear();
        properties37.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties39);
        java.lang.Object obj44 = properties37.setProperty("", "hi!");
        java.util.Properties properties45 = new java.util.Properties(properties37);
        boolean boolean46 = properties37.isEmpty();
        boolean boolean47 = properties16.contains((java.lang.Object) boolean46);
        java.util.Set<java.lang.String> strSet48 = properties16.stringPropertyNames();
        java.util.Properties properties49 = new java.util.Properties(properties16);
        java.util.Set<java.lang.Object> objSet50 = properties49.keySet();
        java.lang.Object obj51 = properties1.putIfAbsent((java.lang.Object) strSet14, (java.lang.Object) objSet50);
        java.io.OutputStream outputStream52 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream52, "{=hi!}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tm.out" + "'", str24, "tm.out");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel28 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel28.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objEnumeration35);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(objSet50);
        org.junit.Assert.assertNull(obj51);
    }

    @Test
    public void test00751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00751");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean5 = atomikosProperties0.isForceShutdownOnVmExit();
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        java.io.OutputStream outputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties6.storeToXML(outputStream7, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(properties6);
    }

    @Test
    public void test00752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00752");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Properties properties7 = new java.util.Properties(properties6);
        properties7.clear();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.util.Enumeration<?> wildcardEnumeration10 = properties7.propertyNames();
        java.util.Set<java.lang.Object> objSet11 = properties7.keySet();
        java.util.Properties properties12 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str14 = atomikosProperties13.getConsoleFileName();
        java.lang.Object obj16 = properties12.put((java.lang.Object) atomikosProperties13, (java.lang.Object) 0L);
        long long17 = atomikosProperties13.getCheckpointInterval();
        java.lang.String str18 = atomikosProperties13.getService();
        atomikosProperties13.setConsoleFileName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=32, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        atomikosProperties13.setConsoleFileName("tm.out");
        atomikosProperties13.setConsoleFileName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=100}");
        boolean boolean25 = properties7.contains((java.lang.Object) atomikosProperties13);
        java.util.Collection<java.lang.Object> objCollection26 = properties7.values();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(wildcardEnumeration10);
        org.junit.Assert.assertNotNull(objSet11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tm.out" + "'", str14, "tm.out");
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objCollection26);
    }

    @Test
    public void test00753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00753");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        properties0.clear();
        java.util.Properties properties6 = new java.util.Properties(properties0);
        java.lang.String str8 = properties6.getProperty("{}");
        java.util.Properties properties9 = new java.util.Properties(properties6);
        java.io.PrintStream printStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties6.list(printStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test00754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00754");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Set<java.lang.Object> objSet4 = properties1.keySet();
        java.util.Properties properties5 = null;
        java.util.Properties properties6 = new java.util.Properties(properties5);
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Properties properties8 = new java.util.Properties(properties7);
        properties8.clear();
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.getConsoleFileName();
        atomikosProperties12.setOutputDir("hi!");
        int int16 = atomikosProperties12.getConsoleFileLimit();
        java.util.Properties properties17 = atomikosProperties12.asProperties();
        boolean boolean18 = properties8.containsValue((java.lang.Object) atomikosProperties12);
        boolean boolean19 = properties8.isEmpty();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Properties properties21 = new java.util.Properties(properties1);
        java.util.Properties properties23 = null;
        java.util.Properties properties24 = new java.util.Properties(properties23);
        java.util.Properties properties25 = new java.util.Properties();
        java.util.Properties properties26 = new java.util.Properties(properties25);
        properties26.clear();
        properties24.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        java.util.Collection<java.lang.Object> objCollection29 = properties26.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str31 = atomikosProperties30.getConsoleFileName();
        atomikosProperties30.setOutputDir("hi!");
        int int34 = atomikosProperties30.getConsoleFileLimit();
        java.util.Properties properties35 = atomikosProperties30.asProperties();
        boolean boolean36 = properties26.containsValue((java.lang.Object) atomikosProperties30);
        boolean boolean37 = properties26.isEmpty();
        boolean boolean38 = properties1.remove((java.lang.Object) "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=false, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", (java.lang.Object) boolean37);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objSet4);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tm.out" + "'", str13, "tm.out");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objCollection29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tm.out" + "'", str31, "tm.out");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test00755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00755");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setConsoleFileCount(100);
        atomikosProperties6.setAllowSubTransactions(true);
        boolean boolean11 = atomikosProperties6.isForceShutdownOnVmExit();
        boolean boolean12 = properties5.contains((java.lang.Object) atomikosProperties6);
        java.util.Properties properties13 = new java.util.Properties();
        java.util.Properties properties14 = new java.util.Properties(properties13);
        properties14.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.getConsoleFileName();
        atomikosProperties17.setOutputDir("hi!");
        int int21 = atomikosProperties17.getConsoleFileLimit();
        java.lang.Object obj22 = properties14.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties17);
        atomikosProperties17.setLogBaseName("tm.out");
        long long25 = atomikosProperties17.getDefaultJtaTimeout();
        atomikosProperties17.setSerialJtaTransactions(true);
        atomikosProperties17.setCheckpointInterval(10000L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str31 = atomikosProperties30.getConsoleFileName();
        atomikosProperties30.setOutputDir("hi!");
        java.lang.String str34 = atomikosProperties30.getOutputDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setConsoleFileCount((-1));
        java.util.Properties properties38 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection39 = properties38.values();
        java.util.Properties properties40 = null;
        java.util.Properties properties41 = new java.util.Properties(properties40);
        java.util.Properties properties42 = new java.util.Properties();
        java.util.Properties properties43 = new java.util.Properties(properties42);
        properties43.clear();
        properties41.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties43);
        java.lang.Object obj48 = properties41.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties38.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties41);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties50.setConsoleFileCount((-1));
        java.lang.String str53 = atomikosProperties50.getOutputDir();
        atomikosProperties50.setLogBaseName("tm.out");
        boolean boolean56 = properties41.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties57.setConsoleFileCount(100);
        atomikosProperties57.setAllowSubTransactions(true);
        java.lang.Object obj62 = properties41.remove((java.lang.Object) atomikosProperties57);
        atomikosProperties57.setAllowSubTransactions(false);
        atomikosProperties57.setSerialJtaTransactions(true);
        java.util.Properties properties67 = new java.util.Properties();
        java.util.Properties properties68 = new java.util.Properties(properties67);
        properties68.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str72 = atomikosProperties71.getConsoleFileName();
        atomikosProperties71.setOutputDir("hi!");
        int int75 = atomikosProperties71.getConsoleFileLimit();
        java.lang.Object obj76 = properties68.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties71);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel77 = atomikosProperties71.getConsoleLogLevel();
        atomikosProperties57.setConsoleLogLevel(atomikosLoggingLevel77);
        atomikosProperties35.setConsoleLogLevel(atomikosLoggingLevel77);
        atomikosProperties30.setConsoleLogLevel(atomikosLoggingLevel77);
        atomikosProperties17.setConsoleLogLevel(atomikosLoggingLevel77);
        atomikosProperties6.setConsoleLogLevel(atomikosLoggingLevel77);
        java.lang.String str83 = atomikosProperties6.getConsoleFileName();
        java.util.Properties properties84 = atomikosProperties6.asProperties();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tm.out" + "'", str18, "tm.out");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10000L + "'", long25 == 10000L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tm.out" + "'", str31, "tm.out");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(objCollection39);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "tm.out" + "'", str72, "tm.out");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel77 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel77.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "tm.out" + "'", str83, "tm.out");
        org.junit.Assert.assertNotNull(properties84);
    }

    @Test
    public void test00756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00756");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        boolean boolean4 = properties2.isEmpty();
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection6 = properties5.values();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        properties10.clear();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.lang.Object obj15 = properties8.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        boolean boolean20 = properties18.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties18.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet22 = properties18.entrySet();
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection24 = properties23.values();
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        java.util.Properties properties27 = new java.util.Properties();
        java.util.Properties properties28 = new java.util.Properties(properties27);
        properties28.clear();
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        java.lang.Object obj33 = properties26.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setConsoleFileCount((-1));
        java.lang.String str38 = atomikosProperties35.getOutputDir();
        atomikosProperties35.setLogBaseName("tm.out");
        boolean boolean41 = properties26.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties42.setConsoleFileCount(100);
        atomikosProperties42.setAllowSubTransactions(true);
        java.lang.Object obj47 = properties26.remove((java.lang.Object) atomikosProperties42);
        java.util.Set<java.lang.Object> objSet48 = properties26.keySet();
        boolean boolean49 = properties2.replace((java.lang.Object) properties8, (java.lang.Object) objEntrySet22, (java.lang.Object) properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str51 = atomikosProperties50.getConsoleFileName();
        atomikosProperties50.setOutputDir("hi!");
        int int54 = atomikosProperties50.getConsoleFileLimit();
        java.util.Properties properties55 = atomikosProperties50.asProperties();
        java.util.Properties properties56 = new java.util.Properties();
        java.util.Properties properties57 = new java.util.Properties(properties56);
        properties57.clear();
        properties55.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties57);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str61 = atomikosProperties60.getConsoleFileName();
        atomikosProperties60.setOutputDir("hi!");
        int int64 = atomikosProperties60.getConsoleFileLimit();
        java.util.Properties properties65 = atomikosProperties60.asProperties();
        java.lang.String str66 = atomikosProperties60.getService();
        atomikosProperties60.setService("hi!");
        atomikosProperties60.setConsoleFileName("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery71 = atomikosProperties60.getRecovery();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties72 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str73 = atomikosProperties72.getConsoleFileName();
        atomikosProperties72.setOutputDir("hi!");
        java.lang.String str76 = atomikosProperties72.getOutputDir();
        boolean boolean77 = properties26.replace((java.lang.Object) properties57, (java.lang.Object) atomikosProperties60, (java.lang.Object) atomikosProperties72);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel78 = atomikosProperties60.getConsoleLogLevel();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery79 = atomikosProperties60.getRecovery();
        long long80 = recovery79.getRetryInterval();
        recovery79.setMaxRetries((int) (byte) -1);
        recovery79.setDelay((long) (short) -1);
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNotNull(objEntrySet22);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(objSet48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "tm.out" + "'", str51, "tm.out");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(properties55);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "tm.out" + "'", str61, "tm.out");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(properties65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(recovery71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "tm.out" + "'", str73, "tm.out");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "hi!" + "'", str76, "hi!");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel78 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel78.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(recovery79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 10000L + "'", long80 == 10000L);
    }

    @Test
    public void test00757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00757");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getTransactionManagerUniqueName();
        boolean boolean2 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setAllowSubTransactions(false);
        int int5 = atomikosProperties0.getMaxActives();
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        atomikosProperties0.setTransactionManagerUniqueName("tmlog");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
        org.junit.Assert.assertNotNull(properties6);
    }

    @Test
    public void test00758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00758");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.lang.Object obj3 = null;
        boolean boolean4 = properties0.equals(obj3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties0.elements();
        java.util.Properties properties7 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        java.lang.Object obj11 = properties7.put((java.lang.Object) atomikosProperties8, (java.lang.Object) 0L);
        boolean boolean12 = properties0.containsValue((java.lang.Object) properties7);
        java.util.Collection<java.lang.Object> objCollection13 = properties0.values();
        java.util.Properties properties14 = null;
        java.util.Properties properties15 = new java.util.Properties(properties14);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery16 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int17 = recovery16.getMaxRetries();
        recovery16.setForgetOrphanedLogEntriesDelay((long) (short) -1);
        java.lang.Object obj20 = properties15.get((java.lang.Object) (short) -1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.setConsoleFileCount((-1));
        java.lang.String str24 = atomikosProperties21.getOutputDir();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel25 = atomikosProperties21.getConsoleLogLevel();
        java.lang.String str26 = atomikosProperties21.getLogBaseDir();
        int int27 = atomikosProperties21.getConsoleFileCount();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj28 = properties0.putIfAbsent(obj20, (java.lang.Object) atomikosProperties21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objCollection13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel25 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel25.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
    }

    @Test
    public void test00759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00759");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Properties properties25 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str27 = atomikosProperties26.getConsoleFileName();
        atomikosProperties26.setOutputDir("hi!");
        int int30 = atomikosProperties26.getConsoleFileLimit();
        java.lang.String str31 = atomikosProperties26.getService();
        java.lang.String str32 = atomikosProperties26.getOutputDir();
        atomikosProperties26.setOutputDir("tmlog");
        long long35 = atomikosProperties26.getMaxTimeout();
        boolean boolean36 = properties25.contains((java.lang.Object) atomikosProperties26);
        java.util.Properties properties37 = new java.util.Properties(properties25);
        java.io.OutputStream outputStream38 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties37.store(outputStream38, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=false, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tm.out" + "'", str27, "tm.out");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 300000L + "'", long35 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test00760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00760");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        atomikosProperties0.setConsoleFileName("");
        atomikosProperties0.setDefaultJtaTimeout((long) '4');
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        java.lang.Object obj8 = properties7.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties9.setConsoleFileCount((-1));
        java.lang.String str12 = atomikosProperties9.getOutputDir();
        atomikosProperties9.setLogBaseName("tm.out");
        atomikosProperties9.setForceShutdownOnVmExit(true);
        atomikosProperties9.setMaxTimeout((long) (short) 1);
        boolean boolean19 = properties7.containsValue((java.lang.Object) (short) 1);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(obj8);
// flaky:         org.junit.Assert.assertEquals(obj8.toString(), "{com.atomikos.icatch.console_file_name=, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=52}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "{com.atomikos.icatch.console_file_name=, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=52}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "{com.atomikos.icatch.console_file_name=, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=52}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test00761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00761");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Properties properties25 = new java.util.Properties();
        java.util.Properties properties26 = new java.util.Properties(properties25);
        properties26.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.getConsoleFileName();
        atomikosProperties29.setOutputDir("hi!");
        int int33 = atomikosProperties29.getConsoleFileLimit();
        java.lang.Object obj34 = properties26.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties29);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet35 = properties26.entrySet();
        boolean boolean36 = properties3.containsValue((java.lang.Object) properties26);
        java.util.Properties properties37 = new java.util.Properties(properties3);
        java.io.InputStream inputStream38 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.loadFromXML(inputStream38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "tm.out" + "'", str30, "tm.out");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(objEntrySet35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test00762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00762");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.get((java.lang.Object) (byte) -1);
        java.util.Properties properties3 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        java.lang.String str6 = atomikosProperties4.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel7 = atomikosProperties4.getConsoleLogLevel();
        boolean boolean8 = properties0.equals((java.lang.Object) atomikosProperties4);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection10 = properties9.values();
        java.util.Properties properties11 = new java.util.Properties(properties9);
        java.util.Enumeration<java.lang.Object> objEnumeration12 = properties11.elements();
        boolean boolean13 = properties11.isEmpty();
        java.util.Properties properties14 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection15 = properties14.values();
        java.util.Properties properties16 = null;
        java.util.Properties properties17 = new java.util.Properties(properties16);
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Properties properties19 = new java.util.Properties(properties18);
        properties19.clear();
        properties17.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties19);
        java.lang.Object obj24 = properties17.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties14.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties17);
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        boolean boolean29 = properties27.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration30 = properties27.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet31 = properties27.entrySet();
        java.util.Properties properties32 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection33 = properties32.values();
        java.util.Properties properties34 = null;
        java.util.Properties properties35 = new java.util.Properties(properties34);
        java.util.Properties properties36 = new java.util.Properties();
        java.util.Properties properties37 = new java.util.Properties(properties36);
        properties37.clear();
        properties35.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties37);
        java.lang.Object obj42 = properties35.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties32.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties35);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setConsoleFileCount((-1));
        java.lang.String str47 = atomikosProperties44.getOutputDir();
        atomikosProperties44.setLogBaseName("tm.out");
        boolean boolean50 = properties35.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties51.setConsoleFileCount(100);
        atomikosProperties51.setAllowSubTransactions(true);
        java.lang.Object obj56 = properties35.remove((java.lang.Object) atomikosProperties51);
        java.util.Set<java.lang.Object> objSet57 = properties35.keySet();
        boolean boolean58 = properties11.replace((java.lang.Object) properties17, (java.lang.Object) objEntrySet31, (java.lang.Object) properties35);
        java.lang.String str60 = properties17.getProperty("{}");
        java.util.Properties properties61 = new java.util.Properties(properties17);
        java.util.Properties properties62 = new java.util.Properties(properties61);
        java.util.Set<java.lang.String> strSet63 = properties62.stringPropertyNames();
        boolean boolean64 = properties0.equals((java.lang.Object) properties62);
        java.util.Set<java.lang.Object> objSet65 = properties62.keySet();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel7 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel7.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(objCollection10);
        org.junit.Assert.assertNotNull(objEnumeration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objCollection15);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objEnumeration30);
        org.junit.Assert.assertNotNull(objEntrySet31);
        org.junit.Assert.assertNotNull(objCollection33);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(objSet57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(objSet65);
    }

    @Test
    public void test00763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00763");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties1.setProperty("tm.out", "");
        java.util.Properties properties9 = new java.util.Properties(properties1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setConsoleFileCount(100);
        atomikosProperties10.setAllowSubTransactions(true);
        boolean boolean15 = atomikosProperties10.isForceShutdownOnVmExit();
        int int16 = atomikosProperties10.getConsoleFileCount();
        java.lang.Object obj17 = properties9.get((java.lang.Object) atomikosProperties10);
        java.lang.String str18 = atomikosProperties10.getTransactionManagerUniqueName();
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test00764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00764");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Set<java.lang.Object> objSet12 = properties3.keySet();
        java.util.Properties properties13 = null;
        java.util.Properties properties14 = new java.util.Properties(properties13);
        boolean boolean16 = properties14.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.getTransactionManagerUniqueName();
        atomikosProperties17.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.getConsoleFileName();
        atomikosProperties21.setOutputDir("hi!");
        int int25 = atomikosProperties21.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel26 = atomikosProperties21.getConsoleLogLevel();
        java.lang.Object obj27 = properties14.putIfAbsent((java.lang.Object) atomikosProperties17, (java.lang.Object) atomikosLoggingLevel26);
        java.util.Properties properties28 = new java.util.Properties();
        java.lang.Object obj30 = properties28.get((java.lang.Object) (byte) -1);
        java.util.Properties properties31 = new java.util.Properties(properties28);
        boolean boolean32 = properties14.equals((java.lang.Object) properties28);
        java.lang.Object obj33 = properties3.get((java.lang.Object) boolean32);
        java.util.Properties properties34 = new java.util.Properties();
        java.util.Properties properties35 = new java.util.Properties(properties34);
        int int36 = properties35.size();
        boolean boolean37 = properties35.isEmpty();
        java.util.Properties properties38 = new java.util.Properties(properties35);
        java.util.Properties properties39 = new java.util.Properties(properties35);
        int int40 = properties35.size();
        java.util.Properties properties41 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str43 = atomikosProperties42.getConsoleFileName();
        atomikosProperties42.setOutputDir("hi!");
        int int46 = atomikosProperties42.getConsoleFileLimit();
        java.util.Properties properties47 = atomikosProperties42.asProperties();
        java.lang.String str48 = atomikosProperties42.getService();
        atomikosProperties42.setService("hi!");
        java.lang.Object obj52 = properties41.putIfAbsent((java.lang.Object) "hi!", (java.lang.Object) 10L);
        properties35.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties41);
        java.util.Properties properties54 = null;
        java.util.Properties properties55 = new java.util.Properties(properties54);
        java.util.Properties properties56 = new java.util.Properties();
        java.util.Properties properties57 = new java.util.Properties(properties56);
        properties57.clear();
        properties55.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties57);
        java.lang.Object obj62 = properties57.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet63 = properties57.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties64.setConsoleFileCount((-1));
        java.lang.String str67 = atomikosProperties64.getOutputDir();
        atomikosProperties64.setLogBaseName("tm.out");
        int int70 = atomikosProperties64.getConsoleFileCount();
        boolean boolean71 = properties57.containsKey((java.lang.Object) atomikosProperties64);
        atomikosProperties64.setConsoleFileCount((int) (byte) -1);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery74 = atomikosProperties64.getRecovery();
        java.util.Properties properties75 = null;
        java.util.Properties properties76 = new java.util.Properties(properties75);
        boolean boolean78 = properties76.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties79 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str80 = atomikosProperties79.getTransactionManagerUniqueName();
        atomikosProperties79.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties83 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str84 = atomikosProperties83.getConsoleFileName();
        atomikosProperties83.setOutputDir("hi!");
        int int87 = atomikosProperties83.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel88 = atomikosProperties83.getConsoleLogLevel();
        java.lang.Object obj89 = properties76.putIfAbsent((java.lang.Object) atomikosProperties79, (java.lang.Object) atomikosLoggingLevel88);
        java.util.Properties properties90 = new java.util.Properties();
        java.lang.Object obj92 = properties90.get((java.lang.Object) (byte) -1);
        java.util.Properties properties93 = new java.util.Properties(properties90);
        boolean boolean94 = properties76.equals((java.lang.Object) properties90);
        java.util.Enumeration<java.lang.Object> objEnumeration95 = properties76.keys();
        java.lang.Object obj96 = properties35.getOrDefault((java.lang.Object) atomikosProperties64, (java.lang.Object) properties76);
        java.lang.Object obj97 = properties3.get(obj96);
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(objSet12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tm.out" + "'", str22, "tm.out");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel26 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel26.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tm.out" + "'", str43, "tm.out");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(properties47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(recovery74);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "tm.out" + "'", str84, "tm.out");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel88 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel88.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertNull(obj92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(objEnumeration95);
        org.junit.Assert.assertNotNull(obj96);
        org.junit.Assert.assertNull(obj97);
    }

    @Test
    public void test00765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00765");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        atomikosProperties0.setDefaultJtaTimeout(1L);
        atomikosProperties0.setForceShutdownOnVmExit(false);
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        java.lang.String str11 = properties9.getProperty("{hi!=}");
        properties9.clear();
        java.io.OutputStream outputStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties9.storeToXML(outputStream13, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "{=hi!}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test00766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00766");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        java.lang.String str5 = properties2.getProperty("tmlog");
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection7 = properties6.values();
        java.util.Properties properties8 = new java.util.Properties(properties6);
        java.util.Enumeration<java.lang.Object> objEnumeration9 = properties6.keys();
        java.util.Properties properties10 = new java.util.Properties(properties6);
        java.lang.String str11 = properties6.toString();
        boolean boolean12 = properties2.containsValue((java.lang.Object) str11);
        java.lang.Object obj13 = properties2.clone();
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(objCollection7);
        org.junit.Assert.assertNotNull(objEnumeration9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
    }

    @Test
    public void test00767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00767");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        java.lang.String str5 = properties2.getProperty("hi!");
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties7.setConsoleFileCount(100);
        atomikosProperties7.setAllowSubTransactions(true);
        boolean boolean12 = atomikosProperties7.isForceShutdownOnVmExit();
        int int13 = atomikosProperties7.getConsoleFileCount();
        java.util.Properties properties14 = atomikosProperties7.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery15 = atomikosProperties7.getRecovery();
        java.util.Properties properties16 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection17 = properties16.values();
        java.util.Properties properties18 = null;
        java.util.Properties properties19 = new java.util.Properties(properties18);
        java.util.Properties properties20 = new java.util.Properties();
        java.util.Properties properties21 = new java.util.Properties(properties20);
        properties21.clear();
        properties19.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.lang.Object obj26 = properties19.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties16.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties19);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties28.setConsoleFileCount((-1));
        java.lang.String str31 = atomikosProperties28.getOutputDir();
        atomikosProperties28.setLogBaseName("tm.out");
        boolean boolean34 = properties19.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setConsoleFileCount(100);
        atomikosProperties35.setAllowSubTransactions(true);
        java.lang.Object obj40 = properties19.remove((java.lang.Object) atomikosProperties35);
        atomikosProperties35.setAllowSubTransactions(false);
        int int43 = atomikosProperties35.getConsoleFileCount();
        java.util.Properties properties44 = atomikosProperties35.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel45 = atomikosProperties35.getConsoleLogLevel();
        java.lang.Object obj46 = properties2.getOrDefault((java.lang.Object) recovery15, (java.lang.Object) atomikosProperties35);
        java.util.Set<java.lang.Object> objSet47 = properties2.keySet();
        java.util.Properties properties48 = new java.util.Properties(properties2);
        java.io.InputStream inputStream49 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.load(inputStream49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(recovery15);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertNotNull(properties44);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel45 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel45.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertNotNull(objSet47);
    }

    @Test
    public void test00768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00768");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties8.getConsoleLogLevel();
        java.lang.Object obj14 = properties1.putIfAbsent((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosLoggingLevel13);
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.Object obj17 = properties15.get((java.lang.Object) (byte) -1);
        java.util.Properties properties18 = new java.util.Properties(properties15);
        boolean boolean19 = properties1.equals((java.lang.Object) properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties1.keys();
        java.util.Properties properties21 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection22 = properties21.values();
        java.util.Properties properties23 = new java.util.Properties(properties21);
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties23.elements();
        boolean boolean25 = properties1.equals((java.lang.Object) properties23);
        java.io.OutputStream outputStream26 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties23.save(outputStream26, "{hi!=}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertNotNull(objCollection22);
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test00769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00769");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.lang.Object obj7 = properties0.setProperty("", "");
        java.util.Properties properties8 = new java.util.Properties(properties0);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection10 = properties9.values();
        java.util.Properties properties11 = new java.util.Properties(properties9);
        java.util.Enumeration<java.lang.Object> objEnumeration12 = properties11.elements();
        boolean boolean13 = properties11.isEmpty();
        java.util.Properties properties14 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection15 = properties14.values();
        java.util.Properties properties16 = null;
        java.util.Properties properties17 = new java.util.Properties(properties16);
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Properties properties19 = new java.util.Properties(properties18);
        properties19.clear();
        properties17.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties19);
        java.lang.Object obj24 = properties17.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties14.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties17);
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        boolean boolean29 = properties27.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration30 = properties27.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet31 = properties27.entrySet();
        java.util.Properties properties32 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection33 = properties32.values();
        java.util.Properties properties34 = null;
        java.util.Properties properties35 = new java.util.Properties(properties34);
        java.util.Properties properties36 = new java.util.Properties();
        java.util.Properties properties37 = new java.util.Properties(properties36);
        properties37.clear();
        properties35.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties37);
        java.lang.Object obj42 = properties35.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties32.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties35);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setConsoleFileCount((-1));
        java.lang.String str47 = atomikosProperties44.getOutputDir();
        atomikosProperties44.setLogBaseName("tm.out");
        boolean boolean50 = properties35.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties51.setConsoleFileCount(100);
        atomikosProperties51.setAllowSubTransactions(true);
        java.lang.Object obj56 = properties35.remove((java.lang.Object) atomikosProperties51);
        java.util.Set<java.lang.Object> objSet57 = properties35.keySet();
        boolean boolean58 = properties11.replace((java.lang.Object) properties17, (java.lang.Object) objEntrySet31, (java.lang.Object) properties35);
        java.lang.String str60 = properties17.getProperty("{}");
        java.util.Properties properties61 = new java.util.Properties(properties17);
        boolean boolean62 = properties8.equals((java.lang.Object) properties17);
        java.util.Set<java.lang.String> strSet63 = properties17.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet64 = properties17.keySet();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(objCollection10);
        org.junit.Assert.assertNotNull(objEnumeration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objCollection15);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objEnumeration30);
        org.junit.Assert.assertNotNull(objEntrySet31);
        org.junit.Assert.assertNotNull(objCollection33);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(objSet57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertNotNull(objSet64);
    }

    @Test
    public void test00770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00770");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.util.Properties properties28 = new java.util.Properties();
        java.util.Properties properties29 = new java.util.Properties(properties28);
        properties29.clear();
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        java.lang.Object obj32 = properties3.get((java.lang.Object) properties29);
        java.util.Properties properties33 = new java.util.Properties(properties3);
        java.io.InputStream inputStream34 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.loadFromXML(inputStream34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertNull(obj32);
    }

    @Test
    public void test00771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00771");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.lang.String str5 = properties1.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.getConsoleFileName();
        atomikosProperties6.setOutputDir("hi!");
        int int10 = atomikosProperties6.getConsoleFileLimit();
        java.util.Properties properties11 = atomikosProperties6.asProperties();
        java.util.Properties properties12 = null;
        java.util.Properties properties13 = new java.util.Properties(properties12);
        java.util.Properties properties14 = new java.util.Properties();
        java.util.Properties properties15 = new java.util.Properties(properties14);
        properties15.clear();
        properties13.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.lang.Object obj20 = properties15.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        boolean boolean21 = properties11.equals(obj20);
        java.util.Collection<java.lang.Object> objCollection22 = properties11.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str24 = atomikosProperties23.getConsoleFileName();
        atomikosProperties23.setOutputDir("hi!");
        int int27 = atomikosProperties23.getConsoleFileLimit();
        java.util.Properties properties28 = atomikosProperties23.asProperties();
        java.util.Properties properties29 = new java.util.Properties();
        java.util.Properties properties30 = new java.util.Properties(properties29);
        properties30.clear();
        properties28.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties30);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.setConsoleFileCount((-1));
        java.lang.String str36 = atomikosProperties33.getOutputDir();
        atomikosProperties33.setLogBaseName("tm.out");
        int int39 = atomikosProperties33.getMaxActives();
        boolean boolean40 = properties11.remove((java.lang.Object) properties28, (java.lang.Object) int39);
        java.lang.Object obj41 = null;
        java.lang.Object obj42 = properties1.getOrDefault((java.lang.Object) boolean40, obj41);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tm.out" + "'", str7, "tm.out");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objCollection22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tm.out" + "'", str24, "tm.out");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 50 + "'", int39 == 50);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(obj42);
    }

    @Test
    public void test00772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00772");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.util.Properties properties28 = new java.util.Properties();
        java.util.Properties properties29 = new java.util.Properties(properties28);
        properties29.clear();
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        java.lang.Object obj32 = properties3.get((java.lang.Object) properties29);
        properties29.clear();
        int int34 = properties29.size();
        java.util.Set<java.lang.Object> objSet35 = properties29.keySet();
        java.util.Properties properties37 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection38 = properties37.values();
        java.util.Properties properties39 = null;
        java.util.Properties properties40 = new java.util.Properties(properties39);
        java.util.Properties properties41 = new java.util.Properties();
        java.util.Properties properties42 = new java.util.Properties(properties41);
        properties42.clear();
        properties40.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties42);
        java.lang.Object obj47 = properties40.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties37.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties40);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties49.setConsoleFileCount((-1));
        java.lang.String str52 = atomikosProperties49.getOutputDir();
        atomikosProperties49.setLogBaseName("tm.out");
        boolean boolean55 = properties40.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties56.setConsoleFileCount(100);
        atomikosProperties56.setAllowSubTransactions(true);
        java.lang.Object obj61 = properties40.remove((java.lang.Object) atomikosProperties56);
        java.util.Set<java.lang.Object> objSet62 = properties40.keySet();
        java.util.Properties properties63 = new java.util.Properties(properties40);
        java.lang.Object obj66 = properties40.setProperty("hi!", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=32, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        java.lang.Object obj67 = properties29.getOrDefault((java.lang.Object) (byte) 0, (java.lang.Object) "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=32, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        java.lang.Class<?> wildcardClass68 = obj67.getClass();
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(objSet35);
        org.junit.Assert.assertNotNull(objCollection38);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNotNull(objSet62);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertEquals("'" + obj67 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=32, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", obj67, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=32, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test00773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00773");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        java.lang.Object obj6 = properties0.clone();
        java.io.Reader reader7 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.load(reader7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(obj6);
    }

    @Test
    public void test00774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00774");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        java.lang.String str5 = properties2.getProperty("tmlog");
        java.util.Properties properties6 = new java.util.Properties(properties2);
        java.io.PrintStream printStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.list(printStream7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test00775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00775");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        atomikosProperties0.setDefaultJtaTimeout((long) 10);
        long long7 = atomikosProperties0.getCheckpointInterval();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
    }

    @Test
    public void test00776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00776");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        atomikosProperties0.setCheckpointInterval((long) (short) 10);
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        int int6 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setAllowSubTransactions(false);
        long long9 = atomikosProperties0.getCheckpointInterval();
        boolean boolean10 = atomikosProperties0.isEnableLogging();
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test00777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00777");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.lang.Object obj7 = properties0.setProperty("", "");
        java.util.Properties properties8 = new java.util.Properties(properties0);
        java.lang.Object obj9 = properties8.clone();
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean13 = properties11.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration14 = properties11.keys();
        java.util.Properties properties15 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection16 = properties15.values();
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        java.util.Properties properties19 = new java.util.Properties();
        java.util.Properties properties20 = new java.util.Properties(properties19);
        properties20.clear();
        properties18.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties20);
        java.lang.Object obj25 = properties18.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties15.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties18);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.setConsoleFileCount((-1));
        java.lang.String str30 = atomikosProperties27.getOutputDir();
        atomikosProperties27.setLogBaseName("tm.out");
        boolean boolean33 = properties18.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties34.setConsoleFileCount(100);
        atomikosProperties34.setAllowSubTransactions(true);
        java.lang.Object obj39 = properties18.remove((java.lang.Object) atomikosProperties34);
        atomikosProperties34.setAllowSubTransactions(false);
        atomikosProperties34.setSerialJtaTransactions(true);
        boolean boolean44 = properties11.containsKey((java.lang.Object) atomikosProperties34);
        java.util.Properties properties45 = new java.util.Properties(properties11);
        java.util.Properties properties46 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection47 = properties46.values();
        java.util.Properties properties48 = new java.util.Properties(properties46);
        java.util.Enumeration<java.lang.Object> objEnumeration49 = properties48.elements();
        java.util.Properties properties50 = new java.util.Properties();
        java.lang.Object obj52 = properties50.get((java.lang.Object) (byte) -1);
        java.util.Enumeration<java.lang.Object> objEnumeration53 = properties50.elements();
        java.util.Properties properties54 = null;
        java.util.Properties properties55 = new java.util.Properties(properties54);
        java.util.Properties properties56 = new java.util.Properties();
        java.util.Properties properties57 = new java.util.Properties(properties56);
        properties57.clear();
        properties55.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties57);
        boolean boolean61 = properties55.equals((java.lang.Object) (-1.0d));
        java.lang.Object obj62 = properties50.remove((java.lang.Object) properties55);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet63 = properties50.entrySet();
        java.util.Properties properties64 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection65 = properties64.values();
        java.util.Properties properties66 = new java.util.Properties(properties64);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties67 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str68 = atomikosProperties67.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties69 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str70 = atomikosProperties69.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel71 = atomikosProperties69.getConsoleLogLevel();
        atomikosProperties67.setConsoleLogLevel(atomikosLoggingLevel71);
        atomikosProperties67.setSerialJtaTransactions(false);
        java.util.Properties properties75 = atomikosProperties67.asProperties();
        java.lang.Object obj76 = properties64.remove((java.lang.Object) atomikosProperties67);
        java.lang.String str77 = atomikosProperties67.getLogBaseName();
        atomikosProperties67.setEnableLogging(false);
        java.lang.Object obj80 = properties48.getOrDefault((java.lang.Object) objEntrySet63, (java.lang.Object) atomikosProperties67);
        java.lang.Object obj81 = properties8.getOrDefault((java.lang.Object) properties45, (java.lang.Object) atomikosProperties67);
        properties8.clear();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "{}");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objEnumeration14);
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(objCollection47);
        org.junit.Assert.assertNotNull(objEnumeration49);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNotNull(objEnumeration53);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNotNull(objEntrySet63);
        org.junit.Assert.assertNotNull(objCollection65);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "tm.out" + "'", str70, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel71 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel71.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties75);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "tmlog" + "'", str77, "tmlog");
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertNotNull(obj81);
    }

    @Test
    public void test00778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00778");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Set<java.lang.String> strSet3 = properties0.stringPropertyNames();
        java.io.OutputStream outputStream4 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream4, "{10=10.0}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(strSet3);
    }

    @Test
    public void test00779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00779");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        boolean boolean10 = atomikosProperties4.isForceShutdownOnVmExit();
        atomikosProperties4.setOutputDir("tm.out");
        java.lang.String str13 = atomikosProperties4.getLogBaseDir();
        java.lang.String str14 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setConsoleFileName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=hi!, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        java.lang.String str17 = atomikosProperties4.getLogBaseDir();
        java.lang.String str18 = atomikosProperties4.getConsoleFileName();
        long long19 = atomikosProperties4.getMaxTimeout();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=hi!, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str18, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=hi!, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 300000L + "'", long19 == 300000L);
    }

    @Test
    public void test00780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00780");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Properties properties25 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str27 = atomikosProperties26.getConsoleFileName();
        atomikosProperties26.setOutputDir("hi!");
        int int30 = atomikosProperties26.getConsoleFileLimit();
        java.lang.String str31 = atomikosProperties26.getService();
        java.lang.String str32 = atomikosProperties26.getOutputDir();
        atomikosProperties26.setOutputDir("tmlog");
        long long35 = atomikosProperties26.getMaxTimeout();
        boolean boolean36 = properties25.contains((java.lang.Object) atomikosProperties26);
        atomikosProperties26.setDefaultJtaTimeout((long) 100);
        java.util.Properties properties39 = atomikosProperties26.asProperties();
        java.util.Properties properties40 = new java.util.Properties();
        java.util.Properties properties41 = new java.util.Properties(properties40);
        properties41.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str45 = atomikosProperties44.getConsoleFileName();
        atomikosProperties44.setOutputDir("hi!");
        int int48 = atomikosProperties44.getConsoleFileLimit();
        java.lang.Object obj49 = properties41.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties44);
        boolean boolean50 = atomikosProperties44.isForceShutdownOnVmExit();
        atomikosProperties44.setOutputDir("tm.out");
        java.lang.String str53 = atomikosProperties44.getLogBaseDir();
        atomikosProperties44.setOutputDir("{hi!=}");
        long long56 = atomikosProperties44.getCheckpointInterval();
        atomikosProperties44.setConsoleFileCount((int) (byte) 10);
        boolean boolean59 = properties39.contains((java.lang.Object) atomikosProperties44);
        java.lang.Object obj60 = null;
        java.util.Properties properties61 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection62 = properties61.values();
        java.util.Properties properties63 = null;
        java.util.Properties properties64 = new java.util.Properties(properties63);
        java.util.Properties properties65 = new java.util.Properties();
        java.util.Properties properties66 = new java.util.Properties(properties65);
        properties66.clear();
        properties64.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties66);
        java.lang.Object obj71 = properties64.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties61.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties64);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties73 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties73.setConsoleFileCount((-1));
        java.lang.String str76 = atomikosProperties73.getOutputDir();
        atomikosProperties73.setLogBaseName("tm.out");
        boolean boolean79 = properties64.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties80 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties80.setConsoleFileCount(100);
        atomikosProperties80.setAllowSubTransactions(true);
        java.lang.Object obj85 = properties64.remove((java.lang.Object) atomikosProperties80);
        atomikosProperties80.setAllowSubTransactions(false);
        atomikosProperties80.setSerialJtaTransactions(true);
        java.util.Properties properties90 = atomikosProperties80.asProperties();
        atomikosProperties80.setMaxActives(10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj93 = properties39.put(obj60, (java.lang.Object) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tm.out" + "'", str27, "tm.out");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 300000L + "'", long35 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "tm.out" + "'", str45, "tm.out");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 500L + "'", long56 == 500L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(objCollection62);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(obj85);
        org.junit.Assert.assertNotNull(properties90);
    }

    @Test
    public void test00781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00781");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties1.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        boolean boolean9 = properties1.isEmpty();
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection11 = properties10.values();
        java.util.Properties properties12 = null;
        java.util.Properties properties13 = new java.util.Properties(properties12);
        java.util.Properties properties14 = new java.util.Properties();
        java.util.Properties properties15 = new java.util.Properties(properties14);
        properties15.clear();
        properties13.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.lang.Object obj20 = properties13.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties10.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties13);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.setConsoleFileCount((-1));
        java.lang.String str25 = atomikosProperties22.getOutputDir();
        atomikosProperties22.setLogBaseName("tm.out");
        boolean boolean28 = properties13.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setConsoleFileCount(100);
        atomikosProperties29.setAllowSubTransactions(true);
        java.lang.Object obj34 = properties13.remove((java.lang.Object) atomikosProperties29);
        java.util.Set<java.lang.Object> objSet35 = properties13.keySet();
        java.util.Properties properties36 = null;
        java.util.Properties properties37 = new java.util.Properties(properties36);
        java.util.Properties properties38 = new java.util.Properties();
        java.util.Properties properties39 = new java.util.Properties(properties38);
        properties39.clear();
        properties37.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties39);
        java.lang.Object obj42 = properties13.get((java.lang.Object) properties39);
        properties39.clear();
        java.util.Properties properties44 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str46 = atomikosProperties45.getConsoleFileName();
        java.lang.Object obj48 = properties44.put((java.lang.Object) atomikosProperties45, (java.lang.Object) 0L);
        java.util.Properties properties49 = new java.util.Properties(properties44);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties50.setConsoleFileCount((-1));
        atomikosProperties50.setTransactionManagerUniqueName("tm.out");
        java.lang.Object obj55 = properties44.remove((java.lang.Object) atomikosProperties50);
        boolean boolean56 = atomikosProperties50.isForceShutdownOnVmExit();
        java.lang.Object obj58 = properties39.putIfAbsent((java.lang.Object) boolean56, (java.lang.Object) 500L);
        java.util.Collection<java.lang.Object> objCollection59 = properties39.values();
        boolean boolean60 = properties1.containsValue((java.lang.Object) objCollection59);
        java.lang.Object obj61 = properties1.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration62 = properties1.keys();
        java.io.OutputStream outputStream63 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(outputStream63, "{=hi!}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(objSet35);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "tm.out" + "'", str46, "tm.out");
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNotNull(objCollection59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals(obj61.toString(), "{10=10.0}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "{10=10.0}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "{10=10.0}");
        org.junit.Assert.assertNotNull(objEnumeration62);
    }

    @Test
    public void test00782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00782");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        java.lang.String str3 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseName("tm.out");
        atomikosProperties0.setLogBaseDir("tm.out");
        int int8 = atomikosProperties0.getMaxActives();
        boolean boolean9 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.setOutputDir("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=100}");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test00783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00783");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Properties properties8 = new java.util.Properties();
        java.util.Properties properties9 = new java.util.Properties(properties8);
        properties9.clear();
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        java.lang.Object obj14 = properties9.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        boolean boolean15 = properties5.equals(obj14);
        java.util.Collection<java.lang.Object> objCollection16 = properties5.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.getConsoleFileName();
        atomikosProperties17.setOutputDir("hi!");
        int int21 = atomikosProperties17.getConsoleFileLimit();
        java.util.Properties properties22 = atomikosProperties17.asProperties();
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Properties properties24 = new java.util.Properties(properties23);
        properties24.clear();
        properties22.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.setConsoleFileCount((-1));
        java.lang.String str30 = atomikosProperties27.getOutputDir();
        atomikosProperties27.setLogBaseName("tm.out");
        int int33 = atomikosProperties27.getMaxActives();
        boolean boolean34 = properties5.remove((java.lang.Object) properties22, (java.lang.Object) int33);
        java.lang.String str36 = properties5.getProperty("{}");
        java.util.Properties properties37 = new java.util.Properties(properties5);
        java.lang.String str39 = properties37.getProperty("hi!");
        java.io.OutputStream outputStream40 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties37.store(outputStream40, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=false, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tm.out" + "'", str18, "tm.out");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str39);
    }

    @Test
    public void test00784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00784");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getTransactionManagerUniqueName();
        boolean boolean2 = atomikosProperties0.isForceShutdownOnVmExit();
        java.util.Properties properties3 = atomikosProperties0.asProperties();
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test00785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00785");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties8.getConsoleLogLevel();
        java.lang.Object obj14 = properties1.putIfAbsent((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosLoggingLevel13);
        java.util.Collection<java.lang.Object> objCollection15 = properties1.values();
        java.util.Properties properties16 = new java.util.Properties();
        java.util.Properties properties17 = new java.util.Properties(properties16);
        properties17.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str21 = atomikosProperties20.getConsoleFileName();
        atomikosProperties20.setOutputDir("hi!");
        int int24 = atomikosProperties20.getConsoleFileLimit();
        java.lang.Object obj25 = properties17.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties20);
        boolean boolean26 = properties1.equals((java.lang.Object) properties17);
        java.util.Properties properties27 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection28 = properties27.values();
        java.util.Properties properties29 = new java.util.Properties(properties27);
        java.lang.Object obj30 = null;
        boolean boolean31 = properties27.equals(obj30);
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties27.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration33 = properties27.elements();
        java.util.Properties properties34 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str36 = atomikosProperties35.getConsoleFileName();
        java.lang.Object obj38 = properties34.put((java.lang.Object) atomikosProperties35, (java.lang.Object) 0L);
        boolean boolean39 = properties27.containsValue((java.lang.Object) properties34);
        java.lang.Object obj40 = properties34.clone();
        boolean boolean41 = properties17.contains((java.lang.Object) properties34);
        java.io.OutputStream outputStream42 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties34.storeToXML(outputStream42, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=hi!, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(objCollection15);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tm.out" + "'", str21, "tm.out");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objCollection28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objEnumeration32);
        org.junit.Assert.assertNotNull(objEnumeration33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tm.out" + "'", str36, "tm.out");
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test00786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00786");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        atomikosProperties1.setOutputDir("hi!");
        int int5 = atomikosProperties1.getConsoleFileLimit();
        java.util.Properties properties6 = atomikosProperties1.asProperties();
        java.lang.String str7 = atomikosProperties1.getService();
        atomikosProperties1.setService("hi!");
        java.lang.Object obj11 = properties0.putIfAbsent((java.lang.Object) "hi!", (java.lang.Object) 10L);
        java.util.Enumeration<java.lang.Object> objEnumeration12 = properties0.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str14 = atomikosProperties13.getConsoleFileName();
        atomikosProperties13.setOutputDir("hi!");
        int int17 = atomikosProperties13.getConsoleFileLimit();
        java.util.Properties properties18 = atomikosProperties13.asProperties();
        java.util.Properties properties19 = new java.util.Properties();
        java.util.Properties properties20 = new java.util.Properties(properties19);
        properties20.clear();
        properties18.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties20);
        java.util.Enumeration<?> wildcardEnumeration23 = properties20.propertyNames();
        java.lang.Object obj24 = properties20.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str26 = atomikosProperties25.getConsoleFileName();
        atomikosProperties25.setOutputDir("hi!");
        int int29 = atomikosProperties25.getConsoleFileLimit();
        java.util.Properties properties30 = atomikosProperties25.asProperties();
        java.util.Properties properties31 = null;
        java.util.Properties properties32 = new java.util.Properties(properties31);
        java.util.Properties properties33 = new java.util.Properties();
        java.util.Properties properties34 = new java.util.Properties(properties33);
        properties34.clear();
        properties32.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties34);
        java.lang.Object obj39 = properties34.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        boolean boolean40 = properties30.equals(obj39);
        java.util.Collection<java.lang.Object> objCollection41 = properties30.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str43 = atomikosProperties42.getConsoleFileName();
        atomikosProperties42.setOutputDir("hi!");
        int int46 = atomikosProperties42.getConsoleFileLimit();
        java.util.Properties properties47 = atomikosProperties42.asProperties();
        java.util.Properties properties48 = new java.util.Properties();
        java.util.Properties properties49 = new java.util.Properties(properties48);
        properties49.clear();
        properties47.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties49);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties52.setConsoleFileCount((-1));
        java.lang.String str55 = atomikosProperties52.getOutputDir();
        atomikosProperties52.setLogBaseName("tm.out");
        int int58 = atomikosProperties52.getMaxActives();
        boolean boolean59 = properties30.remove((java.lang.Object) properties47, (java.lang.Object) int58);
        properties20.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties47);
        boolean boolean61 = properties47.isEmpty();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties47);
        java.util.Properties properties63 = null;
        java.util.Properties properties64 = new java.util.Properties(properties63);
        java.util.Properties properties65 = new java.util.Properties();
        java.util.Properties properties66 = new java.util.Properties(properties65);
        properties66.clear();
        properties64.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties66);
        java.lang.Object obj71 = properties64.setProperty("tm.out", "");
        java.util.Collection<java.lang.Object> objCollection72 = properties64.values();
        java.util.Properties properties73 = new java.util.Properties();
        java.util.Properties properties74 = new java.util.Properties(properties73);
        properties74.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties77 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str78 = atomikosProperties77.getConsoleFileName();
        atomikosProperties77.setOutputDir("hi!");
        int int81 = atomikosProperties77.getConsoleFileLimit();
        java.lang.Object obj82 = properties74.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties77);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel83 = atomikosProperties77.getConsoleLogLevel();
        java.lang.String str84 = atomikosProperties77.getTransactionManagerUniqueName();
        boolean boolean85 = atomikosProperties77.isThreadedTwoPhaseCommit();
        atomikosProperties77.setConsoleFileLimit((int) '#');
        java.util.Properties properties88 = atomikosProperties77.asProperties();
        boolean boolean89 = properties47.remove((java.lang.Object) properties64, (java.lang.Object) atomikosProperties77);
        atomikosProperties77.setConsoleFileLimit((int) (byte) -1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(objEnumeration12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tm.out" + "'", str14, "tm.out");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertNotNull(wildcardEnumeration23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "{}");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "tm.out" + "'", str26, "tm.out");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objCollection41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tm.out" + "'", str43, "tm.out");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(properties47);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 50 + "'", int58 == 50);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNotNull(objCollection72);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "tm.out" + "'", str78, "tm.out");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNull(obj82);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel83 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel83.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(properties88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test00787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00787");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        java.lang.String str3 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseName("tm.out");
        atomikosProperties0.setLogBaseDir("tm.out");
        java.lang.String str8 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setDefaultJtaTimeout(10L);
        atomikosProperties0.setLogBaseDir("");
        atomikosProperties0.setDefaultJtaTimeout((long) (short) 100);
        int int15 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setConsoleFileLimit(1);
        atomikosProperties0.setLogBaseName("tm.out");
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        int int22 = atomikosProperties0.getConsoleFileCount();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tm.out" + "'", str8, "tm.out");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test00788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00788");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Properties properties4 = new java.util.Properties(properties1);
        java.util.Properties properties5 = new java.util.Properties(properties1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.getConsoleFileName();
        atomikosProperties6.setOutputDir("hi!");
        int int10 = atomikosProperties6.getConsoleFileLimit();
        java.util.Properties properties11 = atomikosProperties6.asProperties();
        java.lang.String str12 = atomikosProperties6.getService();
        atomikosProperties6.setService("hi!");
        atomikosProperties6.setForceShutdownOnVmExit(true);
        atomikosProperties6.setThreadedTwoPhaseCommit(false);
        java.util.Properties properties19 = atomikosProperties6.asProperties();
        java.util.Properties properties21 = new java.util.Properties();
        java.util.Properties properties22 = new java.util.Properties(properties21);
        int int23 = properties22.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery24 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long25 = recovery24.getForgetOrphanedLogEntriesDelay();
        java.lang.Class<?> wildcardClass26 = recovery24.getClass();
        boolean boolean27 = properties22.containsKey((java.lang.Object) wildcardClass26);
        boolean boolean28 = properties1.replace((java.lang.Object) properties19, (java.lang.Object) 1.0f, (java.lang.Object) wildcardClass26);
        java.io.Writer writer29 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties19.store(writer29, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tm.out" + "'", str7, "tm.out");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 86400000L + "'", long25 == 86400000L);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test00789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00789");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        java.lang.String str2 = atomikosProperties0.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str4 = atomikosProperties3.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = atomikosProperties3.getConsoleLogLevel();
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.getConsoleFileLimit();
        java.lang.String str8 = atomikosProperties0.getLogBaseDir();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tm.out" + "'", str4, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel5 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel5.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test00790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00790");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties1.elements();
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection6 = properties5.values();
        java.util.Properties properties7 = new java.util.Properties(properties5);
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties7.elements();
        boolean boolean9 = properties7.isEmpty();
        boolean boolean10 = properties1.containsValue((java.lang.Object) boolean9);
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties1.elements();
        properties1.clear();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet13 = properties1.entrySet();
        java.util.Enumeration<java.lang.Object> objEnumeration14 = properties1.keys();
        java.lang.Object obj17 = properties1.setProperty("", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertNotNull(objEntrySet13);
        org.junit.Assert.assertNotNull(objEnumeration14);
        org.junit.Assert.assertNull(obj17);
    }

    @Test
    public void test00791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00791");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        java.util.Properties properties26 = new java.util.Properties(properties3);
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.io.Reader reader28 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties27.load(reader28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
    }

    @Test
    public void test00792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00792");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setConsoleFileCount(100);
        atomikosProperties6.setAllowSubTransactions(true);
        boolean boolean11 = atomikosProperties6.isForceShutdownOnVmExit();
        boolean boolean12 = properties5.contains((java.lang.Object) atomikosProperties6);
        java.lang.String str13 = atomikosProperties6.getOutputDir();
        atomikosProperties6.setConsoleFileName("{10=10.0}");
        java.util.Properties properties16 = atomikosProperties6.asProperties();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(properties16);
    }

    @Test
    public void test00793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00793");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties1.setProperty("tm.out", "");
        java.util.Properties properties9 = new java.util.Properties(properties1);
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection11 = properties10.values();
        java.util.Properties properties12 = null;
        java.util.Properties properties13 = new java.util.Properties(properties12);
        java.util.Properties properties14 = new java.util.Properties();
        java.util.Properties properties15 = new java.util.Properties(properties14);
        properties15.clear();
        properties13.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.lang.Object obj20 = properties13.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties10.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties13);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.setConsoleFileCount((-1));
        java.lang.String str25 = atomikosProperties22.getOutputDir();
        atomikosProperties22.setLogBaseName("tm.out");
        boolean boolean28 = properties13.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setConsoleFileCount(100);
        atomikosProperties29.setAllowSubTransactions(true);
        java.lang.Object obj34 = properties13.remove((java.lang.Object) atomikosProperties29);
        java.util.Properties properties35 = new java.util.Properties();
        java.util.Properties properties36 = new java.util.Properties(properties35);
        properties36.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str40 = atomikosProperties39.getConsoleFileName();
        atomikosProperties39.setOutputDir("hi!");
        int int43 = atomikosProperties39.getConsoleFileLimit();
        java.lang.Object obj44 = properties36.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties39);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet45 = properties36.entrySet();
        boolean boolean46 = properties13.containsValue((java.lang.Object) properties36);
        java.util.Properties properties47 = new java.util.Properties(properties36);
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties36);
        java.util.Set<java.lang.String> strSet49 = properties36.stringPropertyNames();
        java.io.InputStream inputStream50 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties36.loadFromXML(inputStream50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "tm.out" + "'", str40, "tm.out");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(objEntrySet45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strSet49);
    }

    @Test
    public void test00794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00794");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.setDefaultJtaTimeout((long) (byte) 100);
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.lang.String str5 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setTransactionManagerUniqueName("{}");
        java.lang.Class<?> wildcardClass8 = atomikosProperties0.getClass();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test00795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00795");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Collection<java.lang.Object> objCollection6 = properties3.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str8 = atomikosProperties7.getConsoleFileName();
        atomikosProperties7.setOutputDir("hi!");
        int int11 = atomikosProperties7.getConsoleFileLimit();
        java.util.Properties properties12 = atomikosProperties7.asProperties();
        boolean boolean13 = properties3.containsValue((java.lang.Object) atomikosProperties7);
        java.lang.String str14 = atomikosProperties7.getService();
        atomikosProperties7.setService("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        boolean boolean17 = atomikosProperties7.isEnableLogging();
        atomikosProperties7.setTransactionManagerUniqueName("tm.out");
        atomikosProperties7.setService("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tm.out" + "'", str8, "tm.out");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test00796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00796");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties1.elements();
        java.util.Properties properties5 = new java.util.Properties(properties1);
        java.util.Properties properties6 = new java.util.Properties(properties1);
        java.lang.Object obj7 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean8 = properties6.containsKey(obj7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objEnumeration4);
    }

    @Test
    public void test00797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00797");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Set<java.lang.Object> objSet4 = properties1.keySet();
        java.util.Properties properties5 = null;
        java.util.Properties properties6 = new java.util.Properties(properties5);
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Properties properties8 = new java.util.Properties(properties7);
        properties8.clear();
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.getConsoleFileName();
        atomikosProperties12.setOutputDir("hi!");
        int int16 = atomikosProperties12.getConsoleFileLimit();
        java.util.Properties properties17 = atomikosProperties12.asProperties();
        boolean boolean18 = properties8.containsValue((java.lang.Object) atomikosProperties12);
        boolean boolean19 = properties8.isEmpty();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Properties properties21 = new java.util.Properties(properties1);
        java.util.Enumeration<java.lang.Object> objEnumeration22 = properties1.keys();
        java.util.Properties properties23 = new java.util.Properties(properties1);
        java.util.Properties properties24 = null;
        java.util.Properties properties25 = new java.util.Properties(properties24);
        java.util.Properties properties26 = new java.util.Properties();
        java.util.Properties properties27 = new java.util.Properties(properties26);
        properties27.clear();
        properties25.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties27);
        java.lang.Object obj32 = properties27.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Properties properties33 = new java.util.Properties();
        java.util.Properties properties34 = new java.util.Properties(properties33);
        properties34.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str38 = atomikosProperties37.getConsoleFileName();
        atomikosProperties37.setOutputDir("hi!");
        int int41 = atomikosProperties37.getConsoleFileLimit();
        java.lang.Object obj42 = properties34.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties37);
        atomikosProperties37.setLogBaseName("tm.out");
        boolean boolean45 = properties27.containsKey((java.lang.Object) "tm.out");
        java.util.Properties properties46 = null;
        java.util.Properties properties47 = new java.util.Properties(properties46);
        java.util.Properties properties48 = new java.util.Properties();
        java.util.Properties properties49 = new java.util.Properties(properties48);
        properties49.clear();
        properties47.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties49);
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties47);
        java.util.Properties properties53 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str55 = atomikosProperties54.getConsoleFileName();
        java.lang.Object obj57 = properties53.put((java.lang.Object) atomikosProperties54, (java.lang.Object) 0L);
        java.lang.Object obj60 = properties53.setProperty("", "");
        java.util.Properties properties61 = new java.util.Properties(properties53);
        java.lang.Object obj62 = properties61.clone();
        properties47.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties61);
        java.util.Properties properties64 = new java.util.Properties(properties47);
        boolean boolean65 = properties1.equals((java.lang.Object) properties47);
        java.util.Map<java.lang.Object, java.lang.Object> objMap66 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.putAll(objMap66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objSet4);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tm.out" + "'", str13, "tm.out");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objEnumeration22);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tm.out" + "'", str38, "tm.out");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "tm.out" + "'", str55, "tm.out");
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "{}");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test00798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00798");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        atomikosProperties1.setOutputDir("hi!");
        int int5 = atomikosProperties1.getConsoleFileLimit();
        java.util.Properties properties6 = atomikosProperties1.asProperties();
        java.lang.String str7 = atomikosProperties1.getService();
        atomikosProperties1.setService("hi!");
        java.lang.Object obj11 = properties0.putIfAbsent((java.lang.Object) "hi!", (java.lang.Object) 10L);
        java.util.Properties properties12 = new java.util.Properties(properties0);
        java.io.PrintStream printStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties12.list(printStream13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test00799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00799");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getTransactionManagerUniqueName();
        boolean boolean2 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setAllowSubTransactions(false);
        atomikosProperties0.setLogBaseName("");
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.io.OutputStream outputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties7.storeToXML(outputStream9, "{hi!=10}", "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(properties7);
    }

    @Test
    public void test00800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00800");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.io.OutputStream outputStream3 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.storeToXML(outputStream3, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=100}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00801");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties3.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet9 = properties3.stringPropertyNames();
        java.lang.Object obj10 = new java.lang.Object();
        java.lang.Object obj11 = properties3.get(obj10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.getConsoleFileName();
        atomikosProperties12.setOutputDir("hi!");
        int int16 = atomikosProperties12.getConsoleFileLimit();
        java.util.Properties properties17 = atomikosProperties12.asProperties();
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Properties properties19 = new java.util.Properties(properties18);
        properties19.clear();
        properties17.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties19);
        java.util.Properties properties22 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str24 = atomikosProperties23.getConsoleFileName();
        java.lang.Object obj26 = properties22.put((java.lang.Object) atomikosProperties23, (java.lang.Object) 0L);
        java.lang.Object obj29 = properties22.setProperty("", "");
        java.util.Properties properties30 = new java.util.Properties(properties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str32 = atomikosProperties31.getConsoleFileName();
        atomikosProperties31.setOutputDir("hi!");
        int int35 = atomikosProperties31.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel36 = atomikosProperties31.getConsoleLogLevel();
        java.lang.Object obj37 = properties17.getOrDefault((java.lang.Object) properties22, (java.lang.Object) atomikosProperties31);
        java.util.Properties properties38 = null;
        java.util.Properties properties39 = new java.util.Properties(properties38);
        java.util.Properties properties40 = new java.util.Properties();
        java.util.Properties properties41 = new java.util.Properties(properties40);
        properties41.clear();
        properties39.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties41);
        java.util.Collection<java.lang.Object> objCollection44 = properties41.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str46 = atomikosProperties45.getConsoleFileName();
        atomikosProperties45.setOutputDir("hi!");
        int int49 = atomikosProperties45.getConsoleFileLimit();
        java.util.Properties properties50 = atomikosProperties45.asProperties();
        boolean boolean51 = properties41.containsValue((java.lang.Object) atomikosProperties45);
        java.util.Enumeration<java.lang.Object> objEnumeration52 = properties41.elements();
        java.util.Enumeration<java.lang.Object> objEnumeration53 = properties41.elements();
        java.lang.Object obj54 = properties3.putIfAbsent((java.lang.Object) atomikosProperties31, (java.lang.Object) properties41);
        java.lang.Object obj55 = null;
        boolean boolean56 = properties41.equals(obj55);
        java.util.Properties properties57 = null;
        java.util.Properties properties58 = new java.util.Properties(properties57);
        java.util.Properties properties59 = new java.util.Properties();
        java.util.Properties properties60 = new java.util.Properties(properties59);
        properties60.clear();
        properties58.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties60);
        java.util.Collection<java.lang.Object> objCollection63 = properties60.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str65 = atomikosProperties64.getConsoleFileName();
        atomikosProperties64.setOutputDir("hi!");
        int int68 = atomikosProperties64.getConsoleFileLimit();
        java.util.Properties properties69 = atomikosProperties64.asProperties();
        boolean boolean70 = properties60.containsValue((java.lang.Object) atomikosProperties64);
        int int71 = atomikosProperties64.getConsoleFileLimit();
        java.lang.String str72 = atomikosProperties64.getService();
        java.util.Properties properties73 = null;
        java.util.Properties properties74 = new java.util.Properties(properties73);
        boolean boolean76 = properties74.containsValue((java.lang.Object) 10L);
        java.util.Collection<java.lang.Object> objCollection77 = properties74.values();
        java.util.Set<java.lang.Object> objSet78 = properties74.keySet();
        java.lang.Object obj79 = properties41.putIfAbsent((java.lang.Object) atomikosProperties64, (java.lang.Object) properties74);
        java.util.Properties properties80 = new java.util.Properties(properties74);
        java.io.Reader reader81 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties80.load(reader81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tm.out" + "'", str13, "tm.out");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tm.out" + "'", str24, "tm.out");
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tm.out" + "'", str32, "tm.out");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel36 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel36.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(objCollection44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "tm.out" + "'", str46, "tm.out");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objEnumeration52);
        org.junit.Assert.assertNotNull(objEnumeration53);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objCollection63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "tm.out" + "'", str65, "tm.out");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(properties69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(objCollection77);
        org.junit.Assert.assertNotNull(objSet78);
        org.junit.Assert.assertNull(obj79);
    }

    @Test
    public void test00802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00802");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setConsoleFileCount(100);
        atomikosProperties6.setAllowSubTransactions(true);
        boolean boolean11 = atomikosProperties6.isForceShutdownOnVmExit();
        boolean boolean12 = properties5.contains((java.lang.Object) atomikosProperties6);
        java.util.Properties properties13 = new java.util.Properties();
        java.util.Properties properties14 = new java.util.Properties(properties13);
        properties14.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.getConsoleFileName();
        atomikosProperties17.setOutputDir("hi!");
        int int21 = atomikosProperties17.getConsoleFileLimit();
        java.lang.Object obj22 = properties14.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties17);
        boolean boolean23 = atomikosProperties17.isForceShutdownOnVmExit();
        atomikosProperties17.setConsoleFileName("");
        java.lang.String str26 = atomikosProperties17.getService();
        atomikosProperties17.setTransactionManagerUniqueName("");
        java.lang.Object obj29 = properties5.get((java.lang.Object) "");
        java.io.OutputStream outputStream30 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.store(outputStream30, "{hi!=10}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tm.out" + "'", str18, "tm.out");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj29);
    }

    @Test
    public void test00803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00803");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        java.lang.Object obj7 = properties0.get((java.lang.Object) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass8 = obj7.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test00804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00804");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties1.elements();
        java.util.Properties properties5 = new java.util.Properties(properties1);
        java.util.Enumeration<?> wildcardEnumeration6 = properties1.propertyNames();
        java.util.Enumeration<?> wildcardEnumeration7 = properties1.propertyNames();
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties1.elements();
        java.lang.Class<?> wildcardClass9 = properties1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(wildcardEnumeration6);
        org.junit.Assert.assertNotNull(wildcardEnumeration7);
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test00805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00805");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Collection<java.lang.Object> objCollection6 = properties3.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str8 = atomikosProperties7.getConsoleFileName();
        atomikosProperties7.setOutputDir("hi!");
        int int11 = atomikosProperties7.getConsoleFileLimit();
        java.util.Properties properties12 = atomikosProperties7.asProperties();
        boolean boolean13 = properties3.containsValue((java.lang.Object) atomikosProperties7);
        java.lang.String str14 = atomikosProperties7.getService();
        atomikosProperties7.setLogBaseName("tm.out");
        atomikosProperties7.setThreadedTwoPhaseCommit(false);
        atomikosProperties7.setService("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=100}");
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tm.out" + "'", str8, "tm.out");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test00806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00806");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.util.Properties properties28 = new java.util.Properties();
        java.util.Properties properties29 = new java.util.Properties(properties28);
        properties29.clear();
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        java.lang.Object obj32 = properties3.get((java.lang.Object) properties29);
        properties29.clear();
        java.util.Properties properties34 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str36 = atomikosProperties35.getConsoleFileName();
        java.lang.Object obj38 = properties34.put((java.lang.Object) atomikosProperties35, (java.lang.Object) 0L);
        java.util.Properties properties39 = new java.util.Properties(properties34);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties40.setConsoleFileCount((-1));
        atomikosProperties40.setTransactionManagerUniqueName("tm.out");
        java.lang.Object obj45 = properties34.remove((java.lang.Object) atomikosProperties40);
        boolean boolean46 = atomikosProperties40.isForceShutdownOnVmExit();
        java.lang.Object obj48 = properties29.putIfAbsent((java.lang.Object) boolean46, (java.lang.Object) 500L);
        java.util.Properties properties49 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection50 = properties49.values();
        java.util.Properties properties51 = new java.util.Properties(properties49);
        java.util.Enumeration<java.lang.Object> objEnumeration52 = properties49.keys();
        boolean boolean53 = properties29.containsValue((java.lang.Object) properties49);
        java.util.Properties properties54 = new java.util.Properties(properties49);
        java.util.Properties properties55 = new java.util.Properties(properties54);
        java.io.PrintStream printStream56 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties54.list(printStream56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tm.out" + "'", str36, "tm.out");
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(objCollection50);
        org.junit.Assert.assertNotNull(objEnumeration52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test00807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00807");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties1.setProperty("", "hi!");
        java.util.Properties properties9 = new java.util.Properties(properties1);
        java.util.Properties properties10 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.getConsoleFileName();
        java.lang.Object obj14 = properties10.put((java.lang.Object) atomikosProperties11, (java.lang.Object) 0L);
        java.util.Properties properties15 = new java.util.Properties(properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setConsoleFileCount((-1));
        atomikosProperties16.setTransactionManagerUniqueName("tm.out");
        java.lang.Object obj21 = properties10.remove((java.lang.Object) atomikosProperties16);
        boolean boolean22 = atomikosProperties16.isForceShutdownOnVmExit();
        java.util.Properties properties23 = atomikosProperties16.asProperties();
        java.lang.String str24 = properties23.toString();
        boolean boolean25 = properties9.containsKey((java.lang.Object) properties23);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setConsoleFileCount(100);
        int int29 = atomikosProperties26.getConsoleFileCount();
        atomikosProperties26.setOutputDir("");
        java.lang.String str32 = atomikosProperties26.getConsoleFileName();
        boolean boolean33 = atomikosProperties26.isEnableLogging();
        java.util.Properties properties34 = atomikosProperties26.asProperties();
        java.util.Enumeration<java.lang.Object> objEnumeration35 = properties34.elements();
        boolean boolean36 = properties9.containsValue((java.lang.Object) properties34);
        java.io.Writer writer37 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties9.store(writer37, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tm.out" + "'", str12, "tm.out");
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(properties23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str24, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tm.out" + "'", str32, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertNotNull(objEnumeration35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test00808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00808");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties1.setProperty("tm.out", "");
        java.lang.String str9 = properties1.toString();
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{tm.out=}" + "'", str9, "{tm.out=}");
    }

    @Test
    public void test00809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00809");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        java.lang.Object obj7 = properties0.get((java.lang.Object) 1);
        java.lang.String str8 = properties0.toString();
        java.lang.Object obj9 = null;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str11 = atomikosProperties10.getConsoleFileName();
        atomikosProperties10.setOutputDir("hi!");
        int int14 = atomikosProperties10.getConsoleFileLimit();
        java.util.Properties properties15 = atomikosProperties10.asProperties();
        java.lang.String str16 = atomikosProperties10.getService();
        java.lang.String str17 = atomikosProperties10.getLogBaseName();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj18 = properties0.getOrDefault(obj9, (java.lang.Object) str17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tm.out" + "'", str11, "tm.out");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
    }

    @Test
    public void test00810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00810");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        java.lang.Object obj6 = properties0.clone();
        java.util.Set<java.lang.Object> objSet7 = properties0.keySet();
        java.util.Properties properties8 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties9.setConsoleFileCount(100);
        int int12 = atomikosProperties9.getConsoleFileCount();
        atomikosProperties9.setOutputDir("");
        java.lang.String str15 = atomikosProperties9.getConsoleFileName();
        boolean boolean16 = atomikosProperties9.isEnableLogging();
        java.util.Properties properties17 = atomikosProperties9.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setConsoleFileCount((-1));
        atomikosProperties18.setConsoleFileName("");
        atomikosProperties18.setDefaultJtaTimeout((long) '4');
        java.lang.Object obj25 = properties8.replace((java.lang.Object) properties17, (java.lang.Object) atomikosProperties18);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str27 = atomikosProperties26.getTransactionManagerUniqueName();
        boolean boolean28 = atomikosProperties26.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.getConsoleFileName();
        atomikosProperties29.setOutputDir("hi!");
        int int33 = atomikosProperties29.getConsoleFileLimit();
        java.util.Properties properties34 = atomikosProperties29.asProperties();
        java.util.Set<java.lang.String> strSet35 = properties34.stringPropertyNames();
        java.util.Properties properties36 = new java.util.Properties(properties34);
        int int37 = properties36.size();
        java.util.Properties properties38 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection39 = properties38.values();
        java.util.Properties properties40 = null;
        java.util.Properties properties41 = new java.util.Properties(properties40);
        java.util.Properties properties42 = new java.util.Properties();
        java.util.Properties properties43 = new java.util.Properties(properties42);
        properties43.clear();
        properties41.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties43);
        java.lang.Object obj48 = properties41.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties38.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties41);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties50.setConsoleFileCount((-1));
        java.lang.String str53 = atomikosProperties50.getOutputDir();
        atomikosProperties50.setLogBaseName("tm.out");
        boolean boolean56 = properties41.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties57.setConsoleFileCount(100);
        atomikosProperties57.setAllowSubTransactions(true);
        java.lang.Object obj62 = properties41.remove((java.lang.Object) atomikosProperties57);
        atomikosProperties57.setAllowSubTransactions(false);
        boolean boolean65 = properties36.containsKey((java.lang.Object) atomikosProperties57);
        java.lang.Object obj66 = properties17.getOrDefault((java.lang.Object) boolean28, (java.lang.Object) boolean65);
        java.io.PrintStream printStream67 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties17.list(printStream67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tm.out" + "'", str15, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "tm.out" + "'", str30, "tm.out");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(objCollection39);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + obj66 + "' != '" + false + "'", obj66, false);
    }

    @Test
    public void test00811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00811");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        boolean boolean4 = properties2.isEmpty();
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection6 = properties5.values();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        properties10.clear();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.lang.Object obj15 = properties8.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        boolean boolean20 = properties18.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties18.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet22 = properties18.entrySet();
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection24 = properties23.values();
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        java.util.Properties properties27 = new java.util.Properties();
        java.util.Properties properties28 = new java.util.Properties(properties27);
        properties28.clear();
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        java.lang.Object obj33 = properties26.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setConsoleFileCount((-1));
        java.lang.String str38 = atomikosProperties35.getOutputDir();
        atomikosProperties35.setLogBaseName("tm.out");
        boolean boolean41 = properties26.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties42.setConsoleFileCount(100);
        atomikosProperties42.setAllowSubTransactions(true);
        java.lang.Object obj47 = properties26.remove((java.lang.Object) atomikosProperties42);
        java.util.Set<java.lang.Object> objSet48 = properties26.keySet();
        boolean boolean49 = properties2.replace((java.lang.Object) properties8, (java.lang.Object) objEntrySet22, (java.lang.Object) properties26);
        java.lang.Object obj52 = properties8.setProperty("hi!", "hi!");
        java.io.OutputStream outputStream53 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.save(outputStream53, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=hi!, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNotNull(objEntrySet22);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(objSet48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(obj52);
    }

    @Test
    public void test00812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00812");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        java.lang.String str2 = atomikosProperties0.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str4 = atomikosProperties3.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = atomikosProperties3.getConsoleLogLevel();
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        atomikosProperties0.setForceShutdownOnVmExit(false);
        java.lang.String str9 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.setDefaultJtaTimeout((long) (byte) -1);
        atomikosProperties0.setForceShutdownOnVmExit(false);
        int int14 = atomikosProperties0.getConsoleFileCount();
        boolean boolean15 = atomikosProperties0.isForceShutdownOnVmExit();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tm.out" + "'", str4, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel5 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel5.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test00813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00813");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties1.setProperty("", "hi!");
        java.util.Set<java.lang.Object> objSet9 = properties1.keySet();
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties1.elements();
        boolean boolean11 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.getConsoleFileName();
        atomikosProperties12.setOutputDir("hi!");
        int int16 = atomikosProperties12.getConsoleFileLimit();
        java.util.Properties properties17 = atomikosProperties12.asProperties();
        java.util.Properties properties18 = null;
        java.util.Properties properties19 = new java.util.Properties(properties18);
        java.util.Properties properties20 = new java.util.Properties();
        java.util.Properties properties21 = new java.util.Properties(properties20);
        properties21.clear();
        properties19.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.lang.Object obj26 = properties21.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        boolean boolean27 = properties17.equals(obj26);
        java.util.Collection<java.lang.Object> objCollection28 = properties17.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet29 = properties17.entrySet();
        java.lang.Object obj30 = null;
        java.util.Properties properties31 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str33 = atomikosProperties32.getConsoleFileName();
        java.lang.Object obj35 = properties31.put((java.lang.Object) atomikosProperties32, (java.lang.Object) 0L);
        atomikosProperties32.setThreadedTwoPhaseCommit(false);
        atomikosProperties32.setConsoleFileLimit((int) ' ');
        java.lang.String str40 = atomikosProperties32.getTransactionManagerUniqueName();
        java.util.Properties properties41 = atomikosProperties32.asProperties();
        java.lang.String str42 = properties41.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str44 = atomikosProperties43.getConsoleFileName();
        atomikosProperties43.setOutputDir("hi!");
        int int47 = atomikosProperties43.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel48 = atomikosProperties43.getConsoleLogLevel();
        atomikosProperties43.setDefaultJtaTimeout((long) (byte) 100);
        atomikosProperties43.setMaxTimeout(0L);
        boolean boolean53 = properties41.contains((java.lang.Object) 0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties54.setConsoleFileCount(100);
        atomikosProperties54.setAllowSubTransactions(true);
        java.lang.String str59 = atomikosProperties54.getConsoleFileName();
        java.util.Properties properties60 = atomikosProperties54.asProperties();
        boolean boolean61 = properties60.isEmpty();
        java.util.Set<java.lang.String> strSet62 = properties60.stringPropertyNames();
        properties41.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties60);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean64 = properties1.replace((java.lang.Object) properties17, obj30, (java.lang.Object) properties60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objSet9);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tm.out" + "'", str13, "tm.out");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objCollection28);
        org.junit.Assert.assertNotNull(objEntrySet29);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tm.out" + "'", str33, "tm.out");
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(properties41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=32, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str42, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=32, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "tm.out" + "'", str44, "tm.out");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel48 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel48.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "tm.out" + "'", str59, "tm.out");
        org.junit.Assert.assertNotNull(properties60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strSet62);
    }

    @Test
    public void test00814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00814");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties8.getConsoleLogLevel();
        java.lang.Object obj14 = properties1.putIfAbsent((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosLoggingLevel13);
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.Object obj17 = properties15.get((java.lang.Object) (byte) -1);
        java.util.Properties properties18 = new java.util.Properties(properties15);
        boolean boolean19 = properties1.equals((java.lang.Object) properties15);
        java.util.Properties properties20 = new java.util.Properties();
        java.util.Properties properties21 = new java.util.Properties(properties20);
        properties21.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str25 = atomikosProperties24.getConsoleFileName();
        atomikosProperties24.setOutputDir("hi!");
        int int28 = atomikosProperties24.getConsoleFileLimit();
        java.lang.Object obj29 = properties21.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties24);
        boolean boolean30 = atomikosProperties24.isForceShutdownOnVmExit();
        atomikosProperties24.setConsoleFileName("");
        java.lang.String str33 = atomikosProperties24.getService();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery34 = atomikosProperties24.getRecovery();
        long long35 = recovery34.getDelay();
        boolean boolean36 = properties15.containsValue((java.lang.Object) recovery34);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties37.setConsoleFileCount(100);
        atomikosProperties37.setAllowSubTransactions(true);
        boolean boolean42 = atomikosProperties37.isAllowSubTransactions();
        int int43 = atomikosProperties37.getConsoleFileLimit();
        java.lang.String str44 = atomikosProperties37.getTransactionManagerUniqueName();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj45 = properties15.get((java.lang.Object) str44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "tm.out" + "'", str25, "tm.out");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(recovery34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10000L + "'", long35 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test00815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00815");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        java.lang.String str3 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseName("tm.out");
        atomikosProperties0.setForceShutdownOnVmExit(true);
        int int8 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        java.lang.String str11 = atomikosProperties0.getTransactionManagerUniqueName();
        boolean boolean12 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.setService("{hi!=10}");
        java.lang.String str15 = atomikosProperties0.getLogBaseName();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tm.out" + "'", str15, "tm.out");
    }

    @Test
    public void test00816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00816");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties8.getConsoleLogLevel();
        java.lang.Object obj14 = properties1.putIfAbsent((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosLoggingLevel13);
        boolean boolean15 = atomikosProperties4.isSerialJtaTransactions();
        atomikosProperties4.setService("");
        boolean boolean18 = atomikosProperties4.isAllowSubTransactions();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test00817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00817");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties3.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet9 = properties3.stringPropertyNames();
        java.lang.Object obj10 = new java.lang.Object();
        java.lang.Object obj11 = properties3.get(obj10);
        java.util.Collection<java.lang.Object> objCollection12 = properties3.values();
        java.util.Properties properties13 = new java.util.Properties(properties3);
        java.lang.String str16 = properties13.getProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=hi!, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "{=hi!}");
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(objCollection12);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{=hi!}" + "'", str16, "{=hi!}");
    }

    @Test
    public void test00818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00818");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        boolean boolean10 = atomikosProperties4.isForceShutdownOnVmExit();
        atomikosProperties4.setConsoleFileName("");
        java.lang.String str13 = atomikosProperties4.getService();
        boolean boolean14 = atomikosProperties4.isEnableLogging();
        int int15 = atomikosProperties4.getMaxActives();
        long long16 = atomikosProperties4.getMaxTimeout();
        atomikosProperties4.setMaxActives(50);
        java.lang.Class<?> wildcardClass19 = atomikosProperties4.getClass();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 50 + "'", int15 == 50);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 300000L + "'", long16 == 300000L);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test00819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00819");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.lang.Object obj4 = properties0.setProperty("hi!", "");
        java.util.Properties properties5 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.getConsoleFileName();
        java.lang.Object obj9 = properties5.put((java.lang.Object) atomikosProperties6, (java.lang.Object) 0L);
        java.lang.Object obj12 = properties5.setProperty("", "");
        java.util.Properties properties13 = new java.util.Properties(properties5);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties13);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties15.setConsoleFileCount(100);
        atomikosProperties15.setAllowSubTransactions(true);
        atomikosProperties15.setTransactionManagerUniqueName("tm.out");
        java.lang.Object obj22 = properties13.remove((java.lang.Object) "tm.out");
        java.io.PrintWriter printWriter23 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties13.list(printWriter23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tm.out" + "'", str7, "tm.out");
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj22);
    }

    @Test
    public void test00820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00820");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet6 = properties5.stringPropertyNames();
        java.util.Properties properties7 = new java.util.Properties(properties5);
        int int8 = properties7.size();
        java.io.Reader reader9 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties7.load(reader9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test00821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00821");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Set<java.lang.Object> objSet4 = properties1.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.getConsoleFileName();
        atomikosProperties5.setOutputDir("hi!");
        int int9 = atomikosProperties5.getConsoleFileLimit();
        java.util.Properties properties10 = atomikosProperties5.asProperties();
        java.lang.String str11 = atomikosProperties5.getService();
        int int12 = atomikosProperties5.getMaxActives();
        boolean boolean13 = properties1.equals((java.lang.Object) atomikosProperties5);
        int int14 = atomikosProperties5.getConsoleFileCount();
        java.util.Properties properties15 = atomikosProperties5.asProperties();
        java.util.Properties properties16 = atomikosProperties5.asProperties();
        java.util.Properties properties17 = atomikosProperties5.asProperties();
        java.util.Properties properties18 = new java.util.Properties(properties17);
        properties18.clear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objSet4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tm.out" + "'", str6, "tm.out");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertNotNull(properties17);
    }

    @Test
    public void test00822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00822");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setConsoleFileCount(100);
        atomikosProperties6.setAllowSubTransactions(true);
        boolean boolean11 = atomikosProperties6.isForceShutdownOnVmExit();
        boolean boolean12 = properties5.contains((java.lang.Object) atomikosProperties6);
        java.util.Properties properties13 = new java.util.Properties();
        java.util.Properties properties14 = new java.util.Properties(properties13);
        properties14.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.getConsoleFileName();
        atomikosProperties17.setOutputDir("hi!");
        int int21 = atomikosProperties17.getConsoleFileLimit();
        java.lang.Object obj22 = properties14.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties17);
        boolean boolean23 = atomikosProperties17.isForceShutdownOnVmExit();
        atomikosProperties17.setConsoleFileName("");
        java.lang.String str26 = atomikosProperties17.getService();
        atomikosProperties17.setTransactionManagerUniqueName("");
        java.lang.Object obj29 = properties5.get((java.lang.Object) "");
        java.util.Properties properties30 = new java.util.Properties();
        java.util.Properties properties31 = new java.util.Properties(properties30);
        int int32 = properties31.size();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties31);
        java.lang.String str36 = properties5.getProperty("{tm.out=}", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tm.out" + "'", str18, "tm.out");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str36, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
    }

    @Test
    public void test00823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00823");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Properties properties8 = new java.util.Properties();
        java.util.Properties properties9 = new java.util.Properties(properties8);
        properties9.clear();
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        java.lang.Object obj14 = properties9.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        boolean boolean15 = properties5.equals(obj14);
        java.util.Collection<java.lang.Object> objCollection16 = properties5.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.getConsoleFileName();
        atomikosProperties17.setOutputDir("hi!");
        int int21 = atomikosProperties17.getConsoleFileLimit();
        java.util.Properties properties22 = atomikosProperties17.asProperties();
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Properties properties24 = new java.util.Properties(properties23);
        properties24.clear();
        properties22.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.setConsoleFileCount((-1));
        java.lang.String str30 = atomikosProperties27.getOutputDir();
        atomikosProperties27.setLogBaseName("tm.out");
        int int33 = atomikosProperties27.getMaxActives();
        boolean boolean34 = properties5.remove((java.lang.Object) properties22, (java.lang.Object) int33);
        java.util.Properties properties35 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.getConsoleFileName();
        java.lang.Object obj39 = properties35.put((java.lang.Object) atomikosProperties36, (java.lang.Object) 0L);
        java.util.Properties properties40 = new java.util.Properties(properties35);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties41.setConsoleFileCount((-1));
        atomikosProperties41.setTransactionManagerUniqueName("tm.out");
        java.lang.Object obj46 = properties35.remove((java.lang.Object) atomikosProperties41);
        boolean boolean47 = atomikosProperties41.isForceShutdownOnVmExit();
        java.util.Properties properties48 = atomikosProperties41.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties49.setConsoleFileCount(100);
        atomikosProperties49.setAllowSubTransactions(true);
        boolean boolean54 = atomikosProperties49.isForceShutdownOnVmExit();
        int int55 = atomikosProperties49.getConsoleFileCount();
        java.util.Properties properties56 = atomikosProperties49.asProperties();
        java.lang.Object obj57 = properties22.putIfAbsent((java.lang.Object) atomikosProperties41, (java.lang.Object) properties56);
        java.util.Set<java.lang.Object> objSet58 = properties56.keySet();
        java.io.OutputStream outputStream59 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties56.storeToXML(outputStream59, "{hi!=}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tm.out" + "'", str18, "tm.out");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tm.out" + "'", str37, "tm.out");
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(properties48);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 100 + "'", int55 == 100);
        org.junit.Assert.assertNotNull(properties56);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNotNull(objSet58);
    }

    @Test
    public void test00824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00824");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties1.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.getConsoleFileName();
        long long7 = atomikosProperties5.getMaxTimeout();
        java.util.Properties properties8 = atomikosProperties5.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long10 = recovery9.getForgetOrphanedLogEntriesDelay();
        recovery9.setDelay((long) (short) 1);
        recovery9.setRetryInterval(100L);
        boolean boolean15 = properties8.containsValue((java.lang.Object) 100L);
        java.lang.Object obj16 = properties1.remove((java.lang.Object) properties8);
        java.util.Properties properties17 = new java.util.Properties(properties1);
        java.lang.String str20 = properties1.getProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "tm.out");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tm.out" + "'", str6, "tm.out");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 86400000L + "'", long10 == 86400000L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tm.out" + "'", str20, "tm.out");
    }

    @Test
    public void test00825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00825");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        int int3 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setOutputDir("");
        java.lang.String str6 = atomikosProperties0.getConsoleFileName();
        int int7 = atomikosProperties0.getConsoleFileCount();
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.setCheckpointInterval((long) (short) 10);
        atomikosProperties0.setDefaultJtaTimeout((long) (byte) -1);
        atomikosProperties0.setLogBaseDir("");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tm.out" + "'", str6, "tm.out");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test00826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00826");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int1 = recovery0.getMaxRetries();
        recovery0.setForgetOrphanedLogEntriesDelay((long) (short) -1);
        recovery0.setMaxRetries((int) '4');
        recovery0.setMaxRetries((int) '#');
        recovery0.setMaxRetries((int) (byte) -1);
        long long10 = recovery0.getForgetOrphanedLogEntriesDelay();
        int int11 = recovery0.getMaxRetries();
        recovery0.setRetryInterval(0L);
        recovery0.setForgetOrphanedLogEntriesDelay(97L);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 5 + "'", int1 == 5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test00827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00827");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        atomikosProperties1.setThreadedTwoPhaseCommit(false);
        atomikosProperties1.setConsoleFileLimit((int) ' ');
        atomikosProperties1.setLogBaseName("");
        java.util.Properties properties11 = atomikosProperties1.asProperties();
        java.lang.Class<?> wildcardClass12 = atomikosProperties1.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test00828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00828");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Set<java.lang.Object> objSet12 = properties3.keySet();
        java.util.Properties properties13 = null;
        java.util.Properties properties14 = new java.util.Properties(properties13);
        boolean boolean16 = properties14.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.getTransactionManagerUniqueName();
        atomikosProperties17.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.getConsoleFileName();
        atomikosProperties21.setOutputDir("hi!");
        int int25 = atomikosProperties21.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel26 = atomikosProperties21.getConsoleLogLevel();
        java.lang.Object obj27 = properties14.putIfAbsent((java.lang.Object) atomikosProperties17, (java.lang.Object) atomikosLoggingLevel26);
        java.util.Properties properties28 = new java.util.Properties();
        java.lang.Object obj30 = properties28.get((java.lang.Object) (byte) -1);
        java.util.Properties properties31 = new java.util.Properties(properties28);
        boolean boolean32 = properties14.equals((java.lang.Object) properties28);
        java.lang.Object obj33 = properties3.get((java.lang.Object) boolean32);
        java.util.Set<java.lang.Object> objSet34 = properties3.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str36 = atomikosProperties35.getConsoleFileName();
        atomikosProperties35.setOutputDir("hi!");
        int int39 = atomikosProperties35.getConsoleFileLimit();
        java.lang.String str40 = atomikosProperties35.getService();
        boolean boolean41 = atomikosProperties35.isThreadedTwoPhaseCommit();
        java.lang.String str42 = atomikosProperties35.getTransactionManagerUniqueName();
        java.lang.String str43 = atomikosProperties35.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str45 = atomikosProperties44.getConsoleFileName();
        atomikosProperties44.setOutputDir("hi!");
        int int48 = atomikosProperties44.getConsoleFileLimit();
        java.util.Properties properties49 = atomikosProperties44.asProperties();
        java.util.Properties properties50 = null;
        java.util.Properties properties51 = new java.util.Properties(properties50);
        java.util.Properties properties52 = new java.util.Properties();
        java.util.Properties properties53 = new java.util.Properties(properties52);
        properties53.clear();
        properties51.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties53);
        java.lang.Object obj58 = properties53.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        boolean boolean59 = properties49.equals(obj58);
        java.util.Collection<java.lang.Object> objCollection60 = properties49.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str62 = atomikosProperties61.getConsoleFileName();
        atomikosProperties61.setOutputDir("hi!");
        int int65 = atomikosProperties61.getConsoleFileLimit();
        java.util.Properties properties66 = atomikosProperties61.asProperties();
        java.util.Properties properties67 = new java.util.Properties();
        java.util.Properties properties68 = new java.util.Properties(properties67);
        properties68.clear();
        properties66.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties68);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties71.setConsoleFileCount((-1));
        java.lang.String str74 = atomikosProperties71.getOutputDir();
        atomikosProperties71.setLogBaseName("tm.out");
        int int77 = atomikosProperties71.getMaxActives();
        boolean boolean78 = properties49.remove((java.lang.Object) properties66, (java.lang.Object) int77);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties79 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str80 = atomikosProperties79.getConsoleFileName();
        atomikosProperties79.setOutputDir("hi!");
        int int83 = atomikosProperties79.getConsoleFileLimit();
        atomikosProperties79.setDefaultJtaTimeout(1L);
        atomikosProperties79.setForceShutdownOnVmExit(false);
        boolean boolean88 = atomikosProperties79.isForceShutdownOnVmExit();
        int int89 = atomikosProperties79.getConsoleFileLimit();
        long long90 = atomikosProperties79.getMaxTimeout();
        java.lang.Object obj91 = properties66.get((java.lang.Object) atomikosProperties79);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean92 = properties3.remove((java.lang.Object) str43, (java.lang.Object) atomikosProperties79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(objSet12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tm.out" + "'", str22, "tm.out");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel26 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel26.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(objSet34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tm.out" + "'", str36, "tm.out");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "tm.out" + "'", str45, "tm.out");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(properties49);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(objCollection60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tm.out" + "'", str62, "tm.out");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(properties66);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 50 + "'", int77 == 50);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "tm.out" + "'", str80, "tm.out");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 300000L + "'", long90 == 300000L);
        org.junit.Assert.assertNull(obj91);
    }

    @Test
    public void test00829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00829");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int1 = recovery0.getMaxRetries();
        recovery0.setForgetOrphanedLogEntriesDelay(500L);
        long long4 = recovery0.getRetryInterval();
        recovery0.setMaxRetries((-1));
        int int7 = recovery0.getMaxRetries();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 5 + "'", int1 == 5);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test00830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00830");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int1 = recovery0.getMaxRetries();
        recovery0.setForgetOrphanedLogEntriesDelay((long) (short) -1);
        recovery0.setMaxRetries((int) '4');
        recovery0.setMaxRetries((int) '#');
        recovery0.setMaxRetries((int) (byte) -1);
        long long10 = recovery0.getForgetOrphanedLogEntriesDelay();
        int int11 = recovery0.getMaxRetries();
        recovery0.setRetryInterval(52L);
        recovery0.setDelay((long) 52);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 5 + "'", int1 == 5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test00831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00831");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties8.getConsoleLogLevel();
        java.lang.Object obj14 = properties1.putIfAbsent((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosLoggingLevel13);
        boolean boolean15 = atomikosProperties4.isSerialJtaTransactions();
        long long16 = atomikosProperties4.getDefaultJtaTimeout();
        java.lang.String str17 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tm.out" + "'", str17, "tm.out");
    }

    @Test
    public void test00832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00832");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        java.lang.String str2 = atomikosProperties0.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str4 = atomikosProperties3.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = atomikosProperties3.getConsoleLogLevel();
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        atomikosProperties0.setSerialJtaTransactions(false);
        boolean boolean10 = atomikosProperties0.isForceShutdownOnVmExit();
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.getConsoleFileName();
        atomikosProperties12.setOutputDir("hi!");
        int int16 = atomikosProperties12.getConsoleFileLimit();
        java.lang.String str17 = atomikosProperties12.getService();
        java.lang.String str18 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setOutputDir("tmlog");
        long long21 = atomikosProperties12.getMaxTimeout();
        java.lang.String str22 = atomikosProperties12.getLogBaseName();
        int int23 = atomikosProperties12.getConsoleFileCount();
        atomikosProperties12.setSerialJtaTransactions(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str27 = atomikosProperties26.getConsoleFileName();
        atomikosProperties26.setOutputDir("hi!");
        int int30 = atomikosProperties26.getConsoleFileLimit();
        boolean boolean31 = atomikosProperties26.isForceShutdownOnVmExit();
        java.lang.Object obj32 = properties11.replace((java.lang.Object) atomikosProperties12, (java.lang.Object) boolean31);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.setConsoleFileLimit((int) (byte) 10);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel36 = atomikosProperties33.getConsoleLogLevel();
        int int37 = atomikosProperties33.getMaxActives();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel38 = atomikosProperties33.getConsoleLogLevel();
        boolean boolean39 = properties11.containsValue((java.lang.Object) atomikosProperties33);
        boolean boolean40 = atomikosProperties33.isEnableLogging();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tm.out" + "'", str4, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel5 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel5.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tm.out" + "'", str13, "tm.out");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 300000L + "'", long21 == 300000L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tm.out" + "'", str27, "tm.out");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel36 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel36.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 50 + "'", int37 == 50);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel38 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel38.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test00833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00833");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        atomikosProperties4.setLogBaseName("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = atomikosProperties12.getConsoleLogLevel();
        atomikosProperties4.setConsoleLogLevel(atomikosLoggingLevel14);
        atomikosProperties4.setEnableLogging(true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tm.out" + "'", str13, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel14 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel14.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test00834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00834");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.setDelay((long) (short) 1);
        long long4 = recovery0.getRetryInterval();
        int int5 = recovery0.getMaxRetries();
        recovery0.setDelay((long) 32);
        recovery0.setForgetOrphanedLogEntriesDelay((long) (short) 10);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 86400000L + "'", long1 == 86400000L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
    }

    @Test
    public void test00835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00835");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        java.lang.String str3 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseName("tm.out");
        atomikosProperties0.setConsoleFileLimit(1);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test00836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00836");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setConsoleFileCount((-1));
        atomikosProperties6.setTransactionManagerUniqueName("tm.out");
        java.lang.Object obj11 = properties0.remove((java.lang.Object) atomikosProperties6);
        java.util.Properties properties12 = new java.util.Properties(properties0);
        java.io.Reader reader13 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties12.load(reader13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test00837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00837");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties1.keys();
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection6 = properties5.values();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        properties10.clear();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.lang.Object obj15 = properties8.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setConsoleFileCount((-1));
        java.lang.String str20 = atomikosProperties17.getOutputDir();
        atomikosProperties17.setLogBaseName("tm.out");
        boolean boolean23 = properties8.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.setConsoleFileCount(100);
        atomikosProperties24.setAllowSubTransactions(true);
        java.lang.Object obj29 = properties8.remove((java.lang.Object) atomikosProperties24);
        atomikosProperties24.setAllowSubTransactions(false);
        atomikosProperties24.setSerialJtaTransactions(true);
        boolean boolean34 = properties1.containsKey((java.lang.Object) atomikosProperties24);
        java.util.Properties properties35 = new java.util.Properties(properties1);
        java.util.Collection<java.lang.Object> objCollection36 = properties35.values();
        boolean boolean37 = properties35.isEmpty();
        java.io.InputStream inputStream38 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties35.load(inputStream38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objCollection36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test00838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00838");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.get((java.lang.Object) (byte) -1);
        java.util.Properties properties3 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        java.lang.String str6 = atomikosProperties4.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel7 = atomikosProperties4.getConsoleLogLevel();
        boolean boolean8 = properties0.equals((java.lang.Object) atomikosProperties4);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection10 = properties9.values();
        java.util.Properties properties11 = new java.util.Properties(properties9);
        java.util.Enumeration<java.lang.Object> objEnumeration12 = properties11.elements();
        boolean boolean13 = properties11.isEmpty();
        java.util.Properties properties14 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection15 = properties14.values();
        java.util.Properties properties16 = null;
        java.util.Properties properties17 = new java.util.Properties(properties16);
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Properties properties19 = new java.util.Properties(properties18);
        properties19.clear();
        properties17.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties19);
        java.lang.Object obj24 = properties17.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties14.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties17);
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        boolean boolean29 = properties27.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration30 = properties27.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet31 = properties27.entrySet();
        java.util.Properties properties32 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection33 = properties32.values();
        java.util.Properties properties34 = null;
        java.util.Properties properties35 = new java.util.Properties(properties34);
        java.util.Properties properties36 = new java.util.Properties();
        java.util.Properties properties37 = new java.util.Properties(properties36);
        properties37.clear();
        properties35.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties37);
        java.lang.Object obj42 = properties35.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties32.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties35);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setConsoleFileCount((-1));
        java.lang.String str47 = atomikosProperties44.getOutputDir();
        atomikosProperties44.setLogBaseName("tm.out");
        boolean boolean50 = properties35.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties51.setConsoleFileCount(100);
        atomikosProperties51.setAllowSubTransactions(true);
        java.lang.Object obj56 = properties35.remove((java.lang.Object) atomikosProperties51);
        java.util.Set<java.lang.Object> objSet57 = properties35.keySet();
        boolean boolean58 = properties11.replace((java.lang.Object) properties17, (java.lang.Object) objEntrySet31, (java.lang.Object) properties35);
        java.lang.String str60 = properties17.getProperty("{}");
        java.util.Properties properties61 = new java.util.Properties(properties17);
        java.util.Properties properties62 = new java.util.Properties(properties61);
        java.util.Set<java.lang.String> strSet63 = properties62.stringPropertyNames();
        boolean boolean64 = properties0.equals((java.lang.Object) properties62);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration<?> wildcardEnumeration65 = properties62.propertyNames();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Short cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel7 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel7.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(objCollection10);
        org.junit.Assert.assertNotNull(objEnumeration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objCollection15);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objEnumeration30);
        org.junit.Assert.assertNotNull(objEntrySet31);
        org.junit.Assert.assertNotNull(objCollection33);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(objSet57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test00839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00839");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet3 = properties1.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties4.setConsoleFileCount(100);
        atomikosProperties4.setAllowSubTransactions(true);
        boolean boolean9 = atomikosProperties4.isForceShutdownOnVmExit();
        int int10 = atomikosProperties4.getConsoleFileCount();
        java.util.Properties properties11 = atomikosProperties4.asProperties();
        boolean boolean12 = properties1.equals((java.lang.Object) atomikosProperties4);
        java.util.Set<java.lang.String> strSet13 = properties1.stringPropertyNames();
        java.util.Properties properties14 = new java.util.Properties();
        java.util.Properties properties15 = new java.util.Properties(properties14);
        int int16 = properties15.size();
        boolean boolean17 = properties15.isEmpty();
        java.util.Properties properties18 = new java.util.Properties(properties15);
        java.util.Properties properties19 = new java.util.Properties(properties15);
        int int20 = properties15.size();
        java.util.Properties properties21 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.getConsoleFileName();
        atomikosProperties22.setOutputDir("hi!");
        int int26 = atomikosProperties22.getConsoleFileLimit();
        java.util.Properties properties27 = atomikosProperties22.asProperties();
        java.lang.String str28 = atomikosProperties22.getService();
        atomikosProperties22.setService("hi!");
        java.lang.Object obj32 = properties21.putIfAbsent((java.lang.Object) "hi!", (java.lang.Object) 10L);
        properties15.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.util.Properties properties34 = null;
        java.util.Properties properties35 = new java.util.Properties(properties34);
        java.util.Properties properties36 = new java.util.Properties();
        java.util.Properties properties37 = new java.util.Properties(properties36);
        properties37.clear();
        properties35.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties37);
        java.lang.Object obj42 = properties37.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet43 = properties37.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setConsoleFileCount((-1));
        java.lang.String str47 = atomikosProperties44.getOutputDir();
        atomikosProperties44.setLogBaseName("tm.out");
        int int50 = atomikosProperties44.getConsoleFileCount();
        boolean boolean51 = properties37.containsKey((java.lang.Object) atomikosProperties44);
        atomikosProperties44.setConsoleFileCount((int) (byte) -1);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery54 = atomikosProperties44.getRecovery();
        java.util.Properties properties55 = null;
        java.util.Properties properties56 = new java.util.Properties(properties55);
        boolean boolean58 = properties56.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str60 = atomikosProperties59.getTransactionManagerUniqueName();
        atomikosProperties59.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str64 = atomikosProperties63.getConsoleFileName();
        atomikosProperties63.setOutputDir("hi!");
        int int67 = atomikosProperties63.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel68 = atomikosProperties63.getConsoleLogLevel();
        java.lang.Object obj69 = properties56.putIfAbsent((java.lang.Object) atomikosProperties59, (java.lang.Object) atomikosLoggingLevel68);
        java.util.Properties properties70 = new java.util.Properties();
        java.lang.Object obj72 = properties70.get((java.lang.Object) (byte) -1);
        java.util.Properties properties73 = new java.util.Properties(properties70);
        boolean boolean74 = properties56.equals((java.lang.Object) properties70);
        java.util.Enumeration<java.lang.Object> objEnumeration75 = properties56.keys();
        java.lang.Object obj76 = properties15.getOrDefault((java.lang.Object) atomikosProperties44, (java.lang.Object) properties56);
        java.lang.Object obj77 = properties1.get(obj76);
        java.lang.Object obj78 = properties1.clone();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(objEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tm.out" + "'", str23, "tm.out");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(recovery54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "tm.out" + "'", str64, "tm.out");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel68 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel68.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(objEnumeration75);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertNotNull(obj78);
        org.junit.Assert.assertEquals(obj78.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj78), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj78), "{}");
    }

    @Test
    public void test00840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00840");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        java.util.Collection<java.lang.Object> objCollection4 = properties1.values();
        java.util.Set<java.lang.Object> objSet5 = properties1.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.getConsoleFileName();
        atomikosProperties6.setOutputDir("hi!");
        int int10 = atomikosProperties6.getConsoleFileLimit();
        java.util.Properties properties11 = atomikosProperties6.asProperties();
        java.util.Properties properties12 = new java.util.Properties();
        java.util.Properties properties13 = new java.util.Properties(properties12);
        properties13.clear();
        properties11.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties13);
        java.util.Properties properties16 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.getConsoleFileName();
        java.lang.Object obj20 = properties16.put((java.lang.Object) atomikosProperties17, (java.lang.Object) 0L);
        java.lang.Object obj23 = properties16.setProperty("", "");
        java.util.Properties properties24 = new java.util.Properties(properties16);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str26 = atomikosProperties25.getConsoleFileName();
        atomikosProperties25.setOutputDir("hi!");
        int int29 = atomikosProperties25.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel30 = atomikosProperties25.getConsoleLogLevel();
        java.lang.Object obj31 = properties11.getOrDefault((java.lang.Object) properties16, (java.lang.Object) atomikosProperties25);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery32 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long33 = recovery32.getForgetOrphanedLogEntriesDelay();
        recovery32.setDelay((long) (short) 1);
        recovery32.setMaxRetries((int) (byte) 10);
        java.util.Properties properties38 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str40 = atomikosProperties39.getConsoleFileName();
        java.lang.Object obj42 = properties38.put((java.lang.Object) atomikosProperties39, (java.lang.Object) 0L);
        java.util.Properties properties43 = new java.util.Properties(properties38);
        java.util.Properties properties44 = new java.util.Properties(properties43);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties45.setConsoleFileCount(100);
        atomikosProperties45.setAllowSubTransactions(true);
        boolean boolean50 = atomikosProperties45.isAllowSubTransactions();
        int int51 = atomikosProperties45.getConsoleFileLimit();
        atomikosProperties45.setConsoleFileCount((int) (short) 0);
        boolean boolean54 = properties16.replace((java.lang.Object) (byte) 10, (java.lang.Object) properties43, (java.lang.Object) (short) 0);
        java.util.Properties properties55 = new java.util.Properties();
        java.util.Properties properties56 = new java.util.Properties(properties55);
        properties56.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str60 = atomikosProperties59.getConsoleFileName();
        atomikosProperties59.setOutputDir("hi!");
        int int63 = atomikosProperties59.getConsoleFileLimit();
        java.lang.Object obj64 = properties56.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties59);
        boolean boolean65 = atomikosProperties59.isForceShutdownOnVmExit();
        atomikosProperties59.setConsoleFileName("");
        java.lang.String str68 = atomikosProperties59.getService();
        java.util.Properties properties69 = atomikosProperties59.asProperties();
        java.lang.Object obj72 = properties69.setProperty("tmlog", "tm.out");
        java.lang.Object obj73 = properties1.putIfAbsent((java.lang.Object) boolean54, (java.lang.Object) "tmlog");
        java.io.InputStream inputStream74 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(inputStream74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNotNull(objSet5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tm.out" + "'", str7, "tm.out");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tm.out" + "'", str18, "tm.out");
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "tm.out" + "'", str26, "tm.out");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel30 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel30.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 86400000L + "'", long33 == 86400000L);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "tm.out" + "'", str40, "tm.out");
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "tm.out" + "'", str60, "tm.out");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(properties69);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertNull(obj73);
    }

    @Test
    public void test00841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00841");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties8.getConsoleLogLevel();
        java.lang.Object obj14 = properties1.putIfAbsent((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosLoggingLevel13);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.getConsoleFileName();
        atomikosProperties15.setOutputDir("hi!");
        int int19 = atomikosProperties15.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel20 = atomikosProperties15.getConsoleLogLevel();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery21 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long22 = recovery21.getForgetOrphanedLogEntriesDelay();
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Properties properties24 = new java.util.Properties(properties23);
        properties24.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.getConsoleFileName();
        atomikosProperties27.setOutputDir("hi!");
        int int31 = atomikosProperties27.getConsoleFileLimit();
        java.lang.Object obj32 = properties24.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties27);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel33 = atomikosProperties27.getConsoleLogLevel();
        java.lang.String str34 = atomikosProperties27.getTransactionManagerUniqueName();
        atomikosProperties27.setThreadedTwoPhaseCommit(false);
        boolean boolean37 = properties1.replace((java.lang.Object) atomikosProperties15, (java.lang.Object) recovery21, (java.lang.Object) false);
        recovery21.setDelay((long) '4');
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tm.out" + "'", str16, "tm.out");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel20 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel20.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 86400000L + "'", long22 == 86400000L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tm.out" + "'", str28, "tm.out");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel33 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel33.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test00842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00842");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        java.util.Properties properties26 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.getTransactionManagerUniqueName();
        boolean boolean29 = atomikosProperties27.isForceShutdownOnVmExit();
        java.util.Properties properties30 = atomikosProperties27.asProperties();
        boolean boolean31 = properties26.contains((java.lang.Object) atomikosProperties27);
        boolean boolean32 = atomikosProperties27.isForceShutdownOnVmExit();
        java.lang.String str33 = atomikosProperties27.getOutputDir();
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test00843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00843");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        atomikosProperties19.setAllowSubTransactions(false);
        int int27 = atomikosProperties19.getConsoleFileCount();
        java.util.Properties properties28 = atomikosProperties19.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel29 = atomikosProperties19.getConsoleLogLevel();
        atomikosProperties19.setDefaultJtaTimeout((long) 20);
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel29 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel29.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test00844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00844");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        java.lang.String str3 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseName("tm.out");
        atomikosProperties0.setLogBaseDir("tm.out");
        atomikosProperties0.setSerialJtaTransactions(false);
        boolean boolean10 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.setConsoleFileLimit((int) (byte) 10);
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test00845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00845");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        atomikosProperties0.setDefaultJtaTimeout(1L);
        atomikosProperties0.setForceShutdownOnVmExit(false);
        atomikosProperties0.setMaxActives(0);
        atomikosProperties0.setMaxActives((int) '#');
        atomikosProperties0.setLogBaseName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=100}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test00846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00846");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        java.lang.String str2 = atomikosProperties0.getTransactionManagerUniqueName();
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        boolean boolean4 = atomikosProperties0.isAllowSubTransactions();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test00847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00847");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties1.setProperty("", "hi!");
        java.util.Properties properties9 = new java.util.Properties(properties1);
        java.util.Properties properties10 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.getConsoleFileName();
        java.lang.Object obj14 = properties10.put((java.lang.Object) atomikosProperties11, (java.lang.Object) 0L);
        java.util.Properties properties15 = new java.util.Properties(properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setConsoleFileCount((-1));
        atomikosProperties16.setTransactionManagerUniqueName("tm.out");
        java.lang.Object obj21 = properties10.remove((java.lang.Object) atomikosProperties16);
        boolean boolean22 = atomikosProperties16.isForceShutdownOnVmExit();
        java.util.Properties properties23 = atomikosProperties16.asProperties();
        java.lang.String str24 = properties23.toString();
        boolean boolean25 = properties9.containsKey((java.lang.Object) properties23);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setConsoleFileCount(100);
        int int29 = atomikosProperties26.getConsoleFileCount();
        atomikosProperties26.setOutputDir("");
        java.lang.String str32 = atomikosProperties26.getConsoleFileName();
        boolean boolean33 = atomikosProperties26.isEnableLogging();
        java.util.Properties properties34 = atomikosProperties26.asProperties();
        java.util.Enumeration<java.lang.Object> objEnumeration35 = properties34.elements();
        boolean boolean36 = properties9.containsValue((java.lang.Object) properties34);
        java.io.OutputStream outputStream37 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties34.storeToXML(outputStream37, "{tm.out=}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tm.out" + "'", str12, "tm.out");
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(properties23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str24, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tm.out" + "'", str32, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertNotNull(objEnumeration35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test00848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00848");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.io.OutputStream outputStream2 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.save(outputStream2, "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
    }

    @Test
    public void test00849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00849");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        long long4 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setEnableLogging(false);
        int int7 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setMaxActives((int) (short) 0);
        atomikosProperties0.setDefaultJtaTimeout((long) (short) 10);
        java.util.Properties properties12 = atomikosProperties0.asProperties();
        java.lang.Object obj13 = null;
        java.util.Properties properties14 = new java.util.Properties();
        java.util.Properties properties15 = new java.util.Properties(properties14);
        int int16 = properties15.size();
        boolean boolean17 = properties15.isEmpty();
        java.util.Properties properties18 = new java.util.Properties(properties15);
        java.util.Properties properties19 = new java.util.Properties(properties15);
        int int20 = properties15.size();
        java.util.Properties properties21 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.getConsoleFileName();
        atomikosProperties22.setOutputDir("hi!");
        int int26 = atomikosProperties22.getConsoleFileLimit();
        java.util.Properties properties27 = atomikosProperties22.asProperties();
        java.lang.String str28 = atomikosProperties22.getService();
        atomikosProperties22.setService("hi!");
        java.lang.Object obj32 = properties21.putIfAbsent((java.lang.Object) "hi!", (java.lang.Object) 10L);
        properties15.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        int int34 = properties15.size();
        java.lang.String str35 = properties15.toString();
        java.util.Properties properties36 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection37 = properties36.values();
        java.util.Properties properties38 = new java.util.Properties(properties36);
        java.util.Enumeration<java.lang.Object> objEnumeration39 = properties38.elements();
        java.util.Properties properties40 = new java.util.Properties();
        java.lang.Object obj42 = properties40.get((java.lang.Object) (byte) -1);
        java.util.Enumeration<java.lang.Object> objEnumeration43 = properties40.elements();
        java.util.Properties properties44 = null;
        java.util.Properties properties45 = new java.util.Properties(properties44);
        java.util.Properties properties46 = new java.util.Properties();
        java.util.Properties properties47 = new java.util.Properties(properties46);
        properties47.clear();
        properties45.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties47);
        boolean boolean51 = properties45.equals((java.lang.Object) (-1.0d));
        java.lang.Object obj52 = properties40.remove((java.lang.Object) properties45);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet53 = properties40.entrySet();
        java.util.Properties properties54 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection55 = properties54.values();
        java.util.Properties properties56 = new java.util.Properties(properties54);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str58 = atomikosProperties57.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str60 = atomikosProperties59.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel61 = atomikosProperties59.getConsoleLogLevel();
        atomikosProperties57.setConsoleLogLevel(atomikosLoggingLevel61);
        atomikosProperties57.setSerialJtaTransactions(false);
        java.util.Properties properties65 = atomikosProperties57.asProperties();
        java.lang.Object obj66 = properties54.remove((java.lang.Object) atomikosProperties57);
        java.lang.String str67 = atomikosProperties57.getLogBaseName();
        atomikosProperties57.setEnableLogging(false);
        java.lang.Object obj70 = properties38.getOrDefault((java.lang.Object) objEntrySet53, (java.lang.Object) atomikosProperties57);
        boolean boolean71 = properties15.equals((java.lang.Object) atomikosProperties57);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj72 = properties12.getOrDefault(obj13, (java.lang.Object) boolean71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 500L + "'", long4 == 500L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tm.out" + "'", str23, "tm.out");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "{hi!=10}" + "'", str35, "{hi!=10}");
        org.junit.Assert.assertNotNull(objCollection37);
        org.junit.Assert.assertNotNull(objEnumeration39);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNotNull(objEnumeration43);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNotNull(objEntrySet53);
        org.junit.Assert.assertNotNull(objCollection55);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "tm.out" + "'", str60, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel61 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel61.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties65);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "tmlog" + "'", str67, "tmlog");
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test00850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00850");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        atomikosProperties0.setTransactionManagerUniqueName("tm.out");
        java.lang.String str5 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setConsoleFileLimit((int) (byte) 1);
        atomikosProperties0.setService("tm.out");
        boolean boolean10 = atomikosProperties0.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.getConsoleFileName();
        java.lang.String str13 = atomikosProperties11.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = atomikosProperties11.getConsoleLogLevel();
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel14);
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.setConsoleFileCount(1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tm.out" + "'", str12, "tm.out");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel14 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel14.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test00851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00851");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.lang.Object obj3 = null;
        boolean boolean4 = properties0.equals(obj3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.keys();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Properties properties7 = new java.util.Properties(properties6);
        int int8 = properties7.size();
        boolean boolean9 = properties7.isEmpty();
        java.util.Properties properties10 = new java.util.Properties(properties7);
        java.util.Properties properties11 = new java.util.Properties(properties7);
        int int12 = properties7.size();
        java.util.Properties properties13 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str15 = atomikosProperties14.getConsoleFileName();
        atomikosProperties14.setOutputDir("hi!");
        int int18 = atomikosProperties14.getConsoleFileLimit();
        java.util.Properties properties19 = atomikosProperties14.asProperties();
        java.lang.String str20 = atomikosProperties14.getService();
        atomikosProperties14.setService("hi!");
        java.lang.Object obj24 = properties13.putIfAbsent((java.lang.Object) "hi!", (java.lang.Object) 10L);
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties13);
        properties7.clear();
        java.util.Properties properties27 = new java.util.Properties(properties7);
        boolean boolean28 = properties0.contains((java.lang.Object) properties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setConsoleFileCount((-1));
        java.lang.String str32 = atomikosProperties29.getOutputDir();
        atomikosProperties29.setLogBaseName("tm.out");
        atomikosProperties29.setLogBaseDir("tm.out");
        java.lang.String str37 = atomikosProperties29.getLogBaseDir();
        atomikosProperties29.setDefaultJtaTimeout(10L);
        java.util.Properties properties40 = atomikosProperties29.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery41 = atomikosProperties29.getRecovery();
        recovery41.setMaxRetries((int) (short) 100);
        java.util.Properties properties44 = new java.util.Properties();
        java.util.Properties properties45 = new java.util.Properties(properties44);
        properties45.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str49 = atomikosProperties48.getConsoleFileName();
        atomikosProperties48.setOutputDir("hi!");
        int int52 = atomikosProperties48.getConsoleFileLimit();
        java.lang.Object obj53 = properties45.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties48);
        boolean boolean54 = atomikosProperties48.isForceShutdownOnVmExit();
        atomikosProperties48.setConsoleFileName("");
        java.lang.String str57 = atomikosProperties48.getService();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery58 = atomikosProperties48.getRecovery();
        long long59 = recovery58.getRetryInterval();
        recovery58.setRetryInterval(500L);
        long long62 = recovery58.getDelay();
        java.lang.Object obj63 = properties27.replace((java.lang.Object) recovery41, (java.lang.Object) recovery58);
        recovery58.setRetryInterval(5L);
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tm.out" + "'", str15, "tm.out");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tm.out" + "'", str37, "tm.out");
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertNotNull(recovery41);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tm.out" + "'", str49, "tm.out");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(recovery58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 10000L + "'", long59 == 10000L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 10000L + "'", long62 == 10000L);
        org.junit.Assert.assertNull(obj63);
    }

    @Test
    public void test00852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00852");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        java.lang.String str3 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseName("tm.out");
        int int6 = atomikosProperties0.getConsoleFileCount();
        java.lang.String str7 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setEnableLogging(false);
        int int10 = atomikosProperties0.getMaxActives();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tm.out" + "'", str7, "tm.out");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
    }

    @Test
    public void test00853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00853");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties1.setProperty("", "hi!");
        java.util.Properties properties9 = new java.util.Properties(properties1);
        boolean boolean10 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties1.elements();
        java.lang.String str14 = properties1.getProperty("{}", "{10=10.0}");
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{10=10.0}" + "'", str14, "{10=10.0}");
    }

    @Test
    public void test00854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00854");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties0.containsValue((java.lang.Object) 10000L);
        java.lang.Class<?> wildcardClass4 = properties0.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test00855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00855");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.keys();
        java.lang.String str5 = properties2.getProperty("{}");
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Properties properties7 = new java.util.Properties(properties6);
        properties7.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str11 = atomikosProperties10.getConsoleFileName();
        atomikosProperties10.setOutputDir("hi!");
        int int14 = atomikosProperties10.getConsoleFileLimit();
        java.lang.Object obj15 = properties7.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties10);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel16 = atomikosProperties10.getConsoleLogLevel();
        java.lang.String str17 = atomikosProperties10.getTransactionManagerUniqueName();
        boolean boolean18 = atomikosProperties10.isThreadedTwoPhaseCommit();
        atomikosProperties10.setDefaultJtaTimeout((long) 10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.setConsoleFileCount(100);
        atomikosProperties21.setAllowSubTransactions(true);
        boolean boolean26 = atomikosProperties21.isForceShutdownOnVmExit();
        atomikosProperties21.setConsoleFileCount(10);
        atomikosProperties21.setConsoleFileCount(50);
        atomikosProperties21.setForceShutdownOnVmExit(true);
        boolean boolean33 = properties2.remove((java.lang.Object) atomikosProperties10, (java.lang.Object) true);
        java.io.OutputStream outputStream34 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.save(outputStream34, "{10=10.0}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tm.out" + "'", str11, "tm.out");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel16 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel16.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test00856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00856");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties8.getConsoleLogLevel();
        java.lang.Object obj14 = properties1.putIfAbsent((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosLoggingLevel13);
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.Object obj17 = properties15.get((java.lang.Object) (byte) -1);
        java.util.Properties properties18 = new java.util.Properties(properties15);
        boolean boolean19 = properties1.equals((java.lang.Object) properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties1.keys();
        java.lang.Object obj21 = null;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.setConsoleFileCount((-1));
        java.lang.String str25 = atomikosProperties22.getOutputDir();
        atomikosProperties22.setLogBaseName("tm.out");
        atomikosProperties22.setLogBaseDir("tm.out");
        java.lang.String str30 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setDefaultJtaTimeout(10L);
        java.util.Properties properties33 = atomikosProperties22.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery34 = atomikosProperties22.getRecovery();
        recovery34.setMaxRetries((int) (short) 100);
        long long37 = recovery34.getForgetOrphanedLogEntriesDelay();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj38 = properties1.putIfAbsent(obj21, (java.lang.Object) long37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "tm.out" + "'", str30, "tm.out");
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertNotNull(recovery34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 86400000L + "'", long37 == 86400000L);
    }

    @Test
    public void test00857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00857");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery2 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int3 = recovery2.getMaxRetries();
        recovery2.setForgetOrphanedLogEntriesDelay((long) (short) -1);
        java.lang.Object obj6 = properties1.get((java.lang.Object) (short) -1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties7.setConsoleFileCount((-1));
        atomikosProperties7.setTransactionManagerUniqueName("tm.out");
        java.lang.String str12 = atomikosProperties7.getLogBaseName();
        atomikosProperties7.setConsoleFileLimit((int) (byte) 1);
        atomikosProperties7.setService("tm.out");
        boolean boolean17 = atomikosProperties7.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str19 = atomikosProperties18.getConsoleFileName();
        java.lang.String str20 = atomikosProperties18.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel21 = atomikosProperties18.getConsoleLogLevel();
        atomikosProperties7.setConsoleLogLevel(atomikosLoggingLevel21);
        boolean boolean23 = properties1.contains((java.lang.Object) atomikosLoggingLevel21);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tm.out" + "'", str19, "tm.out");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel21 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel21.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test00858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00858");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        atomikosProperties0.setTransactionManagerUniqueName("tm.out");
        atomikosProperties0.setForceShutdownOnVmExit(false);
        long long7 = atomikosProperties0.getMaxTimeout();
        java.lang.String str8 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setAllowSubTransactions(true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tm.out" + "'", str8, "tm.out");
    }

    @Test
    public void test00859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00859");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        long long4 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setEnableLogging(false);
        int int7 = atomikosProperties0.getMaxActives();
        boolean boolean8 = atomikosProperties0.isAllowSubTransactions();
        boolean boolean9 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.setEnableLogging(true);
        int int14 = atomikosProperties0.getMaxActives();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 500L + "'", long4 == 500L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 50 + "'", int14 == 50);
    }

    @Test
    public void test00860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00860");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties6 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str8 = atomikosProperties7.getConsoleFileName();
        java.lang.Object obj10 = properties6.put((java.lang.Object) atomikosProperties7, (java.lang.Object) 0L);
        properties6.clear();
        java.util.Properties properties12 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str14 = atomikosProperties13.getConsoleFileName();
        java.lang.Object obj16 = properties12.put((java.lang.Object) atomikosProperties13, (java.lang.Object) 0L);
        java.util.Properties properties17 = new java.util.Properties(properties12);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setConsoleFileCount((-1));
        atomikosProperties18.setTransactionManagerUniqueName("tm.out");
        java.lang.Object obj23 = properties12.remove((java.lang.Object) atomikosProperties18);
        java.lang.Object obj24 = properties1.getOrDefault((java.lang.Object) properties6, (java.lang.Object) properties12);
        java.lang.String str27 = properties12.getProperty("{hi!=10}", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=hi!, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tm.out" + "'", str8, "tm.out");
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tm.out" + "'", str14, "tm.out");
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=hi!, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str27, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=hi!, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
    }

    @Test
    public void test00861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00861");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties8.getConsoleLogLevel();
        java.lang.Object obj14 = properties1.putIfAbsent((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosLoggingLevel13);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.getConsoleFileName();
        atomikosProperties15.setOutputDir("hi!");
        int int19 = atomikosProperties15.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel20 = atomikosProperties15.getConsoleLogLevel();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery21 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long22 = recovery21.getForgetOrphanedLogEntriesDelay();
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Properties properties24 = new java.util.Properties(properties23);
        properties24.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.getConsoleFileName();
        atomikosProperties27.setOutputDir("hi!");
        int int31 = atomikosProperties27.getConsoleFileLimit();
        java.lang.Object obj32 = properties24.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties27);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel33 = atomikosProperties27.getConsoleLogLevel();
        java.lang.String str34 = atomikosProperties27.getTransactionManagerUniqueName();
        atomikosProperties27.setThreadedTwoPhaseCommit(false);
        boolean boolean37 = properties1.replace((java.lang.Object) atomikosProperties15, (java.lang.Object) recovery21, (java.lang.Object) false);
        long long38 = recovery21.getRetryInterval();
        int int39 = recovery21.getMaxRetries();
        long long40 = recovery21.getForgetOrphanedLogEntriesDelay();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tm.out" + "'", str16, "tm.out");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel20 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel20.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 86400000L + "'", long22 == 86400000L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tm.out" + "'", str28, "tm.out");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel33 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel33.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10000L + "'", long38 == 10000L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 86400000L + "'", long40 == 86400000L);
    }

    @Test
    public void test00862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00862");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Set<java.lang.Object> objSet4 = properties1.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.getConsoleFileName();
        atomikosProperties5.setOutputDir("hi!");
        int int9 = atomikosProperties5.getConsoleFileLimit();
        java.util.Properties properties10 = atomikosProperties5.asProperties();
        java.lang.String str11 = atomikosProperties5.getService();
        int int12 = atomikosProperties5.getMaxActives();
        boolean boolean13 = properties1.equals((java.lang.Object) atomikosProperties5);
        java.util.Properties properties14 = new java.util.Properties(properties1);
        java.util.Properties properties15 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection16 = properties15.values();
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        java.util.Properties properties19 = new java.util.Properties();
        java.util.Properties properties20 = new java.util.Properties(properties19);
        properties20.clear();
        properties18.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties20);
        java.lang.Object obj25 = properties18.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties15.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties18);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.setConsoleFileCount((-1));
        java.lang.String str30 = atomikosProperties27.getOutputDir();
        atomikosProperties27.setLogBaseName("tm.out");
        boolean boolean33 = properties18.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties34.setConsoleFileCount(100);
        atomikosProperties34.setAllowSubTransactions(true);
        java.lang.Object obj39 = properties18.remove((java.lang.Object) atomikosProperties34);
        java.lang.String str40 = atomikosProperties34.getLogBaseDir();
        int int41 = atomikosProperties34.getConsoleFileLimit();
        atomikosProperties34.setConsoleFileName("{10=10.0}");
        java.lang.String str44 = atomikosProperties34.getOutputDir();
        java.lang.Object obj45 = properties1.get((java.lang.Object) atomikosProperties34);
        java.io.Writer writer46 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(writer46, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objSet4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tm.out" + "'", str6, "tm.out");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(obj45);
    }

    @Test
    public void test00863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00863");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties1.setProperty("tm.out", "");
        java.util.Collection<java.lang.Object> objCollection9 = properties1.values();
        boolean boolean10 = properties1.isEmpty();
        boolean boolean11 = properties1.isEmpty();
        java.io.OutputStream outputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(outputStream12, "{tm.out=}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test00864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00864");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Properties properties4 = new java.util.Properties(properties1);
        java.util.Properties properties5 = new java.util.Properties(properties1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.getConsoleFileName();
        atomikosProperties6.setOutputDir("hi!");
        int int10 = atomikosProperties6.getConsoleFileLimit();
        java.util.Properties properties11 = atomikosProperties6.asProperties();
        java.lang.String str12 = atomikosProperties6.getService();
        atomikosProperties6.setService("hi!");
        atomikosProperties6.setForceShutdownOnVmExit(true);
        atomikosProperties6.setThreadedTwoPhaseCommit(false);
        java.util.Properties properties19 = atomikosProperties6.asProperties();
        java.util.Properties properties21 = new java.util.Properties();
        java.util.Properties properties22 = new java.util.Properties(properties21);
        int int23 = properties22.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery24 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long25 = recovery24.getForgetOrphanedLogEntriesDelay();
        java.lang.Class<?> wildcardClass26 = recovery24.getClass();
        boolean boolean27 = properties22.containsKey((java.lang.Object) wildcardClass26);
        boolean boolean28 = properties1.replace((java.lang.Object) properties19, (java.lang.Object) 1.0f, (java.lang.Object) wildcardClass26);
        java.util.Properties properties29 = new java.util.Properties(properties19);
        java.util.Properties properties30 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str32 = atomikosProperties31.getConsoleFileName();
        java.lang.Object obj34 = properties30.put((java.lang.Object) atomikosProperties31, (java.lang.Object) 0L);
        java.lang.Object obj37 = properties30.setProperty("", "");
        java.lang.Object obj40 = properties30.setProperty("", "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str42 = atomikosProperties41.getTransactionManagerUniqueName();
        atomikosProperties41.setAllowSubTransactions(false);
        boolean boolean45 = properties30.containsKey((java.lang.Object) atomikosProperties41);
        boolean boolean46 = properties29.containsValue((java.lang.Object) boolean45);
        java.lang.Object obj49 = properties29.setProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=100}", "{=hi!}");
        java.io.OutputStream outputStream50 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties29.storeToXML(outputStream50, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tm.out" + "'", str7, "tm.out");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 86400000L + "'", long25 == 86400000L);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tm.out" + "'", str32, "tm.out");
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertEquals("'" + obj40 + "' != '" + "" + "'", obj40, "");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(obj49);
    }

    @Test
    public void test00865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00865");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties8.getConsoleLogLevel();
        java.lang.Object obj14 = properties1.putIfAbsent((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosLoggingLevel13);
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.Object obj17 = properties15.get((java.lang.Object) (byte) -1);
        java.util.Properties properties18 = new java.util.Properties(properties15);
        boolean boolean19 = properties1.equals((java.lang.Object) properties15);
        java.util.Properties properties20 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.getConsoleFileName();
        java.lang.Object obj24 = properties20.put((java.lang.Object) atomikosProperties21, (java.lang.Object) 0L);
        java.util.Properties properties25 = new java.util.Properties(properties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setConsoleFileCount((-1));
        atomikosProperties26.setTransactionManagerUniqueName("tm.out");
        java.lang.Object obj31 = properties20.remove((java.lang.Object) atomikosProperties26);
        boolean boolean32 = atomikosProperties26.isForceShutdownOnVmExit();
        java.util.Properties properties33 = atomikosProperties26.asProperties();
        java.util.Properties properties34 = null;
        java.util.Properties properties35 = new java.util.Properties(properties34);
        boolean boolean37 = properties35.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str39 = atomikosProperties38.getTransactionManagerUniqueName();
        atomikosProperties38.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str43 = atomikosProperties42.getConsoleFileName();
        atomikosProperties42.setOutputDir("hi!");
        int int46 = atomikosProperties42.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel47 = atomikosProperties42.getConsoleLogLevel();
        java.lang.Object obj48 = properties35.putIfAbsent((java.lang.Object) atomikosProperties38, (java.lang.Object) atomikosLoggingLevel47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str50 = atomikosProperties49.getConsoleFileName();
        atomikosProperties49.setOutputDir("hi!");
        int int53 = atomikosProperties49.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel54 = atomikosProperties49.getConsoleLogLevel();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery55 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long56 = recovery55.getForgetOrphanedLogEntriesDelay();
        java.util.Properties properties57 = new java.util.Properties();
        java.util.Properties properties58 = new java.util.Properties(properties57);
        properties58.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str62 = atomikosProperties61.getConsoleFileName();
        atomikosProperties61.setOutputDir("hi!");
        int int65 = atomikosProperties61.getConsoleFileLimit();
        java.lang.Object obj66 = properties58.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties61);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel67 = atomikosProperties61.getConsoleLogLevel();
        java.lang.String str68 = atomikosProperties61.getTransactionManagerUniqueName();
        atomikosProperties61.setThreadedTwoPhaseCommit(false);
        boolean boolean71 = properties35.replace((java.lang.Object) atomikosProperties49, (java.lang.Object) recovery55, (java.lang.Object) false);
        java.lang.Object obj72 = properties15.replace((java.lang.Object) atomikosProperties26, (java.lang.Object) properties35);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery73 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery73.setDelay((long) 5);
        recovery73.setMaxRetries((-1));
        int int78 = recovery73.getMaxRetries();
        java.lang.Object obj79 = properties35.get((java.lang.Object) int78);
        java.lang.String str80 = properties35.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tm.out" + "'", str22, "tm.out");
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tm.out" + "'", str43, "tm.out");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel47 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel47.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tm.out" + "'", str50, "tm.out");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel54 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel54.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 86400000L + "'", long56 == 86400000L);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tm.out" + "'", str62, "tm.out");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel67 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel67.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNull(obj79);
    }

    @Test
    public void test00866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00866");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties1.setProperty("tm.out", "");
        java.util.Collection<java.lang.Object> objCollection9 = properties1.values();
        boolean boolean10 = properties1.isEmpty();
        java.lang.String str12 = properties1.getProperty("");
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test00867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00867");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Properties properties4 = new java.util.Properties(properties1);
        java.util.Properties properties5 = new java.util.Properties(properties1);
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        boolean boolean9 = properties7.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties7.keys();
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        java.util.Properties properties13 = new java.util.Properties();
        java.util.Properties properties14 = new java.util.Properties(properties13);
        properties14.clear();
        properties12.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties14);
        java.lang.Object obj19 = properties14.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Properties properties20 = new java.util.Properties();
        java.util.Properties properties21 = new java.util.Properties(properties20);
        properties21.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str25 = atomikosProperties24.getConsoleFileName();
        atomikosProperties24.setOutputDir("hi!");
        int int28 = atomikosProperties24.getConsoleFileLimit();
        java.lang.Object obj29 = properties21.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties24);
        atomikosProperties24.setLogBaseName("tm.out");
        boolean boolean32 = properties14.containsKey((java.lang.Object) "tm.out");
        java.util.Properties properties33 = null;
        java.util.Properties properties34 = new java.util.Properties(properties33);
        java.util.Properties properties35 = new java.util.Properties();
        java.util.Properties properties36 = new java.util.Properties(properties35);
        properties36.clear();
        properties34.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties36);
        properties14.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties34);
        java.util.Properties properties40 = new java.util.Properties(properties34);
        java.lang.String str42 = properties34.getProperty("tmlog");
        java.util.Properties properties43 = new java.util.Properties();
        java.util.Properties properties44 = new java.util.Properties(properties43);
        properties44.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str48 = atomikosProperties47.getConsoleFileName();
        atomikosProperties47.setOutputDir("hi!");
        int int51 = atomikosProperties47.getConsoleFileLimit();
        java.lang.Object obj52 = properties44.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties47);
        atomikosProperties47.setConsoleFileLimit((int) (short) 0);
        boolean boolean55 = properties34.containsValue((java.lang.Object) atomikosProperties47);
        java.lang.Object obj56 = properties1.getOrDefault((java.lang.Object) properties7, (java.lang.Object) atomikosProperties47);
        java.lang.Object obj59 = properties7.setProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=hi!, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "{=hi!}");
        java.util.Properties properties60 = new java.util.Properties();
        java.util.Properties properties61 = new java.util.Properties(properties60);
        properties61.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str65 = atomikosProperties64.getConsoleFileName();
        atomikosProperties64.setOutputDir("hi!");
        int int68 = atomikosProperties64.getConsoleFileLimit();
        java.lang.Object obj69 = properties61.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties64);
        atomikosProperties64.setConsoleFileLimit((int) (short) 0);
        atomikosProperties64.setForceShutdownOnVmExit(true);
        int int74 = atomikosProperties64.getConsoleFileLimit();
        java.lang.Object obj75 = properties7.remove((java.lang.Object) int74);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "tm.out" + "'", str25, "tm.out");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "tm.out" + "'", str48, "tm.out");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "tm.out" + "'", str65, "tm.out");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNull(obj75);
    }

    @Test
    public void test00868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00868");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.util.Properties properties28 = new java.util.Properties();
        java.util.Properties properties29 = new java.util.Properties(properties28);
        properties29.clear();
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        java.lang.Object obj32 = properties3.get((java.lang.Object) properties29);
        properties29.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties34.setConsoleFileCount((-1));
        atomikosProperties34.setTransactionManagerUniqueName("tm.out");
        atomikosProperties34.setForceShutdownOnVmExit(false);
        long long41 = atomikosProperties34.getMaxTimeout();
        java.lang.String str42 = atomikosProperties34.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str44 = atomikosProperties43.getConsoleFileName();
        atomikosProperties43.setOutputDir("hi!");
        int int47 = atomikosProperties43.getConsoleFileLimit();
        java.util.Properties properties48 = atomikosProperties43.asProperties();
        java.util.Set<java.lang.String> strSet49 = properties48.stringPropertyNames();
        java.util.Properties properties50 = new java.util.Properties(properties48);
        int int51 = properties50.size();
        java.lang.Object obj52 = properties29.put((java.lang.Object) atomikosProperties34, (java.lang.Object) properties50);
        java.util.Properties properties53 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection54 = properties53.values();
        java.util.Properties properties55 = null;
        java.util.Properties properties56 = new java.util.Properties(properties55);
        java.util.Properties properties57 = new java.util.Properties();
        java.util.Properties properties58 = new java.util.Properties(properties57);
        properties58.clear();
        properties56.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties58);
        java.lang.Object obj63 = properties56.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties53.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties56);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties65.setConsoleFileCount((-1));
        java.lang.String str68 = atomikosProperties65.getOutputDir();
        atomikosProperties65.setLogBaseName("tm.out");
        boolean boolean71 = properties56.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties72 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties72.setConsoleFileCount(100);
        atomikosProperties72.setAllowSubTransactions(true);
        java.lang.Object obj77 = properties56.remove((java.lang.Object) atomikosProperties72);
        java.util.Set<java.lang.Object> objSet78 = properties56.keySet();
        java.util.Properties properties79 = new java.util.Properties(properties56);
        java.util.Properties properties80 = new java.util.Properties(properties79);
        java.util.Properties properties81 = new java.util.Properties(properties80);
        java.util.Set<java.lang.Object> objSet82 = properties81.keySet();
        java.util.Properties properties83 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection84 = properties83.values();
        java.util.Properties properties85 = null;
        java.util.Properties properties86 = new java.util.Properties(properties85);
        java.util.Properties properties87 = new java.util.Properties();
        java.util.Properties properties88 = new java.util.Properties(properties87);
        properties88.clear();
        properties86.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties88);
        java.lang.Object obj93 = properties86.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties83.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties86);
        java.util.Set<java.lang.Object> objSet95 = properties86.keySet();
        boolean boolean96 = properties50.remove((java.lang.Object) properties81, (java.lang.Object) properties86);
        java.lang.Object obj97 = properties50.clone();
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 300000L + "'", long41 == 300000L);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "tm.out" + "'", str42, "tm.out");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "tm.out" + "'", str44, "tm.out");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(properties48);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNotNull(objCollection54);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertNotNull(objSet78);
        org.junit.Assert.assertNotNull(objSet82);
        org.junit.Assert.assertNotNull(objCollection84);
        org.junit.Assert.assertNull(obj93);
        org.junit.Assert.assertNotNull(objSet95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(obj97);
        org.junit.Assert.assertEquals(obj97.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj97), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj97), "{}");
    }

    @Test
    public void test00869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00869");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean5 = atomikosProperties0.isForceShutdownOnVmExit();
        int int6 = atomikosProperties0.getConsoleFileCount();
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertNotNull(properties7);
    }

    @Test
    public void test00870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00870");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.lang.String str6 = atomikosProperties0.getService();
        atomikosProperties0.setService("hi!");
        atomikosProperties0.setConsoleFileName("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = atomikosProperties0.getRecovery();
        java.util.Properties properties12 = atomikosProperties0.asProperties();
        java.util.Properties properties13 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection14 = properties13.values();
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        java.util.Properties properties17 = new java.util.Properties();
        java.util.Properties properties18 = new java.util.Properties(properties17);
        properties18.clear();
        properties16.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties18);
        java.lang.Object obj23 = properties16.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties13.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties16);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties25.setConsoleFileCount((-1));
        java.lang.String str28 = atomikosProperties25.getOutputDir();
        atomikosProperties25.setLogBaseName("tm.out");
        boolean boolean31 = properties16.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties32.setConsoleFileCount(100);
        atomikosProperties32.setAllowSubTransactions(true);
        java.lang.Object obj37 = properties16.remove((java.lang.Object) atomikosProperties32);
        java.lang.String str38 = atomikosProperties32.getLogBaseDir();
        java.lang.Class<?> wildcardClass39 = atomikosProperties32.getClass();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties40.setConsoleFileLimit((int) (byte) 10);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel43 = atomikosProperties40.getConsoleLogLevel();
        java.lang.Object obj44 = properties12.put((java.lang.Object) wildcardClass39, (java.lang.Object) atomikosLoggingLevel43);
        java.io.Writer writer45 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties12.store(writer45, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(recovery11);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertNotNull(objCollection14);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel43 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel43.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj44);
    }

    @Test
    public void test00871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00871");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        java.lang.String str2 = atomikosProperties0.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel3 = atomikosProperties0.getConsoleLogLevel();
        atomikosProperties0.setLogBaseDir("tm.out");
        long long6 = atomikosProperties0.getMaxTimeout();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel3 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel3.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 300000L + "'", long6 == 300000L);
    }

    @Test
    public void test00872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00872");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties1.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.getConsoleFileName();
        long long7 = atomikosProperties5.getMaxTimeout();
        java.util.Properties properties8 = atomikosProperties5.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long10 = recovery9.getForgetOrphanedLogEntriesDelay();
        recovery9.setDelay((long) (short) 1);
        recovery9.setRetryInterval(100L);
        boolean boolean15 = properties8.containsValue((java.lang.Object) 100L);
        java.util.Properties properties16 = new java.util.Properties();
        java.util.Properties properties17 = new java.util.Properties(properties16);
        int int18 = properties17.size();
        boolean boolean19 = properties17.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties17.elements();
        java.util.Properties properties21 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection22 = properties21.values();
        java.util.Properties properties23 = new java.util.Properties(properties21);
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties23.elements();
        boolean boolean25 = properties23.isEmpty();
        boolean boolean26 = properties17.containsValue((java.lang.Object) boolean25);
        java.util.Properties properties27 = new java.util.Properties(properties17);
        java.util.Enumeration<?> wildcardEnumeration28 = properties27.propertyNames();
        boolean boolean29 = properties8.containsKey((java.lang.Object) properties27);
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Properties properties31 = null;
        java.util.Properties properties32 = new java.util.Properties(properties31);
        java.util.Properties properties33 = new java.util.Properties();
        java.util.Properties properties34 = new java.util.Properties(properties33);
        properties34.clear();
        properties32.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties34);
        java.lang.Object obj39 = properties34.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet40 = properties34.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties41.setConsoleFileCount((-1));
        java.lang.String str44 = atomikosProperties41.getOutputDir();
        atomikosProperties41.setLogBaseName("tm.out");
        int int47 = atomikosProperties41.getConsoleFileCount();
        boolean boolean48 = properties34.containsKey((java.lang.Object) atomikosProperties41);
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties34);
        java.io.OutputStream outputStream50 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties34.save(outputStream50, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tm.out" + "'", str6, "tm.out");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 86400000L + "'", long10 == 86400000L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertNotNull(objCollection22);
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test00873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00873");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        long long2 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties3 = atomikosProperties0.asProperties();
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        int int6 = properties5.size();
        boolean boolean7 = properties5.isEmpty();
        java.util.Set<java.lang.Object> objSet8 = properties5.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setConsoleFileCount((-1));
        java.lang.String str13 = atomikosProperties10.getOutputDir();
        atomikosProperties10.setLogBaseName("tm.out");
        atomikosProperties10.setLogBaseDir("tm.out");
        int int18 = atomikosProperties10.getMaxActives();
        atomikosProperties10.setDefaultJtaTimeout((long) (short) 100);
        boolean boolean21 = properties3.replace((java.lang.Object) objSet8, (java.lang.Object) (byte) 1, (java.lang.Object) atomikosProperties10);
        java.io.OutputStream outputStream22 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.storeToXML(outputStream22, "{=hi!}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 300000L + "'", long2 == 300000L);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objSet8);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 50 + "'", int18 == 50);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test00874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00874");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        boolean boolean12 = properties0.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str14 = atomikosProperties13.getConsoleFileName();
        atomikosProperties13.setOutputDir("hi!");
        int int17 = atomikosProperties13.getConsoleFileLimit();
        atomikosProperties13.setDefaultJtaTimeout(1L);
        atomikosProperties13.setForceShutdownOnVmExit(false);
        atomikosProperties13.setMaxActives(0);
        java.lang.Object obj24 = properties0.remove((java.lang.Object) 0);
        java.io.PrintWriter printWriter25 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.list(printWriter25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tm.out" + "'", str14, "tm.out");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(obj24);
    }

    @Test
    public void test00875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00875");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        boolean boolean5 = properties1.contains((java.lang.Object) 5L);
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection7 = properties6.values();
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Properties properties11 = new java.util.Properties(properties10);
        properties11.clear();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.lang.Object obj16 = properties9.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        java.util.Set<java.lang.Object> objSet18 = properties6.keySet();
        java.util.Properties properties19 = new java.util.Properties();
        java.util.Properties properties20 = new java.util.Properties(properties19);
        int int21 = properties20.size();
        boolean boolean22 = properties20.isEmpty();
        java.util.Properties properties23 = new java.util.Properties(properties20);
        java.util.Properties properties24 = new java.util.Properties(properties20);
        int int25 = properties20.size();
        java.util.Properties properties26 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.getConsoleFileName();
        atomikosProperties27.setOutputDir("hi!");
        int int31 = atomikosProperties27.getConsoleFileLimit();
        java.util.Properties properties32 = atomikosProperties27.asProperties();
        java.lang.String str33 = atomikosProperties27.getService();
        atomikosProperties27.setService("hi!");
        java.lang.Object obj37 = properties26.putIfAbsent((java.lang.Object) "hi!", (java.lang.Object) 10L);
        properties20.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        java.util.Properties properties39 = null;
        java.util.Properties properties40 = new java.util.Properties(properties39);
        java.util.Properties properties41 = new java.util.Properties();
        java.util.Properties properties42 = new java.util.Properties(properties41);
        properties42.clear();
        properties40.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties42);
        java.lang.Object obj47 = properties42.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet48 = properties42.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties49.setConsoleFileCount((-1));
        java.lang.String str52 = atomikosProperties49.getOutputDir();
        atomikosProperties49.setLogBaseName("tm.out");
        int int55 = atomikosProperties49.getConsoleFileCount();
        boolean boolean56 = properties42.containsKey((java.lang.Object) atomikosProperties49);
        atomikosProperties49.setConsoleFileCount((int) (byte) -1);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery59 = atomikosProperties49.getRecovery();
        java.util.Properties properties60 = null;
        java.util.Properties properties61 = new java.util.Properties(properties60);
        boolean boolean63 = properties61.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str65 = atomikosProperties64.getTransactionManagerUniqueName();
        atomikosProperties64.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str69 = atomikosProperties68.getConsoleFileName();
        atomikosProperties68.setOutputDir("hi!");
        int int72 = atomikosProperties68.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel73 = atomikosProperties68.getConsoleLogLevel();
        java.lang.Object obj74 = properties61.putIfAbsent((java.lang.Object) atomikosProperties64, (java.lang.Object) atomikosLoggingLevel73);
        java.util.Properties properties75 = new java.util.Properties();
        java.lang.Object obj77 = properties75.get((java.lang.Object) (byte) -1);
        java.util.Properties properties78 = new java.util.Properties(properties75);
        boolean boolean79 = properties61.equals((java.lang.Object) properties75);
        java.util.Enumeration<java.lang.Object> objEnumeration80 = properties61.keys();
        java.lang.Object obj81 = properties20.getOrDefault((java.lang.Object) atomikosProperties49, (java.lang.Object) properties61);
        java.lang.Object obj82 = properties1.getOrDefault((java.lang.Object) properties6, (java.lang.Object) atomikosProperties49);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties83 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties83.setConsoleFileCount(100);
        atomikosProperties83.setAllowSubTransactions(true);
        atomikosProperties83.setMaxTimeout((long) '4');
        java.lang.String str90 = atomikosProperties83.getLogBaseDir();
        boolean boolean91 = atomikosProperties83.isForceShutdownOnVmExit();
        atomikosProperties83.setLogBaseDir("tm.out");
        atomikosProperties83.setLogBaseName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=hi!, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        boolean boolean96 = properties1.containsKey((java.lang.Object) atomikosProperties83);
        boolean boolean97 = properties1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objCollection7);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objSet18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tm.out" + "'", str28, "tm.out");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(recovery59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "tm.out" + "'", str69, "tm.out");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel73 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel73.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objEnumeration80);
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertNotNull(obj82);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test00876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00876");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        atomikosProperties4.setConsoleFileLimit((int) (short) 0);
        atomikosProperties4.setTransactionManagerUniqueName("{10=10.0}");
        boolean boolean14 = atomikosProperties4.isThreadedTwoPhaseCommit();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test00877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00877");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean5 = atomikosProperties0.isForceShutdownOnVmExit();
        int int6 = atomikosProperties0.getConsoleFileCount();
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.getRecovery();
        atomikosProperties0.setAllowSubTransactions(true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(recovery8);
    }

    @Test
    public void test00878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00878");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        atomikosProperties4.setLogBaseName("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = atomikosProperties12.getConsoleLogLevel();
        atomikosProperties4.setConsoleLogLevel(atomikosLoggingLevel14);
        java.lang.String str16 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setDefaultJtaTimeout(10L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tm.out" + "'", str13, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel14 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel14.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test00879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00879");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getTransactionManagerUniqueName();
        boolean boolean2 = atomikosProperties0.isForceShutdownOnVmExit();
        java.util.Properties properties3 = atomikosProperties0.asProperties();
        int int4 = properties3.size();
        int int5 = properties3.size();
        java.util.Set<java.lang.Object> objSet6 = properties3.keySet();
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Properties properties8 = new java.util.Properties(properties7);
        properties8.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.getConsoleFileName();
        atomikosProperties11.setOutputDir("hi!");
        int int15 = atomikosProperties11.getConsoleFileLimit();
        java.lang.Object obj16 = properties8.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties11);
        atomikosProperties11.setLogBaseName("tm.out");
        atomikosProperties11.setForceShutdownOnVmExit(false);
        boolean boolean21 = atomikosProperties11.isForceShutdownOnVmExit();
        java.util.Properties properties22 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection23 = properties22.values();
        java.util.Properties properties24 = null;
        java.util.Properties properties25 = new java.util.Properties(properties24);
        java.util.Properties properties26 = new java.util.Properties();
        java.util.Properties properties27 = new java.util.Properties(properties26);
        properties27.clear();
        properties25.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties27);
        java.lang.Object obj32 = properties25.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties22.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties25);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties34.setConsoleFileCount((-1));
        java.lang.String str37 = atomikosProperties34.getOutputDir();
        atomikosProperties34.setLogBaseName("tm.out");
        boolean boolean40 = properties25.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties41.setConsoleFileCount(100);
        atomikosProperties41.setAllowSubTransactions(true);
        java.lang.Object obj46 = properties25.remove((java.lang.Object) atomikosProperties41);
        java.util.Properties properties47 = new java.util.Properties(properties25);
        java.lang.String str49 = properties47.getProperty("");
        java.util.Set<java.lang.Object> objSet50 = properties47.keySet();
        java.lang.Object obj51 = properties3.putIfAbsent((java.lang.Object) atomikosProperties11, (java.lang.Object) objSet50);
        java.io.Reader reader52 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.load(reader52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 18 + "'", int4 == 18);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 18 + "'", int5 == 18);
        org.junit.Assert.assertNotNull(objSet6);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tm.out" + "'", str12, "tm.out");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objCollection23);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(objSet50);
        org.junit.Assert.assertNull(obj51);
    }

    @Test
    public void test00880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00880");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties6 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str8 = atomikosProperties7.getConsoleFileName();
        java.lang.Object obj10 = properties6.put((java.lang.Object) atomikosProperties7, (java.lang.Object) 0L);
        properties6.clear();
        java.util.Properties properties12 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str14 = atomikosProperties13.getConsoleFileName();
        java.lang.Object obj16 = properties12.put((java.lang.Object) atomikosProperties13, (java.lang.Object) 0L);
        java.util.Properties properties17 = new java.util.Properties(properties12);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setConsoleFileCount((-1));
        atomikosProperties18.setTransactionManagerUniqueName("tm.out");
        java.lang.Object obj23 = properties12.remove((java.lang.Object) atomikosProperties18);
        java.lang.Object obj24 = properties1.getOrDefault((java.lang.Object) properties6, (java.lang.Object) properties12);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties1.elements();
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.util.Properties properties28 = new java.util.Properties();
        java.util.Properties properties29 = new java.util.Properties(properties28);
        properties29.clear();
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        java.lang.Object obj34 = properties27.setProperty("tm.out", "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setConsoleFileCount(100);
        atomikosProperties35.setAllowSubTransactions(true);
        atomikosProperties35.setMaxTimeout((long) '4');
        java.lang.String str42 = atomikosProperties35.getLogBaseDir();
        boolean boolean43 = atomikosProperties35.isForceShutdownOnVmExit();
        java.lang.Object obj44 = properties27.remove((java.lang.Object) boolean43);
        java.util.Enumeration<?> wildcardEnumeration45 = properties27.propertyNames();
        int int46 = properties27.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties47.setConsoleFileCount(100);
        int int50 = atomikosProperties47.getConsoleFileCount();
        atomikosProperties47.setOutputDir("");
        java.lang.String str53 = atomikosProperties47.getConsoleFileName();
        boolean boolean54 = atomikosProperties47.isEnableLogging();
        atomikosProperties47.setForceShutdownOnVmExit(false);
        java.lang.Object obj57 = properties27.get((java.lang.Object) false);
        java.util.Properties properties58 = new java.util.Properties();
        java.util.Properties properties59 = new java.util.Properties(properties58);
        properties59.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties62 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str63 = atomikosProperties62.getConsoleFileName();
        atomikosProperties62.setOutputDir("hi!");
        int int66 = atomikosProperties62.getConsoleFileLimit();
        java.lang.Object obj67 = properties59.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties62);
        boolean boolean68 = atomikosProperties62.isForceShutdownOnVmExit();
        atomikosProperties62.setConsoleFileName("");
        java.lang.String str71 = atomikosProperties62.getService();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery72 = atomikosProperties62.getRecovery();
        long long73 = recovery72.getDelay();
        long long74 = recovery72.getForgetOrphanedLogEntriesDelay();
        long long75 = recovery72.getDelay();
        long long76 = recovery72.getForgetOrphanedLogEntriesDelay();
        recovery72.setMaxRetries((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj79 = properties1.getOrDefault(obj57, (java.lang.Object) recovery72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tm.out" + "'", str8, "tm.out");
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tm.out" + "'", str14, "tm.out");
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(wildcardEnumeration45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "tm.out" + "'", str53, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "tm.out" + "'", str63, "tm.out");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(recovery72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 10000L + "'", long73 == 10000L);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 86400000L + "'", long74 == 86400000L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 10000L + "'", long75 == 10000L);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 86400000L + "'", long76 == 86400000L);
    }

    @Test
    public void test00881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00881");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        int int3 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setOutputDir("");
        java.lang.String str6 = atomikosProperties0.getConsoleFileName();
        int int7 = atomikosProperties0.getConsoleFileCount();
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        java.lang.String str9 = atomikosProperties0.getConsoleFileName();
        boolean boolean10 = atomikosProperties0.isSerialJtaTransactions();
        java.lang.String str11 = atomikosProperties0.getLogBaseDir();
        boolean boolean12 = atomikosProperties0.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties0.getConsoleLogLevel();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery14 = atomikosProperties0.getRecovery();
        long long15 = recovery14.getForgetOrphanedLogEntriesDelay();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tm.out" + "'", str6, "tm.out");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(recovery14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 86400000L + "'", long15 == 86400000L);
    }

    @Test
    public void test00882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00882");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        atomikosProperties0.setTransactionManagerUniqueName("tm.out");
        java.lang.String str5 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setConsoleFileLimit((int) (byte) 1);
        atomikosProperties0.setService("tm.out");
        boolean boolean10 = atomikosProperties0.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.getConsoleFileName();
        java.lang.String str13 = atomikosProperties11.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = atomikosProperties11.getConsoleLogLevel();
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel14);
        atomikosProperties0.setMaxActives(18);
        java.lang.String str18 = atomikosProperties0.getService();
        atomikosProperties0.setConsoleFileCount((int) (short) 100);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tm.out" + "'", str12, "tm.out");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel14 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel14.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tm.out" + "'", str18, "tm.out");
    }

    @Test
    public void test00883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00883");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getTransactionManagerUniqueName();
        boolean boolean2 = atomikosProperties0.isForceShutdownOnVmExit();
        java.util.Properties properties3 = atomikosProperties0.asProperties();
        int int4 = properties3.size();
        java.io.Reader reader5 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.load(reader5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 18 + "'", int4 == 18);
    }

    @Test
    public void test00884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00884");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet6 = properties5.stringPropertyNames();
        java.util.Set<java.lang.String> strSet7 = properties5.stringPropertyNames();
        java.util.Properties properties8 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection9 = properties8.values();
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        java.util.Properties properties12 = new java.util.Properties();
        java.util.Properties properties13 = new java.util.Properties(properties12);
        properties13.clear();
        properties11.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties13);
        java.lang.Object obj18 = properties11.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.setConsoleFileCount((-1));
        java.lang.String str23 = atomikosProperties20.getOutputDir();
        atomikosProperties20.setLogBaseName("tm.out");
        boolean boolean26 = properties11.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.setConsoleFileCount(100);
        atomikosProperties27.setAllowSubTransactions(true);
        java.lang.Object obj32 = properties11.remove((java.lang.Object) atomikosProperties27);
        java.util.Set<java.lang.Object> objSet33 = properties11.keySet();
        java.util.Properties properties34 = null;
        java.util.Properties properties35 = new java.util.Properties(properties34);
        java.util.Properties properties36 = new java.util.Properties();
        java.util.Properties properties37 = new java.util.Properties(properties36);
        properties37.clear();
        properties35.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties37);
        java.lang.Object obj40 = properties11.get((java.lang.Object) properties37);
        properties37.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str43 = atomikosProperties42.getConsoleFileName();
        long long44 = atomikosProperties42.getMaxTimeout();
        java.util.Properties properties45 = atomikosProperties42.asProperties();
        java.util.Properties properties46 = new java.util.Properties();
        java.util.Properties properties47 = new java.util.Properties(properties46);
        int int48 = properties47.size();
        boolean boolean49 = properties47.isEmpty();
        java.util.Set<java.lang.Object> objSet50 = properties47.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties52.setConsoleFileCount((-1));
        java.lang.String str55 = atomikosProperties52.getOutputDir();
        atomikosProperties52.setLogBaseName("tm.out");
        atomikosProperties52.setLogBaseDir("tm.out");
        int int60 = atomikosProperties52.getMaxActives();
        atomikosProperties52.setDefaultJtaTimeout((long) (short) 100);
        boolean boolean63 = properties45.replace((java.lang.Object) objSet50, (java.lang.Object) (byte) 1, (java.lang.Object) atomikosProperties52);
        java.lang.String str64 = atomikosProperties52.getService();
        java.lang.Object obj65 = properties37.remove((java.lang.Object) atomikosProperties52);
        java.lang.String str66 = properties37.toString();
        java.lang.String str68 = properties37.getProperty("tmlog");
        boolean boolean69 = properties5.equals((java.lang.Object) "tmlog");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(objSet33);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tm.out" + "'", str43, "tm.out");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 300000L + "'", long44 == 300000L);
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objSet50);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 50 + "'", int60 == 50);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "{}" + "'", str66, "{}");
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test00885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00885");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.lang.Object obj7 = properties0.setProperty("", "");
        java.util.Properties properties8 = new java.util.Properties(properties0);
        java.lang.Object obj9 = properties8.clone();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties8.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties11.setConsoleFileCount(100);
        int int14 = atomikosProperties11.getConsoleFileCount();
        atomikosProperties11.setOutputDir("");
        java.lang.String str17 = atomikosProperties11.getConsoleFileName();
        int int18 = atomikosProperties11.getConsoleFileCount();
        java.lang.Object obj19 = properties8.remove((java.lang.Object) int18);
        java.util.Properties properties20 = null;
        java.util.Properties properties21 = new java.util.Properties(properties20);
        java.util.Properties properties22 = new java.util.Properties();
        java.util.Properties properties23 = new java.util.Properties(properties22);
        properties23.clear();
        properties21.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties23);
        java.util.Collection<java.lang.Object> objCollection26 = properties23.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.getConsoleFileName();
        atomikosProperties27.setOutputDir("hi!");
        int int31 = atomikosProperties27.getConsoleFileLimit();
        java.util.Properties properties32 = atomikosProperties27.asProperties();
        boolean boolean33 = properties23.containsValue((java.lang.Object) atomikosProperties27);
        java.lang.String str34 = atomikosProperties27.getService();
        int int35 = atomikosProperties27.getMaxActives();
        java.lang.Object obj36 = properties8.remove((java.lang.Object) int35);
        java.io.InputStream inputStream37 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.loadFromXML(inputStream37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "{}");
        org.junit.Assert.assertNotNull(objEntrySet10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tm.out" + "'", str17, "tm.out");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(objCollection26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tm.out" + "'", str28, "tm.out");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 50 + "'", int35 == 50);
        org.junit.Assert.assertNull(obj36);
    }

    @Test
    public void test00886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00886");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.lang.Object obj4 = properties0.setProperty("hi!", "");
        java.util.Properties properties5 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.getConsoleFileName();
        java.lang.Object obj9 = properties5.put((java.lang.Object) atomikosProperties6, (java.lang.Object) 0L);
        java.lang.Object obj12 = properties5.setProperty("", "");
        java.util.Properties properties13 = new java.util.Properties(properties5);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties13);
        java.util.Properties properties16 = new java.util.Properties();
        java.util.Properties properties17 = new java.util.Properties(properties16);
        properties17.clear();
        java.util.Set<java.lang.String> strSet19 = properties17.stringPropertyNames();
        java.lang.Object obj20 = properties0.putIfAbsent((java.lang.Object) "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", (java.lang.Object) strSet19);
        java.util.Properties properties21 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection22 = properties21.values();
        java.util.Properties properties23 = null;
        java.util.Properties properties24 = new java.util.Properties(properties23);
        java.util.Properties properties25 = new java.util.Properties();
        java.util.Properties properties26 = new java.util.Properties(properties25);
        properties26.clear();
        properties24.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        java.lang.Object obj31 = properties24.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties21.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.setConsoleFileCount((-1));
        java.lang.String str36 = atomikosProperties33.getOutputDir();
        atomikosProperties33.setLogBaseName("tm.out");
        boolean boolean39 = properties24.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties40.setConsoleFileCount(100);
        atomikosProperties40.setAllowSubTransactions(true);
        java.lang.Object obj45 = properties24.remove((java.lang.Object) atomikosProperties40);
        java.util.Properties properties46 = new java.util.Properties(properties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str48 = atomikosProperties47.getConsoleFileName();
        atomikosProperties47.setOutputDir("hi!");
        int int51 = atomikosProperties47.getConsoleFileLimit();
        java.lang.String str52 = atomikosProperties47.getService();
        java.lang.String str53 = atomikosProperties47.getOutputDir();
        atomikosProperties47.setOutputDir("tmlog");
        long long56 = atomikosProperties47.getMaxTimeout();
        boolean boolean57 = properties46.contains((java.lang.Object) atomikosProperties47);
        java.util.Properties properties58 = new java.util.Properties(properties46);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties59.setConsoleFileCount(100);
        int int62 = atomikosProperties59.getConsoleFileCount();
        atomikosProperties59.setOutputDir("");
        java.lang.String str65 = atomikosProperties59.getConsoleFileName();
        int int66 = atomikosProperties59.getConsoleFileCount();
        boolean boolean67 = atomikosProperties59.isEnableLogging();
        java.lang.String str68 = atomikosProperties59.getConsoleFileName();
        boolean boolean69 = atomikosProperties59.isSerialJtaTransactions();
        atomikosProperties59.setService("tm.out");
        boolean boolean72 = properties58.containsKey((java.lang.Object) "tm.out");
        java.util.Set<java.lang.String> strSet73 = properties58.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties74 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties74.setConsoleFileCount((-1));
        java.lang.String str77 = atomikosProperties74.getOutputDir();
        atomikosProperties74.setLogBaseName("tm.out");
        int int80 = atomikosProperties74.getConsoleFileCount();
        atomikosProperties74.setMaxTimeout(10000L);
        boolean boolean83 = atomikosProperties74.isThreadedTwoPhaseCommit();
        java.lang.String str84 = atomikosProperties74.getLogBaseName();
        java.lang.String str85 = atomikosProperties74.getService();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj86 = properties0.replace((java.lang.Object) strSet73, (java.lang.Object) str85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tm.out" + "'", str7, "tm.out");
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(objCollection22);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "tm.out" + "'", str48, "tm.out");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 300000L + "'", long56 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 100 + "'", int62 == 100);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "tm.out" + "'", str65, "tm.out");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 100 + "'", int66 == 100);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "tm.out" + "'", str68, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "tm.out" + "'", str84, "tm.out");
        org.junit.Assert.assertNull(str85);
    }

    @Test
    public void test00887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00887");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties8.getConsoleLogLevel();
        java.lang.Object obj14 = properties1.putIfAbsent((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosLoggingLevel13);
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.Object obj17 = properties15.get((java.lang.Object) (byte) -1);
        java.util.Properties properties18 = new java.util.Properties(properties15);
        boolean boolean19 = properties1.equals((java.lang.Object) properties15);
        java.util.Properties properties20 = new java.util.Properties();
        java.util.Properties properties21 = new java.util.Properties(properties20);
        properties21.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str25 = atomikosProperties24.getConsoleFileName();
        atomikosProperties24.setOutputDir("hi!");
        int int28 = atomikosProperties24.getConsoleFileLimit();
        java.lang.Object obj29 = properties21.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties24);
        boolean boolean30 = atomikosProperties24.isForceShutdownOnVmExit();
        atomikosProperties24.setConsoleFileName("");
        java.lang.String str33 = atomikosProperties24.getService();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery34 = atomikosProperties24.getRecovery();
        long long35 = recovery34.getDelay();
        boolean boolean36 = properties15.containsValue((java.lang.Object) recovery34);
        java.util.Properties properties37 = new java.util.Properties(properties15);
        properties15.clear();
        java.lang.Object obj39 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj40 = properties15.remove(obj39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "tm.out" + "'", str25, "tm.out");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(recovery34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10000L + "'", long35 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test00888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00888");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Properties properties8 = new java.util.Properties();
        java.util.Properties properties9 = new java.util.Properties(properties8);
        properties9.clear();
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        java.lang.Object obj14 = properties9.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        boolean boolean15 = properties5.equals(obj14);
        java.util.Collection<java.lang.Object> objCollection16 = properties5.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.getConsoleFileName();
        atomikosProperties17.setOutputDir("hi!");
        int int21 = atomikosProperties17.getConsoleFileLimit();
        java.util.Properties properties22 = atomikosProperties17.asProperties();
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Properties properties24 = new java.util.Properties(properties23);
        properties24.clear();
        properties22.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.setConsoleFileCount((-1));
        java.lang.String str30 = atomikosProperties27.getOutputDir();
        atomikosProperties27.setLogBaseName("tm.out");
        int int33 = atomikosProperties27.getMaxActives();
        boolean boolean34 = properties5.remove((java.lang.Object) properties22, (java.lang.Object) int33);
        java.lang.String str36 = properties5.getProperty("{}");
        java.util.Properties properties37 = new java.util.Properties();
        java.util.Properties properties38 = new java.util.Properties(properties37);
        properties38.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str42 = atomikosProperties41.getConsoleFileName();
        atomikosProperties41.setOutputDir("hi!");
        int int45 = atomikosProperties41.getConsoleFileLimit();
        java.lang.Object obj46 = properties38.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties41);
        boolean boolean47 = atomikosProperties41.isForceShutdownOnVmExit();
        atomikosProperties41.setConsoleFileName("");
        java.lang.String str50 = atomikosProperties41.getService();
        boolean boolean51 = atomikosProperties41.isEnableLogging();
        long long52 = atomikosProperties41.getMaxTimeout();
        boolean boolean53 = atomikosProperties41.isAllowSubTransactions();
        java.util.Properties properties54 = null;
        java.util.Properties properties55 = new java.util.Properties(properties54);
        java.util.Properties properties56 = new java.util.Properties();
        java.util.Properties properties57 = new java.util.Properties(properties56);
        properties57.clear();
        properties55.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties57);
        java.util.Collection<java.lang.Object> objCollection60 = properties57.values();
        java.lang.Object obj61 = properties5.putIfAbsent((java.lang.Object) atomikosProperties41, (java.lang.Object) objCollection60);
        java.io.OutputStream outputStream62 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.store(outputStream62, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=hi!, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tm.out" + "'", str18, "tm.out");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "tm.out" + "'", str42, "tm.out");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 300000L + "'", long52 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objCollection60);
        org.junit.Assert.assertNull(obj61);
    }

    @Test
    public void test00889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00889");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.keys();
        java.lang.String str5 = properties2.getProperty("{}");
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Properties properties7 = new java.util.Properties(properties6);
        properties7.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str11 = atomikosProperties10.getConsoleFileName();
        atomikosProperties10.setOutputDir("hi!");
        int int14 = atomikosProperties10.getConsoleFileLimit();
        java.lang.Object obj15 = properties7.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties10);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel16 = atomikosProperties10.getConsoleLogLevel();
        java.lang.String str17 = atomikosProperties10.getTransactionManagerUniqueName();
        boolean boolean18 = atomikosProperties10.isThreadedTwoPhaseCommit();
        atomikosProperties10.setDefaultJtaTimeout((long) 10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.setConsoleFileCount(100);
        atomikosProperties21.setAllowSubTransactions(true);
        boolean boolean26 = atomikosProperties21.isForceShutdownOnVmExit();
        atomikosProperties21.setConsoleFileCount(10);
        atomikosProperties21.setConsoleFileCount(50);
        atomikosProperties21.setForceShutdownOnVmExit(true);
        boolean boolean33 = properties2.remove((java.lang.Object) atomikosProperties10, (java.lang.Object) true);
        int int34 = atomikosProperties10.getConsoleFileLimit();
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tm.out" + "'", str11, "tm.out");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel16 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel16.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
    }

    @Test
    public void test00890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00890");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        java.util.Set<java.lang.Object> objSet6 = properties5.keySet();
        java.lang.Class<?> wildcardClass7 = objSet6.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(objSet6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test00891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00891");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Properties properties25 = new java.util.Properties(properties3);
        java.lang.String str27 = properties25.getProperty("");
        java.util.Set<java.lang.Object> objSet28 = properties25.keySet();
        java.util.Set<java.lang.String> strSet29 = properties25.stringPropertyNames();
        java.lang.Object obj30 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean31 = properties25.containsValue(obj30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(objSet28);
        org.junit.Assert.assertNotNull(strSet29);
    }

    @Test
    public void test00892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00892");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        atomikosProperties0.setCheckpointInterval((long) (short) 10);
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = new java.util.Properties(properties5);
        java.util.Enumeration<?> wildcardEnumeration7 = properties6.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getTransactionManagerUniqueName();
        boolean boolean10 = atomikosProperties8.isForceShutdownOnVmExit();
        java.util.Properties properties11 = atomikosProperties8.asProperties();
        int int12 = properties11.size();
        boolean boolean13 = properties11.isEmpty();
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.io.PrintWriter printWriter15 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties6.list(printWriter15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(wildcardEnumeration7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 18 + "'", int12 == 18);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test00893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00893");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties1.entrySet();
        java.util.Properties properties11 = new java.util.Properties(properties1);
        java.util.Properties properties12 = new java.util.Properties();
        java.lang.Object obj14 = properties12.get((java.lang.Object) (byte) -1);
        java.util.Properties properties15 = new java.util.Properties(properties12);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.getConsoleFileName();
        java.lang.String str18 = atomikosProperties16.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel19 = atomikosProperties16.getConsoleLogLevel();
        boolean boolean20 = properties12.equals((java.lang.Object) atomikosProperties16);
        java.lang.String str21 = properties12.toString();
        java.util.Properties properties22 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection23 = properties22.values();
        java.util.Properties properties24 = new java.util.Properties(properties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str26 = atomikosProperties25.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel29 = atomikosProperties27.getConsoleLogLevel();
        atomikosProperties25.setConsoleLogLevel(atomikosLoggingLevel29);
        atomikosProperties25.setSerialJtaTransactions(false);
        boolean boolean33 = properties24.containsValue((java.lang.Object) atomikosProperties25);
        atomikosProperties25.setEnableLogging(false);
        java.lang.String str36 = atomikosProperties25.getLogBaseName();
        java.lang.Object obj37 = properties11.put((java.lang.Object) str21, (java.lang.Object) atomikosProperties25);
        java.util.Properties properties38 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection39 = properties38.values();
        java.util.Properties properties40 = null;
        java.util.Properties properties41 = new java.util.Properties(properties40);
        java.util.Properties properties42 = new java.util.Properties();
        java.util.Properties properties43 = new java.util.Properties(properties42);
        properties43.clear();
        properties41.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties43);
        java.lang.Object obj48 = properties41.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties38.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties41);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties50.setConsoleFileCount((-1));
        java.lang.String str53 = atomikosProperties50.getOutputDir();
        atomikosProperties50.setLogBaseName("tm.out");
        boolean boolean56 = properties41.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties57.setConsoleFileCount(100);
        atomikosProperties57.setAllowSubTransactions(true);
        java.lang.Object obj62 = properties41.remove((java.lang.Object) atomikosProperties57);
        boolean boolean63 = properties11.containsValue((java.lang.Object) properties41);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties64.setConsoleFileCount(100);
        atomikosProperties64.setAllowSubTransactions(true);
        boolean boolean69 = atomikosProperties64.isForceShutdownOnVmExit();
        int int70 = atomikosProperties64.getConsoleFileCount();
        java.util.Properties properties71 = atomikosProperties64.asProperties();
        java.util.Properties properties72 = atomikosProperties64.asProperties();
        java.util.Properties properties73 = atomikosProperties64.asProperties();
        java.lang.Object obj74 = properties41.get((java.lang.Object) properties73);
        java.util.Set<java.lang.Object> objSet75 = properties41.keySet();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(objEntrySet10);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tm.out" + "'", str17, "tm.out");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel19 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel19.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{}" + "'", str21, "{}");
        org.junit.Assert.assertNotNull(objCollection23);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tm.out" + "'", str28, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel29 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel29.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tmlog" + "'", str36, "tmlog");
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(objCollection39);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 100 + "'", int70 == 100);
        org.junit.Assert.assertNotNull(properties71);
        org.junit.Assert.assertNotNull(properties72);
        org.junit.Assert.assertNotNull(properties73);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNotNull(objSet75);
    }

    @Test
    public void test00894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00894");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setConsoleFileCount(100);
        atomikosProperties6.setAllowSubTransactions(true);
        boolean boolean11 = atomikosProperties6.isForceShutdownOnVmExit();
        boolean boolean12 = properties5.contains((java.lang.Object) atomikosProperties6);
        java.lang.String str13 = atomikosProperties6.getOutputDir();
        atomikosProperties6.setConsoleFileName("{10=10.0}");
        java.lang.String str16 = atomikosProperties6.getConsoleFileName();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{10=10.0}" + "'", str16, "{10=10.0}");
    }

    @Test
    public void test00895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00895");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean5 = atomikosProperties0.isForceShutdownOnVmExit();
        int int6 = atomikosProperties0.getConsoleFileCount();
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str10 = atomikosProperties9.getConsoleFileName();
        atomikosProperties9.setOutputDir("hi!");
        int int13 = atomikosProperties9.getConsoleFileLimit();
        java.util.Properties properties14 = atomikosProperties9.asProperties();
        java.lang.String str15 = atomikosProperties9.getService();
        atomikosProperties9.setService("hi!");
        atomikosProperties9.setConsoleFileName("tm.out");
        java.lang.String str20 = atomikosProperties9.getTransactionManagerUniqueName();
        long long21 = atomikosProperties9.getMaxTimeout();
        int int22 = atomikosProperties9.getConsoleFileLimit();
        java.lang.Object obj23 = properties8.get((java.lang.Object) atomikosProperties9);
        java.util.Set<java.lang.Object> objSet24 = properties8.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet25 = properties8.entrySet();
        java.io.InputStream inputStream26 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.load(inputStream26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tm.out" + "'", str10, "tm.out");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 300000L + "'", long21 == 300000L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(objSet24);
        org.junit.Assert.assertNotNull(objEntrySet25);
    }

    @Test
    public void test00896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00896");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean5 = atomikosProperties0.isForceShutdownOnVmExit();
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        atomikosProperties0.setConsoleFileName("");
        boolean boolean9 = atomikosProperties0.isSerialJtaTransactions();
        boolean boolean10 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.setMaxActives((int) (short) 10);
        boolean boolean13 = atomikosProperties0.isEnableLogging();
        long long14 = atomikosProperties0.getDefaultJtaTimeout();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
    }

    @Test
    public void test00897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00897");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties8.getConsoleLogLevel();
        java.lang.Object obj14 = properties1.putIfAbsent((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosLoggingLevel13);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.getConsoleFileName();
        atomikosProperties15.setOutputDir("hi!");
        int int19 = atomikosProperties15.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel20 = atomikosProperties15.getConsoleLogLevel();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery21 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long22 = recovery21.getForgetOrphanedLogEntriesDelay();
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Properties properties24 = new java.util.Properties(properties23);
        properties24.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.getConsoleFileName();
        atomikosProperties27.setOutputDir("hi!");
        int int31 = atomikosProperties27.getConsoleFileLimit();
        java.lang.Object obj32 = properties24.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties27);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel33 = atomikosProperties27.getConsoleLogLevel();
        java.lang.String str34 = atomikosProperties27.getTransactionManagerUniqueName();
        atomikosProperties27.setThreadedTwoPhaseCommit(false);
        boolean boolean37 = properties1.replace((java.lang.Object) atomikosProperties15, (java.lang.Object) recovery21, (java.lang.Object) false);
        long long38 = recovery21.getRetryInterval();
        long long39 = recovery21.getForgetOrphanedLogEntriesDelay();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tm.out" + "'", str16, "tm.out");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel20 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel20.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 86400000L + "'", long22 == 86400000L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tm.out" + "'", str28, "tm.out");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel33 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel33.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10000L + "'", long38 == 10000L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 86400000L + "'", long39 == 86400000L);
    }

    @Test
    public void test00898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00898");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties1.elements();
        java.util.Properties properties5 = new java.util.Properties(properties1);
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Properties properties7 = new java.util.Properties(properties6);
        int int8 = properties7.size();
        boolean boolean9 = properties7.isEmpty();
        java.util.Properties properties10 = new java.util.Properties(properties7);
        java.util.Properties properties11 = new java.util.Properties(properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.getConsoleFileName();
        atomikosProperties12.setOutputDir("hi!");
        int int16 = atomikosProperties12.getConsoleFileLimit();
        java.util.Properties properties17 = atomikosProperties12.asProperties();
        java.lang.String str18 = atomikosProperties12.getService();
        atomikosProperties12.setService("hi!");
        atomikosProperties12.setForceShutdownOnVmExit(true);
        atomikosProperties12.setThreadedTwoPhaseCommit(false);
        java.util.Properties properties25 = atomikosProperties12.asProperties();
        java.util.Properties properties27 = new java.util.Properties();
        java.util.Properties properties28 = new java.util.Properties(properties27);
        int int29 = properties28.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery30 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long31 = recovery30.getForgetOrphanedLogEntriesDelay();
        java.lang.Class<?> wildcardClass32 = recovery30.getClass();
        boolean boolean33 = properties28.containsKey((java.lang.Object) wildcardClass32);
        boolean boolean34 = properties7.replace((java.lang.Object) properties25, (java.lang.Object) 1.0f, (java.lang.Object) wildcardClass32);
        java.util.Properties properties35 = new java.util.Properties(properties25);
        java.util.Properties properties36 = new java.util.Properties();
        java.util.Properties properties37 = new java.util.Properties(properties36);
        properties37.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str41 = atomikosProperties40.getConsoleFileName();
        atomikosProperties40.setOutputDir("hi!");
        int int44 = atomikosProperties40.getConsoleFileLimit();
        java.lang.Object obj45 = properties37.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties40);
        boolean boolean46 = atomikosProperties40.isForceShutdownOnVmExit();
        atomikosProperties40.setConsoleFileName("");
        java.lang.String str49 = atomikosProperties40.getService();
        java.util.Properties properties50 = atomikosProperties40.asProperties();
        boolean boolean51 = properties1.remove((java.lang.Object) properties25, (java.lang.Object) atomikosProperties40);
        java.util.Properties properties52 = new java.util.Properties(properties1);
        java.io.OutputStream outputStream53 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties52.storeToXML(outputStream53, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tm.out" + "'", str13, "tm.out");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 86400000L + "'", long31 == 86400000L);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "tm.out" + "'", str41, "tm.out");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test00899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00899");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        atomikosProperties19.setAllowSubTransactions(false);
        int int27 = atomikosProperties19.getConsoleFileCount();
        atomikosProperties19.setThreadedTwoPhaseCommit(false);
        long long30 = atomikosProperties19.getDefaultJtaTimeout();
        long long31 = atomikosProperties19.getDefaultJtaTimeout();
        atomikosProperties19.setForceShutdownOnVmExit(false);
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10000L + "'", long30 == 10000L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10000L + "'", long31 == 10000L);
    }

    @Test
    public void test00900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00900");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Collection<java.lang.Object> objCollection6 = properties3.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str8 = atomikosProperties7.getConsoleFileName();
        atomikosProperties7.setOutputDir("hi!");
        int int11 = atomikosProperties7.getConsoleFileLimit();
        java.util.Properties properties12 = atomikosProperties7.asProperties();
        boolean boolean13 = properties3.containsValue((java.lang.Object) atomikosProperties7);
        java.lang.String str14 = atomikosProperties7.getService();
        atomikosProperties7.setService("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        atomikosProperties7.setConsoleFileCount((int) (short) 0);
        java.util.Properties properties19 = atomikosProperties7.asProperties();
        atomikosProperties7.setMaxActives((int) (byte) 100);
        boolean boolean22 = atomikosProperties7.isAllowSubTransactions();
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tm.out" + "'", str8, "tm.out");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test00901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00901");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.lang.Object obj3 = null;
        boolean boolean4 = properties0.equals(obj3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.keys();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Properties properties7 = new java.util.Properties(properties6);
        int int8 = properties7.size();
        boolean boolean9 = properties7.isEmpty();
        java.util.Properties properties10 = new java.util.Properties(properties7);
        java.util.Properties properties11 = new java.util.Properties(properties7);
        int int12 = properties7.size();
        java.util.Properties properties13 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str15 = atomikosProperties14.getConsoleFileName();
        atomikosProperties14.setOutputDir("hi!");
        int int18 = atomikosProperties14.getConsoleFileLimit();
        java.util.Properties properties19 = atomikosProperties14.asProperties();
        java.lang.String str20 = atomikosProperties14.getService();
        atomikosProperties14.setService("hi!");
        java.lang.Object obj24 = properties13.putIfAbsent((java.lang.Object) "hi!", (java.lang.Object) 10L);
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties13);
        properties7.clear();
        java.util.Properties properties27 = new java.util.Properties(properties7);
        boolean boolean28 = properties0.contains((java.lang.Object) properties27);
        java.util.Properties properties29 = new java.util.Properties(properties0);
        java.lang.Class<?> wildcardClass30 = properties29.getClass();
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tm.out" + "'", str15, "tm.out");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test00902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00902");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Properties properties25 = new java.util.Properties(properties3);
        java.lang.String str27 = properties25.getProperty("");
        properties25.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setConsoleFileCount(100);
        int int32 = atomikosProperties29.getConsoleFileCount();
        atomikosProperties29.setOutputDir("");
        java.lang.String str35 = atomikosProperties29.getConsoleFileName();
        long long36 = atomikosProperties29.getMaxTimeout();
        atomikosProperties29.setMaxActives(100);
        java.util.Properties properties39 = new java.util.Properties();
        java.util.Properties properties40 = new java.util.Properties(properties39);
        properties40.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str44 = atomikosProperties43.getConsoleFileName();
        atomikosProperties43.setOutputDir("hi!");
        int int47 = atomikosProperties43.getConsoleFileLimit();
        java.lang.Object obj48 = properties40.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties43);
        boolean boolean49 = atomikosProperties43.isForceShutdownOnVmExit();
        atomikosProperties43.setConsoleFileName("");
        java.lang.String str52 = atomikosProperties43.getService();
        boolean boolean53 = atomikosProperties43.isEnableLogging();
        java.lang.Object obj54 = properties25.put((java.lang.Object) atomikosProperties29, (java.lang.Object) boolean53);
        java.lang.String str55 = atomikosProperties29.getLogBaseName();
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tm.out" + "'", str35, "tm.out");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 300000L + "'", long36 == 300000L);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "tm.out" + "'", str44, "tm.out");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "tmlog" + "'", str55, "tmlog");
    }

    @Test
    public void test00903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00903");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties8.getConsoleLogLevel();
        java.lang.Object obj14 = properties1.putIfAbsent((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosLoggingLevel13);
        java.util.Collection<java.lang.Object> objCollection15 = properties1.values();
        java.util.Properties properties16 = new java.util.Properties();
        java.util.Properties properties17 = new java.util.Properties(properties16);
        properties17.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str21 = atomikosProperties20.getConsoleFileName();
        atomikosProperties20.setOutputDir("hi!");
        int int24 = atomikosProperties20.getConsoleFileLimit();
        java.lang.Object obj25 = properties17.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties20);
        boolean boolean26 = properties1.equals((java.lang.Object) properties17);
        java.util.Properties properties27 = new java.util.Properties();
        java.util.Properties properties28 = new java.util.Properties(properties27);
        properties28.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str32 = atomikosProperties31.getConsoleFileName();
        atomikosProperties31.setOutputDir("hi!");
        int int35 = atomikosProperties31.getConsoleFileLimit();
        java.lang.Object obj36 = properties28.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties31);
        atomikosProperties31.setLogBaseName("tm.out");
        boolean boolean39 = atomikosProperties31.isForceShutdownOnVmExit();
        boolean boolean40 = atomikosProperties31.isForceShutdownOnVmExit();
        boolean boolean41 = atomikosProperties31.isSerialJtaTransactions();
        long long42 = atomikosProperties31.getMaxTimeout();
        java.util.Properties properties43 = new java.util.Properties();
        java.util.Properties properties44 = new java.util.Properties(properties43);
        int int45 = properties44.size();
        boolean boolean46 = properties44.isEmpty();
        java.util.Set<java.lang.Object> objSet47 = properties44.keySet();
        java.util.Properties properties48 = null;
        java.util.Properties properties49 = new java.util.Properties(properties48);
        java.util.Properties properties50 = new java.util.Properties();
        java.util.Properties properties51 = new java.util.Properties(properties50);
        properties51.clear();
        properties49.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties51);
        java.util.Collection<java.lang.Object> objCollection54 = properties51.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str56 = atomikosProperties55.getConsoleFileName();
        atomikosProperties55.setOutputDir("hi!");
        int int59 = atomikosProperties55.getConsoleFileLimit();
        java.util.Properties properties60 = atomikosProperties55.asProperties();
        boolean boolean61 = properties51.containsValue((java.lang.Object) atomikosProperties55);
        boolean boolean62 = properties51.isEmpty();
        properties44.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties51);
        java.util.Properties properties64 = new java.util.Properties(properties44);
        java.util.Properties properties65 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection66 = properties65.values();
        java.util.Properties properties67 = new java.util.Properties(properties65);
        java.util.Enumeration<java.lang.Object> objEnumeration68 = properties67.elements();
        boolean boolean69 = properties67.isEmpty();
        boolean boolean70 = properties64.equals((java.lang.Object) boolean69);
        java.lang.Object obj71 = properties17.putIfAbsent((java.lang.Object) atomikosProperties31, (java.lang.Object) boolean69);
        java.io.OutputStream outputStream72 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties17.storeToXML(outputStream72, "hi!", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(objCollection15);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tm.out" + "'", str21, "tm.out");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tm.out" + "'", str32, "tm.out");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 300000L + "'", long42 == 300000L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objSet47);
        org.junit.Assert.assertNotNull(objCollection54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "tm.out" + "'", str56, "tm.out");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(properties60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(objCollection66);
        org.junit.Assert.assertNotNull(objEnumeration68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(obj71);
    }

    @Test
    public void test00904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00904");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Properties properties4 = new java.util.Properties(properties1);
        java.util.Properties properties5 = new java.util.Properties(properties1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.getConsoleFileName();
        atomikosProperties6.setOutputDir("hi!");
        int int10 = atomikosProperties6.getConsoleFileLimit();
        java.util.Properties properties11 = atomikosProperties6.asProperties();
        java.util.Set<java.lang.String> strSet12 = properties11.stringPropertyNames();
        java.util.Properties properties13 = new java.util.Properties(properties11);
        java.util.Properties properties14 = null;
        java.util.Properties properties15 = new java.util.Properties(properties14);
        java.util.Properties properties16 = new java.util.Properties();
        java.util.Properties properties17 = new java.util.Properties(properties16);
        properties17.clear();
        properties15.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties17);
        java.lang.Object obj22 = properties17.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet23 = properties17.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.setConsoleFileCount((-1));
        java.lang.String str27 = atomikosProperties24.getOutputDir();
        atomikosProperties24.setLogBaseName("tm.out");
        int int30 = atomikosProperties24.getConsoleFileCount();
        boolean boolean31 = properties17.containsKey((java.lang.Object) atomikosProperties24);
        atomikosProperties24.setConsoleFileCount((int) (byte) -1);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery34 = atomikosProperties24.getRecovery();
        java.util.Properties properties35 = new java.util.Properties();
        java.util.Properties properties36 = new java.util.Properties(properties35);
        properties36.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str40 = atomikosProperties39.getConsoleFileName();
        atomikosProperties39.setOutputDir("hi!");
        int int43 = atomikosProperties39.getConsoleFileLimit();
        java.lang.Object obj44 = properties36.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties39);
        atomikosProperties39.setLogBaseName("tm.out");
        atomikosProperties39.setForceShutdownOnVmExit(false);
        java.lang.Object obj49 = properties13.replace((java.lang.Object) recovery34, (java.lang.Object) atomikosProperties39);
        java.util.Enumeration<java.lang.Object> objEnumeration50 = properties13.keys();
        boolean boolean52 = properties13.equals((java.lang.Object) 0.0d);
        java.util.Properties properties53 = new java.util.Properties(properties13);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties54.setConsoleFileCount(100);
        atomikosProperties54.setAllowSubTransactions(true);
        boolean boolean59 = atomikosProperties54.isForceShutdownOnVmExit();
        atomikosProperties54.setConsoleFileCount(10);
        atomikosProperties54.setConsoleFileCount(50);
        java.lang.String str64 = atomikosProperties54.getLogBaseName();
        java.lang.Object obj65 = properties1.getOrDefault((java.lang.Object) properties53, (java.lang.Object) atomikosProperties54);
        java.lang.Object obj66 = properties1.clone();
        int int67 = properties1.size();
        java.lang.String str68 = properties1.toString();
        java.lang.String str71 = properties1.getProperty("{=hi!}", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=false, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tm.out" + "'", str7, "tm.out");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(recovery34);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "tm.out" + "'", str40, "tm.out");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(objEnumeration50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "tmlog" + "'", str64, "tmlog");
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "{}");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "{}" + "'", str68, "{}");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=false, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str71, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=false, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
    }

    @Test
    public void test00905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00905");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.lang.Object obj3 = null;
        boolean boolean4 = properties0.equals(obj3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.keys();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Properties properties7 = new java.util.Properties(properties6);
        int int8 = properties7.size();
        boolean boolean9 = properties7.isEmpty();
        java.util.Properties properties10 = new java.util.Properties(properties7);
        java.util.Properties properties11 = new java.util.Properties(properties7);
        int int12 = properties7.size();
        java.util.Properties properties13 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str15 = atomikosProperties14.getConsoleFileName();
        atomikosProperties14.setOutputDir("hi!");
        int int18 = atomikosProperties14.getConsoleFileLimit();
        java.util.Properties properties19 = atomikosProperties14.asProperties();
        java.lang.String str20 = atomikosProperties14.getService();
        atomikosProperties14.setService("hi!");
        java.lang.Object obj24 = properties13.putIfAbsent((java.lang.Object) "hi!", (java.lang.Object) 10L);
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties13);
        properties7.clear();
        java.util.Properties properties27 = new java.util.Properties(properties7);
        boolean boolean28 = properties0.contains((java.lang.Object) properties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setConsoleFileCount((-1));
        java.lang.String str32 = atomikosProperties29.getOutputDir();
        atomikosProperties29.setLogBaseName("tm.out");
        atomikosProperties29.setLogBaseDir("tm.out");
        java.lang.String str37 = atomikosProperties29.getLogBaseDir();
        atomikosProperties29.setDefaultJtaTimeout(10L);
        java.util.Properties properties40 = atomikosProperties29.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery41 = atomikosProperties29.getRecovery();
        recovery41.setMaxRetries((int) (short) 100);
        java.util.Properties properties44 = new java.util.Properties();
        java.util.Properties properties45 = new java.util.Properties(properties44);
        properties45.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str49 = atomikosProperties48.getConsoleFileName();
        atomikosProperties48.setOutputDir("hi!");
        int int52 = atomikosProperties48.getConsoleFileLimit();
        java.lang.Object obj53 = properties45.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties48);
        boolean boolean54 = atomikosProperties48.isForceShutdownOnVmExit();
        atomikosProperties48.setConsoleFileName("");
        java.lang.String str57 = atomikosProperties48.getService();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery58 = atomikosProperties48.getRecovery();
        long long59 = recovery58.getRetryInterval();
        recovery58.setRetryInterval(500L);
        long long62 = recovery58.getDelay();
        java.lang.Object obj63 = properties27.replace((java.lang.Object) recovery41, (java.lang.Object) recovery58);
        java.util.Set<java.lang.String> strSet64 = properties27.stringPropertyNames();
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tm.out" + "'", str15, "tm.out");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tm.out" + "'", str37, "tm.out");
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertNotNull(recovery41);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tm.out" + "'", str49, "tm.out");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(recovery58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 10000L + "'", long59 == 10000L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 10000L + "'", long62 == 10000L);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNotNull(strSet64);
    }

    @Test
    public void test00906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00906");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long2 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long3 = recovery0.getRetryInterval();
        recovery0.setDelay((long) '4');
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 86400000L + "'", long1 == 86400000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 86400000L + "'", long2 == 86400000L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 10000L + "'", long3 == 10000L);
    }

    @Test
    public void test00907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00907");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        long long4 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setEnableLogging(false);
        int int7 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setMaxActives((int) (short) 0);
        atomikosProperties0.setConsoleFileName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=false, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 500L + "'", long4 == 500L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
    }

    @Test
    public void test00908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00908");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        java.lang.String str3 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseName("tm.out");
        int int6 = atomikosProperties0.getConsoleFileCount();
        java.lang.String str7 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setMaxTimeout((long) (-1));
        atomikosProperties0.setAllowSubTransactions(true);
        long long12 = atomikosProperties0.getMaxTimeout();
        boolean boolean13 = atomikosProperties0.isAllowSubTransactions();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tm.out" + "'", str7, "tm.out");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test00909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00909");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        int int3 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setTransactionManagerUniqueName("{hi!=10}");
        atomikosProperties0.setTransactionManagerUniqueName("");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
    }

    @Test
    public void test00910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00910");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        boolean boolean4 = properties2.isEmpty();
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection6 = properties5.values();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        properties10.clear();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.lang.Object obj15 = properties8.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        boolean boolean20 = properties18.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties18.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet22 = properties18.entrySet();
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection24 = properties23.values();
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        java.util.Properties properties27 = new java.util.Properties();
        java.util.Properties properties28 = new java.util.Properties(properties27);
        properties28.clear();
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        java.lang.Object obj33 = properties26.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setConsoleFileCount((-1));
        java.lang.String str38 = atomikosProperties35.getOutputDir();
        atomikosProperties35.setLogBaseName("tm.out");
        boolean boolean41 = properties26.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties42.setConsoleFileCount(100);
        atomikosProperties42.setAllowSubTransactions(true);
        java.lang.Object obj47 = properties26.remove((java.lang.Object) atomikosProperties42);
        java.util.Set<java.lang.Object> objSet48 = properties26.keySet();
        boolean boolean49 = properties2.replace((java.lang.Object) properties8, (java.lang.Object) objEntrySet22, (java.lang.Object) properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str51 = atomikosProperties50.getConsoleFileName();
        atomikosProperties50.setOutputDir("hi!");
        int int54 = atomikosProperties50.getConsoleFileLimit();
        java.util.Properties properties55 = atomikosProperties50.asProperties();
        java.util.Properties properties56 = new java.util.Properties();
        java.util.Properties properties57 = new java.util.Properties(properties56);
        properties57.clear();
        properties55.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties57);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str61 = atomikosProperties60.getConsoleFileName();
        atomikosProperties60.setOutputDir("hi!");
        int int64 = atomikosProperties60.getConsoleFileLimit();
        java.util.Properties properties65 = atomikosProperties60.asProperties();
        java.lang.String str66 = atomikosProperties60.getService();
        atomikosProperties60.setService("hi!");
        atomikosProperties60.setConsoleFileName("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery71 = atomikosProperties60.getRecovery();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties72 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str73 = atomikosProperties72.getConsoleFileName();
        atomikosProperties72.setOutputDir("hi!");
        java.lang.String str76 = atomikosProperties72.getOutputDir();
        boolean boolean77 = properties26.replace((java.lang.Object) properties57, (java.lang.Object) atomikosProperties60, (java.lang.Object) atomikosProperties72);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties78 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str79 = atomikosProperties78.getConsoleFileName();
        atomikosProperties78.setOutputDir("hi!");
        int int82 = atomikosProperties78.getConsoleFileLimit();
        java.util.Properties properties83 = atomikosProperties78.asProperties();
        java.lang.String str84 = atomikosProperties78.getService();
        atomikosProperties78.setService("hi!");
        atomikosProperties78.setConsoleFileName("tm.out");
        java.lang.String str89 = atomikosProperties78.getTransactionManagerUniqueName();
        long long90 = atomikosProperties78.getMaxTimeout();
        boolean boolean91 = properties57.contains((java.lang.Object) atomikosProperties78);
        java.lang.String str92 = atomikosProperties78.getTransactionManagerUniqueName();
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNotNull(objEntrySet22);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(objSet48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "tm.out" + "'", str51, "tm.out");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(properties55);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "tm.out" + "'", str61, "tm.out");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(properties65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(recovery71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "tm.out" + "'", str73, "tm.out");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "hi!" + "'", str76, "hi!");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "tm.out" + "'", str79, "tm.out");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(properties83);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 300000L + "'", long90 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(str92);
    }

    @Test
    public void test00911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00911");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.lang.Object obj3 = null;
        boolean boolean4 = properties0.equals(obj3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.keys();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Properties properties7 = new java.util.Properties(properties6);
        int int8 = properties7.size();
        boolean boolean9 = properties7.isEmpty();
        java.util.Properties properties10 = new java.util.Properties(properties7);
        java.util.Properties properties11 = new java.util.Properties(properties7);
        int int12 = properties7.size();
        java.util.Properties properties13 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str15 = atomikosProperties14.getConsoleFileName();
        atomikosProperties14.setOutputDir("hi!");
        int int18 = atomikosProperties14.getConsoleFileLimit();
        java.util.Properties properties19 = atomikosProperties14.asProperties();
        java.lang.String str20 = atomikosProperties14.getService();
        atomikosProperties14.setService("hi!");
        java.lang.Object obj24 = properties13.putIfAbsent((java.lang.Object) "hi!", (java.lang.Object) 10L);
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties13);
        properties7.clear();
        java.util.Properties properties27 = new java.util.Properties(properties7);
        boolean boolean28 = properties0.contains((java.lang.Object) properties27);
        java.io.PrintWriter printWriter29 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.list(printWriter29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tm.out" + "'", str15, "tm.out");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test00912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00912");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.lang.String str5 = atomikosProperties0.getService();
        java.lang.String str6 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setOutputDir("tmlog");
        long long9 = atomikosProperties0.getMaxTimeout();
        java.lang.String str10 = atomikosProperties0.getLogBaseName();
        int int11 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setSerialJtaTransactions(true);
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        java.util.Properties properties16 = atomikosProperties0.asProperties();
        java.util.Properties properties17 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection18 = properties17.values();
        java.util.Properties properties19 = new java.util.Properties(properties17);
        java.lang.Object obj20 = null;
        boolean boolean21 = properties17.equals(obj20);
        java.util.Enumeration<java.lang.Object> objEnumeration22 = properties17.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties17.elements();
        java.util.Properties properties24 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str26 = atomikosProperties25.getConsoleFileName();
        java.lang.Object obj28 = properties24.put((java.lang.Object) atomikosProperties25, (java.lang.Object) 0L);
        boolean boolean29 = properties17.containsValue((java.lang.Object) properties24);
        java.lang.Object obj30 = properties24.clone();
        boolean boolean31 = properties16.containsKey(obj30);
        boolean boolean32 = properties16.isEmpty();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 300000L + "'", long9 == 300000L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertNotNull(objCollection18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objEnumeration22);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "tm.out" + "'", str26, "tm.out");
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test00913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00913");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.lang.Object obj3 = null;
        boolean boolean4 = properties0.equals(obj3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.keys();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection7 = properties6.values();
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Properties properties11 = new java.util.Properties(properties10);
        properties11.clear();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.lang.Object obj16 = properties9.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setConsoleFileCount((-1));
        java.lang.String str21 = atomikosProperties18.getOutputDir();
        atomikosProperties18.setLogBaseName("tm.out");
        boolean boolean24 = properties9.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties25.setConsoleFileCount(100);
        atomikosProperties25.setAllowSubTransactions(true);
        java.lang.Object obj30 = properties9.remove((java.lang.Object) atomikosProperties25);
        atomikosProperties25.setAllowSubTransactions(false);
        int int33 = atomikosProperties25.getConsoleFileCount();
        java.util.Properties properties34 = atomikosProperties25.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setConsoleFileCount((-1));
        atomikosProperties35.setTransactionManagerUniqueName("tm.out");
        java.lang.String str40 = atomikosProperties35.getLogBaseName();
        atomikosProperties35.setConsoleFileLimit((int) (byte) 1);
        atomikosProperties35.setLogBaseName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        java.lang.Object obj45 = properties0.put((java.lang.Object) properties34, (java.lang.Object) "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        java.util.Enumeration<java.lang.Object> objEnumeration46 = properties34.keys();
        java.io.OutputStream outputStream47 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties34.save(outputStream47, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(objCollection7);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "tmlog" + "'", str40, "tmlog");
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNotNull(objEnumeration46);
    }

    @Test
    public void test00914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00914");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.util.Properties properties28 = new java.util.Properties();
        java.util.Properties properties29 = new java.util.Properties(properties28);
        properties29.clear();
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        java.lang.Object obj32 = properties3.get((java.lang.Object) properties29);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.setConsoleFileCount((-1));
        atomikosProperties33.setAllowSubTransactions(false);
        boolean boolean38 = properties3.contains((java.lang.Object) false);
        java.util.Properties properties39 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str41 = atomikosProperties40.getConsoleFileName();
        java.lang.Object obj43 = properties39.put((java.lang.Object) atomikosProperties40, (java.lang.Object) 0L);
        java.util.Properties properties44 = new java.util.Properties();
        java.util.Properties properties45 = new java.util.Properties(properties44);
        properties45.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str49 = atomikosProperties48.getConsoleFileName();
        atomikosProperties48.setOutputDir("hi!");
        int int52 = atomikosProperties48.getConsoleFileLimit();
        java.lang.Object obj53 = properties45.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties48);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet54 = properties45.entrySet();
        java.util.Properties properties55 = new java.util.Properties(properties45);
        boolean boolean56 = properties3.remove((java.lang.Object) 0L, (java.lang.Object) properties45);
        java.lang.Object obj59 = properties45.setProperty("tm.out", "");
        java.io.PrintStream printStream60 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties45.list(printStream60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "tm.out" + "'", str41, "tm.out");
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tm.out" + "'", str49, "tm.out");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNotNull(objEntrySet54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(obj59);
    }

    @Test
    public void test00915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00915");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean5 = atomikosProperties0.isAllowSubTransactions();
        int int6 = atomikosProperties0.getConsoleFileLimit();
        atomikosProperties0.setConsoleFileCount((int) (short) 0);
        int int9 = atomikosProperties0.getMaxActives();
        boolean boolean10 = atomikosProperties0.isAllowSubTransactions();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test00916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00916");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Collection<java.lang.Object> objCollection2 = properties0.values();
        java.util.Properties properties3 = new java.util.Properties();
        java.util.Properties properties4 = new java.util.Properties(properties3);
        int int5 = properties4.size();
        boolean boolean6 = properties4.isEmpty();
        java.lang.Object obj7 = properties0.remove((java.lang.Object) boolean6);
        java.util.Properties properties8 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection9 = properties8.values();
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        java.util.Properties properties12 = new java.util.Properties();
        java.util.Properties properties13 = new java.util.Properties(properties12);
        properties13.clear();
        properties11.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties13);
        java.lang.Object obj18 = properties11.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.setConsoleFileCount((-1));
        java.lang.String str23 = atomikosProperties20.getOutputDir();
        atomikosProperties20.setLogBaseName("tm.out");
        boolean boolean26 = properties11.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.setConsoleFileCount(100);
        atomikosProperties27.setAllowSubTransactions(true);
        java.lang.Object obj32 = properties11.remove((java.lang.Object) atomikosProperties27);
        boolean boolean33 = atomikosProperties27.isSerialJtaTransactions();
        int int34 = atomikosProperties27.getConsoleFileLimit();
        long long35 = atomikosProperties27.getMaxTimeout();
        java.lang.Object obj36 = properties0.get((java.lang.Object) atomikosProperties27);
        atomikosProperties27.setForceShutdownOnVmExit(false);
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 300000L + "'", long35 == 300000L);
        org.junit.Assert.assertNull(obj36);
    }

    @Test
    public void test00917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00917");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setConsoleFileCount(100);
        atomikosProperties6.setAllowSubTransactions(true);
        boolean boolean11 = atomikosProperties6.isForceShutdownOnVmExit();
        boolean boolean12 = properties5.contains((java.lang.Object) atomikosProperties6);
        java.util.Properties properties13 = new java.util.Properties();
        java.util.Properties properties14 = new java.util.Properties(properties13);
        properties14.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.getConsoleFileName();
        atomikosProperties17.setOutputDir("hi!");
        int int21 = atomikosProperties17.getConsoleFileLimit();
        java.lang.Object obj22 = properties14.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties17);
        boolean boolean23 = atomikosProperties17.isForceShutdownOnVmExit();
        atomikosProperties17.setConsoleFileName("");
        java.lang.String str26 = atomikosProperties17.getService();
        atomikosProperties17.setTransactionManagerUniqueName("");
        java.lang.Object obj29 = properties5.get((java.lang.Object) "");
        java.io.OutputStream outputStream30 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.store(outputStream30, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=false, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tm.out" + "'", str18, "tm.out");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj29);
    }

    @Test
    public void test00918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00918");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Properties properties25 = new java.util.Properties(properties3);
        java.lang.String str26 = properties3.toString();
        properties3.clear();
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{10=10.0}" + "'", str26, "{10=10.0}");
    }

    @Test
    public void test00919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00919");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.setDelay((long) (short) 1);
        recovery0.setMaxRetries((int) (byte) 10);
        recovery0.setDelay((long) (byte) 1);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 86400000L + "'", long1 == 86400000L);
    }

    @Test
    public void test00920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00920");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Set<java.lang.Object> objSet4 = properties1.keySet();
        java.util.Properties properties5 = null;
        java.util.Properties properties6 = new java.util.Properties(properties5);
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Properties properties8 = new java.util.Properties(properties7);
        properties8.clear();
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.getConsoleFileName();
        atomikosProperties12.setOutputDir("hi!");
        int int16 = atomikosProperties12.getConsoleFileLimit();
        java.util.Properties properties17 = atomikosProperties12.asProperties();
        boolean boolean18 = properties8.containsValue((java.lang.Object) atomikosProperties12);
        boolean boolean19 = properties8.isEmpty();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Properties properties21 = new java.util.Properties(properties1);
        java.util.Enumeration<java.lang.Object> objEnumeration22 = properties1.keys();
        java.util.Properties properties23 = new java.util.Properties(properties1);
        java.util.Properties properties24 = null;
        java.util.Properties properties25 = new java.util.Properties(properties24);
        java.util.Properties properties26 = new java.util.Properties();
        java.util.Properties properties27 = new java.util.Properties(properties26);
        properties27.clear();
        properties25.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties27);
        java.lang.Object obj32 = properties27.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Properties properties33 = new java.util.Properties();
        java.util.Properties properties34 = new java.util.Properties(properties33);
        properties34.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str38 = atomikosProperties37.getConsoleFileName();
        atomikosProperties37.setOutputDir("hi!");
        int int41 = atomikosProperties37.getConsoleFileLimit();
        java.lang.Object obj42 = properties34.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties37);
        atomikosProperties37.setLogBaseName("tm.out");
        boolean boolean45 = properties27.containsKey((java.lang.Object) "tm.out");
        java.util.Properties properties46 = null;
        java.util.Properties properties47 = new java.util.Properties(properties46);
        java.util.Properties properties48 = new java.util.Properties();
        java.util.Properties properties49 = new java.util.Properties(properties48);
        properties49.clear();
        properties47.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties49);
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties47);
        java.util.Properties properties53 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str55 = atomikosProperties54.getConsoleFileName();
        java.lang.Object obj57 = properties53.put((java.lang.Object) atomikosProperties54, (java.lang.Object) 0L);
        java.lang.Object obj60 = properties53.setProperty("", "");
        java.util.Properties properties61 = new java.util.Properties(properties53);
        java.lang.Object obj62 = properties61.clone();
        properties47.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties61);
        java.util.Properties properties64 = new java.util.Properties(properties47);
        boolean boolean65 = properties1.equals((java.lang.Object) properties47);
        java.io.Reader reader66 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(reader66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objSet4);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tm.out" + "'", str13, "tm.out");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objEnumeration22);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tm.out" + "'", str38, "tm.out");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "tm.out" + "'", str55, "tm.out");
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "{}");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test00921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00921");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        boolean boolean4 = properties2.isEmpty();
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection6 = properties5.values();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        properties10.clear();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.lang.Object obj15 = properties8.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        boolean boolean20 = properties18.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties18.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet22 = properties18.entrySet();
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection24 = properties23.values();
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        java.util.Properties properties27 = new java.util.Properties();
        java.util.Properties properties28 = new java.util.Properties(properties27);
        properties28.clear();
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        java.lang.Object obj33 = properties26.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setConsoleFileCount((-1));
        java.lang.String str38 = atomikosProperties35.getOutputDir();
        atomikosProperties35.setLogBaseName("tm.out");
        boolean boolean41 = properties26.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties42.setConsoleFileCount(100);
        atomikosProperties42.setAllowSubTransactions(true);
        java.lang.Object obj47 = properties26.remove((java.lang.Object) atomikosProperties42);
        java.util.Set<java.lang.Object> objSet48 = properties26.keySet();
        boolean boolean49 = properties2.replace((java.lang.Object) properties8, (java.lang.Object) objEntrySet22, (java.lang.Object) properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str51 = atomikosProperties50.getConsoleFileName();
        atomikosProperties50.setOutputDir("hi!");
        int int54 = atomikosProperties50.getConsoleFileLimit();
        java.util.Properties properties55 = atomikosProperties50.asProperties();
        java.util.Properties properties56 = new java.util.Properties();
        java.util.Properties properties57 = new java.util.Properties(properties56);
        properties57.clear();
        properties55.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties57);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str61 = atomikosProperties60.getConsoleFileName();
        atomikosProperties60.setOutputDir("hi!");
        int int64 = atomikosProperties60.getConsoleFileLimit();
        java.util.Properties properties65 = atomikosProperties60.asProperties();
        java.lang.String str66 = atomikosProperties60.getService();
        atomikosProperties60.setService("hi!");
        atomikosProperties60.setConsoleFileName("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery71 = atomikosProperties60.getRecovery();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties72 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str73 = atomikosProperties72.getConsoleFileName();
        atomikosProperties72.setOutputDir("hi!");
        java.lang.String str76 = atomikosProperties72.getOutputDir();
        boolean boolean77 = properties26.replace((java.lang.Object) properties57, (java.lang.Object) atomikosProperties60, (java.lang.Object) atomikosProperties72);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties78 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str79 = atomikosProperties78.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties80 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str81 = atomikosProperties80.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel82 = atomikosProperties80.getConsoleLogLevel();
        atomikosProperties78.setConsoleLogLevel(atomikosLoggingLevel82);
        atomikosProperties78.setSerialJtaTransactions(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery86 = atomikosProperties78.getRecovery();
        recovery86.setDelay(0L);
        long long89 = recovery86.getRetryInterval();
        long long90 = recovery86.getDelay();
        long long91 = recovery86.getDelay();
        java.lang.Object obj92 = properties26.remove((java.lang.Object) recovery86);
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNotNull(objEntrySet22);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(objSet48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "tm.out" + "'", str51, "tm.out");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(properties55);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "tm.out" + "'", str61, "tm.out");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(properties65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(recovery71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "tm.out" + "'", str73, "tm.out");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "hi!" + "'", str76, "hi!");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "tm.out" + "'", str81, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel82 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel82.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(recovery86);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 10000L + "'", long89 == 10000L);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
        org.junit.Assert.assertNull(obj92);
    }

    @Test
    public void test00922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00922");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str3 = atomikosProperties2.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel4 = atomikosProperties2.getConsoleLogLevel();
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel4);
        atomikosProperties0.setSerialJtaTransactions(false);
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        java.io.PrintWriter printWriter9 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.list(printWriter9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "tm.out" + "'", str3, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel4 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel4.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties8);
    }

    @Test
    public void test00923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00923");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.setTransactionManagerUniqueName("tm.out");
        java.lang.String str7 = atomikosProperties0.getService();
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        java.io.OutputStream outputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.save(outputStream9, "{hi!=}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(properties8);
    }

    @Test
    public void test00924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00924");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.lang.String str6 = atomikosProperties0.getService();
        atomikosProperties0.setService("hi!");
        atomikosProperties0.setConsoleFileName("tm.out");
        java.lang.String str11 = atomikosProperties0.getTransactionManagerUniqueName();
        long long12 = atomikosProperties0.getMaxTimeout();
        int int13 = atomikosProperties0.getConsoleFileLimit();
        java.lang.String str14 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.setLogBaseName("{hi!=10}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 300000L + "'", long12 == 300000L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test00925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00925");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.get((java.lang.Object) (byte) -1);
        java.util.Properties properties3 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        java.lang.String str6 = atomikosProperties4.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel7 = atomikosProperties4.getConsoleLogLevel();
        boolean boolean8 = properties0.equals((java.lang.Object) atomikosProperties4);
        java.lang.String str9 = properties0.toString();
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection11 = properties10.values();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties10.keys();
        java.util.Properties properties14 = new java.util.Properties();
        java.util.Properties properties15 = new java.util.Properties(properties14);
        int int16 = properties15.size();
        boolean boolean17 = properties15.isEmpty();
        java.util.Set<java.lang.Object> objSet18 = properties15.keySet();
        java.util.Enumeration<java.lang.Object> objEnumeration19 = properties15.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.setConsoleFileCount((-1));
        atomikosProperties20.setAllowSubTransactions(false);
        java.util.Properties properties25 = atomikosProperties20.asProperties();
        boolean boolean26 = properties0.replace((java.lang.Object) properties10, (java.lang.Object) objEnumeration19, (java.lang.Object) atomikosProperties20);
        java.io.PrintWriter printWriter27 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties10.list(printWriter27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel7 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel7.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objSet18);
        org.junit.Assert.assertNotNull(objEnumeration19);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test00926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00926");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties8.getConsoleLogLevel();
        java.lang.Object obj14 = properties1.putIfAbsent((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosLoggingLevel13);
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.Object obj17 = properties15.get((java.lang.Object) (byte) -1);
        java.util.Properties properties18 = new java.util.Properties(properties15);
        boolean boolean19 = properties1.equals((java.lang.Object) properties15);
        java.util.Properties properties20 = new java.util.Properties();
        java.util.Properties properties21 = new java.util.Properties(properties20);
        properties21.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str25 = atomikosProperties24.getConsoleFileName();
        atomikosProperties24.setOutputDir("hi!");
        int int28 = atomikosProperties24.getConsoleFileLimit();
        java.lang.Object obj29 = properties21.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties24);
        boolean boolean30 = atomikosProperties24.isForceShutdownOnVmExit();
        atomikosProperties24.setConsoleFileName("");
        java.lang.String str33 = atomikosProperties24.getService();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery34 = atomikosProperties24.getRecovery();
        long long35 = recovery34.getDelay();
        boolean boolean36 = properties15.containsValue((java.lang.Object) recovery34);
        java.util.Properties properties37 = null;
        java.util.Properties properties38 = new java.util.Properties(properties37);
        boolean boolean40 = properties38.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str42 = atomikosProperties41.getTransactionManagerUniqueName();
        atomikosProperties41.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str46 = atomikosProperties45.getConsoleFileName();
        atomikosProperties45.setOutputDir("hi!");
        int int49 = atomikosProperties45.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel50 = atomikosProperties45.getConsoleLogLevel();
        java.lang.Object obj51 = properties38.putIfAbsent((java.lang.Object) atomikosProperties41, (java.lang.Object) atomikosLoggingLevel50);
        java.util.Collection<java.lang.Object> objCollection52 = properties38.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str54 = atomikosProperties53.getTransactionManagerUniqueName();
        atomikosProperties53.setDefaultJtaTimeout((long) (byte) 100);
        java.util.Properties properties57 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str59 = atomikosProperties58.getConsoleFileName();
        java.lang.Object obj61 = properties57.put((java.lang.Object) atomikosProperties58, (java.lang.Object) 0L);
        java.util.Properties properties62 = new java.util.Properties(properties57);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties63.setConsoleFileCount(100);
        atomikosProperties63.setAllowSubTransactions(true);
        boolean boolean68 = atomikosProperties63.isForceShutdownOnVmExit();
        boolean boolean69 = properties62.contains((java.lang.Object) atomikosProperties63);
        java.util.Collection<java.lang.Object> objCollection70 = properties62.values();
        boolean boolean71 = properties15.replace((java.lang.Object) properties38, (java.lang.Object) (byte) 100, (java.lang.Object) objCollection70);
        java.util.Properties properties72 = new java.util.Properties(properties38);
        java.util.Properties properties73 = new java.util.Properties(properties38);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration<?> wildcardEnumeration74 = properties38.propertyNames();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.springframework.boot.jta.atomikos.AtomikosProperties cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "tm.out" + "'", str25, "tm.out");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(recovery34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10000L + "'", long35 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "tm.out" + "'", str46, "tm.out");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel50 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel50.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(objCollection52);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "tm.out" + "'", str59, "tm.out");
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objCollection70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test00927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00927");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.lang.Object obj7 = properties0.setProperty("", "");
        java.util.Properties properties8 = new java.util.Properties(properties0);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection10 = properties9.values();
        java.util.Properties properties11 = new java.util.Properties(properties9);
        java.util.Enumeration<java.lang.Object> objEnumeration12 = properties11.elements();
        boolean boolean13 = properties11.isEmpty();
        java.util.Properties properties14 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection15 = properties14.values();
        java.util.Properties properties16 = null;
        java.util.Properties properties17 = new java.util.Properties(properties16);
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Properties properties19 = new java.util.Properties(properties18);
        properties19.clear();
        properties17.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties19);
        java.lang.Object obj24 = properties17.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties14.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties17);
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        boolean boolean29 = properties27.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration30 = properties27.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet31 = properties27.entrySet();
        java.util.Properties properties32 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection33 = properties32.values();
        java.util.Properties properties34 = null;
        java.util.Properties properties35 = new java.util.Properties(properties34);
        java.util.Properties properties36 = new java.util.Properties();
        java.util.Properties properties37 = new java.util.Properties(properties36);
        properties37.clear();
        properties35.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties37);
        java.lang.Object obj42 = properties35.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties32.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties35);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setConsoleFileCount((-1));
        java.lang.String str47 = atomikosProperties44.getOutputDir();
        atomikosProperties44.setLogBaseName("tm.out");
        boolean boolean50 = properties35.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties51.setConsoleFileCount(100);
        atomikosProperties51.setAllowSubTransactions(true);
        java.lang.Object obj56 = properties35.remove((java.lang.Object) atomikosProperties51);
        java.util.Set<java.lang.Object> objSet57 = properties35.keySet();
        boolean boolean58 = properties11.replace((java.lang.Object) properties17, (java.lang.Object) objEntrySet31, (java.lang.Object) properties35);
        java.lang.String str60 = properties17.getProperty("{}");
        java.util.Properties properties61 = new java.util.Properties(properties17);
        boolean boolean62 = properties8.equals((java.lang.Object) properties17);
        java.io.PrintStream printStream63 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties17.list(printStream63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(objCollection10);
        org.junit.Assert.assertNotNull(objEnumeration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objCollection15);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objEnumeration30);
        org.junit.Assert.assertNotNull(objEntrySet31);
        org.junit.Assert.assertNotNull(objCollection33);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(objSet57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test00928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00928");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        boolean boolean4 = properties2.isEmpty();
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection6 = properties5.values();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        properties10.clear();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.lang.Object obj15 = properties8.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        boolean boolean20 = properties18.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties18.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet22 = properties18.entrySet();
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection24 = properties23.values();
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        java.util.Properties properties27 = new java.util.Properties();
        java.util.Properties properties28 = new java.util.Properties(properties27);
        properties28.clear();
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        java.lang.Object obj33 = properties26.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setConsoleFileCount((-1));
        java.lang.String str38 = atomikosProperties35.getOutputDir();
        atomikosProperties35.setLogBaseName("tm.out");
        boolean boolean41 = properties26.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties42.setConsoleFileCount(100);
        atomikosProperties42.setAllowSubTransactions(true);
        java.lang.Object obj47 = properties26.remove((java.lang.Object) atomikosProperties42);
        java.util.Set<java.lang.Object> objSet48 = properties26.keySet();
        boolean boolean49 = properties2.replace((java.lang.Object) properties8, (java.lang.Object) objEntrySet22, (java.lang.Object) properties26);
        java.util.Properties properties50 = new java.util.Properties(properties2);
        java.io.OutputStream outputStream51 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties50.save(outputStream51, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNotNull(objEntrySet22);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(objSet48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test00929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00929");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.get((java.lang.Object) (byte) -1);
        java.util.Properties properties3 = new java.util.Properties(properties0);
        java.util.Properties properties4 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.getConsoleFileName();
        java.lang.Object obj8 = properties4.put((java.lang.Object) atomikosProperties5, (java.lang.Object) 0L);
        java.util.Properties properties9 = new java.util.Properties(properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setConsoleFileCount((-1));
        atomikosProperties10.setTransactionManagerUniqueName("tm.out");
        java.lang.Object obj15 = properties4.remove((java.lang.Object) atomikosProperties10);
        boolean boolean16 = atomikosProperties10.isForceShutdownOnVmExit();
        java.util.Properties properties17 = atomikosProperties10.asProperties();
        java.lang.String str18 = properties17.toString();
        java.util.Properties properties19 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection20 = properties19.values();
        java.util.Properties properties21 = null;
        java.util.Properties properties22 = new java.util.Properties(properties21);
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Properties properties24 = new java.util.Properties(properties23);
        properties24.clear();
        properties22.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        java.lang.Object obj29 = properties22.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties19.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties31.setConsoleFileCount((-1));
        java.lang.String str34 = atomikosProperties31.getOutputDir();
        atomikosProperties31.setLogBaseName("tm.out");
        boolean boolean37 = properties22.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties38.setConsoleFileCount(100);
        atomikosProperties38.setAllowSubTransactions(true);
        java.lang.Object obj43 = properties22.remove((java.lang.Object) atomikosProperties38);
        java.util.Set<java.lang.Object> objSet44 = properties22.keySet();
        java.util.Properties properties45 = null;
        java.util.Properties properties46 = new java.util.Properties(properties45);
        java.util.Properties properties47 = new java.util.Properties();
        java.util.Properties properties48 = new java.util.Properties(properties47);
        properties48.clear();
        properties46.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties48);
        java.lang.Object obj51 = properties22.get((java.lang.Object) properties48);
        properties48.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str54 = atomikosProperties53.getConsoleFileName();
        long long55 = atomikosProperties53.getMaxTimeout();
        java.util.Properties properties56 = atomikosProperties53.asProperties();
        java.util.Properties properties57 = new java.util.Properties();
        java.util.Properties properties58 = new java.util.Properties(properties57);
        int int59 = properties58.size();
        boolean boolean60 = properties58.isEmpty();
        java.util.Set<java.lang.Object> objSet61 = properties58.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties63.setConsoleFileCount((-1));
        java.lang.String str66 = atomikosProperties63.getOutputDir();
        atomikosProperties63.setLogBaseName("tm.out");
        atomikosProperties63.setLogBaseDir("tm.out");
        int int71 = atomikosProperties63.getMaxActives();
        atomikosProperties63.setDefaultJtaTimeout((long) (short) 100);
        boolean boolean74 = properties56.replace((java.lang.Object) objSet61, (java.lang.Object) (byte) 1, (java.lang.Object) atomikosProperties63);
        java.lang.String str75 = atomikosProperties63.getService();
        java.lang.Object obj76 = properties48.remove((java.lang.Object) atomikosProperties63);
        java.lang.String str77 = properties48.toString();
        java.lang.String str79 = properties48.getProperty("tmlog");
        java.util.Set<java.lang.String> strSet80 = properties48.stringPropertyNames();
        java.lang.Class<?> wildcardClass81 = strSet80.getClass();
        java.lang.Object obj82 = properties0.replace((java.lang.Object) str18, (java.lang.Object) wildcardClass81);
        java.lang.String str85 = properties0.getProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=false, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "hi!");
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tm.out" + "'", str6, "tm.out");
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(properties17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str18, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertNotNull(objCollection20);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(objSet44);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "tm.out" + "'", str54, "tm.out");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 300000L + "'", long55 == 300000L);
        org.junit.Assert.assertNotNull(properties56);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(objSet61);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 50 + "'", int71 == 50);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "{}" + "'", str77, "{}");
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(strSet80);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertNull(obj82);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "hi!" + "'", str85, "hi!");
    }

    @Test
    public void test00930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00930");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setConsoleFileCount((-1));
        atomikosProperties6.setTransactionManagerUniqueName("tm.out");
        java.lang.Object obj11 = properties0.remove((java.lang.Object) atomikosProperties6);
        boolean boolean12 = atomikosProperties6.isForceShutdownOnVmExit();
        atomikosProperties6.setAllowSubTransactions(false);
        atomikosProperties6.setMaxActives((-1));
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        boolean boolean20 = properties18.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.getTransactionManagerUniqueName();
        atomikosProperties21.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str26 = atomikosProperties25.getConsoleFileName();
        atomikosProperties25.setOutputDir("hi!");
        int int29 = atomikosProperties25.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel30 = atomikosProperties25.getConsoleLogLevel();
        java.lang.Object obj31 = properties18.putIfAbsent((java.lang.Object) atomikosProperties21, (java.lang.Object) atomikosLoggingLevel30);
        atomikosProperties6.setConsoleLogLevel(atomikosLoggingLevel30);
        java.lang.String str33 = atomikosProperties6.getService();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "tm.out" + "'", str26, "tm.out");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel30 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel30.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test00931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00931");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        boolean boolean4 = properties2.isEmpty();
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection6 = properties5.values();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        properties10.clear();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.lang.Object obj15 = properties8.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        boolean boolean20 = properties18.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties18.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet22 = properties18.entrySet();
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection24 = properties23.values();
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        java.util.Properties properties27 = new java.util.Properties();
        java.util.Properties properties28 = new java.util.Properties(properties27);
        properties28.clear();
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        java.lang.Object obj33 = properties26.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setConsoleFileCount((-1));
        java.lang.String str38 = atomikosProperties35.getOutputDir();
        atomikosProperties35.setLogBaseName("tm.out");
        boolean boolean41 = properties26.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties42.setConsoleFileCount(100);
        atomikosProperties42.setAllowSubTransactions(true);
        java.lang.Object obj47 = properties26.remove((java.lang.Object) atomikosProperties42);
        java.util.Set<java.lang.Object> objSet48 = properties26.keySet();
        boolean boolean49 = properties2.replace((java.lang.Object) properties8, (java.lang.Object) objEntrySet22, (java.lang.Object) properties26);
        java.util.Properties properties50 = new java.util.Properties(properties2);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet51 = properties50.entrySet();
        java.util.Collection<java.lang.Object> objCollection52 = properties50.values();
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNotNull(objEntrySet22);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(objSet48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(objEntrySet51);
        org.junit.Assert.assertNotNull(objCollection52);
    }

    @Test
    public void test00932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00932");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        long long5 = atomikosProperties1.getCheckpointInterval();
        java.lang.String str6 = atomikosProperties1.getService();
        atomikosProperties1.setConsoleFileName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=32, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        atomikosProperties1.setConsoleFileName("tm.out");
        atomikosProperties1.setConsoleFileName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=100}");
        int int13 = atomikosProperties1.getMaxActives();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
    }

    @Test
    public void test00933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00933");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.setRetryInterval((long) (byte) 10);
        int int3 = recovery0.getMaxRetries();
        recovery0.setDelay(10L);
        long long6 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long7 = recovery0.getDelay();
        recovery0.setRetryInterval((long) 35);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 86400000L + "'", long6 == 86400000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
    }

    @Test
    public void test00934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00934");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        java.lang.String str3 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseName("tm.out");
        atomikosProperties0.setLogBaseDir("tm.out");
        java.lang.String str8 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        java.lang.String str11 = atomikosProperties0.getLogBaseName();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tm.out" + "'", str8, "tm.out");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tm.out" + "'", str11, "tm.out");
    }

    @Test
    public void test00935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00935");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Properties properties7 = new java.util.Properties(properties6);
        properties7.clear();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.util.Enumeration<?> wildcardEnumeration10 = properties7.propertyNames();
        java.util.Set<java.lang.Object> objSet11 = properties7.keySet();
        java.util.Properties properties12 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str14 = atomikosProperties13.getConsoleFileName();
        java.lang.Object obj16 = properties12.put((java.lang.Object) atomikosProperties13, (java.lang.Object) 0L);
        java.util.Properties properties17 = new java.util.Properties(properties12);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setConsoleFileCount(100);
        atomikosProperties18.setAllowSubTransactions(true);
        boolean boolean23 = atomikosProperties18.isForceShutdownOnVmExit();
        boolean boolean24 = properties17.contains((java.lang.Object) atomikosProperties18);
        java.util.Collection<java.lang.Object> objCollection25 = properties17.values();
        boolean boolean26 = properties7.equals((java.lang.Object) objCollection25);
        java.util.Properties properties27 = new java.util.Properties();
        java.util.Properties properties28 = new java.util.Properties(properties27);
        int int29 = properties28.size();
        boolean boolean30 = properties28.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties28.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str33 = atomikosProperties32.getConsoleFileName();
        long long34 = atomikosProperties32.getMaxTimeout();
        java.util.Properties properties35 = atomikosProperties32.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery36 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long37 = recovery36.getForgetOrphanedLogEntriesDelay();
        recovery36.setDelay((long) (short) 1);
        recovery36.setRetryInterval(100L);
        boolean boolean42 = properties35.containsValue((java.lang.Object) 100L);
        java.util.Properties properties43 = new java.util.Properties();
        java.util.Properties properties44 = new java.util.Properties(properties43);
        int int45 = properties44.size();
        boolean boolean46 = properties44.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration47 = properties44.elements();
        java.util.Properties properties48 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection49 = properties48.values();
        java.util.Properties properties50 = new java.util.Properties(properties48);
        java.util.Enumeration<java.lang.Object> objEnumeration51 = properties50.elements();
        boolean boolean52 = properties50.isEmpty();
        boolean boolean53 = properties44.containsValue((java.lang.Object) boolean52);
        java.util.Properties properties54 = new java.util.Properties(properties44);
        java.util.Enumeration<?> wildcardEnumeration55 = properties54.propertyNames();
        boolean boolean56 = properties35.containsKey((java.lang.Object) properties54);
        properties28.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties35);
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties35);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str60 = atomikosProperties59.getConsoleFileName();
        atomikosProperties59.setOutputDir("hi!");
        int int63 = atomikosProperties59.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel64 = atomikosProperties59.getConsoleLogLevel();
        java.util.Properties properties65 = atomikosProperties59.asProperties();
        boolean boolean66 = atomikosProperties59.isThreadedTwoPhaseCommit();
        boolean boolean67 = atomikosProperties59.isThreadedTwoPhaseCommit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str69 = atomikosProperties68.getConsoleFileName();
        atomikosProperties68.setOutputDir("hi!");
        int int72 = atomikosProperties68.getConsoleFileLimit();
        java.util.Properties properties73 = atomikosProperties68.asProperties();
        java.util.Properties properties74 = new java.util.Properties();
        java.util.Properties properties75 = new java.util.Properties(properties74);
        properties75.clear();
        properties73.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties75);
        java.util.Properties properties78 = new java.util.Properties();
        java.util.Properties properties79 = new java.util.Properties(properties78);
        properties79.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties82 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str83 = atomikosProperties82.getConsoleFileName();
        atomikosProperties82.setOutputDir("hi!");
        int int86 = atomikosProperties82.getConsoleFileLimit();
        java.lang.Object obj87 = properties79.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties82);
        atomikosProperties82.setLogBaseName("tm.out");
        atomikosProperties82.setForceShutdownOnVmExit(false);
        boolean boolean92 = properties75.containsValue((java.lang.Object) atomikosProperties82);
        atomikosProperties82.setService("hi!");
        int int95 = atomikosProperties82.getConsoleFileLimit();
        boolean boolean96 = atomikosProperties82.isThreadedTwoPhaseCommit();
        java.lang.Object obj97 = properties7.getOrDefault((java.lang.Object) boolean67, (java.lang.Object) boolean96);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(wildcardEnumeration10);
        org.junit.Assert.assertNotNull(objSet11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tm.out" + "'", str14, "tm.out");
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objCollection25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objEnumeration31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tm.out" + "'", str33, "tm.out");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 300000L + "'", long34 == 300000L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 86400000L + "'", long37 == 86400000L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objEnumeration47);
        org.junit.Assert.assertNotNull(objCollection49);
        org.junit.Assert.assertNotNull(objEnumeration51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "tm.out" + "'", str60, "tm.out");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel64 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel64.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "tm.out" + "'", str69, "tm.out");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(properties73);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "tm.out" + "'", str83, "tm.out");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNull(obj87);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertEquals("'" + obj97 + "' != '" + false + "'", obj97, false);
    }

    @Test
    public void test00936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00936");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery6 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long7 = recovery6.getForgetOrphanedLogEntriesDelay();
        recovery6.setDelay((long) (short) 1);
        recovery6.setDelay((long) (-1));
        java.lang.Object obj12 = properties3.remove((java.lang.Object) (-1));
        properties3.clear();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 86400000L + "'", long7 == 86400000L);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test00937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00937");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties1.keys();
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection6 = properties5.values();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        properties10.clear();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.lang.Object obj15 = properties8.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setConsoleFileCount((-1));
        java.lang.String str20 = atomikosProperties17.getOutputDir();
        atomikosProperties17.setLogBaseName("tm.out");
        boolean boolean23 = properties8.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.setConsoleFileCount(100);
        atomikosProperties24.setAllowSubTransactions(true);
        java.lang.Object obj29 = properties8.remove((java.lang.Object) atomikosProperties24);
        atomikosProperties24.setAllowSubTransactions(false);
        atomikosProperties24.setSerialJtaTransactions(true);
        boolean boolean34 = properties1.containsKey((java.lang.Object) atomikosProperties24);
        java.util.Properties properties35 = new java.util.Properties(properties1);
        java.util.Collection<java.lang.Object> objCollection36 = properties35.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str38 = atomikosProperties37.getConsoleFileName();
        atomikosProperties37.setOutputDir("hi!");
        int int41 = atomikosProperties37.getConsoleFileLimit();
        java.util.Properties properties42 = atomikosProperties37.asProperties();
        java.util.Properties properties43 = new java.util.Properties();
        java.util.Properties properties44 = new java.util.Properties(properties43);
        properties44.clear();
        properties42.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties44);
        java.util.Properties properties47 = new java.util.Properties();
        java.util.Properties properties48 = new java.util.Properties(properties47);
        properties48.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str52 = atomikosProperties51.getConsoleFileName();
        atomikosProperties51.setOutputDir("hi!");
        int int55 = atomikosProperties51.getConsoleFileLimit();
        java.lang.Object obj56 = properties48.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties51);
        atomikosProperties51.setLogBaseName("tm.out");
        atomikosProperties51.setForceShutdownOnVmExit(false);
        boolean boolean61 = properties44.containsValue((java.lang.Object) atomikosProperties51);
        atomikosProperties51.setService("hi!");
        atomikosProperties51.setService("");
        java.lang.String str66 = atomikosProperties51.getConsoleFileName();
        atomikosProperties51.setAllowSubTransactions(false);
        boolean boolean69 = properties35.containsValue((java.lang.Object) false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objCollection36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tm.out" + "'", str38, "tm.out");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(properties42);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "tm.out" + "'", str52, "tm.out");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "tm.out" + "'", str66, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test00938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00938");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.util.Properties properties28 = new java.util.Properties();
        java.util.Properties properties29 = new java.util.Properties(properties28);
        properties29.clear();
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        java.lang.Object obj32 = properties3.get((java.lang.Object) properties29);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.setConsoleFileCount((-1));
        atomikosProperties33.setAllowSubTransactions(false);
        boolean boolean38 = properties3.contains((java.lang.Object) false);
        java.util.Properties properties39 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str41 = atomikosProperties40.getConsoleFileName();
        java.lang.Object obj43 = properties39.put((java.lang.Object) atomikosProperties40, (java.lang.Object) 0L);
        java.util.Properties properties44 = new java.util.Properties();
        java.util.Properties properties45 = new java.util.Properties(properties44);
        properties45.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str49 = atomikosProperties48.getConsoleFileName();
        atomikosProperties48.setOutputDir("hi!");
        int int52 = atomikosProperties48.getConsoleFileLimit();
        java.lang.Object obj53 = properties45.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties48);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet54 = properties45.entrySet();
        java.util.Properties properties55 = new java.util.Properties(properties45);
        boolean boolean56 = properties3.remove((java.lang.Object) 0L, (java.lang.Object) properties45);
        java.util.Enumeration<java.lang.Object> objEnumeration57 = properties3.keys();
        java.io.PrintStream printStream58 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.list(printStream58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "tm.out" + "'", str41, "tm.out");
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tm.out" + "'", str49, "tm.out");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNotNull(objEntrySet54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objEnumeration57);
    }

    @Test
    public void test00939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00939");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        long long5 = atomikosProperties1.getCheckpointInterval();
        java.lang.String str6 = atomikosProperties1.getConsoleFileName();
        atomikosProperties1.setCheckpointInterval((long) (short) -1);
        atomikosProperties1.setThreadedTwoPhaseCommit(false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tm.out" + "'", str6, "tm.out");
    }

    @Test
    public void test00940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00940");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.util.Properties properties28 = new java.util.Properties();
        java.util.Properties properties29 = new java.util.Properties(properties28);
        properties29.clear();
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        java.lang.Object obj32 = properties3.get((java.lang.Object) properties29);
        properties29.clear();
        java.util.Properties properties34 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str36 = atomikosProperties35.getConsoleFileName();
        java.lang.Object obj38 = properties34.put((java.lang.Object) atomikosProperties35, (java.lang.Object) 0L);
        java.util.Properties properties39 = new java.util.Properties(properties34);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties40.setConsoleFileCount((-1));
        atomikosProperties40.setTransactionManagerUniqueName("tm.out");
        java.lang.Object obj45 = properties34.remove((java.lang.Object) atomikosProperties40);
        boolean boolean46 = atomikosProperties40.isForceShutdownOnVmExit();
        java.lang.Object obj48 = properties29.putIfAbsent((java.lang.Object) boolean46, (java.lang.Object) 500L);
        java.io.PrintWriter printWriter49 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties29.list(printWriter49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tm.out" + "'", str36, "tm.out");
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(obj48);
    }

    @Test
    public void test00941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00941");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet6 = properties5.entrySet();
        java.lang.String str9 = properties5.getProperty("{tm.out=}", "{=hi!}");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(objEntrySet6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{=hi!}" + "'", str9, "{=hi!}");
    }

    @Test
    public void test00942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00942");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        atomikosProperties19.setAllowSubTransactions(false);
        atomikosProperties19.setSerialJtaTransactions(true);
        java.util.Properties properties29 = atomikosProperties19.asProperties();
        java.util.Properties properties30 = new java.util.Properties(properties29);
        java.lang.Object obj31 = null;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str33 = atomikosProperties32.getConsoleFileName();
        java.lang.String str34 = atomikosProperties32.getTransactionManagerUniqueName();
        atomikosProperties32.setCheckpointInterval((long) (byte) 0);
        java.util.Properties properties37 = atomikosProperties32.asProperties();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj38 = properties29.put(obj31, (java.lang.Object) properties37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tm.out" + "'", str33, "tm.out");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(properties37);
    }

    @Test
    public void test00943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00943");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties1.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        boolean boolean9 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties1.keys();
        java.util.Collection<java.lang.Object> objCollection11 = properties1.values();
        java.lang.Object obj12 = properties1.clone();
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "{10=10.0}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "{10=10.0}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "{10=10.0}");
    }

    @Test
    public void test00944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00944");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str3 = atomikosProperties2.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel4 = atomikosProperties2.getConsoleLogLevel();
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel4);
        atomikosProperties0.setSerialJtaTransactions(false);
        int int8 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        java.util.Properties properties11 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.getConsoleFileName();
        java.lang.Object obj15 = properties11.put((java.lang.Object) atomikosProperties12, (java.lang.Object) 0L);
        java.util.Properties properties16 = new java.util.Properties(properties11);
        java.util.Set<java.lang.Object> objSet17 = properties16.keySet();
        java.lang.Object obj20 = properties16.setProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.getConsoleFileName();
        atomikosProperties21.setOutputDir("hi!");
        int int25 = atomikosProperties21.getConsoleFileLimit();
        atomikosProperties21.setDefaultJtaTimeout(1L);
        atomikosProperties21.setForceShutdownOnVmExit(false);
        atomikosProperties21.setLogBaseDir("tmlog");
        boolean boolean32 = properties16.containsValue((java.lang.Object) "tmlog");
        java.util.Collection<java.lang.Object> objCollection33 = properties16.values();
        boolean boolean34 = properties9.remove((java.lang.Object) '4', (java.lang.Object) objCollection33);
        java.util.Properties properties35 = new java.util.Properties(properties9);
        java.lang.Object obj36 = properties9.clone();
        java.io.OutputStream outputStream37 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties9.storeToXML(outputStream37, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=100}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "tm.out" + "'", str3, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel4 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel4.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tm.out" + "'", str13, "tm.out");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(objSet17);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tm.out" + "'", str22, "tm.out");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objCollection33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(obj36);
// flaky:         org.junit.Assert.assertEquals(obj36.toString(), "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
    }

    @Test
    public void test00945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00945");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties8.getConsoleLogLevel();
        java.lang.Object obj14 = properties1.putIfAbsent((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosLoggingLevel13);
        java.util.Collection<java.lang.Object> objCollection15 = properties1.values();
        java.util.Properties properties16 = new java.util.Properties();
        java.util.Properties properties17 = new java.util.Properties(properties16);
        properties17.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str21 = atomikosProperties20.getConsoleFileName();
        atomikosProperties20.setOutputDir("hi!");
        int int24 = atomikosProperties20.getConsoleFileLimit();
        java.lang.Object obj25 = properties17.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties20);
        boolean boolean26 = properties1.equals((java.lang.Object) properties17);
        java.io.PrintStream printStream27 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printStream27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(objCollection15);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tm.out" + "'", str21, "tm.out");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test00946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00946");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Collection<java.lang.Object> objCollection6 = properties3.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str8 = atomikosProperties7.getConsoleFileName();
        atomikosProperties7.setOutputDir("hi!");
        int int11 = atomikosProperties7.getConsoleFileLimit();
        java.util.Properties properties12 = atomikosProperties7.asProperties();
        boolean boolean13 = properties3.containsValue((java.lang.Object) atomikosProperties7);
        atomikosProperties7.setConsoleFileName("{hi!=}");
        boolean boolean16 = atomikosProperties7.isEnableLogging();
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tm.out" + "'", str8, "tm.out");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test00947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00947");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties3.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Properties properties9 = new java.util.Properties(properties3);
        java.util.Properties properties10 = new java.util.Properties(properties9);
        java.util.Properties properties11 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection12 = properties11.values();
        java.util.Properties properties13 = new java.util.Properties(properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration14 = properties13.elements();
        boolean boolean15 = properties13.isEmpty();
        java.util.Properties properties16 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection17 = properties16.values();
        java.util.Properties properties18 = null;
        java.util.Properties properties19 = new java.util.Properties(properties18);
        java.util.Properties properties20 = new java.util.Properties();
        java.util.Properties properties21 = new java.util.Properties(properties20);
        properties21.clear();
        properties19.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.lang.Object obj26 = properties19.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties16.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties19);
        java.util.Properties properties28 = null;
        java.util.Properties properties29 = new java.util.Properties(properties28);
        boolean boolean31 = properties29.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties29.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet33 = properties29.entrySet();
        java.util.Properties properties34 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection35 = properties34.values();
        java.util.Properties properties36 = null;
        java.util.Properties properties37 = new java.util.Properties(properties36);
        java.util.Properties properties38 = new java.util.Properties();
        java.util.Properties properties39 = new java.util.Properties(properties38);
        properties39.clear();
        properties37.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties39);
        java.lang.Object obj44 = properties37.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties34.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties37);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties46.setConsoleFileCount((-1));
        java.lang.String str49 = atomikosProperties46.getOutputDir();
        atomikosProperties46.setLogBaseName("tm.out");
        boolean boolean52 = properties37.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties53.setConsoleFileCount(100);
        atomikosProperties53.setAllowSubTransactions(true);
        java.lang.Object obj58 = properties37.remove((java.lang.Object) atomikosProperties53);
        java.util.Set<java.lang.Object> objSet59 = properties37.keySet();
        boolean boolean60 = properties13.replace((java.lang.Object) properties19, (java.lang.Object) objEntrySet33, (java.lang.Object) properties37);
        java.lang.String str62 = properties19.getProperty("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties63.setConsoleFileCount((-1));
        atomikosProperties63.setConsoleFileName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str69 = atomikosProperties68.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties70 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str71 = atomikosProperties70.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel72 = atomikosProperties70.getConsoleLogLevel();
        atomikosProperties68.setConsoleLogLevel(atomikosLoggingLevel72);
        atomikosProperties63.setConsoleLogLevel(atomikosLoggingLevel72);
        atomikosProperties63.setDefaultJtaTimeout((long) (byte) 0);
        java.lang.Object obj77 = properties10.replace((java.lang.Object) properties19, (java.lang.Object) (byte) 0);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet78 = properties19.entrySet();
        java.io.Reader reader79 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties19.load(reader79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection12);
        org.junit.Assert.assertNotNull(objEnumeration14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objEnumeration32);
        org.junit.Assert.assertNotNull(objEntrySet33);
        org.junit.Assert.assertNotNull(objCollection35);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNotNull(objSet59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "tm.out" + "'", str71, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel72 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel72.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertNotNull(objEntrySet78);
    }

    @Test
    public void test00948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00948");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        java.lang.String str3 = atomikosProperties0.getOutputDir();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel4 = atomikosProperties0.getConsoleLogLevel();
        java.lang.String str5 = atomikosProperties0.getOutputDir();
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        boolean boolean7 = atomikosProperties0.isThreadedTwoPhaseCommit();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel4 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel4.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test00949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00949");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties1.elements();
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection6 = properties5.values();
        java.util.Properties properties7 = new java.util.Properties(properties5);
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties7.elements();
        boolean boolean9 = properties7.isEmpty();
        boolean boolean10 = properties1.containsValue((java.lang.Object) boolean9);
        java.util.Properties properties11 = new java.util.Properties(properties1);
        java.util.Properties properties12 = new java.util.Properties();
        java.util.Properties properties13 = new java.util.Properties(properties12);
        java.lang.Object obj16 = properties12.setProperty("hi!", "");
        java.util.Properties properties17 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str19 = atomikosProperties18.getConsoleFileName();
        java.lang.Object obj21 = properties17.put((java.lang.Object) atomikosProperties18, (java.lang.Object) 0L);
        java.lang.Object obj24 = properties17.setProperty("", "");
        java.util.Properties properties25 = new java.util.Properties(properties17);
        properties12.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties25);
        java.util.Properties properties27 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str29 = atomikosProperties28.getConsoleFileName();
        java.lang.Object obj31 = properties27.put((java.lang.Object) atomikosProperties28, (java.lang.Object) 0L);
        java.util.Properties properties32 = new java.util.Properties(properties27);
        java.util.Properties properties33 = new java.util.Properties(properties32);
        properties12.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties33);
        boolean boolean35 = properties11.equals((java.lang.Object) properties12);
        java.io.Writer writer36 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties12.store(writer36, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tm.out" + "'", str19, "tm.out");
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tm.out" + "'", str29, "tm.out");
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test00950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00950");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.util.Properties properties28 = new java.util.Properties();
        java.util.Properties properties29 = new java.util.Properties(properties28);
        properties29.clear();
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        java.lang.Object obj32 = properties3.get((java.lang.Object) properties29);
        java.util.Properties properties33 = new java.util.Properties(properties3);
        properties33.clear();
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertNull(obj32);
    }

    @Test
    public void test00951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00951");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties3.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        properties10.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str14 = atomikosProperties13.getConsoleFileName();
        atomikosProperties13.setOutputDir("hi!");
        int int17 = atomikosProperties13.getConsoleFileLimit();
        java.lang.Object obj18 = properties10.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties13);
        atomikosProperties13.setLogBaseName("tm.out");
        boolean boolean21 = properties3.containsKey((java.lang.Object) "tm.out");
        java.util.Properties properties22 = null;
        java.util.Properties properties23 = new java.util.Properties(properties22);
        java.util.Properties properties24 = new java.util.Properties();
        java.util.Properties properties25 = new java.util.Properties(properties24);
        properties25.clear();
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties25);
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties23);
        java.util.Properties properties29 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str31 = atomikosProperties30.getConsoleFileName();
        java.lang.Object obj33 = properties29.put((java.lang.Object) atomikosProperties30, (java.lang.Object) 0L);
        java.lang.Object obj36 = properties29.setProperty("", "");
        java.util.Properties properties37 = new java.util.Properties(properties29);
        java.lang.Object obj38 = properties37.clone();
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties37);
        java.util.Properties properties40 = new java.util.Properties(properties23);
        java.util.Properties properties41 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection42 = properties41.values();
        java.util.Properties properties43 = null;
        java.util.Properties properties44 = new java.util.Properties(properties43);
        java.util.Properties properties45 = new java.util.Properties();
        java.util.Properties properties46 = new java.util.Properties(properties45);
        properties46.clear();
        properties44.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties46);
        java.lang.Object obj51 = properties44.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties41.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties44);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties53.setConsoleFileCount((-1));
        java.lang.String str56 = atomikosProperties53.getOutputDir();
        atomikosProperties53.setLogBaseName("tm.out");
        boolean boolean59 = properties44.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties60.setConsoleFileCount(100);
        atomikosProperties60.setAllowSubTransactions(true);
        java.lang.Object obj65 = properties44.remove((java.lang.Object) atomikosProperties60);
        atomikosProperties60.setAllowSubTransactions(false);
        int int68 = atomikosProperties60.getConsoleFileCount();
        atomikosProperties60.setThreadedTwoPhaseCommit(false);
        long long71 = atomikosProperties60.getDefaultJtaTimeout();
        java.util.Properties properties72 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties73 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str74 = atomikosProperties73.getConsoleFileName();
        java.lang.Object obj76 = properties72.put((java.lang.Object) atomikosProperties73, (java.lang.Object) 0L);
        long long77 = atomikosProperties73.getCheckpointInterval();
        java.lang.String str78 = atomikosProperties73.getConsoleFileName();
        java.util.Properties properties79 = atomikosProperties73.asProperties();
        atomikosProperties73.setConsoleFileName("tm.out");
        java.lang.Object obj82 = properties23.getOrDefault((java.lang.Object) long71, (java.lang.Object) "tm.out");
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tm.out" + "'", str14, "tm.out");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tm.out" + "'", str31, "tm.out");
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "{}");
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 100 + "'", int68 == 100);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 10000L + "'", long71 == 10000L);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "tm.out" + "'", str74, "tm.out");
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 500L + "'", long77 == 500L);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "tm.out" + "'", str78, "tm.out");
        org.junit.Assert.assertNotNull(properties79);
        org.junit.Assert.assertEquals("'" + obj82 + "' != '" + "tm.out" + "'", obj82, "tm.out");
    }

    @Test
    public void test00952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00952");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        java.lang.String str3 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseName("tm.out");
        int int6 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setMaxTimeout(10000L);
        boolean boolean9 = atomikosProperties0.isThreadedTwoPhaseCommit();
        java.lang.String str10 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setOutputDir("{hi!=}");
        java.util.Properties properties13 = atomikosProperties0.asProperties();
        java.lang.Class<?> wildcardClass14 = atomikosProperties0.getClass();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tm.out" + "'", str10, "tm.out");
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test00953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00953");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileLimit((int) (byte) 10);
        atomikosProperties0.setForceShutdownOnVmExit(true);
        long long5 = atomikosProperties0.getMaxTimeout();
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.setCheckpointInterval(10L);
        java.lang.Class<?> wildcardClass9 = atomikosProperties0.getClass();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test00954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00954");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        atomikosProperties1.setThreadedTwoPhaseCommit(false);
        atomikosProperties1.setConsoleFileLimit((int) ' ');
        java.lang.String str9 = atomikosProperties1.getTransactionManagerUniqueName();
        java.util.Properties properties10 = atomikosProperties1.asProperties();
        atomikosProperties1.setDefaultJtaTimeout((long) (byte) 0);
        java.lang.String str13 = atomikosProperties1.getOutputDir();
        atomikosProperties1.setLogBaseName("");
        atomikosProperties1.setEnableLogging(false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test00955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00955");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.util.Properties properties28 = new java.util.Properties();
        java.util.Properties properties29 = new java.util.Properties(properties28);
        properties29.clear();
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        java.lang.Object obj32 = properties3.get((java.lang.Object) properties29);
        properties29.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str35 = atomikosProperties34.getConsoleFileName();
        long long36 = atomikosProperties34.getMaxTimeout();
        java.util.Properties properties37 = atomikosProperties34.asProperties();
        java.util.Properties properties38 = new java.util.Properties();
        java.util.Properties properties39 = new java.util.Properties(properties38);
        int int40 = properties39.size();
        boolean boolean41 = properties39.isEmpty();
        java.util.Set<java.lang.Object> objSet42 = properties39.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setConsoleFileCount((-1));
        java.lang.String str47 = atomikosProperties44.getOutputDir();
        atomikosProperties44.setLogBaseName("tm.out");
        atomikosProperties44.setLogBaseDir("tm.out");
        int int52 = atomikosProperties44.getMaxActives();
        atomikosProperties44.setDefaultJtaTimeout((long) (short) 100);
        boolean boolean55 = properties37.replace((java.lang.Object) objSet42, (java.lang.Object) (byte) 1, (java.lang.Object) atomikosProperties44);
        java.lang.String str56 = atomikosProperties44.getService();
        java.lang.Object obj57 = properties29.remove((java.lang.Object) atomikosProperties44);
        java.util.Properties properties58 = new java.util.Properties(properties29);
        java.util.Properties properties59 = null;
        java.util.Properties properties60 = new java.util.Properties(properties59);
        java.util.Properties properties61 = null;
        java.util.Properties properties62 = new java.util.Properties(properties61);
        boolean boolean64 = properties62.containsValue((java.lang.Object) 10.0d);
        java.lang.Object obj66 = properties60.getOrDefault((java.lang.Object) boolean64, (java.lang.Object) (-1L));
        java.lang.Object obj67 = properties58.get((java.lang.Object) properties60);
        java.util.Properties properties68 = new java.util.Properties(properties60);
        java.io.PrintStream printStream69 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties60.list(printStream69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tm.out" + "'", str35, "tm.out");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 300000L + "'", long36 == 300000L);
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objSet42);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 50 + "'", int52 == 50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + obj66 + "' != '" + (-1L) + "'", obj66, (-1L));
        org.junit.Assert.assertNull(obj67);
    }

    @Test
    public void test00956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00956");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties1.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        boolean boolean9 = properties1.isEmpty();
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection11 = properties10.values();
        java.util.Properties properties12 = null;
        java.util.Properties properties13 = new java.util.Properties(properties12);
        java.util.Properties properties14 = new java.util.Properties();
        java.util.Properties properties15 = new java.util.Properties(properties14);
        properties15.clear();
        properties13.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.lang.Object obj20 = properties13.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties10.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties13);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.setConsoleFileCount((-1));
        java.lang.String str25 = atomikosProperties22.getOutputDir();
        atomikosProperties22.setLogBaseName("tm.out");
        boolean boolean28 = properties13.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setConsoleFileCount(100);
        atomikosProperties29.setAllowSubTransactions(true);
        java.lang.Object obj34 = properties13.remove((java.lang.Object) atomikosProperties29);
        java.util.Set<java.lang.Object> objSet35 = properties13.keySet();
        java.util.Properties properties36 = null;
        java.util.Properties properties37 = new java.util.Properties(properties36);
        java.util.Properties properties38 = new java.util.Properties();
        java.util.Properties properties39 = new java.util.Properties(properties38);
        properties39.clear();
        properties37.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties39);
        java.lang.Object obj42 = properties13.get((java.lang.Object) properties39);
        properties39.clear();
        java.util.Properties properties44 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str46 = atomikosProperties45.getConsoleFileName();
        java.lang.Object obj48 = properties44.put((java.lang.Object) atomikosProperties45, (java.lang.Object) 0L);
        java.util.Properties properties49 = new java.util.Properties(properties44);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties50.setConsoleFileCount((-1));
        atomikosProperties50.setTransactionManagerUniqueName("tm.out");
        java.lang.Object obj55 = properties44.remove((java.lang.Object) atomikosProperties50);
        boolean boolean56 = atomikosProperties50.isForceShutdownOnVmExit();
        java.lang.Object obj58 = properties39.putIfAbsent((java.lang.Object) boolean56, (java.lang.Object) 500L);
        java.util.Collection<java.lang.Object> objCollection59 = properties39.values();
        boolean boolean60 = properties1.containsValue((java.lang.Object) objCollection59);
        java.lang.Object obj61 = properties1.clone();
        java.util.Collection<java.lang.Object> objCollection62 = properties1.values();
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(objSet35);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "tm.out" + "'", str46, "tm.out");
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNotNull(objCollection59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals(obj61.toString(), "{10=10.0}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "{10=10.0}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "{10=10.0}");
        org.junit.Assert.assertNotNull(objCollection62);
    }

    @Test
    public void test00957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00957");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        atomikosProperties0.setCheckpointInterval((long) (short) 10);
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = new java.util.Properties(properties5);
        java.util.Enumeration<?> wildcardEnumeration7 = properties6.propertyNames();
        java.lang.String str8 = properties6.toString();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet9 = properties6.entrySet();
        java.io.OutputStream outputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties6.storeToXML(outputStream10, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(wildcardEnumeration7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNotNull(objEntrySet9);
    }

    @Test
    public void test00958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00958");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.setRetryInterval((long) (byte) 10);
        long long3 = recovery0.getRetryInterval();
        recovery0.setForgetOrphanedLogEntriesDelay((long) (-1));
        int int6 = recovery0.getMaxRetries();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 10L + "'", long3 == 10L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
    }

    @Test
    public void test00959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00959");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        java.util.Properties properties3 = new java.util.Properties(properties1);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        int int6 = properties5.size();
        boolean boolean7 = properties5.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties5.elements();
        java.util.Properties properties9 = new java.util.Properties(properties5);
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Properties properties11 = new java.util.Properties(properties10);
        int int12 = properties11.size();
        boolean boolean13 = properties11.isEmpty();
        java.util.Properties properties14 = new java.util.Properties(properties11);
        java.util.Properties properties15 = new java.util.Properties(properties11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.getConsoleFileName();
        atomikosProperties16.setOutputDir("hi!");
        int int20 = atomikosProperties16.getConsoleFileLimit();
        java.util.Properties properties21 = atomikosProperties16.asProperties();
        java.lang.String str22 = atomikosProperties16.getService();
        atomikosProperties16.setService("hi!");
        atomikosProperties16.setForceShutdownOnVmExit(true);
        atomikosProperties16.setThreadedTwoPhaseCommit(false);
        java.util.Properties properties29 = atomikosProperties16.asProperties();
        java.util.Properties properties31 = new java.util.Properties();
        java.util.Properties properties32 = new java.util.Properties(properties31);
        int int33 = properties32.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery34 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long35 = recovery34.getForgetOrphanedLogEntriesDelay();
        java.lang.Class<?> wildcardClass36 = recovery34.getClass();
        boolean boolean37 = properties32.containsKey((java.lang.Object) wildcardClass36);
        boolean boolean38 = properties11.replace((java.lang.Object) properties29, (java.lang.Object) 1.0f, (java.lang.Object) wildcardClass36);
        java.util.Properties properties39 = new java.util.Properties(properties29);
        java.util.Properties properties40 = new java.util.Properties();
        java.util.Properties properties41 = new java.util.Properties(properties40);
        properties41.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str45 = atomikosProperties44.getConsoleFileName();
        atomikosProperties44.setOutputDir("hi!");
        int int48 = atomikosProperties44.getConsoleFileLimit();
        java.lang.Object obj49 = properties41.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties44);
        boolean boolean50 = atomikosProperties44.isForceShutdownOnVmExit();
        atomikosProperties44.setConsoleFileName("");
        java.lang.String str53 = atomikosProperties44.getService();
        java.util.Properties properties54 = atomikosProperties44.asProperties();
        boolean boolean55 = properties5.remove((java.lang.Object) properties29, (java.lang.Object) atomikosProperties44);
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.io.PrintWriter printWriter57 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printWriter57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tm.out" + "'", str17, "tm.out");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 86400000L + "'", long35 == 86400000L);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "tm.out" + "'", str45, "tm.out");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(properties54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test00960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00960");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        int int3 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setOutputDir("");
        java.lang.String str6 = atomikosProperties0.getConsoleFileName();
        boolean boolean7 = atomikosProperties0.isEnableLogging();
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        java.util.Enumeration<java.lang.Object> objEnumeration9 = properties8.elements();
        java.lang.String str12 = properties8.getProperty("hi!", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tm.out" + "'", str6, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(objEnumeration9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str12, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
    }

    @Test
    public void test00961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00961");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties1.elements();
        java.util.Properties properties5 = new java.util.Properties(properties1);
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Properties properties7 = new java.util.Properties(properties6);
        int int8 = properties7.size();
        boolean boolean9 = properties7.isEmpty();
        java.util.Properties properties10 = new java.util.Properties(properties7);
        java.util.Properties properties11 = new java.util.Properties(properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.getConsoleFileName();
        atomikosProperties12.setOutputDir("hi!");
        int int16 = atomikosProperties12.getConsoleFileLimit();
        java.util.Properties properties17 = atomikosProperties12.asProperties();
        java.lang.String str18 = atomikosProperties12.getService();
        atomikosProperties12.setService("hi!");
        atomikosProperties12.setForceShutdownOnVmExit(true);
        atomikosProperties12.setThreadedTwoPhaseCommit(false);
        java.util.Properties properties25 = atomikosProperties12.asProperties();
        java.util.Properties properties27 = new java.util.Properties();
        java.util.Properties properties28 = new java.util.Properties(properties27);
        int int29 = properties28.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery30 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long31 = recovery30.getForgetOrphanedLogEntriesDelay();
        java.lang.Class<?> wildcardClass32 = recovery30.getClass();
        boolean boolean33 = properties28.containsKey((java.lang.Object) wildcardClass32);
        boolean boolean34 = properties7.replace((java.lang.Object) properties25, (java.lang.Object) 1.0f, (java.lang.Object) wildcardClass32);
        java.util.Properties properties35 = new java.util.Properties(properties25);
        java.util.Properties properties36 = new java.util.Properties();
        java.util.Properties properties37 = new java.util.Properties(properties36);
        properties37.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str41 = atomikosProperties40.getConsoleFileName();
        atomikosProperties40.setOutputDir("hi!");
        int int44 = atomikosProperties40.getConsoleFileLimit();
        java.lang.Object obj45 = properties37.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties40);
        boolean boolean46 = atomikosProperties40.isForceShutdownOnVmExit();
        atomikosProperties40.setConsoleFileName("");
        java.lang.String str49 = atomikosProperties40.getService();
        java.util.Properties properties50 = atomikosProperties40.asProperties();
        boolean boolean51 = properties1.remove((java.lang.Object) properties25, (java.lang.Object) atomikosProperties40);
        atomikosProperties40.setEnableLogging(false);
        java.util.Properties properties54 = atomikosProperties40.asProperties();
        java.io.OutputStream outputStream55 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties54.storeToXML(outputStream55, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tm.out" + "'", str13, "tm.out");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 86400000L + "'", long31 == 86400000L);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "tm.out" + "'", str41, "tm.out");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(properties54);
    }

    @Test
    public void test00962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00962");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        boolean boolean4 = properties2.isEmpty();
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection6 = properties5.values();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        properties10.clear();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.lang.Object obj15 = properties8.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        boolean boolean20 = properties18.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties18.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet22 = properties18.entrySet();
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection24 = properties23.values();
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        java.util.Properties properties27 = new java.util.Properties();
        java.util.Properties properties28 = new java.util.Properties(properties27);
        properties28.clear();
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        java.lang.Object obj33 = properties26.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setConsoleFileCount((-1));
        java.lang.String str38 = atomikosProperties35.getOutputDir();
        atomikosProperties35.setLogBaseName("tm.out");
        boolean boolean41 = properties26.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties42.setConsoleFileCount(100);
        atomikosProperties42.setAllowSubTransactions(true);
        java.lang.Object obj47 = properties26.remove((java.lang.Object) atomikosProperties42);
        java.util.Set<java.lang.Object> objSet48 = properties26.keySet();
        boolean boolean49 = properties2.replace((java.lang.Object) properties8, (java.lang.Object) objEntrySet22, (java.lang.Object) properties26);
        int int50 = properties2.size();
        java.io.Writer writer51 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.store(writer51, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNotNull(objEntrySet22);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(objSet48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test00963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00963");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties1.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        boolean boolean9 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties1.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet11 = properties1.entrySet();
        java.io.OutputStream outputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(outputStream12, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertNotNull(objEntrySet11);
    }

    @Test
    public void test00964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00964");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties0.keys();
        java.util.Properties properties4 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.getConsoleFileName();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        properties10.clear();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Collection<java.lang.Object> objCollection13 = properties10.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str15 = atomikosProperties14.getConsoleFileName();
        atomikosProperties14.setOutputDir("hi!");
        int int18 = atomikosProperties14.getConsoleFileLimit();
        java.util.Properties properties19 = atomikosProperties14.asProperties();
        boolean boolean20 = properties10.containsValue((java.lang.Object) atomikosProperties14);
        java.lang.String str21 = atomikosProperties14.getService();
        atomikosProperties14.setCheckpointInterval((long) 100);
        java.lang.Object obj24 = properties0.putIfAbsent((java.lang.Object) str6, (java.lang.Object) 100);
        java.util.Properties properties25 = new java.util.Properties();
        java.util.Properties properties26 = new java.util.Properties(properties25);
        int int27 = properties26.size();
        boolean boolean28 = properties26.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties26.elements();
        java.util.Properties properties30 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection31 = properties30.values();
        java.util.Properties properties32 = new java.util.Properties(properties30);
        java.util.Enumeration<java.lang.Object> objEnumeration33 = properties32.elements();
        boolean boolean34 = properties32.isEmpty();
        boolean boolean35 = properties26.containsValue((java.lang.Object) boolean34);
        java.util.Enumeration<java.lang.Object> objEnumeration36 = properties26.elements();
        properties26.clear();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet38 = properties26.entrySet();
        java.util.Enumeration<java.lang.Object> objEnumeration39 = properties26.keys();
        java.lang.Object obj40 = properties0.get((java.lang.Object) objEnumeration39);
        java.util.Properties properties41 = new java.util.Properties(properties0);
        java.lang.String str44 = properties41.getProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=32, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=false, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tm.out" + "'", str6, "tm.out");
        org.junit.Assert.assertNotNull(objCollection13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tm.out" + "'", str15, "tm.out");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertNotNull(objCollection31);
        org.junit.Assert.assertNotNull(objEnumeration33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objEnumeration36);
        org.junit.Assert.assertNotNull(objEntrySet38);
        org.junit.Assert.assertNotNull(objEnumeration39);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=false, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str44, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=false, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
    }

    @Test
    public void test00965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00965");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        java.lang.String str3 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseName("tm.out");
        atomikosProperties0.setLogBaseDir("tm.out");
        java.lang.String str8 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setDefaultJtaTimeout(10L);
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        java.lang.String str12 = properties11.toString();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tm.out" + "'", str8, "tm.out");
        org.junit.Assert.assertNotNull(properties11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=tm.out, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10}" + "'", str12, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=tm.out, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10}");
    }

    @Test
    public void test00966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00966");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.setDelay((long) (short) 1);
        recovery0.setDelay((long) (-1));
        recovery0.setForgetOrphanedLogEntriesDelay((long) (short) 10);
        long long8 = recovery0.getRetryInterval();
        long long9 = recovery0.getRetryInterval();
        recovery0.setMaxRetries(52);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 86400000L + "'", long1 == 86400000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10000L + "'", long8 == 10000L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
    }

    @Test
    public void test00967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00967");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties3.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet9 = properties3.stringPropertyNames();
        java.lang.Object obj10 = new java.lang.Object();
        java.lang.Object obj11 = properties3.get(obj10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.getConsoleFileName();
        atomikosProperties12.setOutputDir("hi!");
        int int16 = atomikosProperties12.getConsoleFileLimit();
        java.util.Properties properties17 = atomikosProperties12.asProperties();
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Properties properties19 = new java.util.Properties(properties18);
        properties19.clear();
        properties17.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties19);
        java.util.Properties properties22 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str24 = atomikosProperties23.getConsoleFileName();
        java.lang.Object obj26 = properties22.put((java.lang.Object) atomikosProperties23, (java.lang.Object) 0L);
        java.lang.Object obj29 = properties22.setProperty("", "");
        java.util.Properties properties30 = new java.util.Properties(properties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str32 = atomikosProperties31.getConsoleFileName();
        atomikosProperties31.setOutputDir("hi!");
        int int35 = atomikosProperties31.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel36 = atomikosProperties31.getConsoleLogLevel();
        java.lang.Object obj37 = properties17.getOrDefault((java.lang.Object) properties22, (java.lang.Object) atomikosProperties31);
        java.util.Properties properties38 = null;
        java.util.Properties properties39 = new java.util.Properties(properties38);
        java.util.Properties properties40 = new java.util.Properties();
        java.util.Properties properties41 = new java.util.Properties(properties40);
        properties41.clear();
        properties39.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties41);
        java.util.Collection<java.lang.Object> objCollection44 = properties41.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str46 = atomikosProperties45.getConsoleFileName();
        atomikosProperties45.setOutputDir("hi!");
        int int49 = atomikosProperties45.getConsoleFileLimit();
        java.util.Properties properties50 = atomikosProperties45.asProperties();
        boolean boolean51 = properties41.containsValue((java.lang.Object) atomikosProperties45);
        java.util.Enumeration<java.lang.Object> objEnumeration52 = properties41.elements();
        java.util.Enumeration<java.lang.Object> objEnumeration53 = properties41.elements();
        java.lang.Object obj54 = properties3.putIfAbsent((java.lang.Object) atomikosProperties31, (java.lang.Object) properties41);
        java.lang.Object obj55 = null;
        boolean boolean56 = properties41.equals(obj55);
        java.util.Properties properties57 = null;
        java.util.Properties properties58 = new java.util.Properties(properties57);
        java.util.Properties properties59 = new java.util.Properties();
        java.util.Properties properties60 = new java.util.Properties(properties59);
        properties60.clear();
        properties58.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties60);
        java.util.Collection<java.lang.Object> objCollection63 = properties60.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str65 = atomikosProperties64.getConsoleFileName();
        atomikosProperties64.setOutputDir("hi!");
        int int68 = atomikosProperties64.getConsoleFileLimit();
        java.util.Properties properties69 = atomikosProperties64.asProperties();
        boolean boolean70 = properties60.containsValue((java.lang.Object) atomikosProperties64);
        int int71 = atomikosProperties64.getConsoleFileLimit();
        java.lang.String str72 = atomikosProperties64.getService();
        java.util.Properties properties73 = null;
        java.util.Properties properties74 = new java.util.Properties(properties73);
        boolean boolean76 = properties74.containsValue((java.lang.Object) 10L);
        java.util.Collection<java.lang.Object> objCollection77 = properties74.values();
        java.util.Set<java.lang.Object> objSet78 = properties74.keySet();
        java.lang.Object obj79 = properties41.putIfAbsent((java.lang.Object) atomikosProperties64, (java.lang.Object) properties74);
        atomikosProperties64.setForceShutdownOnVmExit(false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tm.out" + "'", str13, "tm.out");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tm.out" + "'", str24, "tm.out");
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tm.out" + "'", str32, "tm.out");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel36 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel36.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(objCollection44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "tm.out" + "'", str46, "tm.out");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objEnumeration52);
        org.junit.Assert.assertNotNull(objEnumeration53);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objCollection63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "tm.out" + "'", str65, "tm.out");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(properties69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(objCollection77);
        org.junit.Assert.assertNotNull(objSet78);
        org.junit.Assert.assertNull(obj79);
    }

    @Test
    public void test00968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00968");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.lang.Object obj4 = properties0.setProperty("hi!", "");
        java.util.Properties properties5 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.getConsoleFileName();
        java.lang.Object obj9 = properties5.put((java.lang.Object) atomikosProperties6, (java.lang.Object) 0L);
        java.lang.Object obj12 = properties5.setProperty("", "");
        java.util.Properties properties13 = new java.util.Properties(properties5);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties13);
        java.util.Properties properties15 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.getConsoleFileName();
        java.lang.Object obj19 = properties15.put((java.lang.Object) atomikosProperties16, (java.lang.Object) 0L);
        java.util.Properties properties20 = new java.util.Properties(properties15);
        java.util.Properties properties21 = new java.util.Properties(properties20);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.lang.String str23 = properties0.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties0.elements();
        java.io.OutputStream outputStream25 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(outputStream25, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=32, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tm.out" + "'", str7, "tm.out");
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tm.out" + "'", str17, "tm.out");
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{hi!=}" + "'", str23, "{hi!=}");
        org.junit.Assert.assertNotNull(objEnumeration24);
    }

    @Test
    public void test00969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00969");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties8.getConsoleLogLevel();
        java.lang.Object obj14 = properties1.putIfAbsent((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosLoggingLevel13);
        java.util.Collection<java.lang.Object> objCollection15 = properties1.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery16 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int17 = recovery16.getMaxRetries();
        recovery16.setForgetOrphanedLogEntriesDelay((long) (short) -1);
        long long20 = recovery16.getDelay();
        boolean boolean21 = properties1.contains((java.lang.Object) recovery16);
        java.util.Enumeration<java.lang.Object> objEnumeration22 = properties1.elements();
        java.io.OutputStream outputStream23 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream23, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=32, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(objCollection15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10000L + "'", long20 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objEnumeration22);
    }

    @Test
    public void test00970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00970");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties8.getConsoleLogLevel();
        java.lang.Object obj14 = properties1.putIfAbsent((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosLoggingLevel13);
        boolean boolean15 = atomikosProperties4.isSerialJtaTransactions();
        long long16 = atomikosProperties4.getDefaultJtaTimeout();
        atomikosProperties4.setConsoleFileName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=100}");
        atomikosProperties4.setDefaultJtaTimeout((long) 100);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
    }

    @Test
    public void test00971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00971");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        java.util.Properties properties26 = new java.util.Properties(properties3);
        java.util.Properties properties27 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection28 = properties27.values();
        java.util.Properties properties29 = null;
        java.util.Properties properties30 = new java.util.Properties(properties29);
        java.util.Properties properties31 = new java.util.Properties();
        java.util.Properties properties32 = new java.util.Properties(properties31);
        properties32.clear();
        properties30.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties32);
        java.lang.Object obj37 = properties30.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties30);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties39.setConsoleFileCount((-1));
        java.lang.String str42 = atomikosProperties39.getOutputDir();
        atomikosProperties39.setLogBaseName("tm.out");
        boolean boolean45 = properties30.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties46.setConsoleFileCount(100);
        atomikosProperties46.setAllowSubTransactions(true);
        java.lang.Object obj51 = properties30.remove((java.lang.Object) atomikosProperties46);
        java.util.Properties properties52 = new java.util.Properties();
        java.util.Properties properties53 = new java.util.Properties(properties52);
        properties53.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str57 = atomikosProperties56.getConsoleFileName();
        atomikosProperties56.setOutputDir("hi!");
        int int60 = atomikosProperties56.getConsoleFileLimit();
        java.lang.Object obj61 = properties53.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties56);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet62 = properties53.entrySet();
        boolean boolean63 = properties30.containsValue((java.lang.Object) properties53);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str65 = atomikosProperties64.getConsoleFileName();
        atomikosProperties64.setOutputDir("hi!");
        int int68 = atomikosProperties64.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel69 = atomikosProperties64.getConsoleLogLevel();
        boolean boolean70 = properties30.containsValue((java.lang.Object) atomikosProperties64);
        java.lang.Object obj71 = properties26.get((java.lang.Object) atomikosProperties64);
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertNotNull(objCollection28);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "tm.out" + "'", str57, "tm.out");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNotNull(objEntrySet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "tm.out" + "'", str65, "tm.out");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel69 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel69.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(obj71);
    }

    @Test
    public void test00972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00972");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        atomikosProperties1.setOutputDir("hi!");
        int int5 = atomikosProperties1.getConsoleFileLimit();
        java.util.Properties properties6 = atomikosProperties1.asProperties();
        java.lang.String str7 = atomikosProperties1.getService();
        atomikosProperties1.setService("hi!");
        java.lang.Object obj11 = properties0.putIfAbsent((java.lang.Object) "hi!", (java.lang.Object) 10L);
        java.util.Properties properties12 = new java.util.Properties(properties0);
        java.io.Reader reader13 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties12.load(reader13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test00973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00973");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        java.lang.String str5 = properties2.getProperty("hi!");
        java.io.OutputStream outputStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.storeToXML(outputStream6, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test00974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00974");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties1.setProperty("", "hi!");
        java.util.Set<java.lang.Object> objSet9 = properties1.keySet();
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties1.elements();
        boolean boolean11 = properties1.isEmpty();
        java.io.InputStream inputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(inputStream12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objSet9);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test00975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00975");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean5 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setConsoleFileCount(10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel10 = atomikosProperties8.getConsoleLogLevel();
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel10);
        boolean boolean12 = atomikosProperties0.isSerialJtaTransactions();
        java.util.Properties properties13 = atomikosProperties0.asProperties();
        java.util.Properties properties14 = new java.util.Properties();
        java.lang.Object obj16 = properties14.get((java.lang.Object) (byte) -1);
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties14.elements();
        java.util.Properties properties18 = null;
        java.util.Properties properties19 = new java.util.Properties(properties18);
        java.util.Properties properties20 = new java.util.Properties();
        java.util.Properties properties21 = new java.util.Properties(properties20);
        properties21.clear();
        properties19.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        boolean boolean25 = properties19.equals((java.lang.Object) (-1.0d));
        java.lang.Object obj26 = properties14.remove((java.lang.Object) properties19);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.getConsoleFileName();
        atomikosProperties27.setOutputDir("hi!");
        int int31 = atomikosProperties27.getConsoleFileLimit();
        java.util.Properties properties32 = atomikosProperties27.asProperties();
        java.lang.String str33 = atomikosProperties27.getService();
        atomikosProperties27.setService("hi!");
        atomikosProperties27.setThreadedTwoPhaseCommit(false);
        atomikosProperties27.setLogBaseDir("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        atomikosProperties27.setTransactionManagerUniqueName("");
        boolean boolean42 = properties14.containsValue((java.lang.Object) "");
        java.util.Properties properties43 = new java.util.Properties(properties14);
        boolean boolean44 = properties13.equals((java.lang.Object) properties43);
        java.io.OutputStream outputStream45 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties13.save(outputStream45, "{hi!=10}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel10 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel10.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tm.out" + "'", str28, "tm.out");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test00976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00976");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str3 = atomikosProperties2.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel4 = atomikosProperties2.getConsoleLogLevel();
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel4);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "tm.out" + "'", str3, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel4 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel4.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test00977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00977");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.setDelay((long) 5);
        recovery0.setMaxRetries((-1));
        recovery0.setForgetOrphanedLogEntriesDelay(86400000L);
        long long7 = recovery0.getDelay();
        long long8 = recovery0.getRetryInterval();
        long long9 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long10 = recovery0.getRetryInterval();
        recovery0.setRetryInterval((long) (short) 10);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 5L + "'", long7 == 5L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10000L + "'", long8 == 10000L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86400000L + "'", long9 == 86400000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
    }

    @Test
    public void test00978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00978");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Collection<java.lang.Object> objCollection6 = properties3.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str8 = atomikosProperties7.getConsoleFileName();
        atomikosProperties7.setOutputDir("hi!");
        int int11 = atomikosProperties7.getConsoleFileLimit();
        java.util.Properties properties12 = atomikosProperties7.asProperties();
        boolean boolean13 = properties3.containsValue((java.lang.Object) atomikosProperties7);
        atomikosProperties7.setTransactionManagerUniqueName("tmlog");
        atomikosProperties7.setEnableLogging(false);
        java.util.Properties properties18 = atomikosProperties7.asProperties();
        java.util.Properties properties19 = atomikosProperties7.asProperties();
        atomikosProperties7.setMaxActives((int) '#');
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tm.out" + "'", str8, "tm.out");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertNotNull(properties19);
    }

    @Test
    public void test00979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00979");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Collection<java.lang.Object> objCollection6 = properties3.values();
        java.util.Properties properties7 = new java.util.Properties(properties3);
        java.io.PrintWriter printWriter8 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.list(printWriter8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection6);
    }

    @Test
    public void test00980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00980");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.util.Properties properties28 = new java.util.Properties();
        java.util.Properties properties29 = new java.util.Properties(properties28);
        properties29.clear();
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        java.lang.Object obj32 = properties3.get((java.lang.Object) properties29);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.setConsoleFileCount((-1));
        atomikosProperties33.setAllowSubTransactions(false);
        boolean boolean38 = properties3.contains((java.lang.Object) false);
        java.util.Properties properties39 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str41 = atomikosProperties40.getConsoleFileName();
        java.lang.Object obj43 = properties39.put((java.lang.Object) atomikosProperties40, (java.lang.Object) 0L);
        java.util.Properties properties44 = new java.util.Properties();
        java.util.Properties properties45 = new java.util.Properties(properties44);
        properties45.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str49 = atomikosProperties48.getConsoleFileName();
        atomikosProperties48.setOutputDir("hi!");
        int int52 = atomikosProperties48.getConsoleFileLimit();
        java.lang.Object obj53 = properties45.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties48);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet54 = properties45.entrySet();
        java.util.Properties properties55 = new java.util.Properties(properties45);
        boolean boolean56 = properties3.remove((java.lang.Object) 0L, (java.lang.Object) properties45);
        java.util.Enumeration<java.lang.Object> objEnumeration57 = properties3.keys();
        java.io.Reader reader58 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.load(reader58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "tm.out" + "'", str41, "tm.out");
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tm.out" + "'", str49, "tm.out");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNotNull(objEntrySet54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objEnumeration57);
    }

    @Test
    public void test00981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00981");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Properties properties7 = new java.util.Properties(properties6);
        properties7.clear();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.util.Properties properties10 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.getConsoleFileName();
        java.lang.Object obj14 = properties10.put((java.lang.Object) atomikosProperties11, (java.lang.Object) 0L);
        java.lang.Object obj17 = properties10.setProperty("", "");
        java.util.Properties properties18 = new java.util.Properties(properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.getConsoleFileName();
        atomikosProperties19.setOutputDir("hi!");
        int int23 = atomikosProperties19.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel24 = atomikosProperties19.getConsoleLogLevel();
        java.lang.Object obj25 = properties5.getOrDefault((java.lang.Object) properties10, (java.lang.Object) atomikosProperties19);
        java.io.OutputStream outputStream26 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.store(outputStream26, "{=hi!}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tm.out" + "'", str12, "tm.out");
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tm.out" + "'", str20, "tm.out");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel24 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel24.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(obj25);
    }

    @Test
    public void test00982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00982");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        int int26 = properties3.size();
        java.util.Properties properties27 = new java.util.Properties(properties3);
        java.io.OutputStream outputStream28 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.storeToXML(outputStream28, "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test00983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00983");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties1.setProperty("tm.out", "");
        java.util.Properties properties9 = new java.util.Properties(properties1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setConsoleFileCount(100);
        atomikosProperties10.setAllowSubTransactions(true);
        boolean boolean15 = atomikosProperties10.isForceShutdownOnVmExit();
        int int16 = atomikosProperties10.getConsoleFileCount();
        java.lang.Object obj17 = properties9.get((java.lang.Object) atomikosProperties10);
        atomikosProperties10.setEnableLogging(true);
        java.util.Properties properties20 = new java.util.Properties();
        java.util.Properties properties21 = new java.util.Properties(properties20);
        properties21.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str25 = atomikosProperties24.getConsoleFileName();
        atomikosProperties24.setOutputDir("hi!");
        int int28 = atomikosProperties24.getConsoleFileLimit();
        java.lang.Object obj29 = properties21.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties24);
        atomikosProperties24.setLogBaseName("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str33 = atomikosProperties32.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel34 = atomikosProperties32.getConsoleLogLevel();
        atomikosProperties24.setConsoleLogLevel(atomikosLoggingLevel34);
        atomikosProperties10.setConsoleLogLevel(atomikosLoggingLevel34);
        int int37 = atomikosProperties10.getConsoleFileLimit();
        java.lang.String str38 = atomikosProperties10.getLogBaseDir();
        java.lang.String str39 = atomikosProperties10.getTransactionManagerUniqueName();
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "tm.out" + "'", str25, "tm.out");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tm.out" + "'", str33, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel34 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel34.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str39);
    }

    @Test
    public void test00984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00984");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long2 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long3 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.setMaxRetries(35);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 86400000L + "'", long1 == 86400000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 86400000L + "'", long2 == 86400000L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 86400000L + "'", long3 == 86400000L);
    }

    @Test
    public void test00985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00985");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        java.lang.String str3 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseName("tm.out");
        atomikosProperties0.setLogBaseDir("tm.out");
        int int8 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setDefaultJtaTimeout((long) (short) 100);
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        java.util.Properties properties12 = new java.util.Properties();
        java.util.Properties properties13 = new java.util.Properties(properties12);
        properties13.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.getConsoleFileName();
        atomikosProperties16.setOutputDir("hi!");
        int int20 = atomikosProperties16.getConsoleFileLimit();
        java.lang.Object obj21 = properties13.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties16);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel22 = atomikosProperties16.getConsoleLogLevel();
        java.lang.String str23 = atomikosProperties16.getTransactionManagerUniqueName();
        atomikosProperties16.setThreadedTwoPhaseCommit(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setConsoleFileCount(100);
        atomikosProperties26.setAllowSubTransactions(true);
        java.lang.String str31 = atomikosProperties26.getConsoleFileName();
        atomikosProperties26.setDefaultJtaTimeout((long) 0);
        boolean boolean34 = atomikosProperties26.isAllowSubTransactions();
        boolean boolean35 = atomikosProperties26.isForceShutdownOnVmExit();
        java.lang.Object obj36 = properties11.put((java.lang.Object) false, (java.lang.Object) boolean35);
        java.util.Properties properties37 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str39 = atomikosProperties38.getConsoleFileName();
        java.lang.Object obj41 = properties37.put((java.lang.Object) atomikosProperties38, (java.lang.Object) 0L);
        properties37.clear();
        java.util.Properties properties43 = new java.util.Properties(properties37);
        java.lang.String str45 = properties37.getProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=32, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        java.util.Properties properties46 = null;
        java.util.Properties properties47 = new java.util.Properties(properties46);
        java.util.Properties properties48 = new java.util.Properties();
        java.util.Properties properties49 = new java.util.Properties(properties48);
        properties49.clear();
        properties47.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties49);
        java.util.Collection<java.lang.Object> objCollection52 = properties49.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str54 = atomikosProperties53.getConsoleFileName();
        atomikosProperties53.setOutputDir("hi!");
        int int57 = atomikosProperties53.getConsoleFileLimit();
        java.util.Properties properties58 = atomikosProperties53.asProperties();
        boolean boolean59 = properties49.containsValue((java.lang.Object) atomikosProperties53);
        java.lang.String str60 = atomikosProperties53.getService();
        atomikosProperties53.setCheckpointInterval((long) 100);
        atomikosProperties53.setLogBaseDir("hi!");
        long long65 = atomikosProperties53.getMaxTimeout();
        java.lang.Object obj66 = properties37.remove((java.lang.Object) atomikosProperties53);
        java.util.Properties properties67 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str69 = atomikosProperties68.getConsoleFileName();
        java.lang.Object obj71 = properties67.put((java.lang.Object) atomikosProperties68, (java.lang.Object) 0L);
        long long72 = atomikosProperties68.getCheckpointInterval();
        java.lang.String str73 = atomikosProperties68.getConsoleFileName();
        java.util.Properties properties74 = atomikosProperties68.asProperties();
        atomikosProperties68.setConsoleFileName("tm.out");
        atomikosProperties68.setSerialJtaTransactions(true);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean79 = properties11.remove(obj66, (java.lang.Object) atomikosProperties68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tm.out" + "'", str17, "tm.out");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel22 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel22.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tm.out" + "'", str31, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "tm.out" + "'", str39, "tm.out");
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(objCollection52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "tm.out" + "'", str54, "tm.out");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(properties58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 300000L + "'", long65 == 300000L);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "tm.out" + "'", str69, "tm.out");
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 500L + "'", long72 == 500L);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "tm.out" + "'", str73, "tm.out");
        org.junit.Assert.assertNotNull(properties74);
    }

    @Test
    public void test00986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00986");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        boolean boolean5 = atomikosProperties0.isForceShutdownOnVmExit();
        boolean boolean6 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setConsoleFileName("tm.out");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test00987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00987");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties8.getConsoleLogLevel();
        java.lang.Object obj14 = properties1.putIfAbsent((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosLoggingLevel13);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.getConsoleFileName();
        atomikosProperties15.setOutputDir("hi!");
        int int19 = atomikosProperties15.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel20 = atomikosProperties15.getConsoleLogLevel();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery21 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long22 = recovery21.getForgetOrphanedLogEntriesDelay();
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Properties properties24 = new java.util.Properties(properties23);
        properties24.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.getConsoleFileName();
        atomikosProperties27.setOutputDir("hi!");
        int int31 = atomikosProperties27.getConsoleFileLimit();
        java.lang.Object obj32 = properties24.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties27);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel33 = atomikosProperties27.getConsoleLogLevel();
        java.lang.String str34 = atomikosProperties27.getTransactionManagerUniqueName();
        atomikosProperties27.setThreadedTwoPhaseCommit(false);
        boolean boolean37 = properties1.replace((java.lang.Object) atomikosProperties15, (java.lang.Object) recovery21, (java.lang.Object) false);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery38 = atomikosProperties15.getRecovery();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tm.out" + "'", str16, "tm.out");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel20 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel20.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 86400000L + "'", long22 == 86400000L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tm.out" + "'", str28, "tm.out");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel33 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel33.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(recovery38);
    }

    @Test
    public void test00988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00988");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties3.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Properties properties9 = new java.util.Properties(properties3);
        java.util.Properties properties10 = new java.util.Properties(properties9);
        java.util.Properties properties11 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection12 = properties11.values();
        java.util.Properties properties13 = new java.util.Properties(properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration14 = properties13.elements();
        boolean boolean15 = properties13.isEmpty();
        java.util.Properties properties16 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection17 = properties16.values();
        java.util.Properties properties18 = null;
        java.util.Properties properties19 = new java.util.Properties(properties18);
        java.util.Properties properties20 = new java.util.Properties();
        java.util.Properties properties21 = new java.util.Properties(properties20);
        properties21.clear();
        properties19.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.lang.Object obj26 = properties19.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties16.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties19);
        java.util.Properties properties28 = null;
        java.util.Properties properties29 = new java.util.Properties(properties28);
        boolean boolean31 = properties29.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties29.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet33 = properties29.entrySet();
        java.util.Properties properties34 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection35 = properties34.values();
        java.util.Properties properties36 = null;
        java.util.Properties properties37 = new java.util.Properties(properties36);
        java.util.Properties properties38 = new java.util.Properties();
        java.util.Properties properties39 = new java.util.Properties(properties38);
        properties39.clear();
        properties37.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties39);
        java.lang.Object obj44 = properties37.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties34.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties37);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties46.setConsoleFileCount((-1));
        java.lang.String str49 = atomikosProperties46.getOutputDir();
        atomikosProperties46.setLogBaseName("tm.out");
        boolean boolean52 = properties37.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties53.setConsoleFileCount(100);
        atomikosProperties53.setAllowSubTransactions(true);
        java.lang.Object obj58 = properties37.remove((java.lang.Object) atomikosProperties53);
        java.util.Set<java.lang.Object> objSet59 = properties37.keySet();
        boolean boolean60 = properties13.replace((java.lang.Object) properties19, (java.lang.Object) objEntrySet33, (java.lang.Object) properties37);
        java.lang.String str62 = properties19.getProperty("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties63.setConsoleFileCount((-1));
        atomikosProperties63.setConsoleFileName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str69 = atomikosProperties68.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties70 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str71 = atomikosProperties70.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel72 = atomikosProperties70.getConsoleLogLevel();
        atomikosProperties68.setConsoleLogLevel(atomikosLoggingLevel72);
        atomikosProperties63.setConsoleLogLevel(atomikosLoggingLevel72);
        atomikosProperties63.setDefaultJtaTimeout((long) (byte) 0);
        java.lang.Object obj77 = properties10.replace((java.lang.Object) properties19, (java.lang.Object) (byte) 0);
        java.util.Properties properties78 = new java.util.Properties();
        java.util.Properties properties79 = new java.util.Properties(properties78);
        properties79.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties82 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str83 = atomikosProperties82.getConsoleFileName();
        atomikosProperties82.setOutputDir("hi!");
        int int86 = atomikosProperties82.getConsoleFileLimit();
        java.lang.Object obj87 = properties79.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties82);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet88 = properties79.entrySet();
        java.util.Properties properties89 = new java.util.Properties(properties79);
        int int90 = properties89.size();
        properties10.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties89);
        java.io.InputStream inputStream92 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties10.load(inputStream92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection12);
        org.junit.Assert.assertNotNull(objEnumeration14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objEnumeration32);
        org.junit.Assert.assertNotNull(objEntrySet33);
        org.junit.Assert.assertNotNull(objCollection35);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNotNull(objSet59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "tm.out" + "'", str71, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel72 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel72.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "tm.out" + "'", str83, "tm.out");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNull(obj87);
        org.junit.Assert.assertNotNull(objEntrySet88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test00989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00989");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Properties properties6 = new java.util.Properties(properties5);
        properties6.clear();
        properties4.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties6);
        java.lang.Object obj11 = properties6.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet12 = properties6.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.setConsoleFileCount((-1));
        java.lang.String str16 = atomikosProperties13.getOutputDir();
        atomikosProperties13.setLogBaseName("tm.out");
        int int19 = atomikosProperties13.getConsoleFileCount();
        boolean boolean20 = properties6.containsKey((java.lang.Object) atomikosProperties13);
        boolean boolean21 = properties1.containsValue((java.lang.Object) atomikosProperties13);
        java.util.Enumeration<java.lang.Object> objEnumeration22 = properties1.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties23.setConsoleFileCount(100);
        atomikosProperties23.setAllowSubTransactions(true);
        boolean boolean28 = atomikosProperties23.isForceShutdownOnVmExit();
        java.util.Properties properties29 = atomikosProperties23.asProperties();
        atomikosProperties23.setConsoleFileName("");
        java.lang.String str32 = atomikosProperties23.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery33 = atomikosProperties23.getRecovery();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery34 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery34.setDelay((long) 5);
        recovery34.setMaxRetries((-1));
        int int39 = recovery34.getMaxRetries();
        recovery34.setRetryInterval(86400000L);
        java.lang.Object obj42 = properties1.getOrDefault((java.lang.Object) recovery33, (java.lang.Object) 86400000L);
        int int43 = recovery33.getMaxRetries();
        long long44 = recovery33.getDelay();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objEnumeration22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(recovery33);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertEquals("'" + obj42 + "' != '" + 86400000L + "'", obj42, 86400000L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10000L + "'", long44 == 10000L);
    }

    @Test
    public void test00990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00990");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Properties properties4 = new java.util.Properties(properties1);
        java.util.Properties properties5 = new java.util.Properties(properties1);
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        boolean boolean9 = properties7.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties7.keys();
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        java.util.Properties properties13 = new java.util.Properties();
        java.util.Properties properties14 = new java.util.Properties(properties13);
        properties14.clear();
        properties12.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties14);
        java.lang.Object obj19 = properties14.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Properties properties20 = new java.util.Properties();
        java.util.Properties properties21 = new java.util.Properties(properties20);
        properties21.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str25 = atomikosProperties24.getConsoleFileName();
        atomikosProperties24.setOutputDir("hi!");
        int int28 = atomikosProperties24.getConsoleFileLimit();
        java.lang.Object obj29 = properties21.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties24);
        atomikosProperties24.setLogBaseName("tm.out");
        boolean boolean32 = properties14.containsKey((java.lang.Object) "tm.out");
        java.util.Properties properties33 = null;
        java.util.Properties properties34 = new java.util.Properties(properties33);
        java.util.Properties properties35 = new java.util.Properties();
        java.util.Properties properties36 = new java.util.Properties(properties35);
        properties36.clear();
        properties34.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties36);
        properties14.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties34);
        java.util.Properties properties40 = new java.util.Properties(properties34);
        java.lang.String str42 = properties34.getProperty("tmlog");
        java.util.Properties properties43 = new java.util.Properties();
        java.util.Properties properties44 = new java.util.Properties(properties43);
        properties44.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str48 = atomikosProperties47.getConsoleFileName();
        atomikosProperties47.setOutputDir("hi!");
        int int51 = atomikosProperties47.getConsoleFileLimit();
        java.lang.Object obj52 = properties44.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties47);
        atomikosProperties47.setConsoleFileLimit((int) (short) 0);
        boolean boolean55 = properties34.containsValue((java.lang.Object) atomikosProperties47);
        java.lang.Object obj56 = properties1.getOrDefault((java.lang.Object) properties7, (java.lang.Object) atomikosProperties47);
        java.util.Enumeration<java.lang.Object> objEnumeration57 = properties1.elements();
        java.io.OutputStream outputStream58 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.save(outputStream58, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=false, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "tm.out" + "'", str25, "tm.out");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "tm.out" + "'", str48, "tm.out");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertNotNull(objEnumeration57);
    }

    @Test
    public void test00991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00991");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.lang.String str6 = atomikosProperties0.getService();
        atomikosProperties0.setService("hi!");
        atomikosProperties0.setConsoleFileName("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = atomikosProperties0.getRecovery();
        java.util.Properties properties12 = atomikosProperties0.asProperties();
        atomikosProperties0.setMaxTimeout((long) 18);
        boolean boolean15 = atomikosProperties0.isSerialJtaTransactions();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(recovery11);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test00992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00992");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        java.lang.String str3 = atomikosProperties0.getOutputDir();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel4 = atomikosProperties0.getConsoleLogLevel();
        java.lang.String str5 = atomikosProperties0.getOutputDir();
        java.lang.String str6 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setSerialJtaTransactions(false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel4 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel4.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test00993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00993");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        int int3 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setOutputDir("");
        java.lang.String str6 = atomikosProperties0.getConsoleFileName();
        long long7 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.setMaxActives(100);
        int int10 = atomikosProperties0.getConsoleFileCount();
        int int11 = atomikosProperties0.getConsoleFileCount();
        java.lang.String str12 = atomikosProperties0.getOutputDir();
        long long13 = atomikosProperties0.getCheckpointInterval();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tm.out" + "'", str6, "tm.out");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
    }

    @Test
    public void test00994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00994");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        atomikosProperties0.setMaxTimeout((long) (short) 10);
        int int8 = atomikosProperties0.getConsoleFileLimit();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test00995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00995");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        java.lang.String str3 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseName("tm.out");
        int int6 = atomikosProperties0.getMaxActives();
        java.lang.String str7 = atomikosProperties0.getOutputDir();
        long long8 = atomikosProperties0.getDefaultJtaTimeout();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 50 + "'", int6 == 50);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10000L + "'", long8 == 10000L);
    }

    @Test
    public void test00996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00996");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        long long4 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setEnableLogging(false);
        int int7 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setMaxActives((int) (short) 0);
        atomikosProperties0.setDefaultJtaTimeout((long) (short) 10);
        java.util.Properties properties12 = atomikosProperties0.asProperties();
        java.io.InputStream inputStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties12.loadFromXML(inputStream13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 500L + "'", long4 == 500L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(properties12);
    }

    @Test
    public void test00997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00997");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.util.Properties properties28 = new java.util.Properties();
        java.util.Properties properties29 = new java.util.Properties(properties28);
        properties29.clear();
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        java.lang.Object obj32 = properties3.get((java.lang.Object) properties29);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.setConsoleFileCount((-1));
        atomikosProperties33.setAllowSubTransactions(false);
        boolean boolean38 = properties3.contains((java.lang.Object) false);
        java.util.Properties properties39 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str41 = atomikosProperties40.getConsoleFileName();
        java.lang.Object obj43 = properties39.put((java.lang.Object) atomikosProperties40, (java.lang.Object) 0L);
        java.util.Properties properties44 = new java.util.Properties();
        java.util.Properties properties45 = new java.util.Properties(properties44);
        properties45.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str49 = atomikosProperties48.getConsoleFileName();
        atomikosProperties48.setOutputDir("hi!");
        int int52 = atomikosProperties48.getConsoleFileLimit();
        java.lang.Object obj53 = properties45.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties48);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet54 = properties45.entrySet();
        java.util.Properties properties55 = new java.util.Properties(properties45);
        boolean boolean56 = properties3.remove((java.lang.Object) 0L, (java.lang.Object) properties45);
        java.lang.Object obj59 = properties45.setProperty("tm.out", "");
        java.io.Writer writer60 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties45.store(writer60, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "tm.out" + "'", str41, "tm.out");
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tm.out" + "'", str49, "tm.out");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNotNull(objEntrySet54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(obj59);
    }

    @Test
    public void test00998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00998");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties3.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Properties properties9 = new java.util.Properties(properties3);
        java.util.Properties properties10 = new java.util.Properties(properties9);
        java.util.Properties properties11 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection12 = properties11.values();
        java.util.Properties properties13 = new java.util.Properties(properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration14 = properties13.elements();
        boolean boolean15 = properties13.isEmpty();
        java.util.Properties properties16 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection17 = properties16.values();
        java.util.Properties properties18 = null;
        java.util.Properties properties19 = new java.util.Properties(properties18);
        java.util.Properties properties20 = new java.util.Properties();
        java.util.Properties properties21 = new java.util.Properties(properties20);
        properties21.clear();
        properties19.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.lang.Object obj26 = properties19.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties16.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties19);
        java.util.Properties properties28 = null;
        java.util.Properties properties29 = new java.util.Properties(properties28);
        boolean boolean31 = properties29.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties29.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet33 = properties29.entrySet();
        java.util.Properties properties34 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection35 = properties34.values();
        java.util.Properties properties36 = null;
        java.util.Properties properties37 = new java.util.Properties(properties36);
        java.util.Properties properties38 = new java.util.Properties();
        java.util.Properties properties39 = new java.util.Properties(properties38);
        properties39.clear();
        properties37.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties39);
        java.lang.Object obj44 = properties37.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties34.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties37);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties46.setConsoleFileCount((-1));
        java.lang.String str49 = atomikosProperties46.getOutputDir();
        atomikosProperties46.setLogBaseName("tm.out");
        boolean boolean52 = properties37.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties53.setConsoleFileCount(100);
        atomikosProperties53.setAllowSubTransactions(true);
        java.lang.Object obj58 = properties37.remove((java.lang.Object) atomikosProperties53);
        java.util.Set<java.lang.Object> objSet59 = properties37.keySet();
        boolean boolean60 = properties13.replace((java.lang.Object) properties19, (java.lang.Object) objEntrySet33, (java.lang.Object) properties37);
        java.lang.String str62 = properties19.getProperty("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties63.setConsoleFileCount((-1));
        atomikosProperties63.setConsoleFileName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str69 = atomikosProperties68.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties70 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str71 = atomikosProperties70.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel72 = atomikosProperties70.getConsoleLogLevel();
        atomikosProperties68.setConsoleLogLevel(atomikosLoggingLevel72);
        atomikosProperties63.setConsoleLogLevel(atomikosLoggingLevel72);
        atomikosProperties63.setDefaultJtaTimeout((long) (byte) 0);
        java.lang.Object obj77 = properties10.replace((java.lang.Object) properties19, (java.lang.Object) (byte) 0);
        java.util.Properties properties78 = new java.util.Properties();
        java.util.Properties properties79 = new java.util.Properties(properties78);
        properties79.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties82 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str83 = atomikosProperties82.getConsoleFileName();
        atomikosProperties82.setOutputDir("hi!");
        int int86 = atomikosProperties82.getConsoleFileLimit();
        java.lang.Object obj87 = properties79.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties82);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet88 = properties79.entrySet();
        java.util.Properties properties89 = new java.util.Properties(properties79);
        int int90 = properties89.size();
        properties10.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties89);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration<?> wildcardEnumeration92 = properties89.propertyNames();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Integer cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection12);
        org.junit.Assert.assertNotNull(objEnumeration14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objEnumeration32);
        org.junit.Assert.assertNotNull(objEntrySet33);
        org.junit.Assert.assertNotNull(objCollection35);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNotNull(objSet59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "tm.out" + "'", str71, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel72 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel72.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "tm.out" + "'", str83, "tm.out");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNull(obj87);
        org.junit.Assert.assertNotNull(objEntrySet88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test00999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00999");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean5 = atomikosProperties0.isForceShutdownOnVmExit();
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        long long7 = atomikosProperties0.getMaxTimeout();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
    }

    @Test
    public void test01000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test01000");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str2 = properties0.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str4 = atomikosProperties3.getTransactionManagerUniqueName();
        boolean boolean5 = atomikosProperties3.isForceShutdownOnVmExit();
        java.util.Properties properties6 = atomikosProperties3.asProperties();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties6);
        java.util.Properties properties8 = new java.util.Properties(properties6);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection10 = properties9.values();
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        java.util.Properties properties13 = new java.util.Properties();
        java.util.Properties properties14 = new java.util.Properties(properties13);
        properties14.clear();
        properties12.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties14);
        java.lang.Object obj19 = properties12.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties12);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.setConsoleFileCount((-1));
        java.lang.String str24 = atomikosProperties21.getOutputDir();
        atomikosProperties21.setLogBaseName("tm.out");
        boolean boolean27 = properties12.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties28.setConsoleFileCount(100);
        atomikosProperties28.setAllowSubTransactions(true);
        java.lang.Object obj33 = properties12.remove((java.lang.Object) atomikosProperties28);
        java.util.Set<java.lang.Object> objSet34 = properties12.keySet();
        java.util.Properties properties35 = new java.util.Properties(properties12);
        java.util.Set<java.lang.String> strSet36 = properties35.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet37 = properties35.keySet();
        java.lang.Object obj38 = properties6.get((java.lang.Object) objSet37);
        java.io.PrintWriter printWriter39 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties6.list(printWriter39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNotNull(objCollection10);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(objSet34);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(objSet37);
        org.junit.Assert.assertNull(obj38);
    }
}
