import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test00001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00001");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.io.Reader reader2 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(reader2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00002");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.io.Reader reader2 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(reader2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00003");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Object obj6 = properties0.get(obj5);
        java.io.OutputStream outputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream7, "tm.out", "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test00004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00004");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Object obj6 = properties0.get(obj5);
        java.io.OutputStream outputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream7, "", "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test00005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00005");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties1.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        java.lang.Object obj9 = null;
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        java.util.Properties properties12 = null;
        java.util.Properties properties13 = new java.util.Properties(properties12);
        java.util.Properties properties14 = new java.util.Properties();
        java.util.Properties properties15 = new java.util.Properties(properties14);
        properties15.clear();
        properties13.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.util.Collection<java.lang.Object> objCollection18 = properties15.values();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean19 = properties1.replace(obj9, (java.lang.Object) properties10, (java.lang.Object) properties15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection18);
    }

    @Test
    public void test00006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00006");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.lang.Object obj7 = properties0.setProperty("", "");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass8 = obj7.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test00007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00007");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.io.OutputStream outputStream2 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream2, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00008");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        java.io.OutputStream outputStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.store(outputStream6, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test00009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00009");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.io.PrintStream printStream4 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printStream4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test00010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00010");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Properties properties8 = new java.util.Properties();
        java.util.Properties properties9 = new java.util.Properties(properties8);
        properties9.clear();
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        java.lang.Object obj14 = properties9.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        boolean boolean15 = properties5.equals(obj14);
        java.io.OutputStream outputStream16 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.storeToXML(outputStream16, "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test00011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00011");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Collection<java.lang.Object> objCollection6 = properties3.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getTransactionManagerUniqueName();
        boolean boolean10 = atomikosProperties8.isForceShutdownOnVmExit();
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean13 = properties3.replace((java.lang.Object) (short) -1, (java.lang.Object) atomikosProperties8, (java.lang.Object) properties11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test00012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00012");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Properties properties7 = new java.util.Properties(properties6);
        properties7.clear();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.lang.Object obj10 = null;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties11.setConsoleFileCount(100);
        atomikosProperties11.setAllowSubTransactions(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.getConsoleFileName();
        atomikosProperties16.setOutputDir("hi!");
        int int20 = atomikosProperties16.getConsoleFileLimit();
        java.util.Properties properties21 = atomikosProperties16.asProperties();
        java.util.Properties properties22 = null;
        java.util.Properties properties23 = new java.util.Properties(properties22);
        java.util.Properties properties24 = new java.util.Properties();
        java.util.Properties properties25 = new java.util.Properties(properties24);
        properties25.clear();
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties25);
        java.lang.Object obj30 = properties25.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        boolean boolean31 = properties21.equals(obj30);
        java.util.Collection<java.lang.Object> objCollection32 = properties21.values();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean33 = properties5.replace(obj10, (java.lang.Object) atomikosProperties11, (java.lang.Object) properties21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tm.out" + "'", str17, "tm.out");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objCollection32);
    }

    @Test
    public void test00013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00013");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Collection<java.lang.Object> objCollection6 = properties3.values();
        java.io.InputStream inputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.loadFromXML(inputStream7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection6);
    }

    @Test
    public void test00014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00014");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.lang.Object obj7 = properties0.setProperty("", "");
        java.io.Reader reader8 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.load(reader8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test00015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00015");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        java.io.OutputStream outputStream19 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.save(outputStream19, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test00016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00016");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.io.Reader reader6 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(reader6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00017");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Properties properties7 = new java.util.Properties(properties6);
        properties7.clear();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setConsoleFileCount((-1));
        java.lang.String str13 = atomikosProperties10.getOutputDir();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = properties5.contains((java.lang.Object) str13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test00018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00018");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties1.setProperty("", "hi!");
        java.util.Set<java.lang.Object> objSet9 = properties1.keySet();
        java.io.OutputStream outputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream10, "hi!", "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objSet9);
    }

    @Test
    public void test00019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00019");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Collection<java.lang.Object> objCollection6 = properties3.values();
        java.io.OutputStream outputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.storeToXML(outputStream7, "hi!", "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection6);
    }

    @Test
    public void test00020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00020");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Properties properties8 = new java.util.Properties();
        java.util.Properties properties9 = new java.util.Properties(properties8);
        properties9.clear();
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        java.lang.Object obj14 = properties9.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        boolean boolean15 = properties5.equals(obj14);
        java.util.Collection<java.lang.Object> objCollection16 = properties5.values();
        java.io.PrintWriter printWriter17 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.list(printWriter17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objCollection16);
    }

    @Test
    public void test00021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00021");
        java.util.Properties properties0 = new java.util.Properties();
        java.io.OutputStream outputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(outputStream1, "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00022");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        java.util.Collection<java.lang.Object> objCollection4 = properties1.values();
        java.lang.String str6 = properties1.getProperty("hi!");
        java.util.Set<java.lang.String> strSet7 = properties1.stringPropertyNames();
        java.io.PrintStream printStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printStream8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strSet7);
    }

    @Test
    public void test00023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00023");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties1.setProperty("", "hi!");
        java.util.Set<java.lang.Object> objSet9 = properties1.keySet();
        java.io.InputStream inputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(inputStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objSet9);
    }

    @Test
    public void test00024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00024");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        java.util.Properties properties26 = new java.util.Properties(properties3);
        java.io.Writer writer27 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.store(writer27, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
    }

    @Test
    public void test00025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00025");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        boolean boolean10 = atomikosProperties4.isForceShutdownOnVmExit();
        atomikosProperties4.setConsoleFileName("");
        java.lang.String str13 = atomikosProperties4.getService();
        java.util.Properties properties14 = atomikosProperties4.asProperties();
        java.lang.Object obj15 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = properties14.containsValue(obj15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(properties14);
    }

    @Test
    public void test00026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00026");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties0.keys();
        java.util.Properties properties4 = new java.util.Properties(properties0);
        java.io.OutputStream outputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(outputStream5, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objEnumeration3);
    }

    @Test
    public void test00027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00027");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        atomikosProperties4.setLogBaseName("tm.out");
        atomikosProperties4.setForceShutdownOnVmExit(false);
        atomikosProperties4.setConsoleFileCount((int) '#');
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test00028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00028");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str2 = properties0.getProperty("");
        java.io.OutputStream outputStream3 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream3, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test00029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00029");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        java.lang.String str2 = atomikosProperties0.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel3 = atomikosProperties0.getConsoleLogLevel();
        long long4 = atomikosProperties0.getCheckpointInterval();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel3 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel3.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 500L + "'", long4 == 500L);
    }

    @Test
    public void test00030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00030");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean8 = properties5.containsValue((java.lang.Object) properties6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test00031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00031");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Properties properties8 = new java.util.Properties();
        java.util.Properties properties9 = new java.util.Properties(properties8);
        properties9.clear();
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        java.lang.Object obj14 = properties9.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        boolean boolean15 = properties5.equals(obj14);
        java.lang.Object obj18 = properties5.setProperty("", "");
        java.lang.Object obj19 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = properties5.contains(obj19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(obj18);
    }

    @Test
    public void test00032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00032");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str2 = properties0.getProperty("");
        java.io.OutputStream outputStream3 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(outputStream3, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test00033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00033");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.lang.Object obj3 = null;
        boolean boolean4 = properties0.equals(obj3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.getConsoleFileName();
        atomikosProperties5.setOutputDir("hi!");
        int int9 = atomikosProperties5.getConsoleFileLimit();
        java.util.Properties properties10 = atomikosProperties5.asProperties();
        java.lang.String str11 = atomikosProperties5.getService();
        atomikosProperties5.setService("hi!");
        atomikosProperties5.setConsoleFileName("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery16 = atomikosProperties5.getRecovery();
        java.lang.Object obj17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj18 = properties0.replace((java.lang.Object) atomikosProperties5, obj17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tm.out" + "'", str6, "tm.out");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(recovery16);
    }

    @Test
    public void test00034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00034");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Properties properties8 = new java.util.Properties();
        java.util.Properties properties9 = new java.util.Properties(properties8);
        properties9.clear();
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        java.lang.Object obj14 = properties9.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        boolean boolean15 = properties5.equals(obj14);
        java.util.Collection<java.lang.Object> objCollection16 = properties5.values();
        java.io.Reader reader17 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.load(reader17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objCollection16);
    }

    @Test
    public void test00035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00035");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.lang.Object obj4 = properties0.setProperty("hi!", "");
        java.util.Properties properties5 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.getConsoleFileName();
        java.lang.Object obj9 = properties5.put((java.lang.Object) atomikosProperties6, (java.lang.Object) 0L);
        java.lang.Object obj12 = properties5.setProperty("", "");
        java.util.Properties properties13 = new java.util.Properties(properties5);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties13);
        java.io.OutputStream outputStream15 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties13.storeToXML(outputStream15, "", "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tm.out" + "'", str7, "tm.out");
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test00036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00036");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Class<?> wildcardClass12 = properties0.getClass();
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test00037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00037");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long4 = recovery3.getForgetOrphanedLogEntriesDelay();
        java.lang.Class<?> wildcardClass5 = recovery3.getClass();
        boolean boolean6 = properties1.containsKey((java.lang.Object) wildcardClass5);
        java.io.InputStream inputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(inputStream7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 86400000L + "'", long4 == 86400000L);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test00038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00038");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties3.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet9 = properties3.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setConsoleFileCount((-1));
        java.lang.String str13 = atomikosProperties10.getOutputDir();
        atomikosProperties10.setLogBaseName("tm.out");
        int int16 = atomikosProperties10.getConsoleFileCount();
        boolean boolean17 = properties3.containsKey((java.lang.Object) atomikosProperties10);
        atomikosProperties10.setMaxActives((int) '#');
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test00039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00039");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str2 = properties0.getProperty("");
        java.util.Properties properties3 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection4 = properties3.values();
        java.util.Properties properties5 = null;
        java.util.Properties properties6 = new java.util.Properties(properties5);
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Properties properties8 = new java.util.Properties(properties7);
        properties8.clear();
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.lang.Object obj13 = properties6.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties6);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties15.setConsoleFileCount((-1));
        java.lang.String str18 = atomikosProperties15.getOutputDir();
        atomikosProperties15.setLogBaseName("tm.out");
        boolean boolean21 = properties6.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.setConsoleFileCount(100);
        atomikosProperties22.setAllowSubTransactions(true);
        java.lang.Object obj27 = properties6.remove((java.lang.Object) atomikosProperties22);
        java.lang.String str28 = atomikosProperties22.getLogBaseDir();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean29 = properties0.containsValue((java.lang.Object) str28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test00040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00040");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.lang.Object obj7 = properties0.setProperty("", "");
        java.util.Properties properties8 = new java.util.Properties(properties0);
        java.io.Writer writer9 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(writer9, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test00041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00041");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties8.getConsoleLogLevel();
        java.lang.Object obj14 = properties1.putIfAbsent((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosLoggingLevel13);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.getConsoleFileName();
        atomikosProperties15.setOutputDir("hi!");
        int int19 = atomikosProperties15.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel20 = atomikosProperties15.getConsoleLogLevel();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery21 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long22 = recovery21.getForgetOrphanedLogEntriesDelay();
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Properties properties24 = new java.util.Properties(properties23);
        properties24.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.getConsoleFileName();
        atomikosProperties27.setOutputDir("hi!");
        int int31 = atomikosProperties27.getConsoleFileLimit();
        java.lang.Object obj32 = properties24.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties27);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel33 = atomikosProperties27.getConsoleLogLevel();
        java.lang.String str34 = atomikosProperties27.getTransactionManagerUniqueName();
        atomikosProperties27.setThreadedTwoPhaseCommit(false);
        boolean boolean37 = properties1.replace((java.lang.Object) atomikosProperties15, (java.lang.Object) recovery21, (java.lang.Object) false);
        java.io.OutputStream outputStream38 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.save(outputStream38, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tm.out" + "'", str16, "tm.out");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel20 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel20.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 86400000L + "'", long22 == 86400000L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tm.out" + "'", str28, "tm.out");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel33 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel33.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test00042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00042");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Set<java.lang.Object> objSet4 = properties1.keySet();
        java.io.OutputStream outputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.save(outputStream5, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objSet4);
    }

    @Test
    public void test00043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00043");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties1.elements();
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection6 = properties5.values();
        java.util.Properties properties7 = new java.util.Properties(properties5);
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties7.elements();
        boolean boolean9 = properties7.isEmpty();
        boolean boolean10 = properties1.containsValue((java.lang.Object) boolean9);
        java.io.Writer writer11 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(writer11, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test00044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00044");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.io.OutputStream outputStream3 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.save(outputStream3, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
    }

    @Test
    public void test00045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00045");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties0.containsValue((java.lang.Object) 10000L);
        java.util.Properties properties5 = null;
        java.util.Properties properties6 = new java.util.Properties(properties5);
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Properties properties8 = new java.util.Properties(properties7);
        properties8.clear();
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        java.lang.Object obj12 = properties0.putIfAbsent((java.lang.Object) (byte) 1, (java.lang.Object) properties8);
        java.io.PrintStream printStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.list(printStream13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test00046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00046");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Class<?> wildcardClass1 = properties0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test00047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00047");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.io.OutputStream outputStream4 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream4, "tmlog", "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test00048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00048");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Properties properties8 = new java.util.Properties();
        java.util.Properties properties9 = new java.util.Properties(properties8);
        properties9.clear();
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        java.lang.Object obj14 = properties9.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        boolean boolean15 = properties5.equals(obj14);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.getConsoleFileName();
        java.lang.String str18 = atomikosProperties16.getTransactionManagerUniqueName();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = properties5.remove((java.lang.Object) str18, (java.lang.Object) "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tm.out" + "'", str17, "tm.out");
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test00049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00049");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties8.getConsoleLogLevel();
        java.lang.Object obj14 = properties1.putIfAbsent((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosLoggingLevel13);
        java.util.Collection<java.lang.Object> objCollection15 = properties1.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery16 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int17 = recovery16.getMaxRetries();
        recovery16.setForgetOrphanedLogEntriesDelay((long) (short) -1);
        long long20 = recovery16.getDelay();
        boolean boolean21 = properties1.contains((java.lang.Object) recovery16);
        java.util.Properties properties22 = null;
        java.util.Properties properties23 = new java.util.Properties(properties22);
        java.util.Properties properties24 = new java.util.Properties();
        java.util.Properties properties25 = new java.util.Properties(properties24);
        properties25.clear();
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties25);
        java.lang.Object obj30 = properties25.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet31 = properties25.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties32.setConsoleFileCount((-1));
        java.lang.String str35 = atomikosProperties32.getOutputDir();
        atomikosProperties32.setLogBaseName("tm.out");
        int int38 = atomikosProperties32.getConsoleFileCount();
        boolean boolean39 = properties25.containsKey((java.lang.Object) atomikosProperties32);
        java.lang.Object obj40 = null;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties41.setConsoleFileCount((-1));
        java.lang.String str44 = atomikosProperties41.getOutputDir();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean45 = properties1.replace((java.lang.Object) atomikosProperties32, obj40, (java.lang.Object) str44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(objCollection15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10000L + "'", long20 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test00050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00050");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        atomikosProperties4.setLogBaseName("tm.out");
        long long12 = atomikosProperties4.getDefaultJtaTimeout();
        long long13 = atomikosProperties4.getDefaultJtaTimeout();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
    }

    @Test
    public void test00051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00051");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.io.OutputStream outputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.storeToXML(outputStream12, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test00052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00052");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.io.PrintWriter printWriter3 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.list(printWriter3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
    }

    @Test
    public void test00053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00053");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.io.OutputStream outputStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(outputStream6, "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00054");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Properties properties25 = new java.util.Properties(properties3);
        java.io.OutputStream outputStream26 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.save(outputStream26, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
    }

    @Test
    public void test00055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00055");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Properties properties8 = new java.util.Properties();
        java.util.Properties properties9 = new java.util.Properties(properties8);
        properties9.clear();
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        java.lang.Object obj14 = properties9.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        boolean boolean15 = properties5.equals(obj14);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet16 = properties5.entrySet();
        java.io.OutputStream outputStream17 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.store(outputStream17, "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objEntrySet16);
    }

    @Test
    public void test00056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00056");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setConsoleFileCount(100);
        atomikosProperties6.setAllowSubTransactions(true);
        boolean boolean11 = atomikosProperties6.isForceShutdownOnVmExit();
        boolean boolean12 = properties5.contains((java.lang.Object) atomikosProperties6);
        java.io.PrintWriter printWriter13 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.list(printWriter13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test00057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00057");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.io.OutputStream outputStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.save(outputStream6, "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00058");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Properties properties7 = new java.util.Properties(properties6);
        properties7.clear();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        boolean boolean10 = properties5.isEmpty();
        java.io.OutputStream outputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.save(outputStream11, "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test00059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00059");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        long long2 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties3 = atomikosProperties0.asProperties();
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        int int6 = properties5.size();
        boolean boolean7 = properties5.isEmpty();
        java.util.Set<java.lang.Object> objSet8 = properties5.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setConsoleFileCount((-1));
        java.lang.String str13 = atomikosProperties10.getOutputDir();
        atomikosProperties10.setLogBaseName("tm.out");
        atomikosProperties10.setLogBaseDir("tm.out");
        int int18 = atomikosProperties10.getMaxActives();
        atomikosProperties10.setDefaultJtaTimeout((long) (short) 100);
        boolean boolean21 = properties3.replace((java.lang.Object) objSet8, (java.lang.Object) (byte) 1, (java.lang.Object) atomikosProperties10);
        java.io.PrintWriter printWriter22 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.list(printWriter22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 300000L + "'", long2 == 300000L);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objSet8);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 50 + "'", int18 == 50);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test00060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00060");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.util.Properties properties28 = new java.util.Properties();
        java.util.Properties properties29 = new java.util.Properties(properties28);
        properties29.clear();
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        java.lang.Object obj32 = properties3.get((java.lang.Object) properties29);
        properties29.clear();
        java.io.PrintWriter printWriter34 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties29.list(printWriter34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertNull(obj32);
    }

    @Test
    public void test00061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00061");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties8.getConsoleLogLevel();
        java.lang.Object obj14 = properties1.putIfAbsent((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosLoggingLevel13);
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.Object obj17 = properties15.get((java.lang.Object) (byte) -1);
        java.util.Properties properties18 = new java.util.Properties(properties15);
        boolean boolean19 = properties1.equals((java.lang.Object) properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties1.keys();
        java.io.PrintWriter printWriter21 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printWriter21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objEnumeration20);
    }

    @Test
    public void test00062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00062");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.lang.String str5 = atomikosProperties0.getService();
        java.lang.String str6 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setOutputDir("tmlog");
        boolean boolean9 = atomikosProperties0.isForceShutdownOnVmExit();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test00063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00063");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        boolean boolean4 = properties2.isEmpty();
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection6 = properties5.values();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        properties10.clear();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.lang.Object obj15 = properties8.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        boolean boolean20 = properties18.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties18.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet22 = properties18.entrySet();
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection24 = properties23.values();
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        java.util.Properties properties27 = new java.util.Properties();
        java.util.Properties properties28 = new java.util.Properties(properties27);
        properties28.clear();
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        java.lang.Object obj33 = properties26.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setConsoleFileCount((-1));
        java.lang.String str38 = atomikosProperties35.getOutputDir();
        atomikosProperties35.setLogBaseName("tm.out");
        boolean boolean41 = properties26.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties42.setConsoleFileCount(100);
        atomikosProperties42.setAllowSubTransactions(true);
        java.lang.Object obj47 = properties26.remove((java.lang.Object) atomikosProperties42);
        java.util.Set<java.lang.Object> objSet48 = properties26.keySet();
        boolean boolean49 = properties2.replace((java.lang.Object) properties8, (java.lang.Object) objEntrySet22, (java.lang.Object) properties26);
        java.io.Reader reader50 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.load(reader50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNotNull(objEntrySet22);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(objSet48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test00064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00064");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Properties properties7 = new java.util.Properties(properties6);
        properties7.clear();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties5.entrySet();
        java.util.Properties properties11 = new java.util.Properties();
        java.util.Properties properties12 = new java.util.Properties(properties11);
        properties12.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.getConsoleFileName();
        atomikosProperties15.setOutputDir("hi!");
        int int19 = atomikosProperties15.getConsoleFileLimit();
        java.lang.Object obj20 = properties12.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties15);
        atomikosProperties15.setOutputDir("hi!");
        java.lang.String str23 = atomikosProperties15.getLogBaseDir();
        java.util.Properties properties24 = null;
        java.util.Properties properties25 = new java.util.Properties(properties24);
        boolean boolean27 = properties25.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties25.keys();
        java.util.Properties properties29 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection30 = properties29.values();
        java.util.Properties properties31 = null;
        java.util.Properties properties32 = new java.util.Properties(properties31);
        java.util.Properties properties33 = new java.util.Properties();
        java.util.Properties properties34 = new java.util.Properties(properties33);
        properties34.clear();
        properties32.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties34);
        java.lang.Object obj39 = properties32.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties29.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties32);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties41.setConsoleFileCount((-1));
        java.lang.String str44 = atomikosProperties41.getOutputDir();
        atomikosProperties41.setLogBaseName("tm.out");
        boolean boolean47 = properties32.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties48.setConsoleFileCount(100);
        atomikosProperties48.setAllowSubTransactions(true);
        java.lang.Object obj53 = properties32.remove((java.lang.Object) atomikosProperties48);
        atomikosProperties48.setAllowSubTransactions(false);
        atomikosProperties48.setSerialJtaTransactions(true);
        boolean boolean58 = properties25.containsKey((java.lang.Object) atomikosProperties48);
        java.util.Enumeration<java.lang.Object> objEnumeration59 = properties25.keys();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean60 = properties5.remove((java.lang.Object) str23, (java.lang.Object) properties25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(objEntrySet10);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tm.out" + "'", str16, "tm.out");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertNotNull(objCollection30);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objEnumeration59);
    }

    @Test
    public void test00065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00065");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        java.io.OutputStream outputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream10, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test00066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00066");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.util.Properties properties28 = new java.util.Properties();
        java.util.Properties properties29 = new java.util.Properties(properties28);
        properties29.clear();
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        java.lang.Object obj32 = properties3.get((java.lang.Object) properties29);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.setConsoleFileCount((-1));
        atomikosProperties33.setAllowSubTransactions(false);
        boolean boolean38 = properties3.contains((java.lang.Object) false);
        java.io.OutputStream outputStream39 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.storeToXML(outputStream39, "", "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test00067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00067");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        java.util.Properties properties26 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.getTransactionManagerUniqueName();
        boolean boolean29 = atomikosProperties27.isForceShutdownOnVmExit();
        java.util.Properties properties30 = atomikosProperties27.asProperties();
        boolean boolean31 = properties26.contains((java.lang.Object) atomikosProperties27);
        java.lang.String str34 = properties26.getProperty("hi!", "");
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
    }

    @Test
    public void test00068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00068");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.lang.Object obj7 = properties0.setProperty("", "");
        java.lang.Object obj10 = properties0.setProperty("", "tm.out");
        java.io.OutputStream outputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream11, "", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + "" + "'", obj10, "");
    }

    @Test
    public void test00069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00069");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        java.io.OutputStream outputStream3 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream3, "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test00070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00070");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        java.util.Collection<java.lang.Object> objCollection4 = properties1.values();
        java.lang.String str6 = properties1.getProperty("hi!");
        java.util.Set<java.lang.String> strSet7 = properties1.stringPropertyNames();
        java.io.OutputStream outputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream8, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strSet7);
    }

    @Test
    public void test00071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00071");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.get((java.lang.Object) (byte) -1);
        java.util.Properties properties3 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        java.lang.String str6 = atomikosProperties4.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel7 = atomikosProperties4.getConsoleLogLevel();
        boolean boolean8 = properties0.equals((java.lang.Object) atomikosProperties4);
        java.lang.String str9 = properties0.toString();
        java.io.OutputStream outputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(outputStream10, "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel7 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel7.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
    }

    @Test
    public void test00072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00072");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Collection<java.lang.Object> objCollection6 = properties3.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str8 = atomikosProperties7.getConsoleFileName();
        atomikosProperties7.setOutputDir("hi!");
        int int11 = atomikosProperties7.getConsoleFileLimit();
        java.util.Properties properties12 = atomikosProperties7.asProperties();
        boolean boolean13 = properties3.containsValue((java.lang.Object) atomikosProperties7);
        java.util.Enumeration<java.lang.Object> objEnumeration14 = properties3.elements();
        java.util.Properties properties15 = new java.util.Properties();
        java.util.Properties properties16 = new java.util.Properties(properties15);
        int int17 = properties16.size();
        java.util.Set<java.lang.String> strSet18 = properties16.stringPropertyNames();
        java.util.Properties properties19 = null;
        java.util.Properties properties20 = new java.util.Properties(properties19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj21 = properties3.replace((java.lang.Object) properties16, (java.lang.Object) properties19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tm.out" + "'", str8, "tm.out");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objEnumeration14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(strSet18);
    }

    @Test
    public void test00073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00073");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        atomikosProperties4.setLogBaseName("tm.out");
        long long12 = atomikosProperties4.getDefaultJtaTimeout();
        boolean boolean13 = atomikosProperties4.isSerialJtaTransactions();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test00074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00074");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.util.Properties properties28 = new java.util.Properties();
        java.util.Properties properties29 = new java.util.Properties(properties28);
        properties29.clear();
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        java.lang.Object obj32 = properties3.get((java.lang.Object) properties29);
        properties29.clear();
        java.util.Properties properties34 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection35 = properties34.values();
        java.util.Properties properties36 = null;
        java.util.Properties properties37 = new java.util.Properties(properties36);
        java.util.Properties properties38 = new java.util.Properties();
        java.util.Properties properties39 = new java.util.Properties(properties38);
        properties39.clear();
        properties37.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties39);
        java.lang.Object obj44 = properties37.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties34.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties37);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties46.setConsoleFileCount((-1));
        java.lang.String str49 = atomikosProperties46.getOutputDir();
        atomikosProperties46.setLogBaseName("tm.out");
        boolean boolean52 = properties37.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties53.setConsoleFileCount(100);
        atomikosProperties53.setAllowSubTransactions(true);
        java.lang.Object obj58 = properties37.remove((java.lang.Object) atomikosProperties53);
        java.lang.String str59 = atomikosProperties53.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties60.setConsoleFileCount(100);
        atomikosProperties60.setAllowSubTransactions(true);
        boolean boolean65 = atomikosProperties60.isForceShutdownOnVmExit();
        int int66 = atomikosProperties60.getConsoleFileCount();
        java.util.Properties properties67 = atomikosProperties60.asProperties();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj68 = properties29.replace((java.lang.Object) str59, (java.lang.Object) properties67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(objCollection35);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 100 + "'", int66 == 100);
        org.junit.Assert.assertNotNull(properties67);
    }

    @Test
    public void test00075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00075");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        boolean boolean5 = properties3.containsValue((java.lang.Object) 10.0d);
        java.lang.Object obj7 = properties1.getOrDefault((java.lang.Object) boolean5, (java.lang.Object) (-1L));
        java.io.InputStream inputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(inputStream8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + (-1L) + "'", obj7, (-1L));
    }

    @Test
    public void test00076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00076");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.keys();
        java.lang.Object obj4 = null;
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Properties properties6 = new java.util.Properties(properties5);
        int int7 = properties6.size();
        boolean boolean8 = properties6.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration9 = properties6.elements();
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection11 = properties10.values();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties12.elements();
        boolean boolean14 = properties12.isEmpty();
        boolean boolean15 = properties6.containsValue((java.lang.Object) boolean14);
        java.util.Properties properties16 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection17 = properties16.values();
        java.util.Properties properties18 = new java.util.Properties(properties16);
        java.util.Enumeration<java.lang.Object> objEnumeration19 = properties18.keys();
        boolean boolean20 = properties6.containsKey((java.lang.Object) objEnumeration19);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean21 = properties2.remove(obj4, (java.lang.Object) boolean20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objEnumeration9);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertNotNull(objEnumeration19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test00077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00077");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        java.lang.Object obj4 = properties1.get((java.lang.Object) 10L);
        java.io.Reader reader5 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(reader5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test00078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00078");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        boolean boolean10 = atomikosProperties4.isForceShutdownOnVmExit();
        atomikosProperties4.setConsoleFileName("");
        java.lang.String str13 = atomikosProperties4.getService();
        java.util.Properties properties14 = atomikosProperties4.asProperties();
        java.lang.Class<?> wildcardClass15 = atomikosProperties4.getClass();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test00079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00079");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties0.containsValue((java.lang.Object) 10000L);
        java.util.Properties properties5 = null;
        java.util.Properties properties6 = new java.util.Properties(properties5);
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Properties properties8 = new java.util.Properties(properties7);
        properties8.clear();
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        java.lang.Object obj12 = properties0.putIfAbsent((java.lang.Object) (byte) 1, (java.lang.Object) properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.setConsoleFileCount(100);
        int int16 = atomikosProperties13.getConsoleFileCount();
        atomikosProperties13.setOutputDir("");
        java.lang.String str19 = atomikosProperties13.getConsoleFileName();
        boolean boolean20 = properties8.equals((java.lang.Object) str19);
        java.io.OutputStream outputStream21 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.storeToXML(outputStream21, "tm.out", "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tm.out" + "'", str19, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test00080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00080");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties0.keys();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Properties properties7 = new java.util.Properties(properties6);
        properties7.clear();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.lang.Object obj12 = properties5.setProperty("", "hi!");
        java.lang.Object obj13 = properties0.remove((java.lang.Object) "");
        java.io.Writer writer14 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(writer14, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test00081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00081");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties1.setProperty("", "hi!");
        java.util.Properties properties9 = new java.util.Properties(properties1);
        java.io.OutputStream outputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.save(outputStream10, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test00082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00082");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10.0d);
        java.io.InputStream inputStream4 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(inputStream4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test00083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00083");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        java.util.Set<java.lang.String> strSet3 = properties1.stringPropertyNames();
        java.io.PrintWriter printWriter4 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printWriter4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(strSet3);
    }

    @Test
    public void test00084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00084");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Collection<java.lang.Object> objCollection6 = properties3.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str8 = atomikosProperties7.getConsoleFileName();
        atomikosProperties7.setOutputDir("hi!");
        int int11 = atomikosProperties7.getConsoleFileLimit();
        java.util.Properties properties12 = atomikosProperties7.asProperties();
        boolean boolean13 = properties3.containsValue((java.lang.Object) atomikosProperties7);
        boolean boolean14 = properties3.isEmpty();
        java.io.InputStream inputStream15 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.load(inputStream15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tm.out" + "'", str8, "tm.out");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test00085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00085");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel3 = atomikosProperties0.getConsoleLogLevel();
        java.lang.String str4 = atomikosProperties0.getOutputDir();
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel3 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel3.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test00086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00086");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Properties properties7 = new java.util.Properties(properties6);
        properties7.clear();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.util.Enumeration<?> wildcardEnumeration10 = properties7.propertyNames();
        java.lang.Object obj11 = properties7.clone();
        java.lang.String str14 = properties7.getProperty("{}", "tmlog");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(wildcardEnumeration10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "{}");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tmlog" + "'", str14, "tmlog");
    }

    @Test
    public void test00087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00087");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        atomikosProperties1.setOutputDir("hi!");
        int int5 = atomikosProperties1.getConsoleFileLimit();
        java.util.Properties properties6 = atomikosProperties1.asProperties();
        java.lang.String str7 = atomikosProperties1.getService();
        atomikosProperties1.setService("hi!");
        java.lang.Object obj11 = properties0.putIfAbsent((java.lang.Object) "hi!", (java.lang.Object) 10L);
        java.io.OutputStream outputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream12, "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test00088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00088");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet4 = properties2.entrySet();
        java.io.Writer writer5 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.store(writer5, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNotNull(objEntrySet4);
    }

    @Test
    public void test00089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00089");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getTransactionManagerUniqueName();
        boolean boolean2 = atomikosProperties0.isForceShutdownOnVmExit();
        java.util.Properties properties3 = atomikosProperties0.asProperties();
        java.lang.String str6 = properties3.getProperty("{}", "");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test00090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00090");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        java.util.Collection<java.lang.Object> objCollection4 = properties1.values();
        java.lang.String str6 = properties1.getProperty("hi!");
        java.util.Set<java.lang.String> strSet7 = properties1.stringPropertyNames();
        java.io.InputStream inputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.loadFromXML(inputStream8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strSet7);
    }

    @Test
    public void test00091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00091");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        java.io.PrintStream printStream4 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printStream4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test00092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00092");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        java.util.Set<java.lang.String> strSet3 = properties1.stringPropertyNames();
        java.io.OutputStream outputStream4 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream4, "tm.out", "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(strSet3);
    }

    @Test
    public void test00093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00093");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Properties properties4 = new java.util.Properties(properties1);
        java.io.PrintStream printStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printStream5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test00094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00094");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Properties properties8 = new java.util.Properties();
        java.util.Properties properties9 = new java.util.Properties(properties8);
        properties9.clear();
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        java.lang.Object obj14 = properties9.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        boolean boolean15 = properties5.equals(obj14);
        java.lang.Object obj16 = null;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.getConsoleFileName();
        atomikosProperties17.setOutputDir("hi!");
        int int21 = atomikosProperties17.getConsoleFileLimit();
        java.util.Properties properties22 = atomikosProperties17.asProperties();
        java.lang.String str23 = atomikosProperties17.getService();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj24 = properties5.getOrDefault(obj16, (java.lang.Object) atomikosProperties17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tm.out" + "'", str18, "tm.out");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test00095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00095");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.lang.String str7 = properties5.getProperty("{}");
        java.io.InputStream inputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.load(inputStream8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test00096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00096");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.setMaxTimeout((long) '4');
        java.lang.String str7 = atomikosProperties0.getLogBaseDir();
        boolean boolean8 = atomikosProperties0.isAllowSubTransactions();
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test00097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00097");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties12 = null;
        java.util.Properties properties13 = new java.util.Properties(properties12);
        boolean boolean15 = properties13.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.getTransactionManagerUniqueName();
        atomikosProperties16.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str21 = atomikosProperties20.getConsoleFileName();
        atomikosProperties20.setOutputDir("hi!");
        int int24 = atomikosProperties20.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel25 = atomikosProperties20.getConsoleLogLevel();
        java.lang.Object obj26 = properties13.putIfAbsent((java.lang.Object) atomikosProperties16, (java.lang.Object) atomikosLoggingLevel25);
        java.lang.Object obj27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj28 = properties0.putIfAbsent(obj26, obj27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tm.out" + "'", str21, "tm.out");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel25 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel25.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj26);
    }

    @Test
    public void test00098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00098");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Set<java.lang.Object> objSet4 = properties1.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.getConsoleFileName();
        atomikosProperties5.setOutputDir("hi!");
        int int9 = atomikosProperties5.getConsoleFileLimit();
        java.util.Properties properties10 = atomikosProperties5.asProperties();
        java.lang.String str11 = atomikosProperties5.getService();
        int int12 = atomikosProperties5.getMaxActives();
        boolean boolean13 = properties1.equals((java.lang.Object) atomikosProperties5);
        java.io.OutputStream outputStream14 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream14, "hi!", "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objSet4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tm.out" + "'", str6, "tm.out");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test00099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00099");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        atomikosProperties0.setCheckpointInterval((long) (short) 10);
        atomikosProperties0.setOutputDir("");
        atomikosProperties0.setForceShutdownOnVmExit(false);
        atomikosProperties0.setDefaultJtaTimeout((long) 'a');
    }

    @Test
    public void test00100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00100");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties3.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet9 = properties3.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str11 = atomikosProperties10.getConsoleFileName();
        java.lang.String str12 = atomikosProperties10.getTransactionManagerUniqueName();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj13 = properties3.get((java.lang.Object) str12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tm.out" + "'", str11, "tm.out");
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test00101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00101");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        atomikosProperties1.setThreadedTwoPhaseCommit(false);
        atomikosProperties1.setConsoleFileLimit((int) ' ');
        atomikosProperties1.setLogBaseName("");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test00102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00102");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setConsoleFileCount((-1));
        atomikosProperties6.setTransactionManagerUniqueName("tm.out");
        java.lang.Object obj11 = properties0.remove((java.lang.Object) atomikosProperties6);
        boolean boolean12 = atomikosProperties6.isForceShutdownOnVmExit();
        java.util.Properties properties13 = atomikosProperties6.asProperties();
        java.lang.String str14 = properties13.toString();
        java.io.OutputStream outputStream15 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties13.storeToXML(outputStream15, "tmlog", "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(properties13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str14, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
    }

    @Test
    public void test00103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00103");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Properties properties4 = new java.util.Properties(properties1);
        java.util.Properties properties5 = new java.util.Properties(properties1);
        java.io.Writer writer6 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(writer6, "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test00104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00104");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties1.keys();
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection6 = properties5.values();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        properties10.clear();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.lang.Object obj15 = properties8.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setConsoleFileCount((-1));
        java.lang.String str20 = atomikosProperties17.getOutputDir();
        atomikosProperties17.setLogBaseName("tm.out");
        boolean boolean23 = properties8.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.setConsoleFileCount(100);
        atomikosProperties24.setAllowSubTransactions(true);
        java.lang.Object obj29 = properties8.remove((java.lang.Object) atomikosProperties24);
        atomikosProperties24.setAllowSubTransactions(false);
        atomikosProperties24.setSerialJtaTransactions(true);
        boolean boolean34 = properties1.containsKey((java.lang.Object) atomikosProperties24);
        java.util.Properties properties35 = new java.util.Properties(properties1);
        java.util.Properties properties36 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection37 = properties36.values();
        java.util.Properties properties38 = new java.util.Properties(properties36);
        java.lang.Object obj39 = null;
        boolean boolean40 = properties36.equals(obj39);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean41 = properties35.contains(obj39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objCollection37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test00105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00105");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setConsoleFileCount((-1));
        atomikosProperties6.setTransactionManagerUniqueName("tm.out");
        java.lang.Object obj11 = properties0.remove((java.lang.Object) atomikosProperties6);
        boolean boolean12 = atomikosProperties6.isForceShutdownOnVmExit();
        long long13 = atomikosProperties6.getCheckpointInterval();
        boolean boolean14 = atomikosProperties6.isAllowSubTransactions();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test00106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00106");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.lang.Object obj4 = properties0.setProperty("hi!", "");
        java.util.Properties properties5 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.getConsoleFileName();
        java.lang.Object obj9 = properties5.put((java.lang.Object) atomikosProperties6, (java.lang.Object) 0L);
        java.lang.Object obj12 = properties5.setProperty("", "");
        java.util.Properties properties13 = new java.util.Properties(properties5);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties13);
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        java.util.Properties properties17 = new java.util.Properties();
        java.util.Properties properties18 = new java.util.Properties(properties17);
        properties18.clear();
        properties16.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties18);
        java.util.Properties properties21 = new java.util.Properties();
        java.util.Properties properties22 = new java.util.Properties(properties21);
        int int23 = properties22.size();
        boolean boolean24 = properties22.isEmpty();
        java.util.Set<java.lang.Object> objSet25 = properties22.keySet();
        java.lang.Object obj26 = properties0.replace((java.lang.Object) properties18, (java.lang.Object) objSet25);
        java.io.OutputStream outputStream27 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream27, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tm.out" + "'", str7, "tm.out");
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertNull(obj26);
    }

    @Test
    public void test00107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00107");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Properties properties4 = new java.util.Properties(properties1);
        java.util.Properties properties5 = new java.util.Properties(properties1);
        java.io.PrintStream printStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printStream6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test00108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00108");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Properties properties25 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str27 = atomikosProperties26.getConsoleFileName();
        atomikosProperties26.setOutputDir("hi!");
        int int30 = atomikosProperties26.getConsoleFileLimit();
        java.lang.String str31 = atomikosProperties26.getService();
        java.lang.String str32 = atomikosProperties26.getOutputDir();
        atomikosProperties26.setOutputDir("tmlog");
        long long35 = atomikosProperties26.getMaxTimeout();
        boolean boolean36 = properties25.contains((java.lang.Object) atomikosProperties26);
        java.io.OutputStream outputStream37 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties25.store(outputStream37, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tm.out" + "'", str27, "tm.out");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 300000L + "'", long35 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test00109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00109");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str4 = atomikosProperties3.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel7 = atomikosProperties5.getConsoleLogLevel();
        atomikosProperties3.setConsoleLogLevel(atomikosLoggingLevel7);
        atomikosProperties3.setSerialJtaTransactions(false);
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties3);
        java.lang.String str14 = properties2.getProperty("", "tm.out");
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tm.out" + "'", str6, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel7 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel7.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tm.out" + "'", str14, "tm.out");
    }

    @Test
    public void test00110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00110");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setConsoleFileCount((-1));
        atomikosProperties6.setTransactionManagerUniqueName("tm.out");
        java.lang.Object obj11 = properties0.remove((java.lang.Object) atomikosProperties6);
        boolean boolean12 = atomikosProperties6.isForceShutdownOnVmExit();
        java.util.Properties properties13 = atomikosProperties6.asProperties();
        java.lang.String str14 = properties13.toString();
        java.io.Writer writer15 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties13.store(writer15, "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(properties13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str14, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
    }

    @Test
    public void test00111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00111");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        java.lang.String str3 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseName("tm.out");
        atomikosProperties0.setLogBaseDir("tm.out");
        java.lang.String str8 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setDefaultJtaTimeout(10L);
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        atomikosProperties0.setConsoleFileName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tm.out" + "'", str8, "tm.out");
        org.junit.Assert.assertNotNull(properties11);
    }

    @Test
    public void test00112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00112");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setConsoleFileCount(100);
        atomikosProperties6.setAllowSubTransactions(true);
        boolean boolean11 = atomikosProperties6.isForceShutdownOnVmExit();
        boolean boolean12 = properties5.contains((java.lang.Object) atomikosProperties6);
        java.io.PrintStream printStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.list(printStream13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test00113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00113");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        boolean boolean10 = atomikosProperties4.isForceShutdownOnVmExit();
        atomikosProperties4.setConsoleFileName("");
        java.lang.String str13 = atomikosProperties4.getService();
        java.util.Properties properties14 = atomikosProperties4.asProperties();
        java.lang.Object obj15 = null;
        boolean boolean16 = properties14.equals(obj15);
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        boolean boolean20 = properties18.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.getTransactionManagerUniqueName();
        atomikosProperties21.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str26 = atomikosProperties25.getConsoleFileName();
        atomikosProperties25.setOutputDir("hi!");
        int int29 = atomikosProperties25.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel30 = atomikosProperties25.getConsoleLogLevel();
        java.lang.Object obj31 = properties18.putIfAbsent((java.lang.Object) atomikosProperties21, (java.lang.Object) atomikosLoggingLevel30);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery32 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery32.setRetryInterval((long) (byte) 10);
        int int35 = recovery32.getMaxRetries();
        recovery32.setDelay(10L);
        recovery32.setRetryInterval((long) (short) 10);
        java.lang.Object obj40 = properties14.replace((java.lang.Object) atomikosLoggingLevel30, (java.lang.Object) recovery32);
        java.io.PrintStream printStream41 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties14.list(printStream41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "tm.out" + "'", str26, "tm.out");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel30 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel30.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertNull(obj40);
    }

    @Test
    public void test00114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00114");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties3.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet9 = properties3.stringPropertyNames();
        java.lang.Object obj10 = new java.lang.Object();
        java.lang.Object obj11 = properties3.get(obj10);
        java.io.PrintStream printStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.list(printStream12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test00115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00115");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.lang.Object obj7 = properties0.setProperty("", "");
        java.util.Properties properties8 = new java.util.Properties(properties0);
        java.lang.Object obj9 = properties8.clone();
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean13 = properties11.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str15 = atomikosProperties14.getTransactionManagerUniqueName();
        atomikosProperties14.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str19 = atomikosProperties18.getConsoleFileName();
        atomikosProperties18.setOutputDir("hi!");
        int int22 = atomikosProperties18.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel23 = atomikosProperties18.getConsoleLogLevel();
        java.lang.Object obj24 = properties11.putIfAbsent((java.lang.Object) atomikosProperties14, (java.lang.Object) atomikosLoggingLevel23);
        boolean boolean25 = properties8.contains((java.lang.Object) atomikosProperties14);
        java.io.PrintWriter printWriter26 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.list(printWriter26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "{}");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tm.out" + "'", str19, "tm.out");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel23 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel23.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test00116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00116");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.io.OutputStream outputStream2 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(outputStream2, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
    }

    @Test
    public void test00117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00117");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        boolean boolean4 = properties2.isEmpty();
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection6 = properties5.values();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        properties10.clear();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.lang.Object obj15 = properties8.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        boolean boolean20 = properties18.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties18.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet22 = properties18.entrySet();
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection24 = properties23.values();
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        java.util.Properties properties27 = new java.util.Properties();
        java.util.Properties properties28 = new java.util.Properties(properties27);
        properties28.clear();
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        java.lang.Object obj33 = properties26.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setConsoleFileCount((-1));
        java.lang.String str38 = atomikosProperties35.getOutputDir();
        atomikosProperties35.setLogBaseName("tm.out");
        boolean boolean41 = properties26.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties42.setConsoleFileCount(100);
        atomikosProperties42.setAllowSubTransactions(true);
        java.lang.Object obj47 = properties26.remove((java.lang.Object) atomikosProperties42);
        java.util.Set<java.lang.Object> objSet48 = properties26.keySet();
        boolean boolean49 = properties2.replace((java.lang.Object) properties8, (java.lang.Object) objEntrySet22, (java.lang.Object) properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery50 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long51 = recovery50.getForgetOrphanedLogEntriesDelay();
        recovery50.setDelay((long) (short) 1);
        recovery50.setDelay((long) (-1));
        java.util.Properties properties56 = null;
        java.util.Properties properties57 = new java.util.Properties(properties56);
        boolean boolean59 = properties57.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str61 = atomikosProperties60.getTransactionManagerUniqueName();
        atomikosProperties60.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str65 = atomikosProperties64.getConsoleFileName();
        atomikosProperties64.setOutputDir("hi!");
        int int68 = atomikosProperties64.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel69 = atomikosProperties64.getConsoleLogLevel();
        java.lang.Object obj70 = properties57.putIfAbsent((java.lang.Object) atomikosProperties60, (java.lang.Object) atomikosLoggingLevel69);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str72 = atomikosProperties71.getConsoleFileName();
        atomikosProperties71.setOutputDir("hi!");
        int int75 = atomikosProperties71.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel76 = atomikosProperties71.getConsoleLogLevel();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery77 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long78 = recovery77.getForgetOrphanedLogEntriesDelay();
        java.util.Properties properties79 = new java.util.Properties();
        java.util.Properties properties80 = new java.util.Properties(properties79);
        properties80.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties83 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str84 = atomikosProperties83.getConsoleFileName();
        atomikosProperties83.setOutputDir("hi!");
        int int87 = atomikosProperties83.getConsoleFileLimit();
        java.lang.Object obj88 = properties80.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties83);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel89 = atomikosProperties83.getConsoleLogLevel();
        java.lang.String str90 = atomikosProperties83.getTransactionManagerUniqueName();
        atomikosProperties83.setThreadedTwoPhaseCommit(false);
        boolean boolean93 = properties57.replace((java.lang.Object) atomikosProperties71, (java.lang.Object) recovery77, (java.lang.Object) false);
        java.lang.Object obj94 = properties2.put((java.lang.Object) (-1), (java.lang.Object) false);
        java.lang.Object obj97 = properties2.setProperty("tm.out", "tmlog");
        int int98 = properties2.size();
        java.util.Properties properties99 = new java.util.Properties(properties2);
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNotNull(objEntrySet22);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(objSet48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 86400000L + "'", long51 == 86400000L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "tm.out" + "'", str65, "tm.out");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel69 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel69.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "tm.out" + "'", str72, "tm.out");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel76 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel76.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 86400000L + "'", long78 == 86400000L);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "tm.out" + "'", str84, "tm.out");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel89 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel89.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(obj94);
        org.junit.Assert.assertNull(obj97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 2 + "'", int98 == 2);
    }

    @Test
    public void test00118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00118");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        atomikosProperties1.setOutputDir("hi!");
        int int5 = atomikosProperties1.getConsoleFileLimit();
        java.util.Properties properties6 = atomikosProperties1.asProperties();
        java.lang.String str7 = atomikosProperties1.getService();
        atomikosProperties1.setService("hi!");
        java.lang.Object obj11 = properties0.putIfAbsent((java.lang.Object) "hi!", (java.lang.Object) 10L);
        java.io.OutputStream outputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(outputStream12, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test00119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00119");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        atomikosProperties0.setCheckpointInterval((long) (short) 10);
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.io.Writer writer6 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.store(writer6, "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties5);
    }

    @Test
    public void test00120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00120");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery6 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long7 = recovery6.getForgetOrphanedLogEntriesDelay();
        recovery6.setDelay((long) (short) 1);
        recovery6.setDelay((long) (-1));
        java.lang.Object obj12 = properties3.remove((java.lang.Object) (-1));
        java.util.Map<java.lang.Object, java.lang.Object> objMap13 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.putAll(objMap13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 86400000L + "'", long7 == 86400000L);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test00121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00121");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.lang.Object obj7 = properties0.setProperty("", "");
        java.lang.Object obj10 = properties0.setProperty("", "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.getTransactionManagerUniqueName();
        atomikosProperties11.setAllowSubTransactions(false);
        boolean boolean15 = properties0.containsKey((java.lang.Object) atomikosProperties11);
        java.io.Writer writer16 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(writer16, "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + "" + "'", obj10, "");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test00122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00122");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        long long2 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties3 = atomikosProperties0.asProperties();
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        int int6 = properties5.size();
        boolean boolean7 = properties5.isEmpty();
        java.util.Set<java.lang.Object> objSet8 = properties5.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setConsoleFileCount((-1));
        java.lang.String str13 = atomikosProperties10.getOutputDir();
        atomikosProperties10.setLogBaseName("tm.out");
        atomikosProperties10.setLogBaseDir("tm.out");
        int int18 = atomikosProperties10.getMaxActives();
        atomikosProperties10.setDefaultJtaTimeout((long) (short) 100);
        boolean boolean21 = properties3.replace((java.lang.Object) objSet8, (java.lang.Object) (byte) 1, (java.lang.Object) atomikosProperties10);
        java.io.InputStream inputStream22 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.loadFromXML(inputStream22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 300000L + "'", long2 == 300000L);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objSet8);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 50 + "'", int18 == 50);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test00123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00123");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Properties properties25 = new java.util.Properties(properties3);
        java.io.OutputStream outputStream26 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.storeToXML(outputStream26, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
    }

    @Test
    public void test00124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00124");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        boolean boolean10 = atomikosProperties4.isForceShutdownOnVmExit();
        atomikosProperties4.setOutputDir("tm.out");
        atomikosProperties4.setOutputDir("tmlog");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test00125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00125");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties1.setProperty("", "hi!");
        java.util.Properties properties9 = new java.util.Properties(properties1);
        boolean boolean10 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.getConsoleFileName();
        atomikosProperties11.setOutputDir("hi!");
        int int15 = atomikosProperties11.getConsoleFileLimit();
        java.lang.String str16 = atomikosProperties11.getService();
        java.lang.String str17 = atomikosProperties11.getOutputDir();
        boolean boolean18 = properties1.contains((java.lang.Object) str17);
        java.io.OutputStream outputStream19 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(outputStream19, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tm.out" + "'", str12, "tm.out");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test00126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00126");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        boolean boolean4 = properties2.isEmpty();
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection6 = properties5.values();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        properties10.clear();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.lang.Object obj15 = properties8.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        boolean boolean20 = properties18.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties18.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet22 = properties18.entrySet();
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection24 = properties23.values();
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        java.util.Properties properties27 = new java.util.Properties();
        java.util.Properties properties28 = new java.util.Properties(properties27);
        properties28.clear();
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        java.lang.Object obj33 = properties26.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setConsoleFileCount((-1));
        java.lang.String str38 = atomikosProperties35.getOutputDir();
        atomikosProperties35.setLogBaseName("tm.out");
        boolean boolean41 = properties26.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties42.setConsoleFileCount(100);
        atomikosProperties42.setAllowSubTransactions(true);
        java.lang.Object obj47 = properties26.remove((java.lang.Object) atomikosProperties42);
        java.util.Set<java.lang.Object> objSet48 = properties26.keySet();
        boolean boolean49 = properties2.replace((java.lang.Object) properties8, (java.lang.Object) objEntrySet22, (java.lang.Object) properties26);
        java.lang.String str51 = properties8.getProperty("{}");
        java.util.Properties properties52 = new java.util.Properties(properties8);
        java.lang.Class<?> wildcardClass53 = properties52.getClass();
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNotNull(objEntrySet22);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(objSet48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test00127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00127");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties1.setProperty("", "hi!");
        java.util.Set<java.lang.Object> objSet9 = properties1.keySet();
        boolean boolean10 = properties1.isEmpty();
        java.util.Properties properties11 = new java.util.Properties(properties1);
        java.io.OutputStream outputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream12, "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test00128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00128");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Collection<java.lang.Object> objCollection6 = properties3.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str8 = atomikosProperties7.getConsoleFileName();
        atomikosProperties7.setOutputDir("hi!");
        int int11 = atomikosProperties7.getConsoleFileLimit();
        java.util.Properties properties12 = atomikosProperties7.asProperties();
        boolean boolean13 = properties3.containsValue((java.lang.Object) atomikosProperties7);
        java.util.Enumeration<java.lang.Object> objEnumeration14 = properties3.elements();
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties3.elements();
        java.io.OutputStream outputStream16 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.storeToXML(outputStream16, "tmlog", "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tm.out" + "'", str8, "tm.out");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objEnumeration14);
        org.junit.Assert.assertNotNull(objEnumeration15);
    }

    @Test
    public void test00129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00129");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties1.keys();
        java.io.OutputStream outputStream4 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.save(outputStream4, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(objEnumeration3);
    }

    @Test
    public void test00130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00130");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.lang.String str25 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setMaxTimeout(86400000L);
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test00131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00131");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties0.keys();
        java.util.Properties properties4 = new java.util.Properties(properties0);
        java.io.OutputStream outputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties4.save(outputStream5, "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objEnumeration3);
    }

    @Test
    public void test00132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00132");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        boolean boolean5 = properties1.contains((java.lang.Object) "tmlog");
        java.io.PrintWriter printWriter6 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printWriter6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test00133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00133");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Collection<java.lang.Object> objCollection6 = properties3.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str8 = atomikosProperties7.getConsoleFileName();
        atomikosProperties7.setOutputDir("hi!");
        int int11 = atomikosProperties7.getConsoleFileLimit();
        java.util.Properties properties12 = atomikosProperties7.asProperties();
        boolean boolean13 = properties3.containsValue((java.lang.Object) atomikosProperties7);
        boolean boolean14 = properties3.isEmpty();
        java.io.OutputStream outputStream15 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.store(outputStream15, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tm.out" + "'", str8, "tm.out");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test00134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00134");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties1.entrySet();
        java.util.Properties properties11 = new java.util.Properties(properties1);
        java.lang.Object obj12 = properties11.clone();
        java.lang.String str15 = properties11.getProperty("hi!", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(objEntrySet10);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "{}");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str15, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
    }

    @Test
    public void test00135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00135");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        int int26 = properties3.size();
        java.util.Properties properties27 = new java.util.Properties(properties3);
        java.io.Writer writer28 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties27.store(writer28, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test00136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00136");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        int int26 = properties3.size();
        java.util.Properties properties27 = new java.util.Properties(properties3);
        java.util.Properties properties28 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection29 = properties28.values();
        java.util.Properties properties30 = new java.util.Properties(properties28);
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties28.keys();
        java.util.Properties properties32 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection33 = properties32.values();
        java.util.Properties properties34 = null;
        java.util.Properties properties35 = new java.util.Properties(properties34);
        java.util.Properties properties36 = new java.util.Properties();
        java.util.Properties properties37 = new java.util.Properties(properties36);
        properties37.clear();
        properties35.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties37);
        java.lang.Object obj42 = properties35.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties32.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties35);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setConsoleFileCount((-1));
        java.lang.String str47 = atomikosProperties44.getOutputDir();
        atomikosProperties44.setLogBaseName("tm.out");
        boolean boolean50 = properties35.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties51.setConsoleFileCount(100);
        atomikosProperties51.setAllowSubTransactions(true);
        java.lang.Object obj56 = properties35.remove((java.lang.Object) atomikosProperties51);
        java.util.Set<java.lang.Object> objSet57 = properties35.keySet();
        java.util.Properties properties58 = new java.util.Properties(properties35);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str60 = atomikosProperties59.getTransactionManagerUniqueName();
        boolean boolean61 = atomikosProperties59.isForceShutdownOnVmExit();
        java.util.Properties properties62 = atomikosProperties59.asProperties();
        boolean boolean63 = properties58.contains((java.lang.Object) atomikosProperties59);
        boolean boolean64 = atomikosProperties59.isForceShutdownOnVmExit();
        java.lang.Object obj65 = properties3.putIfAbsent((java.lang.Object) objEnumeration31, (java.lang.Object) boolean64);
        java.io.OutputStream outputStream66 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.storeToXML(outputStream66, "tm.out", "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(objCollection29);
        org.junit.Assert.assertNotNull(objEnumeration31);
        org.junit.Assert.assertNotNull(objCollection33);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(objSet57);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(properties62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(obj65);
    }

    @Test
    public void test00137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00137");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        java.lang.String str2 = atomikosProperties0.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str4 = atomikosProperties3.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = atomikosProperties3.getConsoleLogLevel();
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        atomikosProperties0.setSerialJtaTransactions(false);
        java.lang.Class<?> wildcardClass10 = atomikosProperties0.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tm.out" + "'", str4, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel5 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel5.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test00138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00138");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties8.getConsoleLogLevel();
        java.lang.Object obj14 = properties1.putIfAbsent((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosLoggingLevel13);
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.Object obj17 = properties15.get((java.lang.Object) (byte) -1);
        java.util.Properties properties18 = new java.util.Properties(properties15);
        boolean boolean19 = properties1.equals((java.lang.Object) properties15);
        java.util.Properties properties20 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.getConsoleFileName();
        java.lang.Object obj24 = properties20.put((java.lang.Object) atomikosProperties21, (java.lang.Object) 0L);
        java.util.Properties properties25 = new java.util.Properties(properties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setConsoleFileCount((-1));
        atomikosProperties26.setTransactionManagerUniqueName("tm.out");
        java.lang.Object obj31 = properties20.remove((java.lang.Object) atomikosProperties26);
        boolean boolean32 = atomikosProperties26.isForceShutdownOnVmExit();
        java.util.Properties properties33 = atomikosProperties26.asProperties();
        java.util.Properties properties34 = null;
        java.util.Properties properties35 = new java.util.Properties(properties34);
        boolean boolean37 = properties35.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str39 = atomikosProperties38.getTransactionManagerUniqueName();
        atomikosProperties38.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str43 = atomikosProperties42.getConsoleFileName();
        atomikosProperties42.setOutputDir("hi!");
        int int46 = atomikosProperties42.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel47 = atomikosProperties42.getConsoleLogLevel();
        java.lang.Object obj48 = properties35.putIfAbsent((java.lang.Object) atomikosProperties38, (java.lang.Object) atomikosLoggingLevel47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str50 = atomikosProperties49.getConsoleFileName();
        atomikosProperties49.setOutputDir("hi!");
        int int53 = atomikosProperties49.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel54 = atomikosProperties49.getConsoleLogLevel();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery55 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long56 = recovery55.getForgetOrphanedLogEntriesDelay();
        java.util.Properties properties57 = new java.util.Properties();
        java.util.Properties properties58 = new java.util.Properties(properties57);
        properties58.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str62 = atomikosProperties61.getConsoleFileName();
        atomikosProperties61.setOutputDir("hi!");
        int int65 = atomikosProperties61.getConsoleFileLimit();
        java.lang.Object obj66 = properties58.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties61);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel67 = atomikosProperties61.getConsoleLogLevel();
        java.lang.String str68 = atomikosProperties61.getTransactionManagerUniqueName();
        atomikosProperties61.setThreadedTwoPhaseCommit(false);
        boolean boolean71 = properties35.replace((java.lang.Object) atomikosProperties49, (java.lang.Object) recovery55, (java.lang.Object) false);
        java.lang.Object obj72 = properties15.replace((java.lang.Object) atomikosProperties26, (java.lang.Object) properties35);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery73 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery73.setDelay((long) 5);
        recovery73.setMaxRetries((-1));
        int int78 = recovery73.getMaxRetries();
        java.lang.Object obj79 = properties35.get((java.lang.Object) int78);
        java.io.OutputStream outputStream80 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties35.store(outputStream80, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tm.out" + "'", str22, "tm.out");
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tm.out" + "'", str43, "tm.out");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel47 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel47.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tm.out" + "'", str50, "tm.out");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel54 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel54.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 86400000L + "'", long56 == 86400000L);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tm.out" + "'", str62, "tm.out");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel67 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel67.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNull(obj79);
    }

    @Test
    public void test00139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00139");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        atomikosProperties0.setAllowSubTransactions(false);
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Enumeration<?> wildcardEnumeration6 = properties5.propertyNames();
        java.io.PrintWriter printWriter7 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.list(printWriter7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(wildcardEnumeration6);
    }

    @Test
    public void test00140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00140");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean5 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setConsoleFileCount(10);
        atomikosProperties0.setConsoleFileCount(50);
        java.lang.String str10 = atomikosProperties0.getService();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test00141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00141");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.lang.Object obj3 = null;
        boolean boolean4 = properties0.equals(obj3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties0.elements();
        java.util.Properties properties7 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        java.lang.Object obj11 = properties7.put((java.lang.Object) atomikosProperties8, (java.lang.Object) 0L);
        boolean boolean12 = properties0.containsValue((java.lang.Object) properties7);
        java.util.Properties properties13 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection14 = properties13.values();
        java.lang.String str16 = properties13.getProperty("");
        java.lang.Object obj17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj18 = properties7.replace((java.lang.Object) "", obj17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objCollection14);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test00142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00142");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        java.io.InputStream inputStream4 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(inputStream4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test00143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00143");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        properties0.clear();
        java.io.PrintStream printStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.list(printStream7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test00144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00144");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.io.OutputStream outputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.save(outputStream12, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=32, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test00145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00145");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        java.util.Collection<java.lang.Object> objCollection4 = properties1.values();
        java.io.Writer writer5 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(writer5, "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objCollection4);
    }

    @Test
    public void test00146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00146");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Properties properties7 = new java.util.Properties(properties6);
        properties7.clear();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.lang.String str12 = properties5.getProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "tm.out");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tm.out" + "'", str12, "tm.out");
    }

    @Test
    public void test00147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00147");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setConsoleFileCount((-1));
        atomikosProperties6.setTransactionManagerUniqueName("tm.out");
        java.lang.Object obj11 = properties0.remove((java.lang.Object) atomikosProperties6);
        java.util.Properties properties12 = new java.util.Properties(properties0);
        java.io.OutputStream outputStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream13, "{}", "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test00148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00148");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        atomikosProperties0.setConsoleFileName("");
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Properties properties6 = new java.util.Properties(properties5);
        properties6.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str10 = atomikosProperties9.getConsoleFileName();
        atomikosProperties9.setOutputDir("hi!");
        int int13 = atomikosProperties9.getConsoleFileLimit();
        java.lang.Object obj14 = properties6.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties9);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel15 = atomikosProperties9.getConsoleLogLevel();
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel15);
        atomikosProperties0.setMaxActives((int) ' ');
        atomikosProperties0.setSerialJtaTransactions(false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tm.out" + "'", str10, "tm.out");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel15 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel15.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test00149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00149");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        atomikosProperties4.setLogBaseName("tm.out");
        long long12 = atomikosProperties4.getDefaultJtaTimeout();
        atomikosProperties4.setTransactionManagerUniqueName("hi!");
        atomikosProperties4.setSerialJtaTransactions(true);
        atomikosProperties4.setService("");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
    }

    @Test
    public void test00150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00150");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties1.elements();
        java.util.Properties properties5 = new java.util.Properties(properties1);
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Properties properties7 = new java.util.Properties(properties6);
        int int8 = properties7.size();
        boolean boolean9 = properties7.isEmpty();
        java.util.Properties properties10 = new java.util.Properties(properties7);
        java.util.Properties properties11 = new java.util.Properties(properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.getConsoleFileName();
        atomikosProperties12.setOutputDir("hi!");
        int int16 = atomikosProperties12.getConsoleFileLimit();
        java.util.Properties properties17 = atomikosProperties12.asProperties();
        java.lang.String str18 = atomikosProperties12.getService();
        atomikosProperties12.setService("hi!");
        atomikosProperties12.setForceShutdownOnVmExit(true);
        atomikosProperties12.setThreadedTwoPhaseCommit(false);
        java.util.Properties properties25 = atomikosProperties12.asProperties();
        java.util.Properties properties27 = new java.util.Properties();
        java.util.Properties properties28 = new java.util.Properties(properties27);
        int int29 = properties28.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery30 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long31 = recovery30.getForgetOrphanedLogEntriesDelay();
        java.lang.Class<?> wildcardClass32 = recovery30.getClass();
        boolean boolean33 = properties28.containsKey((java.lang.Object) wildcardClass32);
        boolean boolean34 = properties7.replace((java.lang.Object) properties25, (java.lang.Object) 1.0f, (java.lang.Object) wildcardClass32);
        java.util.Properties properties35 = new java.util.Properties(properties25);
        java.util.Properties properties36 = new java.util.Properties();
        java.util.Properties properties37 = new java.util.Properties(properties36);
        properties37.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str41 = atomikosProperties40.getConsoleFileName();
        atomikosProperties40.setOutputDir("hi!");
        int int44 = atomikosProperties40.getConsoleFileLimit();
        java.lang.Object obj45 = properties37.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties40);
        boolean boolean46 = atomikosProperties40.isForceShutdownOnVmExit();
        atomikosProperties40.setConsoleFileName("");
        java.lang.String str49 = atomikosProperties40.getService();
        java.util.Properties properties50 = atomikosProperties40.asProperties();
        boolean boolean51 = properties1.remove((java.lang.Object) properties25, (java.lang.Object) atomikosProperties40);
        java.util.Properties properties52 = new java.util.Properties(properties1);
        java.io.InputStream inputStream53 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties52.loadFromXML(inputStream53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tm.out" + "'", str13, "tm.out");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 86400000L + "'", long31 == 86400000L);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "tm.out" + "'", str41, "tm.out");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test00151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00151");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        int int26 = properties3.size();
        java.util.Properties properties27 = new java.util.Properties(properties3);
        java.io.OutputStream outputStream28 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties27.store(outputStream28, "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test00152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00152");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        java.lang.String str3 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseName("tm.out");
        atomikosProperties0.setForceShutdownOnVmExit(true);
        atomikosProperties0.setConsoleFileCount((int) (byte) 0);
        java.lang.Class<?> wildcardClass10 = atomikosProperties0.getClass();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test00153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00153");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        atomikosProperties1.setThreadedTwoPhaseCommit(false);
        atomikosProperties1.setConsoleFileLimit((int) ' ');
        java.lang.String str9 = atomikosProperties1.getTransactionManagerUniqueName();
        java.util.Properties properties10 = atomikosProperties1.asProperties();
        java.io.Writer writer11 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties10.store(writer11, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(properties10);
    }

    @Test
    public void test00154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00154");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str2 = properties0.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str4 = atomikosProperties3.getTransactionManagerUniqueName();
        boolean boolean5 = atomikosProperties3.isForceShutdownOnVmExit();
        java.util.Properties properties6 = atomikosProperties3.asProperties();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties6);
        java.lang.Object obj8 = null;
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        properties10.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str14 = atomikosProperties13.getConsoleFileName();
        atomikosProperties13.setOutputDir("hi!");
        int int17 = atomikosProperties13.getConsoleFileLimit();
        java.lang.Object obj18 = properties10.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties13);
        atomikosProperties13.setLogBaseName("tm.out");
        long long21 = atomikosProperties13.getDefaultJtaTimeout();
        atomikosProperties13.setSerialJtaTransactions(true);
        boolean boolean24 = atomikosProperties13.isAllowSubTransactions();
        atomikosProperties13.setForceShutdownOnVmExit(false);
        atomikosProperties13.setService("tm.out");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj29 = properties0.put(obj8, (java.lang.Object) atomikosProperties13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tm.out" + "'", str14, "tm.out");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test00155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00155");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery6 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long7 = recovery6.getForgetOrphanedLogEntriesDelay();
        recovery6.setDelay((long) (short) 1);
        recovery6.setDelay((long) (-1));
        java.lang.Object obj12 = properties3.remove((java.lang.Object) (-1));
        java.io.OutputStream outputStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.storeToXML(outputStream13, "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 86400000L + "'", long7 == 86400000L);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test00156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00156");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.lang.Object obj3 = null;
        boolean boolean4 = properties0.equals(obj3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.keys();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection7 = properties6.values();
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Properties properties11 = new java.util.Properties(properties10);
        properties11.clear();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.lang.Object obj16 = properties9.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setConsoleFileCount((-1));
        java.lang.String str21 = atomikosProperties18.getOutputDir();
        atomikosProperties18.setLogBaseName("tm.out");
        boolean boolean24 = properties9.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties25.setConsoleFileCount(100);
        atomikosProperties25.setAllowSubTransactions(true);
        java.lang.Object obj30 = properties9.remove((java.lang.Object) atomikosProperties25);
        atomikosProperties25.setAllowSubTransactions(false);
        int int33 = atomikosProperties25.getConsoleFileCount();
        java.util.Properties properties34 = atomikosProperties25.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setConsoleFileCount((-1));
        atomikosProperties35.setTransactionManagerUniqueName("tm.out");
        java.lang.String str40 = atomikosProperties35.getLogBaseName();
        atomikosProperties35.setConsoleFileLimit((int) (byte) 1);
        atomikosProperties35.setLogBaseName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        java.lang.Object obj45 = properties0.put((java.lang.Object) properties34, (java.lang.Object) "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        java.io.InputStream inputStream46 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.load(inputStream46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(objCollection7);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "tmlog" + "'", str40, "tmlog");
        org.junit.Assert.assertNull(obj45);
    }

    @Test
    public void test00157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00157");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.setDelay((long) 5);
        recovery0.setMaxRetries((-1));
        recovery0.setDelay(300000L);
        recovery0.setDelay(500L);
        java.lang.Class<?> wildcardClass9 = recovery0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test00158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00158");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties3.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet9 = properties3.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setConsoleFileCount((-1));
        java.lang.String str13 = atomikosProperties10.getOutputDir();
        atomikosProperties10.setLogBaseName("tm.out");
        int int16 = atomikosProperties10.getConsoleFileCount();
        boolean boolean17 = properties3.containsKey((java.lang.Object) atomikosProperties10);
        java.io.PrintStream printStream18 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.list(printStream18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test00159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00159");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        atomikosProperties0.setAllowSubTransactions(false);
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Enumeration<?> wildcardEnumeration6 = properties5.propertyNames();
        java.io.OutputStream outputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.storeToXML(outputStream7, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(wildcardEnumeration6);
    }

    @Test
    public void test00160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00160");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties1.elements();
        java.io.InputStream inputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(inputStream5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objEnumeration4);
    }

    @Test
    public void test00161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00161");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.setDelay((long) (short) 1);
        long long4 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.setDelay((long) '4');
        int int7 = recovery0.getMaxRetries();
        recovery0.setForgetOrphanedLogEntriesDelay(0L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 86400000L + "'", long1 == 86400000L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 86400000L + "'", long4 == 86400000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
    }

    @Test
    public void test00162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00162");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Properties properties25 = new java.util.Properties(properties3);
        java.lang.String str27 = properties25.getProperty("");
        java.util.Set<java.lang.Object> objSet28 = properties25.keySet();
        java.util.Properties properties29 = null;
        java.util.Properties properties30 = new java.util.Properties(properties29);
        java.util.Collection<java.lang.Object> objCollection31 = properties30.values();
        java.util.Properties properties32 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection33 = properties32.values();
        java.util.Properties properties34 = null;
        java.util.Properties properties35 = new java.util.Properties(properties34);
        java.util.Properties properties36 = new java.util.Properties();
        java.util.Properties properties37 = new java.util.Properties(properties36);
        properties37.clear();
        properties35.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties37);
        java.lang.Object obj42 = properties35.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties32.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties35);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setConsoleFileCount((-1));
        java.lang.String str47 = atomikosProperties44.getOutputDir();
        atomikosProperties44.setLogBaseName("tm.out");
        boolean boolean50 = properties35.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties51.setConsoleFileCount(100);
        atomikosProperties51.setAllowSubTransactions(true);
        java.lang.Object obj56 = properties35.remove((java.lang.Object) atomikosProperties51);
        java.util.Set<java.lang.Object> objSet57 = properties35.keySet();
        int int58 = properties35.size();
        boolean boolean60 = properties25.replace((java.lang.Object) properties30, (java.lang.Object) properties35, (java.lang.Object) 86400000L);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration<?> wildcardEnumeration61 = properties25.propertyNames();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Short cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(objSet28);
        org.junit.Assert.assertNotNull(objCollection31);
        org.junit.Assert.assertNotNull(objCollection33);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(objSet57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test00163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00163");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        java.util.Properties properties6 = new java.util.Properties(properties5);
        java.io.InputStream inputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties6.loadFromXML(inputStream7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test00164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00164");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Properties properties4 = new java.util.Properties(properties1);
        java.util.Properties properties5 = new java.util.Properties(properties1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.getConsoleFileName();
        atomikosProperties6.setOutputDir("hi!");
        int int10 = atomikosProperties6.getConsoleFileLimit();
        java.util.Properties properties11 = atomikosProperties6.asProperties();
        java.lang.String str12 = atomikosProperties6.getService();
        atomikosProperties6.setService("hi!");
        atomikosProperties6.setForceShutdownOnVmExit(true);
        atomikosProperties6.setThreadedTwoPhaseCommit(false);
        java.util.Properties properties19 = atomikosProperties6.asProperties();
        java.util.Properties properties21 = new java.util.Properties();
        java.util.Properties properties22 = new java.util.Properties(properties21);
        int int23 = properties22.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery24 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long25 = recovery24.getForgetOrphanedLogEntriesDelay();
        java.lang.Class<?> wildcardClass26 = recovery24.getClass();
        boolean boolean27 = properties22.containsKey((java.lang.Object) wildcardClass26);
        boolean boolean28 = properties1.replace((java.lang.Object) properties19, (java.lang.Object) 1.0f, (java.lang.Object) wildcardClass26);
        java.io.PrintWriter printWriter29 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printWriter29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tm.out" + "'", str7, "tm.out");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 86400000L + "'", long25 == 86400000L);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test00165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00165");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        java.lang.Object obj7 = properties0.get((java.lang.Object) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration<?> wildcardEnumeration8 = properties0.propertyNames();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.springframework.boot.jta.atomikos.AtomikosProperties cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test00166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00166");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Properties properties4 = new java.util.Properties(properties1);
        java.io.InputStream inputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties4.load(inputStream5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test00167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00167");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        atomikosProperties0.setDefaultJtaTimeout(1L);
        atomikosProperties0.setForceShutdownOnVmExit(false);
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        java.io.InputStream inputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties9.loadFromXML(inputStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties9);
    }

    @Test
    public void test00168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00168");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setConsoleFileCount(100);
        atomikosProperties6.setAllowSubTransactions(true);
        boolean boolean11 = atomikosProperties6.isForceShutdownOnVmExit();
        boolean boolean12 = properties5.contains((java.lang.Object) atomikosProperties6);
        java.util.Properties properties13 = new java.util.Properties();
        java.util.Properties properties14 = new java.util.Properties(properties13);
        properties14.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.getConsoleFileName();
        atomikosProperties17.setOutputDir("hi!");
        int int21 = atomikosProperties17.getConsoleFileLimit();
        java.lang.Object obj22 = properties14.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties17);
        boolean boolean23 = atomikosProperties17.isForceShutdownOnVmExit();
        atomikosProperties17.setConsoleFileName("");
        java.lang.String str26 = atomikosProperties17.getService();
        atomikosProperties17.setTransactionManagerUniqueName("");
        java.lang.Object obj29 = properties5.get((java.lang.Object) "");
        java.io.Writer writer30 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.store(writer30, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=32, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tm.out" + "'", str18, "tm.out");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj29);
    }

    @Test
    public void test00169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00169");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str4 = atomikosProperties3.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel7 = atomikosProperties5.getConsoleLogLevel();
        atomikosProperties3.setConsoleLogLevel(atomikosLoggingLevel7);
        atomikosProperties3.setSerialJtaTransactions(false);
        java.util.Properties properties11 = atomikosProperties3.asProperties();
        java.lang.Object obj12 = properties0.remove((java.lang.Object) atomikosProperties3);
        java.lang.Object obj13 = null;
        java.util.Properties properties14 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection15 = properties14.values();
        java.util.Properties properties16 = null;
        java.util.Properties properties17 = new java.util.Properties(properties16);
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Properties properties19 = new java.util.Properties(properties18);
        properties19.clear();
        properties17.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties19);
        java.lang.Object obj24 = properties17.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties14.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties17);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setConsoleFileCount((-1));
        java.lang.String str29 = atomikosProperties26.getOutputDir();
        atomikosProperties26.setLogBaseName("tm.out");
        boolean boolean32 = properties17.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.setConsoleFileCount(100);
        atomikosProperties33.setAllowSubTransactions(true);
        java.lang.Object obj38 = properties17.remove((java.lang.Object) atomikosProperties33);
        java.util.Set<java.lang.Object> objSet39 = properties17.keySet();
        int int40 = properties17.size();
        java.util.Properties properties41 = new java.util.Properties(properties17);
        java.util.Properties properties42 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection43 = properties42.values();
        java.util.Properties properties44 = new java.util.Properties(properties42);
        java.util.Enumeration<java.lang.Object> objEnumeration45 = properties42.keys();
        java.util.Properties properties46 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection47 = properties46.values();
        java.util.Properties properties48 = null;
        java.util.Properties properties49 = new java.util.Properties(properties48);
        java.util.Properties properties50 = new java.util.Properties();
        java.util.Properties properties51 = new java.util.Properties(properties50);
        properties51.clear();
        properties49.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties51);
        java.lang.Object obj56 = properties49.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties46.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties49);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties58.setConsoleFileCount((-1));
        java.lang.String str61 = atomikosProperties58.getOutputDir();
        atomikosProperties58.setLogBaseName("tm.out");
        boolean boolean64 = properties49.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties65.setConsoleFileCount(100);
        atomikosProperties65.setAllowSubTransactions(true);
        java.lang.Object obj70 = properties49.remove((java.lang.Object) atomikosProperties65);
        java.util.Set<java.lang.Object> objSet71 = properties49.keySet();
        java.util.Properties properties72 = new java.util.Properties(properties49);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties73 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str74 = atomikosProperties73.getTransactionManagerUniqueName();
        boolean boolean75 = atomikosProperties73.isForceShutdownOnVmExit();
        java.util.Properties properties76 = atomikosProperties73.asProperties();
        boolean boolean77 = properties72.contains((java.lang.Object) atomikosProperties73);
        boolean boolean78 = atomikosProperties73.isForceShutdownOnVmExit();
        java.lang.Object obj79 = properties17.putIfAbsent((java.lang.Object) objEnumeration45, (java.lang.Object) boolean78);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj80 = properties0.replace(obj13, (java.lang.Object) boolean78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tm.out" + "'", str6, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel7 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel7.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(objCollection15);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(objSet39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(objCollection43);
        org.junit.Assert.assertNotNull(objEnumeration45);
        org.junit.Assert.assertNotNull(objCollection47);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertNotNull(objSet71);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(properties76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(obj79);
    }

    @Test
    public void test00170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00170");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties8.getConsoleLogLevel();
        java.lang.Object obj14 = properties1.putIfAbsent((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosLoggingLevel13);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.getConsoleFileName();
        atomikosProperties15.setOutputDir("hi!");
        int int19 = atomikosProperties15.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel20 = atomikosProperties15.getConsoleLogLevel();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery21 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long22 = recovery21.getForgetOrphanedLogEntriesDelay();
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Properties properties24 = new java.util.Properties(properties23);
        properties24.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.getConsoleFileName();
        atomikosProperties27.setOutputDir("hi!");
        int int31 = atomikosProperties27.getConsoleFileLimit();
        java.lang.Object obj32 = properties24.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties27);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel33 = atomikosProperties27.getConsoleLogLevel();
        java.lang.String str34 = atomikosProperties27.getTransactionManagerUniqueName();
        atomikosProperties27.setThreadedTwoPhaseCommit(false);
        boolean boolean37 = properties1.replace((java.lang.Object) atomikosProperties15, (java.lang.Object) recovery21, (java.lang.Object) false);
        java.io.InputStream inputStream38 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(inputStream38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tm.out" + "'", str16, "tm.out");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel20 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel20.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 86400000L + "'", long22 == 86400000L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tm.out" + "'", str28, "tm.out");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel33 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel33.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test00171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00171");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setConsoleFileCount((-1));
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection10 = properties9.values();
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        java.util.Properties properties13 = new java.util.Properties();
        java.util.Properties properties14 = new java.util.Properties(properties13);
        properties14.clear();
        properties12.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties14);
        java.lang.Object obj19 = properties12.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties12);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.setConsoleFileCount((-1));
        java.lang.String str24 = atomikosProperties21.getOutputDir();
        atomikosProperties21.setLogBaseName("tm.out");
        boolean boolean27 = properties12.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties28.setConsoleFileCount(100);
        atomikosProperties28.setAllowSubTransactions(true);
        java.lang.Object obj33 = properties12.remove((java.lang.Object) atomikosProperties28);
        atomikosProperties28.setAllowSubTransactions(false);
        atomikosProperties28.setSerialJtaTransactions(true);
        java.util.Properties properties38 = new java.util.Properties();
        java.util.Properties properties39 = new java.util.Properties(properties38);
        properties39.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str43 = atomikosProperties42.getConsoleFileName();
        atomikosProperties42.setOutputDir("hi!");
        int int46 = atomikosProperties42.getConsoleFileLimit();
        java.lang.Object obj47 = properties39.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties42);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel48 = atomikosProperties42.getConsoleLogLevel();
        atomikosProperties28.setConsoleLogLevel(atomikosLoggingLevel48);
        atomikosProperties6.setConsoleLogLevel(atomikosLoggingLevel48);
        boolean boolean51 = properties0.containsKey((java.lang.Object) atomikosProperties6);
        java.io.OutputStream outputStream52 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream52, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(objCollection10);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tm.out" + "'", str43, "tm.out");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel48 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel48.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test00172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00172");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Object obj6 = properties0.get(obj5);
        properties0.clear();
        java.io.OutputStream outputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(outputStream8, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=32, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test00173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00173");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties1.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet5 = properties1.entrySet();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection7 = properties6.values();
        java.util.Properties properties8 = new java.util.Properties(properties6);
        java.util.Enumeration<java.lang.Object> objEnumeration9 = properties8.elements();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties8.entrySet();
        java.util.Properties properties11 = new java.util.Properties();
        java.util.Properties properties12 = new java.util.Properties(properties11);
        int int13 = properties12.size();
        boolean boolean14 = properties12.isEmpty();
        java.util.Set<java.lang.Object> objSet15 = properties12.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.getConsoleFileName();
        atomikosProperties16.setOutputDir("hi!");
        int int20 = atomikosProperties16.getConsoleFileLimit();
        java.util.Properties properties21 = atomikosProperties16.asProperties();
        java.lang.String str22 = atomikosProperties16.getService();
        int int23 = atomikosProperties16.getMaxActives();
        boolean boolean24 = properties12.equals((java.lang.Object) atomikosProperties16);
        java.lang.Object obj25 = properties1.putIfAbsent((java.lang.Object) objEntrySet10, (java.lang.Object) boolean24);
        java.io.OutputStream outputStream26 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream26, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objEntrySet5);
        org.junit.Assert.assertNotNull(objCollection7);
        org.junit.Assert.assertNotNull(objEnumeration9);
        org.junit.Assert.assertNotNull(objEntrySet10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objSet15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tm.out" + "'", str17, "tm.out");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 50 + "'", int23 == 50);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(obj25);
    }

    @Test
    public void test00174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00174");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setConsoleFileCount((-1));
        atomikosProperties6.setTransactionManagerUniqueName("tm.out");
        java.lang.Object obj11 = properties0.remove((java.lang.Object) atomikosProperties6);
        boolean boolean12 = atomikosProperties6.isForceShutdownOnVmExit();
        java.util.Properties properties13 = atomikosProperties6.asProperties();
        java.lang.String str14 = properties13.toString();
        java.io.OutputStream outputStream15 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties13.storeToXML(outputStream15, "tm.out", "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(properties13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str14, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
    }

    @Test
    public void test00175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00175");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setConsoleFileCount((-1));
        atomikosProperties6.setTransactionManagerUniqueName("tm.out");
        java.lang.Object obj11 = properties0.remove((java.lang.Object) atomikosProperties6);
        java.lang.Object obj12 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean13 = properties0.containsKey(obj12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test00176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00176");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setConsoleFileCount((-1));
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection10 = properties9.values();
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        java.util.Properties properties13 = new java.util.Properties();
        java.util.Properties properties14 = new java.util.Properties(properties13);
        properties14.clear();
        properties12.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties14);
        java.lang.Object obj19 = properties12.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties12);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.setConsoleFileCount((-1));
        java.lang.String str24 = atomikosProperties21.getOutputDir();
        atomikosProperties21.setLogBaseName("tm.out");
        boolean boolean27 = properties12.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties28.setConsoleFileCount(100);
        atomikosProperties28.setAllowSubTransactions(true);
        java.lang.Object obj33 = properties12.remove((java.lang.Object) atomikosProperties28);
        atomikosProperties28.setAllowSubTransactions(false);
        atomikosProperties28.setSerialJtaTransactions(true);
        java.util.Properties properties38 = new java.util.Properties();
        java.util.Properties properties39 = new java.util.Properties(properties38);
        properties39.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str43 = atomikosProperties42.getConsoleFileName();
        atomikosProperties42.setOutputDir("hi!");
        int int46 = atomikosProperties42.getConsoleFileLimit();
        java.lang.Object obj47 = properties39.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties42);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel48 = atomikosProperties42.getConsoleLogLevel();
        atomikosProperties28.setConsoleLogLevel(atomikosLoggingLevel48);
        atomikosProperties6.setConsoleLogLevel(atomikosLoggingLevel48);
        boolean boolean51 = properties0.containsKey((java.lang.Object) atomikosProperties6);
        java.io.InputStream inputStream52 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.load(inputStream52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(objCollection10);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tm.out" + "'", str43, "tm.out");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel48 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel48.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test00177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00177");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties1.elements();
        java.util.Properties properties5 = new java.util.Properties(properties1);
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Properties properties7 = new java.util.Properties(properties6);
        int int8 = properties7.size();
        boolean boolean9 = properties7.isEmpty();
        java.util.Properties properties10 = new java.util.Properties(properties7);
        java.util.Properties properties11 = new java.util.Properties(properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.getConsoleFileName();
        atomikosProperties12.setOutputDir("hi!");
        int int16 = atomikosProperties12.getConsoleFileLimit();
        java.util.Properties properties17 = atomikosProperties12.asProperties();
        java.lang.String str18 = atomikosProperties12.getService();
        atomikosProperties12.setService("hi!");
        atomikosProperties12.setForceShutdownOnVmExit(true);
        atomikosProperties12.setThreadedTwoPhaseCommit(false);
        java.util.Properties properties25 = atomikosProperties12.asProperties();
        java.util.Properties properties27 = new java.util.Properties();
        java.util.Properties properties28 = new java.util.Properties(properties27);
        int int29 = properties28.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery30 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long31 = recovery30.getForgetOrphanedLogEntriesDelay();
        java.lang.Class<?> wildcardClass32 = recovery30.getClass();
        boolean boolean33 = properties28.containsKey((java.lang.Object) wildcardClass32);
        boolean boolean34 = properties7.replace((java.lang.Object) properties25, (java.lang.Object) 1.0f, (java.lang.Object) wildcardClass32);
        java.util.Properties properties35 = new java.util.Properties(properties25);
        java.util.Properties properties36 = new java.util.Properties();
        java.util.Properties properties37 = new java.util.Properties(properties36);
        properties37.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str41 = atomikosProperties40.getConsoleFileName();
        atomikosProperties40.setOutputDir("hi!");
        int int44 = atomikosProperties40.getConsoleFileLimit();
        java.lang.Object obj45 = properties37.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties40);
        boolean boolean46 = atomikosProperties40.isForceShutdownOnVmExit();
        atomikosProperties40.setConsoleFileName("");
        java.lang.String str49 = atomikosProperties40.getService();
        java.util.Properties properties50 = atomikosProperties40.asProperties();
        boolean boolean51 = properties1.remove((java.lang.Object) properties25, (java.lang.Object) atomikosProperties40);
        java.lang.String str54 = properties1.getProperty("", "hi!");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tm.out" + "'", str13, "tm.out");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 86400000L + "'", long31 == 86400000L);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "tm.out" + "'", str41, "tm.out");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
    }

    @Test
    public void test00178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00178");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getTransactionManagerUniqueName();
        boolean boolean6 = atomikosProperties4.isForceShutdownOnVmExit();
        java.util.Properties properties7 = atomikosProperties4.asProperties();
        int int8 = atomikosProperties4.getConsoleFileCount();
        java.util.Properties properties9 = atomikosProperties4.asProperties();
        java.lang.String str10 = atomikosProperties4.getOutputDir();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj11 = properties2.remove((java.lang.Object) str10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test00179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00179");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Properties properties4 = new java.util.Properties(properties1);
        java.io.OutputStream outputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream5, "", "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test00180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00180");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        java.lang.String str2 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.setCheckpointInterval((long) (byte) 0);
        boolean boolean5 = atomikosProperties0.isThreadedTwoPhaseCommit();
        int int6 = atomikosProperties0.getConsoleFileCount();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test00181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00181");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Properties properties25 = new java.util.Properties(properties3);
        java.io.PrintWriter printWriter26 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties25.list(printWriter26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
    }

    @Test
    public void test00182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00182");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties1.elements();
        java.util.Properties properties5 = new java.util.Properties(properties1);
        int int6 = properties1.size();
        java.util.Enumeration<java.lang.Object> objEnumeration7 = properties1.keys();
        java.io.OutputStream outputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(outputStream8, "{10=10.0}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(objEnumeration7);
    }

    @Test
    public void test00183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00183");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties1.setProperty("", "hi!");
        java.util.Properties properties9 = new java.util.Properties(properties1);
        java.io.InputStream inputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties9.load(inputStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test00184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00184");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        atomikosProperties19.setAllowSubTransactions(false);
        atomikosProperties19.setSerialJtaTransactions(true);
        java.util.Properties properties29 = new java.util.Properties();
        java.util.Properties properties30 = new java.util.Properties(properties29);
        properties30.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.getConsoleFileName();
        atomikosProperties33.setOutputDir("hi!");
        int int37 = atomikosProperties33.getConsoleFileLimit();
        java.lang.Object obj38 = properties30.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties33);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel39 = atomikosProperties33.getConsoleLogLevel();
        atomikosProperties19.setConsoleLogLevel(atomikosLoggingLevel39);
        boolean boolean41 = atomikosProperties19.isEnableLogging();
        boolean boolean42 = atomikosProperties19.isEnableLogging();
        atomikosProperties19.setLogBaseDir("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tm.out" + "'", str34, "tm.out");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel39 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel39.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test00185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00185");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        boolean boolean4 = properties2.isEmpty();
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection6 = properties5.values();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        properties10.clear();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.lang.Object obj15 = properties8.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        boolean boolean20 = properties18.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties18.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet22 = properties18.entrySet();
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection24 = properties23.values();
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        java.util.Properties properties27 = new java.util.Properties();
        java.util.Properties properties28 = new java.util.Properties(properties27);
        properties28.clear();
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        java.lang.Object obj33 = properties26.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setConsoleFileCount((-1));
        java.lang.String str38 = atomikosProperties35.getOutputDir();
        atomikosProperties35.setLogBaseName("tm.out");
        boolean boolean41 = properties26.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties42.setConsoleFileCount(100);
        atomikosProperties42.setAllowSubTransactions(true);
        java.lang.Object obj47 = properties26.remove((java.lang.Object) atomikosProperties42);
        java.util.Set<java.lang.Object> objSet48 = properties26.keySet();
        boolean boolean49 = properties2.replace((java.lang.Object) properties8, (java.lang.Object) objEntrySet22, (java.lang.Object) properties26);
        java.io.InputStream inputStream50 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.loadFromXML(inputStream50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNotNull(objEntrySet22);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(objSet48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test00186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00186");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.lang.String str5 = atomikosProperties0.getService();
        java.lang.String str6 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setOutputDir("tmlog");
        long long9 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.setConsoleFileName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        java.lang.Class<?> wildcardClass14 = atomikosProperties0.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 300000L + "'", long9 == 300000L);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test00187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00187");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str2 = properties0.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str4 = atomikosProperties3.getTransactionManagerUniqueName();
        boolean boolean5 = atomikosProperties3.isForceShutdownOnVmExit();
        java.util.Properties properties6 = atomikosProperties3.asProperties();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties6);
        java.util.Properties properties8 = new java.util.Properties(properties6);
        java.io.PrintStream printStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties6.list(printStream9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(properties6);
    }

    @Test
    public void test00188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00188");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        int int26 = properties3.size();
        java.util.Properties properties27 = new java.util.Properties(properties3);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet28 = properties3.entrySet();
        java.io.InputStream inputStream29 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.load(inputStream29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(objEntrySet28);
    }

    @Test
    public void test00189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00189");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties0.keys();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Properties properties7 = new java.util.Properties(properties6);
        properties7.clear();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.lang.Object obj12 = properties5.setProperty("", "hi!");
        java.lang.Object obj13 = properties0.remove((java.lang.Object) "");
        java.io.PrintWriter printWriter14 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.list(printWriter14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test00190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00190");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Properties properties25 = new java.util.Properties(properties3);
        java.lang.String str27 = properties25.getProperty("");
        java.util.Set<java.lang.Object> objSet28 = properties25.keySet();
        java.util.Properties properties29 = null;
        java.util.Properties properties30 = new java.util.Properties(properties29);
        java.util.Collection<java.lang.Object> objCollection31 = properties30.values();
        java.util.Properties properties32 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection33 = properties32.values();
        java.util.Properties properties34 = null;
        java.util.Properties properties35 = new java.util.Properties(properties34);
        java.util.Properties properties36 = new java.util.Properties();
        java.util.Properties properties37 = new java.util.Properties(properties36);
        properties37.clear();
        properties35.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties37);
        java.lang.Object obj42 = properties35.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties32.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties35);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setConsoleFileCount((-1));
        java.lang.String str47 = atomikosProperties44.getOutputDir();
        atomikosProperties44.setLogBaseName("tm.out");
        boolean boolean50 = properties35.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties51.setConsoleFileCount(100);
        atomikosProperties51.setAllowSubTransactions(true);
        java.lang.Object obj56 = properties35.remove((java.lang.Object) atomikosProperties51);
        java.util.Set<java.lang.Object> objSet57 = properties35.keySet();
        int int58 = properties35.size();
        boolean boolean60 = properties25.replace((java.lang.Object) properties30, (java.lang.Object) properties35, (java.lang.Object) 86400000L);
        java.io.PrintStream printStream61 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties25.list(printStream61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(objSet28);
        org.junit.Assert.assertNotNull(objCollection31);
        org.junit.Assert.assertNotNull(objCollection33);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(objSet57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test00191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00191");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties8.getConsoleLogLevel();
        java.lang.Object obj14 = properties1.putIfAbsent((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosLoggingLevel13);
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.Object obj17 = properties15.get((java.lang.Object) (byte) -1);
        java.util.Properties properties18 = new java.util.Properties(properties15);
        boolean boolean19 = properties1.equals((java.lang.Object) properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties1.keys();
        java.io.Writer writer21 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(writer21, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objEnumeration20);
    }

    @Test
    public void test00192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00192");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        int int3 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setOutputDir("");
        java.lang.String str6 = atomikosProperties0.getConsoleFileName();
        long long7 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.setMaxActives(100);
        int int10 = atomikosProperties0.getConsoleFileCount();
        int int11 = atomikosProperties0.getConsoleFileCount();
        long long12 = atomikosProperties0.getCheckpointInterval();
        long long13 = atomikosProperties0.getCheckpointInterval();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tm.out" + "'", str6, "tm.out");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
    }

    @Test
    public void test00193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00193");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setConsoleFileCount((-1));
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection10 = properties9.values();
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        java.util.Properties properties13 = new java.util.Properties();
        java.util.Properties properties14 = new java.util.Properties(properties13);
        properties14.clear();
        properties12.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties14);
        java.lang.Object obj19 = properties12.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties12);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.setConsoleFileCount((-1));
        java.lang.String str24 = atomikosProperties21.getOutputDir();
        atomikosProperties21.setLogBaseName("tm.out");
        boolean boolean27 = properties12.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties28.setConsoleFileCount(100);
        atomikosProperties28.setAllowSubTransactions(true);
        java.lang.Object obj33 = properties12.remove((java.lang.Object) atomikosProperties28);
        atomikosProperties28.setAllowSubTransactions(false);
        atomikosProperties28.setSerialJtaTransactions(true);
        java.util.Properties properties38 = new java.util.Properties();
        java.util.Properties properties39 = new java.util.Properties(properties38);
        properties39.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str43 = atomikosProperties42.getConsoleFileName();
        atomikosProperties42.setOutputDir("hi!");
        int int46 = atomikosProperties42.getConsoleFileLimit();
        java.lang.Object obj47 = properties39.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties42);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel48 = atomikosProperties42.getConsoleLogLevel();
        atomikosProperties28.setConsoleLogLevel(atomikosLoggingLevel48);
        atomikosProperties6.setConsoleLogLevel(atomikosLoggingLevel48);
        boolean boolean51 = properties0.containsKey((java.lang.Object) atomikosProperties6);
        java.util.Enumeration<java.lang.Object> objEnumeration52 = properties0.elements();
        java.io.InputStream inputStream53 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.load(inputStream53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(objCollection10);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tm.out" + "'", str43, "tm.out");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel48 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel48.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objEnumeration52);
    }

    @Test
    public void test00194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00194");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel10 = atomikosProperties4.getConsoleLogLevel();
        java.lang.String str11 = atomikosProperties4.getTransactionManagerUniqueName();
        boolean boolean12 = atomikosProperties4.isThreadedTwoPhaseCommit();
        atomikosProperties4.setConsoleFileLimit((int) '#');
        java.util.Properties properties15 = atomikosProperties4.asProperties();
        java.io.InputStream inputStream16 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties15.load(inputStream16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel10 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel10.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(properties15);
    }

    @Test
    public void test00195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00195");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.lang.Object obj3 = null;
        boolean boolean4 = properties0.equals(obj3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties0.elements();
        java.util.Properties properties7 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        java.lang.Object obj11 = properties7.put((java.lang.Object) atomikosProperties8, (java.lang.Object) 0L);
        boolean boolean12 = properties0.containsValue((java.lang.Object) properties7);
        java.io.OutputStream outputStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream13, "{hi!=}", "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test00196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00196");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileLimit((int) (byte) 10);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel3 = atomikosProperties0.getConsoleLogLevel();
        boolean boolean4 = atomikosProperties0.isAllowSubTransactions();
        int int5 = atomikosProperties0.getConsoleFileCount();
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel3 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel3.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test00197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00197");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        java.lang.String str3 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseName("tm.out");
        atomikosProperties0.setForceShutdownOnVmExit(true);
        atomikosProperties0.setConsoleFileCount((int) (byte) 0);
        java.lang.String str10 = atomikosProperties0.getLogBaseDir();
        java.lang.String str11 = atomikosProperties0.getConsoleFileName();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tm.out" + "'", str11, "tm.out");
    }

    @Test
    public void test00198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00198");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties8.getConsoleLogLevel();
        java.lang.Object obj14 = properties1.putIfAbsent((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosLoggingLevel13);
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.Object obj17 = properties15.get((java.lang.Object) (byte) -1);
        java.util.Properties properties18 = new java.util.Properties(properties15);
        boolean boolean19 = properties1.equals((java.lang.Object) properties15);
        java.util.Properties properties20 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.getConsoleFileName();
        java.lang.Object obj24 = properties20.put((java.lang.Object) atomikosProperties21, (java.lang.Object) 0L);
        java.util.Properties properties25 = new java.util.Properties(properties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setConsoleFileCount((-1));
        atomikosProperties26.setTransactionManagerUniqueName("tm.out");
        java.lang.Object obj31 = properties20.remove((java.lang.Object) atomikosProperties26);
        boolean boolean32 = atomikosProperties26.isForceShutdownOnVmExit();
        java.util.Properties properties33 = atomikosProperties26.asProperties();
        java.util.Properties properties34 = null;
        java.util.Properties properties35 = new java.util.Properties(properties34);
        boolean boolean37 = properties35.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str39 = atomikosProperties38.getTransactionManagerUniqueName();
        atomikosProperties38.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str43 = atomikosProperties42.getConsoleFileName();
        atomikosProperties42.setOutputDir("hi!");
        int int46 = atomikosProperties42.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel47 = atomikosProperties42.getConsoleLogLevel();
        java.lang.Object obj48 = properties35.putIfAbsent((java.lang.Object) atomikosProperties38, (java.lang.Object) atomikosLoggingLevel47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str50 = atomikosProperties49.getConsoleFileName();
        atomikosProperties49.setOutputDir("hi!");
        int int53 = atomikosProperties49.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel54 = atomikosProperties49.getConsoleLogLevel();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery55 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long56 = recovery55.getForgetOrphanedLogEntriesDelay();
        java.util.Properties properties57 = new java.util.Properties();
        java.util.Properties properties58 = new java.util.Properties(properties57);
        properties58.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str62 = atomikosProperties61.getConsoleFileName();
        atomikosProperties61.setOutputDir("hi!");
        int int65 = atomikosProperties61.getConsoleFileLimit();
        java.lang.Object obj66 = properties58.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties61);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel67 = atomikosProperties61.getConsoleLogLevel();
        java.lang.String str68 = atomikosProperties61.getTransactionManagerUniqueName();
        atomikosProperties61.setThreadedTwoPhaseCommit(false);
        boolean boolean71 = properties35.replace((java.lang.Object) atomikosProperties49, (java.lang.Object) recovery55, (java.lang.Object) false);
        java.lang.Object obj72 = properties15.replace((java.lang.Object) atomikosProperties26, (java.lang.Object) properties35);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration<?> wildcardEnumeration73 = properties35.propertyNames();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.springframework.boot.jta.atomikos.AtomikosProperties cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tm.out" + "'", str22, "tm.out");
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tm.out" + "'", str43, "tm.out");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel47 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel47.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tm.out" + "'", str50, "tm.out");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel54 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel54.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 86400000L + "'", long56 == 86400000L);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tm.out" + "'", str62, "tm.out");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel67 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel67.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(obj72);
    }

    @Test
    public void test00199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00199");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties1.values();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Properties properties6 = new java.util.Properties(properties5);
        properties6.clear();
        properties4.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties6);
        java.lang.Object obj11 = properties4.setProperty("", "hi!");
        java.util.Set<java.lang.Object> objSet12 = properties4.keySet();
        boolean boolean13 = properties4.isEmpty();
        java.util.Properties properties14 = new java.util.Properties(properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.getConsoleFileName();
        atomikosProperties15.setOutputDir("hi!");
        java.lang.String str19 = atomikosProperties15.getOutputDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.setConsoleFileCount((-1));
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection24 = properties23.values();
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        java.util.Properties properties27 = new java.util.Properties();
        java.util.Properties properties28 = new java.util.Properties(properties27);
        properties28.clear();
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        java.lang.Object obj33 = properties26.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setConsoleFileCount((-1));
        java.lang.String str38 = atomikosProperties35.getOutputDir();
        atomikosProperties35.setLogBaseName("tm.out");
        boolean boolean41 = properties26.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties42.setConsoleFileCount(100);
        atomikosProperties42.setAllowSubTransactions(true);
        java.lang.Object obj47 = properties26.remove((java.lang.Object) atomikosProperties42);
        atomikosProperties42.setAllowSubTransactions(false);
        atomikosProperties42.setSerialJtaTransactions(true);
        java.util.Properties properties52 = new java.util.Properties();
        java.util.Properties properties53 = new java.util.Properties(properties52);
        properties53.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str57 = atomikosProperties56.getConsoleFileName();
        atomikosProperties56.setOutputDir("hi!");
        int int60 = atomikosProperties56.getConsoleFileLimit();
        java.lang.Object obj61 = properties53.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties56);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel62 = atomikosProperties56.getConsoleLogLevel();
        atomikosProperties42.setConsoleLogLevel(atomikosLoggingLevel62);
        atomikosProperties20.setConsoleLogLevel(atomikosLoggingLevel62);
        atomikosProperties15.setConsoleLogLevel(atomikosLoggingLevel62);
        java.lang.Object obj66 = properties1.getOrDefault((java.lang.Object) properties14, (java.lang.Object) atomikosLoggingLevel62);
        java.lang.Class<?> wildcardClass67 = properties14.getClass();
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(objSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tm.out" + "'", str16, "tm.out");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "tm.out" + "'", str57, "tm.out");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel62 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel62.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + obj66 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", obj66.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test00200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00200");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Set<java.lang.Object> objSet4 = properties1.keySet();
        java.util.Properties properties5 = null;
        java.util.Properties properties6 = new java.util.Properties(properties5);
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Properties properties8 = new java.util.Properties(properties7);
        properties8.clear();
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.getConsoleFileName();
        atomikosProperties12.setOutputDir("hi!");
        int int16 = atomikosProperties12.getConsoleFileLimit();
        java.util.Properties properties17 = atomikosProperties12.asProperties();
        boolean boolean18 = properties8.containsValue((java.lang.Object) atomikosProperties12);
        boolean boolean19 = properties8.isEmpty();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Properties properties21 = new java.util.Properties(properties1);
        java.lang.String str23 = properties1.getProperty("{}");
        java.io.Reader reader24 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(reader24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objSet4);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tm.out" + "'", str13, "tm.out");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test00201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00201");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Properties properties6 = new java.util.Properties(properties5);
        properties6.clear();
        properties4.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties6);
        java.lang.Object obj11 = properties6.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet12 = properties6.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.setConsoleFileCount((-1));
        java.lang.String str16 = atomikosProperties13.getOutputDir();
        atomikosProperties13.setLogBaseName("tm.out");
        int int19 = atomikosProperties13.getConsoleFileCount();
        boolean boolean20 = properties6.containsKey((java.lang.Object) atomikosProperties13);
        boolean boolean21 = properties1.containsValue((java.lang.Object) atomikosProperties13);
        java.util.Set<java.lang.Object> objSet22 = properties1.keySet();
        java.util.Properties properties23 = new java.util.Properties(properties1);
        java.lang.String str26 = properties23.getProperty("hi!", "{hi!=}");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objSet22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{hi!=}" + "'", str26, "{hi!=}");
    }

    @Test
    public void test00202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00202");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties1.setProperty("", "hi!");
        java.util.Set<java.lang.Object> objSet9 = properties1.keySet();
        boolean boolean10 = properties1.isEmpty();
        java.lang.String str12 = properties1.getProperty("");
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test00203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00203");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Properties properties4 = new java.util.Properties(properties1);
        java.util.Properties properties5 = new java.util.Properties(properties1);
        int int6 = properties1.size();
        java.util.Properties properties7 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        java.util.Properties properties13 = atomikosProperties8.asProperties();
        java.lang.String str14 = atomikosProperties8.getService();
        atomikosProperties8.setService("hi!");
        java.lang.Object obj18 = properties7.putIfAbsent((java.lang.Object) "hi!", (java.lang.Object) 10L);
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.util.Properties properties20 = null;
        java.util.Properties properties21 = new java.util.Properties(properties20);
        java.util.Properties properties22 = new java.util.Properties();
        java.util.Properties properties23 = new java.util.Properties(properties22);
        properties23.clear();
        properties21.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties23);
        java.lang.Object obj28 = properties23.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet29 = properties23.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties30.setConsoleFileCount((-1));
        java.lang.String str33 = atomikosProperties30.getOutputDir();
        atomikosProperties30.setLogBaseName("tm.out");
        int int36 = atomikosProperties30.getConsoleFileCount();
        boolean boolean37 = properties23.containsKey((java.lang.Object) atomikosProperties30);
        atomikosProperties30.setConsoleFileCount((int) (byte) -1);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery40 = atomikosProperties30.getRecovery();
        java.util.Properties properties41 = null;
        java.util.Properties properties42 = new java.util.Properties(properties41);
        boolean boolean44 = properties42.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str46 = atomikosProperties45.getTransactionManagerUniqueName();
        atomikosProperties45.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str50 = atomikosProperties49.getConsoleFileName();
        atomikosProperties49.setOutputDir("hi!");
        int int53 = atomikosProperties49.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel54 = atomikosProperties49.getConsoleLogLevel();
        java.lang.Object obj55 = properties42.putIfAbsent((java.lang.Object) atomikosProperties45, (java.lang.Object) atomikosLoggingLevel54);
        java.util.Properties properties56 = new java.util.Properties();
        java.lang.Object obj58 = properties56.get((java.lang.Object) (byte) -1);
        java.util.Properties properties59 = new java.util.Properties(properties56);
        boolean boolean60 = properties42.equals((java.lang.Object) properties56);
        java.util.Enumeration<java.lang.Object> objEnumeration61 = properties42.keys();
        java.lang.Object obj62 = properties1.getOrDefault((java.lang.Object) atomikosProperties30, (java.lang.Object) properties42);
        java.io.Writer writer63 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(writer63, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=100}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(recovery40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tm.out" + "'", str50, "tm.out");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel54 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel54.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objEnumeration61);
        org.junit.Assert.assertNotNull(obj62);
    }

    @Test
    public void test00204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00204");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.io.OutputStream outputStream25 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.save(outputStream25, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
    }

    @Test
    public void test00205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00205");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Collection<java.lang.Object> objCollection2 = properties0.values();
        java.io.Reader reader3 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.load(reader3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objCollection2);
    }

    @Test
    public void test00206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00206");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        atomikosProperties0.setDefaultJtaTimeout(1L);
        atomikosProperties0.setForceShutdownOnVmExit(false);
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        java.io.Reader reader10 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties9.load(reader10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties9);
    }

    @Test
    public void test00207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00207");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        java.util.Set<java.lang.Object> objSet26 = properties3.keySet();
        java.io.InputStream inputStream27 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.load(inputStream27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertNotNull(objSet26);
    }

    @Test
    public void test00208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00208");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.setDefaultJtaTimeout((long) (byte) 100);
        atomikosProperties0.setLogBaseName("{hi!=}");
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test00209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00209");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties3.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet9 = properties3.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setConsoleFileCount((-1));
        java.lang.String str13 = atomikosProperties10.getOutputDir();
        atomikosProperties10.setLogBaseName("tm.out");
        int int16 = atomikosProperties10.getConsoleFileCount();
        boolean boolean17 = properties3.containsKey((java.lang.Object) atomikosProperties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long19 = recovery18.getForgetOrphanedLogEntriesDelay();
        recovery18.setDelay((long) (short) 1);
        recovery18.setRetryInterval(100L);
        java.lang.Object obj24 = properties3.get((java.lang.Object) 100L);
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        boolean boolean28 = properties26.containsValue((java.lang.Object) 10L);
        java.util.Collection<java.lang.Object> objCollection29 = properties26.values();
        java.lang.String str31 = properties26.getProperty("hi!");
        java.util.Set<java.lang.String> strSet32 = properties26.stringPropertyNames();
        java.util.Properties properties33 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection34 = properties33.values();
        java.util.Properties properties35 = new java.util.Properties(properties33);
        java.util.Enumeration<java.lang.Object> objEnumeration36 = properties35.elements();
        java.lang.String str38 = properties35.getProperty("hi!");
        java.lang.Object obj39 = properties3.getOrDefault((java.lang.Object) strSet32, (java.lang.Object) "hi!");
        java.io.Writer writer40 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.store(writer40, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 86400000L + "'", long19 == 86400000L);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objCollection29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(objCollection34);
        org.junit.Assert.assertNotNull(objEnumeration36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + obj39 + "' != '" + "hi!" + "'", obj39, "hi!");
    }

    @Test
    public void test00210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00210");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Properties properties8 = new java.util.Properties();
        java.util.Properties properties9 = new java.util.Properties(properties8);
        properties9.clear();
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        java.lang.Object obj14 = properties9.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        boolean boolean15 = properties5.equals(obj14);
        java.util.Collection<java.lang.Object> objCollection16 = properties5.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.getConsoleFileName();
        atomikosProperties17.setOutputDir("hi!");
        int int21 = atomikosProperties17.getConsoleFileLimit();
        java.util.Properties properties22 = atomikosProperties17.asProperties();
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Properties properties24 = new java.util.Properties(properties23);
        properties24.clear();
        properties22.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.setConsoleFileCount((-1));
        java.lang.String str30 = atomikosProperties27.getOutputDir();
        atomikosProperties27.setLogBaseName("tm.out");
        int int33 = atomikosProperties27.getMaxActives();
        boolean boolean34 = properties5.remove((java.lang.Object) properties22, (java.lang.Object) int33);
        java.lang.String str36 = properties5.getProperty("{}");
        java.util.Enumeration<?> wildcardEnumeration37 = properties5.propertyNames();
        java.io.OutputStream outputStream38 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.store(outputStream38, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tm.out" + "'", str18, "tm.out");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(wildcardEnumeration37);
    }

    @Test
    public void test00211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00211");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        boolean boolean4 = atomikosProperties0.isThreadedTwoPhaseCommit();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test00212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00212");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        boolean boolean4 = properties2.isEmpty();
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection6 = properties5.values();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        properties10.clear();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.lang.Object obj15 = properties8.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        boolean boolean20 = properties18.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties18.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet22 = properties18.entrySet();
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection24 = properties23.values();
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        java.util.Properties properties27 = new java.util.Properties();
        java.util.Properties properties28 = new java.util.Properties(properties27);
        properties28.clear();
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        java.lang.Object obj33 = properties26.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setConsoleFileCount((-1));
        java.lang.String str38 = atomikosProperties35.getOutputDir();
        atomikosProperties35.setLogBaseName("tm.out");
        boolean boolean41 = properties26.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties42.setConsoleFileCount(100);
        atomikosProperties42.setAllowSubTransactions(true);
        java.lang.Object obj47 = properties26.remove((java.lang.Object) atomikosProperties42);
        java.util.Set<java.lang.Object> objSet48 = properties26.keySet();
        boolean boolean49 = properties2.replace((java.lang.Object) properties8, (java.lang.Object) objEntrySet22, (java.lang.Object) properties26);
        java.lang.String str51 = properties8.getProperty("{}");
        java.util.Properties properties52 = new java.util.Properties(properties8);
        java.util.Properties properties53 = new java.util.Properties(properties52);
        java.util.Set<java.lang.String> strSet54 = properties53.stringPropertyNames();
        java.io.OutputStream outputStream55 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties53.save(outputStream55, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=32, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNotNull(objEntrySet22);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(objSet48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(strSet54);
    }

    @Test
    public void test00213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00213");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        long long2 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties3 = atomikosProperties0.asProperties();
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        int int6 = properties5.size();
        boolean boolean7 = properties5.isEmpty();
        java.util.Set<java.lang.Object> objSet8 = properties5.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setConsoleFileCount((-1));
        java.lang.String str13 = atomikosProperties10.getOutputDir();
        atomikosProperties10.setLogBaseName("tm.out");
        atomikosProperties10.setLogBaseDir("tm.out");
        int int18 = atomikosProperties10.getMaxActives();
        atomikosProperties10.setDefaultJtaTimeout((long) (short) 100);
        boolean boolean21 = properties3.replace((java.lang.Object) objSet8, (java.lang.Object) (byte) 1, (java.lang.Object) atomikosProperties10);
        java.lang.String str22 = atomikosProperties10.getService();
        java.lang.Class<?> wildcardClass23 = atomikosProperties10.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 300000L + "'", long2 == 300000L);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objSet8);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 50 + "'", int18 == 50);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test00214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00214");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        boolean boolean10 = atomikosProperties4.isForceShutdownOnVmExit();
        atomikosProperties4.setConsoleFileName("");
        java.lang.String str13 = atomikosProperties4.getService();
        java.util.Properties properties14 = atomikosProperties4.asProperties();
        java.lang.Object obj15 = null;
        boolean boolean16 = properties14.equals(obj15);
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        boolean boolean20 = properties18.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.getTransactionManagerUniqueName();
        atomikosProperties21.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str26 = atomikosProperties25.getConsoleFileName();
        atomikosProperties25.setOutputDir("hi!");
        int int29 = atomikosProperties25.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel30 = atomikosProperties25.getConsoleLogLevel();
        java.lang.Object obj31 = properties18.putIfAbsent((java.lang.Object) atomikosProperties21, (java.lang.Object) atomikosLoggingLevel30);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery32 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery32.setRetryInterval((long) (byte) 10);
        int int35 = recovery32.getMaxRetries();
        recovery32.setDelay(10L);
        recovery32.setRetryInterval((long) (short) 10);
        java.lang.Object obj40 = properties14.replace((java.lang.Object) atomikosLoggingLevel30, (java.lang.Object) recovery32);
        java.io.OutputStream outputStream41 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties14.storeToXML(outputStream41, "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "tm.out" + "'", str26, "tm.out");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel30 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel30.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertNull(obj40);
    }

    @Test
    public void test00215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00215");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Collection<java.lang.Object> objCollection6 = properties3.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str8 = atomikosProperties7.getConsoleFileName();
        atomikosProperties7.setOutputDir("hi!");
        int int11 = atomikosProperties7.getConsoleFileLimit();
        java.util.Properties properties12 = atomikosProperties7.asProperties();
        boolean boolean13 = properties3.containsValue((java.lang.Object) atomikosProperties7);
        boolean boolean14 = properties3.isEmpty();
        java.util.Properties properties15 = new java.util.Properties();
        java.util.Properties properties16 = new java.util.Properties(properties15);
        properties16.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.getConsoleFileName();
        atomikosProperties19.setOutputDir("hi!");
        int int23 = atomikosProperties19.getConsoleFileLimit();
        java.lang.Object obj24 = properties16.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties19);
        atomikosProperties19.setLogBaseName("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel29 = atomikosProperties27.getConsoleLogLevel();
        atomikosProperties19.setConsoleLogLevel(atomikosLoggingLevel29);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties31.setConsoleFileCount(100);
        atomikosProperties31.setAllowSubTransactions(true);
        boolean boolean36 = atomikosProperties31.isForceShutdownOnVmExit();
        int int37 = atomikosProperties31.getConsoleFileCount();
        java.util.Properties properties38 = atomikosProperties31.asProperties();
        java.lang.Object obj39 = properties3.replace((java.lang.Object) atomikosLoggingLevel29, (java.lang.Object) atomikosProperties31);
        atomikosProperties31.setConsoleFileName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        atomikosProperties31.setThreadedTwoPhaseCommit(true);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tm.out" + "'", str8, "tm.out");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tm.out" + "'", str20, "tm.out");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tm.out" + "'", str28, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel29 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel29.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertNull(obj39);
    }

    @Test
    public void test00216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00216");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        int int3 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setSerialJtaTransactions(false);
        java.lang.Class<?> wildcardClass6 = atomikosProperties0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test00217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00217");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        atomikosProperties1.setOutputDir("hi!");
        int int5 = atomikosProperties1.getConsoleFileLimit();
        java.util.Properties properties6 = atomikosProperties1.asProperties();
        java.lang.String str7 = atomikosProperties1.getService();
        atomikosProperties1.setService("hi!");
        java.lang.Object obj11 = properties0.putIfAbsent((java.lang.Object) "hi!", (java.lang.Object) 10L);
        java.util.Enumeration<java.lang.Object> objEnumeration12 = properties0.elements();
        java.io.Writer writer13 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(writer13, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(objEnumeration12);
    }

    @Test
    public void test00218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00218");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        java.io.Reader reader26 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.load(reader26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
    }

    @Test
    public void test00219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00219");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str4 = atomikosProperties3.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel7 = atomikosProperties5.getConsoleLogLevel();
        atomikosProperties3.setConsoleLogLevel(atomikosLoggingLevel7);
        atomikosProperties3.setSerialJtaTransactions(false);
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties3);
        java.lang.String str12 = atomikosProperties3.getOutputDir();
        boolean boolean13 = atomikosProperties3.isSerialJtaTransactions();
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tm.out" + "'", str6, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel7 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel7.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test00220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00220");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties8.getConsoleLogLevel();
        java.lang.Object obj14 = properties1.putIfAbsent((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosLoggingLevel13);
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.Object obj17 = properties15.get((java.lang.Object) (byte) -1);
        java.util.Properties properties18 = new java.util.Properties(properties15);
        boolean boolean19 = properties1.equals((java.lang.Object) properties15);
        java.util.Properties properties20 = new java.util.Properties();
        java.util.Properties properties21 = new java.util.Properties(properties20);
        properties21.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str25 = atomikosProperties24.getConsoleFileName();
        atomikosProperties24.setOutputDir("hi!");
        int int28 = atomikosProperties24.getConsoleFileLimit();
        java.lang.Object obj29 = properties21.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties24);
        boolean boolean30 = atomikosProperties24.isForceShutdownOnVmExit();
        atomikosProperties24.setConsoleFileName("");
        java.lang.String str33 = atomikosProperties24.getService();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery34 = atomikosProperties24.getRecovery();
        long long35 = recovery34.getDelay();
        boolean boolean36 = properties15.containsValue((java.lang.Object) recovery34);
        java.util.Properties properties37 = new java.util.Properties(properties15);
        java.io.InputStream inputStream38 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties37.load(inputStream38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "tm.out" + "'", str25, "tm.out");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(recovery34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10000L + "'", long35 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test00221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00221");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Properties properties25 = new java.util.Properties(properties3);
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.util.Properties properties28 = new java.util.Properties();
        java.util.Properties properties29 = new java.util.Properties(properties28);
        properties29.clear();
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        java.lang.Object obj34 = properties27.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str36 = atomikosProperties35.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str38 = atomikosProperties37.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel39 = atomikosProperties37.getConsoleLogLevel();
        atomikosProperties35.setConsoleLogLevel(atomikosLoggingLevel39);
        atomikosProperties35.setSerialJtaTransactions(false);
        java.util.Properties properties43 = atomikosProperties35.asProperties();
        atomikosProperties35.setForceShutdownOnVmExit(false);
        java.lang.Object obj46 = properties27.get((java.lang.Object) false);
        java.lang.Object obj47 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj48 = properties25.putIfAbsent(obj46, obj47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tm.out" + "'", str38, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel39 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel39.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertNull(obj46);
    }

    @Test
    public void test00222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00222");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        int int26 = properties3.size();
        java.util.Properties properties27 = new java.util.Properties(properties3);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet28 = properties3.entrySet();
        java.io.PrintWriter printWriter29 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.list(printWriter29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(objEntrySet28);
    }

    @Test
    public void test00223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00223");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        atomikosProperties19.setAllowSubTransactions(false);
        int int27 = atomikosProperties19.getConsoleFileCount();
        java.util.Properties properties28 = atomikosProperties19.asProperties();
        java.io.OutputStream outputStream29 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties28.storeToXML(outputStream29, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(properties28);
    }

    @Test
    public void test00224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00224");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties1.setProperty("", "hi!");
        java.util.Set<java.lang.Object> objSet9 = properties1.keySet();
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties1.elements();
        boolean boolean11 = properties1.isEmpty();
        int int12 = properties1.size();
        java.util.Properties properties13 = null;
        java.util.Properties properties14 = new java.util.Properties(properties13);
        int int15 = properties14.size();
        java.util.Properties properties16 = null;
        java.util.Properties properties17 = new java.util.Properties(properties16);
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Properties properties19 = new java.util.Properties(properties18);
        properties19.clear();
        properties17.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties19);
        java.lang.Object obj24 = properties19.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet25 = properties19.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setConsoleFileCount((-1));
        java.lang.String str29 = atomikosProperties26.getOutputDir();
        atomikosProperties26.setLogBaseName("tm.out");
        int int32 = atomikosProperties26.getConsoleFileCount();
        boolean boolean33 = properties19.containsKey((java.lang.Object) atomikosProperties26);
        boolean boolean34 = properties14.containsValue((java.lang.Object) atomikosProperties26);
        java.util.Set<java.lang.Object> objSet35 = properties14.keySet();
        java.util.Properties properties36 = new java.util.Properties(properties14);
        java.lang.Object obj37 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = properties1.remove((java.lang.Object) properties14, obj37);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objSet9);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objSet35);
    }

    @Test
    public void test00225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00225");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Properties properties4 = new java.util.Properties(properties1);
        java.util.Properties properties5 = new java.util.Properties(properties1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.getConsoleFileName();
        atomikosProperties6.setOutputDir("hi!");
        int int10 = atomikosProperties6.getConsoleFileLimit();
        java.util.Properties properties11 = atomikosProperties6.asProperties();
        java.lang.String str12 = atomikosProperties6.getService();
        atomikosProperties6.setService("hi!");
        atomikosProperties6.setForceShutdownOnVmExit(true);
        atomikosProperties6.setThreadedTwoPhaseCommit(false);
        java.util.Properties properties19 = atomikosProperties6.asProperties();
        java.util.Properties properties21 = new java.util.Properties();
        java.util.Properties properties22 = new java.util.Properties(properties21);
        int int23 = properties22.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery24 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long25 = recovery24.getForgetOrphanedLogEntriesDelay();
        java.lang.Class<?> wildcardClass26 = recovery24.getClass();
        boolean boolean27 = properties22.containsKey((java.lang.Object) wildcardClass26);
        boolean boolean28 = properties1.replace((java.lang.Object) properties19, (java.lang.Object) 1.0f, (java.lang.Object) wildcardClass26);
        java.util.Properties properties29 = new java.util.Properties(properties19);
        java.util.Collection<java.lang.Object> objCollection30 = properties29.values();
        java.io.PrintWriter printWriter31 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties29.list(printWriter31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tm.out" + "'", str7, "tm.out");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 86400000L + "'", long25 == 86400000L);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objCollection30);
    }

    @Test
    public void test00226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00226");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        int int26 = properties3.size();
        java.io.InputStream inputStream27 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.loadFromXML(inputStream27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test00227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00227");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties8.getConsoleLogLevel();
        java.lang.Object obj14 = properties1.putIfAbsent((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosLoggingLevel13);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.getConsoleFileName();
        atomikosProperties15.setOutputDir("hi!");
        int int19 = atomikosProperties15.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel20 = atomikosProperties15.getConsoleLogLevel();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery21 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long22 = recovery21.getForgetOrphanedLogEntriesDelay();
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Properties properties24 = new java.util.Properties(properties23);
        properties24.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.getConsoleFileName();
        atomikosProperties27.setOutputDir("hi!");
        int int31 = atomikosProperties27.getConsoleFileLimit();
        java.lang.Object obj32 = properties24.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties27);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel33 = atomikosProperties27.getConsoleLogLevel();
        java.lang.String str34 = atomikosProperties27.getTransactionManagerUniqueName();
        atomikosProperties27.setThreadedTwoPhaseCommit(false);
        boolean boolean37 = properties1.replace((java.lang.Object) atomikosProperties15, (java.lang.Object) recovery21, (java.lang.Object) false);
        java.lang.String str39 = properties1.getProperty("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties40.setConsoleFileCount((-1));
        atomikosProperties40.setConsoleFileName("");
        boolean boolean45 = properties1.containsKey((java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection46 = properties1.values();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tm.out" + "'", str16, "tm.out");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel20 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel20.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 86400000L + "'", long22 == 86400000L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tm.out" + "'", str28, "tm.out");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel33 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel33.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objCollection46);
    }

    @Test
    public void test00228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00228");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.setMaxTimeout((long) '4');
        java.lang.String str7 = atomikosProperties0.getLogBaseDir();
        long long8 = atomikosProperties0.getDefaultJtaTimeout();
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10000L + "'", long8 == 10000L);
    }

    @Test
    public void test00229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00229");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.setDelay((long) (short) 1);
        long long4 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.setMaxRetries(35);
        long long7 = recovery0.getDelay();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 86400000L + "'", long1 == 86400000L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 86400000L + "'", long4 == 86400000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
    }

    @Test
    public void test00230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00230");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        atomikosProperties19.setAllowSubTransactions(false);
        int int27 = atomikosProperties19.getConsoleFileCount();
        atomikosProperties19.setThreadedTwoPhaseCommit(false);
        java.util.Properties properties30 = atomikosProperties19.asProperties();
        java.util.Properties properties31 = new java.util.Properties();
        java.util.Properties properties32 = new java.util.Properties(properties31);
        int int33 = properties32.size();
        boolean boolean34 = properties32.isEmpty();
        java.util.Set<java.lang.Object> objSet35 = properties32.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.getConsoleFileName();
        atomikosProperties36.setOutputDir("hi!");
        int int40 = atomikosProperties36.getConsoleFileLimit();
        java.util.Properties properties41 = atomikosProperties36.asProperties();
        java.lang.String str42 = atomikosProperties36.getService();
        int int43 = atomikosProperties36.getMaxActives();
        boolean boolean44 = properties32.equals((java.lang.Object) atomikosProperties36);
        int int45 = atomikosProperties36.getConsoleFileCount();
        java.util.Properties properties46 = atomikosProperties36.asProperties();
        properties30.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties46);
        java.lang.String str50 = properties30.getProperty("tmlog", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=32, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objSet35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tm.out" + "'", str37, "tm.out");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 50 + "'", int43 == 50);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=32, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str50, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=32, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
    }

    @Test
    public void test00231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00231");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        java.lang.Object obj7 = properties0.get((java.lang.Object) 1);
        java.lang.Object obj8 = null;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties9.setConsoleFileCount(100);
        atomikosProperties9.setAllowSubTransactions(true);
        java.lang.String str14 = atomikosProperties9.getConsoleFileName();
        atomikosProperties9.setSerialJtaTransactions(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj17 = properties0.getOrDefault(obj8, (java.lang.Object) false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tm.out" + "'", str14, "tm.out");
    }

    @Test
    public void test00232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00232");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        atomikosProperties4.setLogBaseName("tm.out");
        long long12 = atomikosProperties4.getDefaultJtaTimeout();
        atomikosProperties4.setTransactionManagerUniqueName("hi!");
        java.lang.Class<?> wildcardClass15 = atomikosProperties4.getClass();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test00233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00233");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.setDelay((long) 5);
        recovery0.setMaxRetries((-1));
        recovery0.setDelay(300000L);
        recovery0.setDelay(500L);
        long long9 = recovery0.getForgetOrphanedLogEntriesDelay();
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86400000L + "'", long9 == 86400000L);
    }

    @Test
    public void test00234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00234");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel10 = atomikosProperties4.getConsoleLogLevel();
        java.lang.String str11 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setThreadedTwoPhaseCommit(false);
        java.lang.String str14 = atomikosProperties4.getOutputDir();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel10 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel10.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test00235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00235");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties1.keys();
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection6 = properties5.values();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        properties10.clear();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.lang.Object obj15 = properties8.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setConsoleFileCount((-1));
        java.lang.String str20 = atomikosProperties17.getOutputDir();
        atomikosProperties17.setLogBaseName("tm.out");
        boolean boolean23 = properties8.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.setConsoleFileCount(100);
        atomikosProperties24.setAllowSubTransactions(true);
        java.lang.Object obj29 = properties8.remove((java.lang.Object) atomikosProperties24);
        atomikosProperties24.setAllowSubTransactions(false);
        atomikosProperties24.setSerialJtaTransactions(true);
        boolean boolean34 = properties1.containsKey((java.lang.Object) atomikosProperties24);
        java.util.Properties properties35 = new java.util.Properties(properties1);
        java.util.Collection<java.lang.Object> objCollection36 = properties35.values();
        java.util.Properties properties37 = new java.util.Properties();
        java.util.Properties properties38 = new java.util.Properties(properties37);
        properties38.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str42 = atomikosProperties41.getConsoleFileName();
        atomikosProperties41.setOutputDir("hi!");
        int int45 = atomikosProperties41.getConsoleFileLimit();
        java.lang.Object obj46 = properties38.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties41);
        atomikosProperties41.setOutputDir("hi!");
        java.lang.String str49 = atomikosProperties41.getLogBaseDir();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean50 = properties35.containsKey((java.lang.Object) str49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objCollection36);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "tm.out" + "'", str42, "tm.out");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(str49);
    }

    @Test
    public void test00236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00236");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        atomikosProperties0.setDefaultJtaTimeout(1L);
        atomikosProperties0.setForceShutdownOnVmExit(false);
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        java.lang.String str11 = properties9.getProperty("{hi!=}");
        java.io.OutputStream outputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties9.store(outputStream12, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=32, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test00237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00237");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean5 = atomikosProperties0.isAllowSubTransactions();
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        int int7 = atomikosProperties0.getConsoleFileCount();
        boolean boolean8 = atomikosProperties0.isForceShutdownOnVmExit();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test00238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00238");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        java.util.Properties properties26 = new java.util.Properties(properties3);
        java.lang.Object obj27 = null;
        java.util.Properties properties28 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.getConsoleFileName();
        java.lang.Object obj32 = properties28.put((java.lang.Object) atomikosProperties29, (java.lang.Object) 0L);
        java.lang.Object obj35 = properties28.setProperty("", "");
        java.util.Properties properties36 = new java.util.Properties(properties28);
        java.lang.Object obj37 = properties36.clone();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet38 = properties36.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties39.setConsoleFileCount(100);
        int int42 = atomikosProperties39.getConsoleFileCount();
        atomikosProperties39.setOutputDir("");
        java.lang.String str45 = atomikosProperties39.getConsoleFileName();
        int int46 = atomikosProperties39.getConsoleFileCount();
        java.lang.Object obj47 = properties36.remove((java.lang.Object) int46);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj48 = properties3.putIfAbsent(obj27, (java.lang.Object) properties36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "tm.out" + "'", str30, "tm.out");
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "{}");
        org.junit.Assert.assertNotNull(objEntrySet38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 100 + "'", int42 == 100);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "tm.out" + "'", str45, "tm.out");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertNull(obj47);
    }

    @Test
    public void test00239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00239");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Set<java.lang.Object> objSet4 = properties1.keySet();
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties1.elements();
        java.io.OutputStream outputStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream6, "", "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objSet4);
        org.junit.Assert.assertNotNull(objEnumeration5);
    }

    @Test
    public void test00240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00240");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.lang.String str6 = atomikosProperties0.getService();
        atomikosProperties0.setService("hi!");
        atomikosProperties0.setForceShutdownOnVmExit(true);
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        java.util.Properties properties13 = atomikosProperties0.asProperties();
        java.io.InputStream inputStream14 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties13.load(inputStream14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(properties13);
    }

    @Test
    public void test00241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00241");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        boolean boolean4 = properties2.isEmpty();
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection6 = properties5.values();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        properties10.clear();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.lang.Object obj15 = properties8.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        boolean boolean20 = properties18.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties18.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet22 = properties18.entrySet();
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection24 = properties23.values();
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        java.util.Properties properties27 = new java.util.Properties();
        java.util.Properties properties28 = new java.util.Properties(properties27);
        properties28.clear();
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        java.lang.Object obj33 = properties26.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setConsoleFileCount((-1));
        java.lang.String str38 = atomikosProperties35.getOutputDir();
        atomikosProperties35.setLogBaseName("tm.out");
        boolean boolean41 = properties26.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties42.setConsoleFileCount(100);
        atomikosProperties42.setAllowSubTransactions(true);
        java.lang.Object obj47 = properties26.remove((java.lang.Object) atomikosProperties42);
        java.util.Set<java.lang.Object> objSet48 = properties26.keySet();
        boolean boolean49 = properties2.replace((java.lang.Object) properties8, (java.lang.Object) objEntrySet22, (java.lang.Object) properties26);
        java.lang.String str51 = properties8.getProperty("{}");
        java.util.Properties properties52 = new java.util.Properties(properties8);
        java.util.Properties properties53 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str55 = atomikosProperties54.getConsoleFileName();
        java.lang.Object obj57 = properties53.put((java.lang.Object) atomikosProperties54, (java.lang.Object) 0L);
        java.util.Properties properties58 = new java.util.Properties(properties53);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties59.setConsoleFileCount(100);
        atomikosProperties59.setAllowSubTransactions(true);
        boolean boolean64 = atomikosProperties59.isForceShutdownOnVmExit();
        boolean boolean65 = properties58.contains((java.lang.Object) atomikosProperties59);
        java.util.Properties properties66 = new java.util.Properties();
        java.util.Properties properties67 = new java.util.Properties(properties66);
        properties67.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties70 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str71 = atomikosProperties70.getConsoleFileName();
        atomikosProperties70.setOutputDir("hi!");
        int int74 = atomikosProperties70.getConsoleFileLimit();
        java.lang.Object obj75 = properties67.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties70);
        boolean boolean76 = atomikosProperties70.isForceShutdownOnVmExit();
        atomikosProperties70.setConsoleFileName("");
        java.lang.String str79 = atomikosProperties70.getService();
        atomikosProperties70.setTransactionManagerUniqueName("");
        java.lang.Object obj82 = properties58.get((java.lang.Object) "");
        java.util.Properties properties83 = new java.util.Properties();
        java.util.Properties properties84 = new java.util.Properties(properties83);
        int int85 = properties84.size();
        properties58.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties84);
        java.util.Properties properties87 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties88 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str89 = atomikosProperties88.getConsoleFileName();
        java.lang.Object obj91 = properties87.put((java.lang.Object) atomikosProperties88, (java.lang.Object) 0L);
        java.util.Properties properties92 = new java.util.Properties(properties87);
        java.lang.Object obj93 = properties87.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties94 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str95 = atomikosProperties94.getConsoleFileName();
        java.lang.String str96 = atomikosProperties94.getTransactionManagerUniqueName();
        boolean boolean97 = atomikosProperties94.isEnableLogging();
        java.lang.Object obj98 = properties58.replace(obj93, (java.lang.Object) atomikosProperties94);
        java.lang.Object obj99 = properties52.remove(obj93);
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNotNull(objEntrySet22);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(objSet48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "tm.out" + "'", str55, "tm.out");
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "tm.out" + "'", str71, "tm.out");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNull(obj82);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "tm.out" + "'", str89, "tm.out");
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertNotNull(obj93);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "tm.out" + "'", str95, "tm.out");
        org.junit.Assert.assertNull(str96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertNull(obj98);
        org.junit.Assert.assertNull(obj99);
    }

    @Test
    public void test00242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00242");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        atomikosProperties4.setLogBaseName("tm.out");
        long long12 = atomikosProperties4.getDefaultJtaTimeout();
        atomikosProperties4.setSerialJtaTransactions(true);
        boolean boolean15 = atomikosProperties4.isAllowSubTransactions();
        atomikosProperties4.setForceShutdownOnVmExit(false);
        atomikosProperties4.setService("tm.out");
        atomikosProperties4.setForceShutdownOnVmExit(false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test00243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00243");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        long long5 = atomikosProperties1.getCheckpointInterval();
        java.lang.String str6 = atomikosProperties1.getConsoleFileName();
        java.util.Properties properties7 = atomikosProperties1.asProperties();
        java.io.OutputStream outputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties7.save(outputStream8, "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tm.out" + "'", str6, "tm.out");
        org.junit.Assert.assertNotNull(properties7);
    }

    @Test
    public void test00244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00244");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties1.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        boolean boolean9 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties1.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet11 = properties1.entrySet();
        java.io.InputStream inputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(inputStream12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertNotNull(objEntrySet11);
    }

    @Test
    public void test00245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00245");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str4 = atomikosProperties3.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel7 = atomikosProperties5.getConsoleLogLevel();
        atomikosProperties3.setConsoleLogLevel(atomikosLoggingLevel7);
        atomikosProperties3.setSerialJtaTransactions(false);
        java.util.Properties properties11 = atomikosProperties3.asProperties();
        java.lang.Object obj12 = properties0.remove((java.lang.Object) atomikosProperties3);
        java.lang.String str13 = atomikosProperties3.getLogBaseName();
        java.lang.String str14 = atomikosProperties3.getLogBaseName();
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tm.out" + "'", str6, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel7 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel7.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tmlog" + "'", str14, "tmlog");
    }

    @Test
    public void test00246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00246");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        java.lang.String str3 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseName("tm.out");
        atomikosProperties0.setLogBaseDir("tm.out");
        int int8 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setDefaultJtaTimeout((long) (short) 100);
        boolean boolean11 = atomikosProperties0.isThreadedTwoPhaseCommit();
        java.lang.String str12 = atomikosProperties0.getConsoleFileName();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tm.out" + "'", str12, "tm.out");
    }

    @Test
    public void test00247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00247");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        boolean boolean5 = properties1.contains((java.lang.Object) "tmlog");
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties1.elements();
        java.lang.String str9 = properties1.getProperty("{10=10.0}", "hi!");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
    }

    @Test
    public void test00248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00248");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.lang.Object obj3 = null;
        boolean boolean4 = properties0.equals(obj3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.keys();
        java.lang.Object obj8 = properties0.setProperty("{}", "");
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        java.util.Properties properties11 = new java.util.Properties();
        java.util.Properties properties12 = new java.util.Properties(properties11);
        properties12.clear();
        properties10.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties12);
        java.util.Collection<java.lang.Object> objCollection15 = properties12.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.getConsoleFileName();
        atomikosProperties16.setOutputDir("hi!");
        int int20 = atomikosProperties16.getConsoleFileLimit();
        java.util.Properties properties21 = atomikosProperties16.asProperties();
        boolean boolean22 = properties12.containsValue((java.lang.Object) atomikosProperties16);
        int int23 = atomikosProperties16.getConsoleFileLimit();
        java.lang.String str24 = atomikosProperties16.getService();
        java.lang.Object obj25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj26 = properties0.putIfAbsent((java.lang.Object) atomikosProperties16, obj25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tm.out" + "'", str17, "tm.out");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test00249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00249");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        atomikosProperties19.setAllowSubTransactions(false);
        int int27 = atomikosProperties19.getConsoleFileCount();
        atomikosProperties19.setThreadedTwoPhaseCommit(false);
        java.util.Properties properties30 = atomikosProperties19.asProperties();
        java.util.Properties properties31 = new java.util.Properties();
        java.util.Properties properties32 = new java.util.Properties(properties31);
        int int33 = properties32.size();
        boolean boolean34 = properties32.isEmpty();
        java.util.Set<java.lang.Object> objSet35 = properties32.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.getConsoleFileName();
        atomikosProperties36.setOutputDir("hi!");
        int int40 = atomikosProperties36.getConsoleFileLimit();
        java.util.Properties properties41 = atomikosProperties36.asProperties();
        java.lang.String str42 = atomikosProperties36.getService();
        int int43 = atomikosProperties36.getMaxActives();
        boolean boolean44 = properties32.equals((java.lang.Object) atomikosProperties36);
        int int45 = atomikosProperties36.getConsoleFileCount();
        java.util.Properties properties46 = atomikosProperties36.asProperties();
        properties30.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties46);
        java.io.InputStream inputStream48 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties46.load(inputStream48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objSet35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tm.out" + "'", str37, "tm.out");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 50 + "'", int43 == 50);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(properties46);
    }

    @Test
    public void test00250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00250");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        boolean boolean10 = atomikosProperties4.isForceShutdownOnVmExit();
        atomikosProperties4.setConsoleFileName("");
        java.lang.String str13 = atomikosProperties4.getService();
        boolean boolean14 = atomikosProperties4.isEnableLogging();
        java.util.Properties properties15 = atomikosProperties4.asProperties();
        java.io.OutputStream outputStream16 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties15.store(outputStream16, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=hi!, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(properties15);
    }

    @Test
    public void test00251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00251");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        java.util.Set<java.lang.String> strSet3 = properties1.stringPropertyNames();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Properties properties7 = new java.util.Properties(properties6);
        properties7.clear();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.util.Collection<java.lang.Object> objCollection10 = properties7.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.getConsoleFileName();
        atomikosProperties11.setOutputDir("hi!");
        int int15 = atomikosProperties11.getConsoleFileLimit();
        java.util.Properties properties16 = atomikosProperties11.asProperties();
        boolean boolean17 = properties7.containsValue((java.lang.Object) atomikosProperties11);
        boolean boolean18 = properties1.containsValue((java.lang.Object) properties7);
        java.io.InputStream inputStream19 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.loadFromXML(inputStream19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(objCollection10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tm.out" + "'", str12, "tm.out");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test00252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00252");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str3 = atomikosProperties2.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel4 = atomikosProperties2.getConsoleLogLevel();
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel4);
        atomikosProperties0.setSerialJtaTransactions(false);
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        java.io.Reader reader9 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.load(reader9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "tm.out" + "'", str3, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel4 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel4.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties8);
    }

    @Test
    public void test00253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00253");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties0.containsValue((java.lang.Object) 10000L);
        java.util.Properties properties5 = null;
        java.util.Properties properties6 = new java.util.Properties(properties5);
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Properties properties8 = new java.util.Properties(properties7);
        properties8.clear();
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        java.lang.Object obj12 = properties0.putIfAbsent((java.lang.Object) (byte) 1, (java.lang.Object) properties8);
        java.lang.Object obj15 = properties8.setProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "hi!");
        java.io.OutputStream outputStream16 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.save(outputStream16, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
    }

    @Test
    public void test00254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00254");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.lang.Object obj3 = null;
        boolean boolean4 = properties0.equals(obj3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties0.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str8 = atomikosProperties7.getTransactionManagerUniqueName();
        boolean boolean9 = atomikosProperties7.isForceShutdownOnVmExit();
        atomikosProperties7.setAllowSubTransactions(false);
        atomikosProperties7.setLogBaseName("");
        java.lang.Object obj14 = properties0.remove((java.lang.Object) atomikosProperties7);
        java.io.Reader reader15 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.load(reader15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj14);
    }

    @Test
    public void test00255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00255");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str11 = atomikosProperties10.getConsoleFileName();
        atomikosProperties10.setOutputDir("hi!");
        int int14 = atomikosProperties10.getConsoleFileLimit();
        java.util.Properties properties15 = atomikosProperties10.asProperties();
        java.lang.String str16 = atomikosProperties10.getService();
        int int17 = atomikosProperties10.getMaxActives();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str19 = atomikosProperties18.getConsoleFileName();
        atomikosProperties18.setOutputDir("hi!");
        int int22 = atomikosProperties18.getConsoleFileLimit();
        java.util.Properties properties23 = atomikosProperties18.asProperties();
        java.util.Properties properties24 = new java.util.Properties();
        java.util.Properties properties25 = new java.util.Properties(properties24);
        properties25.clear();
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties25);
        java.util.Enumeration<?> wildcardEnumeration28 = properties25.propertyNames();
        java.lang.Object obj29 = properties1.getOrDefault((java.lang.Object) int17, (java.lang.Object) properties25);
        java.io.OutputStream outputStream30 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties25.save(outputStream30, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=100}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tm.out" + "'", str11, "tm.out");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tm.out" + "'", str19, "tm.out");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertNotNull(wildcardEnumeration28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{}");
    }

    @Test
    public void test00256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00256");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.setMaxTimeout((long) '4');
        java.lang.String str7 = atomikosProperties0.getLogBaseDir();
        boolean boolean8 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setLogBaseDir("tm.out");
        atomikosProperties0.setConsoleFileName("{}");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test00257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00257");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Properties properties8 = new java.util.Properties();
        java.util.Properties properties9 = new java.util.Properties(properties8);
        properties9.clear();
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        java.lang.Object obj14 = properties9.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        boolean boolean15 = properties5.equals(obj14);
        java.lang.Object obj18 = properties5.setProperty("", "");
        java.util.Properties properties19 = new java.util.Properties(properties5);
        java.io.Writer writer20 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties19.store(writer20, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=32, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(obj18);
    }

    @Test
    public void test00258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00258");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel2 = atomikosProperties0.getConsoleLogLevel();
        atomikosProperties0.setMaxActives((int) ' ');
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel2 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel2.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test00259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00259");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        java.lang.String str5 = properties1.getProperty("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery6 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery6.setRetryInterval((long) (byte) 10);
        int int9 = recovery6.getMaxRetries();
        recovery6.setDelay(10L);
        recovery6.setRetryInterval((long) (short) 10);
        boolean boolean14 = properties1.containsValue((java.lang.Object) (short) 10);
        java.io.Reader reader15 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(reader15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test00260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00260");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        long long4 = atomikosProperties0.getCheckpointInterval();
        long long5 = atomikosProperties0.getCheckpointInterval();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 500L + "'", long4 == 500L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
    }

    @Test
    public void test00261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00261");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.lang.Object obj4 = properties0.setProperty("hi!", "");
        java.util.Properties properties5 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.getConsoleFileName();
        java.lang.Object obj9 = properties5.put((java.lang.Object) atomikosProperties6, (java.lang.Object) 0L);
        java.lang.Object obj12 = properties5.setProperty("", "");
        java.util.Properties properties13 = new java.util.Properties(properties5);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties13);
        java.util.Properties properties15 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection16 = properties15.values();
        java.util.Properties properties17 = new java.util.Properties(properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties17.elements();
        boolean boolean19 = properties17.isEmpty();
        java.util.Properties properties20 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection21 = properties20.values();
        java.util.Properties properties22 = null;
        java.util.Properties properties23 = new java.util.Properties(properties22);
        java.util.Properties properties24 = new java.util.Properties();
        java.util.Properties properties25 = new java.util.Properties(properties24);
        properties25.clear();
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties25);
        java.lang.Object obj30 = properties23.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties20.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties23);
        java.util.Properties properties32 = null;
        java.util.Properties properties33 = new java.util.Properties(properties32);
        boolean boolean35 = properties33.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration36 = properties33.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet37 = properties33.entrySet();
        java.util.Properties properties38 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection39 = properties38.values();
        java.util.Properties properties40 = null;
        java.util.Properties properties41 = new java.util.Properties(properties40);
        java.util.Properties properties42 = new java.util.Properties();
        java.util.Properties properties43 = new java.util.Properties(properties42);
        properties43.clear();
        properties41.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties43);
        java.lang.Object obj48 = properties41.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties38.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties41);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties50.setConsoleFileCount((-1));
        java.lang.String str53 = atomikosProperties50.getOutputDir();
        atomikosProperties50.setLogBaseName("tm.out");
        boolean boolean56 = properties41.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties57.setConsoleFileCount(100);
        atomikosProperties57.setAllowSubTransactions(true);
        java.lang.Object obj62 = properties41.remove((java.lang.Object) atomikosProperties57);
        java.util.Set<java.lang.Object> objSet63 = properties41.keySet();
        boolean boolean64 = properties17.replace((java.lang.Object) properties23, (java.lang.Object) objEntrySet37, (java.lang.Object) properties41);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str66 = atomikosProperties65.getConsoleFileName();
        atomikosProperties65.setOutputDir("hi!");
        int int69 = atomikosProperties65.getConsoleFileLimit();
        java.util.Properties properties70 = atomikosProperties65.asProperties();
        java.util.Properties properties71 = new java.util.Properties();
        java.util.Properties properties72 = new java.util.Properties(properties71);
        properties72.clear();
        properties70.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties72);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties75 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str76 = atomikosProperties75.getConsoleFileName();
        atomikosProperties75.setOutputDir("hi!");
        int int79 = atomikosProperties75.getConsoleFileLimit();
        java.util.Properties properties80 = atomikosProperties75.asProperties();
        java.lang.String str81 = atomikosProperties75.getService();
        atomikosProperties75.setService("hi!");
        atomikosProperties75.setConsoleFileName("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery86 = atomikosProperties75.getRecovery();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties87 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str88 = atomikosProperties87.getConsoleFileName();
        atomikosProperties87.setOutputDir("hi!");
        java.lang.String str91 = atomikosProperties87.getOutputDir();
        boolean boolean92 = properties41.replace((java.lang.Object) properties72, (java.lang.Object) atomikosProperties75, (java.lang.Object) atomikosProperties87);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel93 = atomikosProperties75.getConsoleLogLevel();
        boolean boolean94 = properties13.contains((java.lang.Object) atomikosLoggingLevel93);
        java.io.Writer writer95 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties13.store(writer95, "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tm.out" + "'", str7, "tm.out");
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objCollection21);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objEnumeration36);
        org.junit.Assert.assertNotNull(objEntrySet37);
        org.junit.Assert.assertNotNull(objCollection39);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNotNull(objSet63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "tm.out" + "'", str66, "tm.out");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(properties70);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "tm.out" + "'", str76, "tm.out");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(properties80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(recovery86);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "tm.out" + "'", str88, "tm.out");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "hi!" + "'", str91, "hi!");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel93 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel93.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test00262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00262");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Set<java.lang.Object> objSet4 = properties1.keySet();
        java.util.Properties properties5 = null;
        java.util.Properties properties6 = new java.util.Properties(properties5);
        boolean boolean8 = properties6.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str10 = atomikosProperties9.getTransactionManagerUniqueName();
        atomikosProperties9.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str14 = atomikosProperties13.getConsoleFileName();
        atomikosProperties13.setOutputDir("hi!");
        int int17 = atomikosProperties13.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel18 = atomikosProperties13.getConsoleLogLevel();
        java.lang.Object obj19 = properties6.putIfAbsent((java.lang.Object) atomikosProperties9, (java.lang.Object) atomikosLoggingLevel18);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str21 = atomikosProperties20.getConsoleFileName();
        atomikosProperties20.setOutputDir("hi!");
        int int24 = atomikosProperties20.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel25 = atomikosProperties20.getConsoleLogLevel();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery26 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long27 = recovery26.getForgetOrphanedLogEntriesDelay();
        java.util.Properties properties28 = new java.util.Properties();
        java.util.Properties properties29 = new java.util.Properties(properties28);
        properties29.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str33 = atomikosProperties32.getConsoleFileName();
        atomikosProperties32.setOutputDir("hi!");
        int int36 = atomikosProperties32.getConsoleFileLimit();
        java.lang.Object obj37 = properties29.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties32);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel38 = atomikosProperties32.getConsoleLogLevel();
        java.lang.String str39 = atomikosProperties32.getTransactionManagerUniqueName();
        atomikosProperties32.setThreadedTwoPhaseCommit(false);
        boolean boolean42 = properties6.replace((java.lang.Object) atomikosProperties20, (java.lang.Object) recovery26, (java.lang.Object) false);
        java.lang.String str44 = properties6.getProperty("tm.out");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean45 = properties1.containsKey((java.lang.Object) str44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objSet4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tm.out" + "'", str14, "tm.out");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel18 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel18.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tm.out" + "'", str21, "tm.out");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel25 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel25.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 86400000L + "'", long27 == 86400000L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tm.out" + "'", str33, "tm.out");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel38 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel38.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test00263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00263");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties1.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        java.lang.String str10 = properties1.getProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=100}");
        java.io.OutputStream outputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream11, "{hi!=}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test00264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00264");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        boolean boolean4 = properties2.isEmpty();
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection6 = properties5.values();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        properties10.clear();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.lang.Object obj15 = properties8.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        boolean boolean20 = properties18.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties18.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet22 = properties18.entrySet();
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection24 = properties23.values();
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        java.util.Properties properties27 = new java.util.Properties();
        java.util.Properties properties28 = new java.util.Properties(properties27);
        properties28.clear();
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        java.lang.Object obj33 = properties26.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setConsoleFileCount((-1));
        java.lang.String str38 = atomikosProperties35.getOutputDir();
        atomikosProperties35.setLogBaseName("tm.out");
        boolean boolean41 = properties26.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties42.setConsoleFileCount(100);
        atomikosProperties42.setAllowSubTransactions(true);
        java.lang.Object obj47 = properties26.remove((java.lang.Object) atomikosProperties42);
        java.util.Set<java.lang.Object> objSet48 = properties26.keySet();
        boolean boolean49 = properties2.replace((java.lang.Object) properties8, (java.lang.Object) objEntrySet22, (java.lang.Object) properties26);
        java.lang.String str51 = properties8.getProperty("{}");
        java.util.Properties properties52 = new java.util.Properties(properties8);
        java.util.Properties properties53 = null;
        java.util.Properties properties54 = new java.util.Properties(properties53);
        boolean boolean56 = properties54.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration57 = properties54.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str59 = atomikosProperties58.getConsoleFileName();
        long long60 = atomikosProperties58.getMaxTimeout();
        java.util.Properties properties61 = atomikosProperties58.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery62 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long63 = recovery62.getForgetOrphanedLogEntriesDelay();
        recovery62.setDelay((long) (short) 1);
        recovery62.setRetryInterval(100L);
        boolean boolean68 = properties61.containsValue((java.lang.Object) 100L);
        java.lang.Object obj69 = properties54.remove((java.lang.Object) properties61);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj70 = properties8.get(obj69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNotNull(objEntrySet22);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(objSet48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objEnumeration57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "tm.out" + "'", str59, "tm.out");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 300000L + "'", long60 == 300000L);
        org.junit.Assert.assertNotNull(properties61);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 86400000L + "'", long63 == 86400000L);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(obj69);
    }

    @Test
    public void test00265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00265");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Properties properties8 = new java.util.Properties();
        java.util.Properties properties9 = new java.util.Properties(properties8);
        properties9.clear();
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        java.lang.Object obj14 = properties9.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        boolean boolean15 = properties5.equals(obj14);
        java.util.Collection<java.lang.Object> objCollection16 = properties5.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.getConsoleFileName();
        atomikosProperties17.setOutputDir("hi!");
        int int21 = atomikosProperties17.getConsoleFileLimit();
        java.util.Properties properties22 = atomikosProperties17.asProperties();
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Properties properties24 = new java.util.Properties(properties23);
        properties24.clear();
        properties22.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.setConsoleFileCount((-1));
        java.lang.String str30 = atomikosProperties27.getOutputDir();
        atomikosProperties27.setLogBaseName("tm.out");
        int int33 = atomikosProperties27.getMaxActives();
        boolean boolean34 = properties5.remove((java.lang.Object) properties22, (java.lang.Object) int33);
        java.lang.String str36 = properties5.getProperty("{}");
        java.util.Enumeration<?> wildcardEnumeration37 = properties5.propertyNames();
        java.lang.String str40 = properties5.getProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=hi!, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tm.out" + "'", str18, "tm.out");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(wildcardEnumeration37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=hi!, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str40, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=hi!, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
    }

    @Test
    public void test00266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00266");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        atomikosProperties0.setLogBaseDir("{}");
        boolean boolean5 = atomikosProperties0.isForceShutdownOnVmExit();
        java.lang.Class<?> wildcardClass6 = atomikosProperties0.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test00267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00267");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean5 = atomikosProperties0.isForceShutdownOnVmExit();
        int int6 = atomikosProperties0.getConsoleFileCount();
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str10 = atomikosProperties9.getConsoleFileName();
        atomikosProperties9.setOutputDir("hi!");
        int int13 = atomikosProperties9.getConsoleFileLimit();
        java.util.Properties properties14 = atomikosProperties9.asProperties();
        java.lang.String str15 = atomikosProperties9.getService();
        atomikosProperties9.setService("hi!");
        atomikosProperties9.setConsoleFileName("tm.out");
        java.lang.String str20 = atomikosProperties9.getTransactionManagerUniqueName();
        long long21 = atomikosProperties9.getMaxTimeout();
        int int22 = atomikosProperties9.getConsoleFileLimit();
        java.lang.Object obj23 = properties8.get((java.lang.Object) atomikosProperties9);
        java.util.Set<java.lang.Object> objSet24 = properties8.keySet();
        java.io.Reader reader25 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.load(reader25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tm.out" + "'", str10, "tm.out");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 300000L + "'", long21 == 300000L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(objSet24);
    }

    @Test
    public void test00268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00268");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        int int26 = properties3.size();
        java.util.Properties properties27 = new java.util.Properties(properties3);
        java.lang.String str30 = properties3.getProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=32, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "tmlog");
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "tmlog" + "'", str30, "tmlog");
    }

    @Test
    public void test00269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00269");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.lang.Object obj4 = properties0.setProperty("hi!", "");
        java.util.Properties properties5 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.getConsoleFileName();
        java.lang.Object obj9 = properties5.put((java.lang.Object) atomikosProperties6, (java.lang.Object) 0L);
        java.lang.Object obj12 = properties5.setProperty("", "");
        java.util.Properties properties13 = new java.util.Properties(properties5);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties13);
        java.util.Properties properties15 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.getConsoleFileName();
        java.lang.Object obj19 = properties15.put((java.lang.Object) atomikosProperties16, (java.lang.Object) 0L);
        java.util.Properties properties20 = new java.util.Properties(properties15);
        java.util.Properties properties21 = new java.util.Properties(properties20);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.io.OutputStream outputStream23 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.save(outputStream23, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tm.out" + "'", str7, "tm.out");
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tm.out" + "'", str17, "tm.out");
        org.junit.Assert.assertNull(obj19);
    }

    @Test
    public void test00270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00270");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        java.lang.String str5 = properties1.getProperty("tmlog", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=100}");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=100}" + "'", str5, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=100}");
    }

    @Test
    public void test00271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00271");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.keys();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        int int6 = properties5.size();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        properties10.clear();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.lang.Object obj15 = properties10.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet16 = properties10.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setConsoleFileCount((-1));
        java.lang.String str20 = atomikosProperties17.getOutputDir();
        atomikosProperties17.setLogBaseName("tm.out");
        int int23 = atomikosProperties17.getConsoleFileCount();
        boolean boolean24 = properties10.containsKey((java.lang.Object) atomikosProperties17);
        boolean boolean25 = properties5.containsValue((java.lang.Object) atomikosProperties17);
        java.util.Set<java.lang.Object> objSet26 = properties5.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.getTransactionManagerUniqueName();
        atomikosProperties27.setDefaultJtaTimeout((long) (byte) 100);
        java.lang.Object obj31 = properties2.putIfAbsent((java.lang.Object) properties5, (java.lang.Object) (byte) 100);
        java.io.InputStream inputStream32 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.load(inputStream32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objSet26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(obj31);
    }

    @Test
    public void test00272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00272");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        java.lang.String str2 = atomikosProperties0.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str4 = atomikosProperties3.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = atomikosProperties3.getConsoleLogLevel();
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        atomikosProperties0.setSerialJtaTransactions(false);
        boolean boolean10 = atomikosProperties0.isForceShutdownOnVmExit();
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.getConsoleFileName();
        atomikosProperties12.setOutputDir("hi!");
        int int16 = atomikosProperties12.getConsoleFileLimit();
        java.lang.String str17 = atomikosProperties12.getService();
        java.lang.String str18 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setOutputDir("tmlog");
        long long21 = atomikosProperties12.getMaxTimeout();
        java.lang.String str22 = atomikosProperties12.getLogBaseName();
        int int23 = atomikosProperties12.getConsoleFileCount();
        atomikosProperties12.setSerialJtaTransactions(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str27 = atomikosProperties26.getConsoleFileName();
        atomikosProperties26.setOutputDir("hi!");
        int int30 = atomikosProperties26.getConsoleFileLimit();
        boolean boolean31 = atomikosProperties26.isForceShutdownOnVmExit();
        java.lang.Object obj32 = properties11.replace((java.lang.Object) atomikosProperties12, (java.lang.Object) boolean31);
        java.io.Writer writer33 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties11.store(writer33, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tm.out" + "'", str4, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel5 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel5.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tm.out" + "'", str13, "tm.out");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 300000L + "'", long21 == 300000L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tm.out" + "'", str27, "tm.out");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(obj32);
    }

    @Test
    public void test00273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00273");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        java.lang.String str3 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseName("tm.out");
        atomikosProperties0.setLogBaseDir("tm.out");
        java.lang.String str8 = atomikosProperties0.getLogBaseDir();
        java.lang.String str9 = atomikosProperties0.getService();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tm.out" + "'", str8, "tm.out");
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test00274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00274");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Set<java.lang.Object> objSet4 = properties1.keySet();
        java.util.Properties properties5 = null;
        java.util.Properties properties6 = new java.util.Properties(properties5);
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Properties properties8 = new java.util.Properties(properties7);
        properties8.clear();
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.getConsoleFileName();
        atomikosProperties12.setOutputDir("hi!");
        int int16 = atomikosProperties12.getConsoleFileLimit();
        java.util.Properties properties17 = atomikosProperties12.asProperties();
        boolean boolean18 = properties8.containsValue((java.lang.Object) atomikosProperties12);
        boolean boolean19 = properties8.isEmpty();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Properties properties21 = new java.util.Properties(properties1);
        java.lang.Class<?> wildcardClass22 = properties1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objSet4);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tm.out" + "'", str13, "tm.out");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test00275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00275");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties3.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet9 = properties3.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setConsoleFileCount((-1));
        java.lang.String str13 = atomikosProperties10.getOutputDir();
        atomikosProperties10.setLogBaseName("tm.out");
        int int16 = atomikosProperties10.getConsoleFileCount();
        boolean boolean17 = properties3.containsKey((java.lang.Object) atomikosProperties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long19 = recovery18.getForgetOrphanedLogEntriesDelay();
        recovery18.setDelay((long) (short) 1);
        recovery18.setRetryInterval(100L);
        java.lang.Object obj24 = properties3.get((java.lang.Object) 100L);
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        boolean boolean28 = properties26.containsValue((java.lang.Object) 10L);
        java.util.Collection<java.lang.Object> objCollection29 = properties26.values();
        java.lang.String str31 = properties26.getProperty("hi!");
        java.util.Set<java.lang.String> strSet32 = properties26.stringPropertyNames();
        java.util.Properties properties33 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection34 = properties33.values();
        java.util.Properties properties35 = new java.util.Properties(properties33);
        java.util.Enumeration<java.lang.Object> objEnumeration36 = properties35.elements();
        java.lang.String str38 = properties35.getProperty("hi!");
        java.lang.Object obj39 = properties3.getOrDefault((java.lang.Object) strSet32, (java.lang.Object) "hi!");
        java.util.Properties properties40 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str42 = atomikosProperties41.getConsoleFileName();
        java.lang.Object obj44 = properties40.put((java.lang.Object) atomikosProperties41, (java.lang.Object) 0L);
        java.lang.Object obj47 = properties40.setProperty("", "");
        java.util.Properties properties48 = new java.util.Properties(properties40);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str50 = atomikosProperties49.getConsoleFileName();
        atomikosProperties49.setOutputDir("hi!");
        int int53 = atomikosProperties49.getConsoleFileLimit();
        java.util.Properties properties54 = atomikosProperties49.asProperties();
        java.util.Properties properties55 = new java.util.Properties();
        java.util.Properties properties56 = new java.util.Properties(properties55);
        properties56.clear();
        properties54.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties56);
        java.util.Properties properties59 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str61 = atomikosProperties60.getConsoleFileName();
        java.lang.Object obj63 = properties59.put((java.lang.Object) atomikosProperties60, (java.lang.Object) 0L);
        java.lang.Object obj66 = properties59.setProperty("", "");
        java.util.Properties properties67 = new java.util.Properties(properties59);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str69 = atomikosProperties68.getConsoleFileName();
        atomikosProperties68.setOutputDir("hi!");
        int int72 = atomikosProperties68.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel73 = atomikosProperties68.getConsoleLogLevel();
        java.lang.Object obj74 = properties54.getOrDefault((java.lang.Object) properties59, (java.lang.Object) atomikosProperties68);
        boolean boolean75 = properties40.contains((java.lang.Object) properties59);
        boolean boolean76 = properties3.containsValue((java.lang.Object) properties59);
        java.io.OutputStream outputStream77 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.store(outputStream77, "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 86400000L + "'", long19 == 86400000L);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objCollection29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(objCollection34);
        org.junit.Assert.assertNotNull(objEnumeration36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + obj39 + "' != '" + "hi!" + "'", obj39, "hi!");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "tm.out" + "'", str42, "tm.out");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tm.out" + "'", str50, "tm.out");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(properties54);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "tm.out" + "'", str61, "tm.out");
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "tm.out" + "'", str69, "tm.out");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel73 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel73.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test00276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00276");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties8.getConsoleLogLevel();
        java.lang.Object obj14 = properties1.putIfAbsent((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosLoggingLevel13);
        java.lang.Class<?> wildcardClass15 = properties1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test00277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00277");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        atomikosProperties0.setTransactionManagerUniqueName("tm.out");
        atomikosProperties0.setForceShutdownOnVmExit(false);
        atomikosProperties0.setTransactionManagerUniqueName("tm.out");
        boolean boolean9 = atomikosProperties0.isAllowSubTransactions();
        int int10 = atomikosProperties0.getConsoleFileCount();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test00278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00278");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        java.lang.String str5 = properties2.getProperty("tmlog");
        java.util.Properties properties6 = new java.util.Properties(properties2);
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Properties properties8 = new java.util.Properties(properties7);
        int int9 = properties8.size();
        boolean boolean10 = properties8.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties8.elements();
        java.util.Properties properties12 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection13 = properties12.values();
        java.util.Properties properties14 = new java.util.Properties(properties12);
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties14.elements();
        boolean boolean16 = properties14.isEmpty();
        boolean boolean17 = properties8.containsValue((java.lang.Object) boolean16);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties8.elements();
        java.lang.Object obj19 = null;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str21 = atomikosProperties20.getConsoleFileName();
        atomikosProperties20.setOutputDir("hi!");
        int int24 = atomikosProperties20.getConsoleFileLimit();
        java.util.Properties properties25 = atomikosProperties20.asProperties();
        java.util.Properties properties26 = new java.util.Properties();
        java.util.Properties properties27 = new java.util.Properties(properties26);
        properties27.clear();
        properties25.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties27);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet30 = properties25.entrySet();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean31 = properties2.replace((java.lang.Object) properties8, obj19, (java.lang.Object) properties25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertNotNull(objCollection13);
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tm.out" + "'", str21, "tm.out");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNotNull(objEntrySet30);
    }

    @Test
    public void test00279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00279");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        boolean boolean4 = properties2.isEmpty();
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection6 = properties5.values();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        properties10.clear();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.lang.Object obj15 = properties8.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        boolean boolean20 = properties18.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties18.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet22 = properties18.entrySet();
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection24 = properties23.values();
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        java.util.Properties properties27 = new java.util.Properties();
        java.util.Properties properties28 = new java.util.Properties(properties27);
        properties28.clear();
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        java.lang.Object obj33 = properties26.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setConsoleFileCount((-1));
        java.lang.String str38 = atomikosProperties35.getOutputDir();
        atomikosProperties35.setLogBaseName("tm.out");
        boolean boolean41 = properties26.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties42.setConsoleFileCount(100);
        atomikosProperties42.setAllowSubTransactions(true);
        java.lang.Object obj47 = properties26.remove((java.lang.Object) atomikosProperties42);
        java.util.Set<java.lang.Object> objSet48 = properties26.keySet();
        boolean boolean49 = properties2.replace((java.lang.Object) properties8, (java.lang.Object) objEntrySet22, (java.lang.Object) properties26);
        java.lang.Object obj52 = properties8.setProperty("hi!", "hi!");
        java.io.OutputStream outputStream53 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.storeToXML(outputStream53, "tmlog", "{hi!=}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNotNull(objEntrySet22);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(objSet48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(obj52);
    }

    @Test
    public void test00280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00280");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setConsoleFileCount((-1));
        atomikosProperties6.setTransactionManagerUniqueName("tm.out");
        java.lang.Object obj11 = properties0.remove((java.lang.Object) atomikosProperties6);
        properties0.clear();
        java.io.Writer writer13 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(writer13, "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test00281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00281");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Object obj6 = properties0.get(obj5);
        java.io.OutputStream outputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream7, "{hi!=}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test00282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00282");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties1.elements();
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection6 = properties5.values();
        java.util.Properties properties7 = new java.util.Properties(properties5);
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties7.elements();
        boolean boolean9 = properties7.isEmpty();
        boolean boolean10 = properties1.containsValue((java.lang.Object) boolean9);
        java.util.Properties properties11 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection12 = properties11.values();
        java.util.Properties properties13 = new java.util.Properties(properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration14 = properties13.keys();
        boolean boolean15 = properties1.containsKey((java.lang.Object) objEnumeration14);
        java.io.OutputStream outputStream16 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream16, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=32, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objCollection12);
        org.junit.Assert.assertNotNull(objEnumeration14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test00283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00283");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Properties properties7 = new java.util.Properties(properties6);
        properties7.clear();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.util.Enumeration<?> wildcardEnumeration10 = properties7.propertyNames();
        java.lang.Object obj11 = properties7.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.getConsoleFileName();
        atomikosProperties12.setOutputDir("hi!");
        int int16 = atomikosProperties12.getConsoleFileLimit();
        java.util.Properties properties17 = atomikosProperties12.asProperties();
        java.util.Properties properties18 = null;
        java.util.Properties properties19 = new java.util.Properties(properties18);
        java.util.Properties properties20 = new java.util.Properties();
        java.util.Properties properties21 = new java.util.Properties(properties20);
        properties21.clear();
        properties19.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.lang.Object obj26 = properties21.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        boolean boolean27 = properties17.equals(obj26);
        java.util.Collection<java.lang.Object> objCollection28 = properties17.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.getConsoleFileName();
        atomikosProperties29.setOutputDir("hi!");
        int int33 = atomikosProperties29.getConsoleFileLimit();
        java.util.Properties properties34 = atomikosProperties29.asProperties();
        java.util.Properties properties35 = new java.util.Properties();
        java.util.Properties properties36 = new java.util.Properties(properties35);
        properties36.clear();
        properties34.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties36);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties39.setConsoleFileCount((-1));
        java.lang.String str42 = atomikosProperties39.getOutputDir();
        atomikosProperties39.setLogBaseName("tm.out");
        int int45 = atomikosProperties39.getMaxActives();
        boolean boolean46 = properties17.remove((java.lang.Object) properties34, (java.lang.Object) int45);
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties34);
        java.io.PrintStream printStream48 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties7.list(printStream48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(wildcardEnumeration10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "{}");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tm.out" + "'", str13, "tm.out");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objCollection28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "tm.out" + "'", str30, "tm.out");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 50 + "'", int45 == 50);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test00284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00284");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.setDelay((long) 5);
        recovery0.setMaxRetries((-1));
        recovery0.setForgetOrphanedLogEntriesDelay(86400000L);
        long long7 = recovery0.getDelay();
        recovery0.setRetryInterval((long) (byte) 100);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 5L + "'", long7 == 5L);
    }

    @Test
    public void test00285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00285");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.util.Properties properties28 = new java.util.Properties();
        java.util.Properties properties29 = new java.util.Properties(properties28);
        properties29.clear();
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        java.lang.Object obj32 = properties3.get((java.lang.Object) properties29);
        properties29.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str35 = atomikosProperties34.getConsoleFileName();
        long long36 = atomikosProperties34.getMaxTimeout();
        java.util.Properties properties37 = atomikosProperties34.asProperties();
        java.util.Properties properties38 = new java.util.Properties();
        java.util.Properties properties39 = new java.util.Properties(properties38);
        int int40 = properties39.size();
        boolean boolean41 = properties39.isEmpty();
        java.util.Set<java.lang.Object> objSet42 = properties39.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setConsoleFileCount((-1));
        java.lang.String str47 = atomikosProperties44.getOutputDir();
        atomikosProperties44.setLogBaseName("tm.out");
        atomikosProperties44.setLogBaseDir("tm.out");
        int int52 = atomikosProperties44.getMaxActives();
        atomikosProperties44.setDefaultJtaTimeout((long) (short) 100);
        boolean boolean55 = properties37.replace((java.lang.Object) objSet42, (java.lang.Object) (byte) 1, (java.lang.Object) atomikosProperties44);
        java.lang.String str56 = atomikosProperties44.getService();
        java.lang.Object obj57 = properties29.remove((java.lang.Object) atomikosProperties44);
        java.util.Properties properties58 = new java.util.Properties(properties29);
        java.io.Reader reader59 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties58.load(reader59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tm.out" + "'", str35, "tm.out");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 300000L + "'", long36 == 300000L);
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objSet42);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 50 + "'", int52 == 50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(obj57);
    }

    @Test
    public void test00286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00286");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean5 = atomikosProperties0.isForceShutdownOnVmExit();
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        java.io.OutputStream outputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties6.save(outputStream7, "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(properties6);
    }

    @Test
    public void test00287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00287");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("", "hi!");
        java.lang.String str6 = properties0.getProperty("{}", "tm.out");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tm.out" + "'", str6, "tm.out");
    }

    @Test
    public void test00288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00288");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        atomikosProperties19.setAllowSubTransactions(false);
        atomikosProperties19.setSerialJtaTransactions(true);
        java.util.Properties properties29 = atomikosProperties19.asProperties();
        java.io.OutputStream outputStream30 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties29.store(outputStream30, "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(properties29);
    }

    @Test
    public void test00289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00289");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Properties properties7 = new java.util.Properties(properties6);
        properties7.clear();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.util.Enumeration<?> wildcardEnumeration10 = properties7.propertyNames();
        java.lang.Object obj11 = properties7.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.getConsoleFileName();
        atomikosProperties12.setOutputDir("hi!");
        int int16 = atomikosProperties12.getConsoleFileLimit();
        java.util.Properties properties17 = atomikosProperties12.asProperties();
        java.util.Properties properties18 = null;
        java.util.Properties properties19 = new java.util.Properties(properties18);
        java.util.Properties properties20 = new java.util.Properties();
        java.util.Properties properties21 = new java.util.Properties(properties20);
        properties21.clear();
        properties19.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.lang.Object obj26 = properties21.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        boolean boolean27 = properties17.equals(obj26);
        java.util.Collection<java.lang.Object> objCollection28 = properties17.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.getConsoleFileName();
        atomikosProperties29.setOutputDir("hi!");
        int int33 = atomikosProperties29.getConsoleFileLimit();
        java.util.Properties properties34 = atomikosProperties29.asProperties();
        java.util.Properties properties35 = new java.util.Properties();
        java.util.Properties properties36 = new java.util.Properties(properties35);
        properties36.clear();
        properties34.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties36);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties39.setConsoleFileCount((-1));
        java.lang.String str42 = atomikosProperties39.getOutputDir();
        atomikosProperties39.setLogBaseName("tm.out");
        int int45 = atomikosProperties39.getMaxActives();
        boolean boolean46 = properties17.remove((java.lang.Object) properties34, (java.lang.Object) int45);
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties34);
        java.lang.String str50 = properties7.getProperty("hi!", "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(wildcardEnumeration10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "{}");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tm.out" + "'", str13, "tm.out");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objCollection28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "tm.out" + "'", str30, "tm.out");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 50 + "'", int45 == 50);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
    }

    @Test
    public void test00290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00290");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getForgetOrphanedLogEntriesDelay();
        int int2 = recovery0.getMaxRetries();
        recovery0.setForgetOrphanedLogEntriesDelay((long) (short) 0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 86400000L + "'", long1 == 86400000L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 5 + "'", int2 == 5);
    }

    @Test
    public void test00291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00291");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Properties properties8 = new java.util.Properties();
        java.util.Properties properties9 = new java.util.Properties(properties8);
        properties9.clear();
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        java.lang.Object obj14 = properties9.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        boolean boolean15 = properties5.equals(obj14);
        java.util.Collection<java.lang.Object> objCollection16 = properties5.values();
        java.lang.String str19 = properties5.getProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=hi!, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "{10=10.0}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{10=10.0}" + "'", str19, "{10=10.0}");
    }

    @Test
    public void test00292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00292");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        java.util.Properties properties26 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.getTransactionManagerUniqueName();
        boolean boolean29 = atomikosProperties27.isForceShutdownOnVmExit();
        java.util.Properties properties30 = atomikosProperties27.asProperties();
        boolean boolean31 = properties26.contains((java.lang.Object) atomikosProperties27);
        java.io.InputStream inputStream32 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties26.loadFromXML(inputStream32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test00293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00293");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        boolean boolean4 = properties2.isEmpty();
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection6 = properties5.values();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        properties10.clear();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.lang.Object obj15 = properties8.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        boolean boolean20 = properties18.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties18.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet22 = properties18.entrySet();
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection24 = properties23.values();
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        java.util.Properties properties27 = new java.util.Properties();
        java.util.Properties properties28 = new java.util.Properties(properties27);
        properties28.clear();
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        java.lang.Object obj33 = properties26.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setConsoleFileCount((-1));
        java.lang.String str38 = atomikosProperties35.getOutputDir();
        atomikosProperties35.setLogBaseName("tm.out");
        boolean boolean41 = properties26.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties42.setConsoleFileCount(100);
        atomikosProperties42.setAllowSubTransactions(true);
        java.lang.Object obj47 = properties26.remove((java.lang.Object) atomikosProperties42);
        java.util.Set<java.lang.Object> objSet48 = properties26.keySet();
        boolean boolean49 = properties2.replace((java.lang.Object) properties8, (java.lang.Object) objEntrySet22, (java.lang.Object) properties26);
        java.lang.String str51 = properties8.getProperty("{}");
        java.util.Properties properties52 = new java.util.Properties(properties8);
        java.lang.Object obj53 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj54 = properties8.remove(obj53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNotNull(objEntrySet22);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(objSet48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str51);
    }

    @Test
    public void test00294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00294");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.keys();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        int int6 = properties5.size();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        properties10.clear();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.lang.Object obj15 = properties10.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet16 = properties10.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setConsoleFileCount((-1));
        java.lang.String str20 = atomikosProperties17.getOutputDir();
        atomikosProperties17.setLogBaseName("tm.out");
        int int23 = atomikosProperties17.getConsoleFileCount();
        boolean boolean24 = properties10.containsKey((java.lang.Object) atomikosProperties17);
        boolean boolean25 = properties5.containsValue((java.lang.Object) atomikosProperties17);
        java.util.Set<java.lang.Object> objSet26 = properties5.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.getTransactionManagerUniqueName();
        atomikosProperties27.setDefaultJtaTimeout((long) (byte) 100);
        java.lang.Object obj31 = properties2.putIfAbsent((java.lang.Object) properties5, (java.lang.Object) (byte) 100);
        java.io.OutputStream outputStream32 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.save(outputStream32, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objSet26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(obj31);
    }

    @Test
    public void test00295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00295");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        boolean boolean4 = properties2.isEmpty();
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection6 = properties5.values();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        properties10.clear();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.lang.Object obj15 = properties8.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        boolean boolean20 = properties18.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties18.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet22 = properties18.entrySet();
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection24 = properties23.values();
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        java.util.Properties properties27 = new java.util.Properties();
        java.util.Properties properties28 = new java.util.Properties(properties27);
        properties28.clear();
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        java.lang.Object obj33 = properties26.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setConsoleFileCount((-1));
        java.lang.String str38 = atomikosProperties35.getOutputDir();
        atomikosProperties35.setLogBaseName("tm.out");
        boolean boolean41 = properties26.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties42.setConsoleFileCount(100);
        atomikosProperties42.setAllowSubTransactions(true);
        java.lang.Object obj47 = properties26.remove((java.lang.Object) atomikosProperties42);
        java.util.Set<java.lang.Object> objSet48 = properties26.keySet();
        boolean boolean49 = properties2.replace((java.lang.Object) properties8, (java.lang.Object) objEntrySet22, (java.lang.Object) properties26);
        java.util.Properties properties50 = new java.util.Properties(properties2);
        java.util.Enumeration<java.lang.Object> objEnumeration51 = properties2.elements();
        java.io.PrintWriter printWriter52 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.list(printWriter52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNotNull(objEntrySet22);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(objSet48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(objEnumeration51);
    }

    @Test
    public void test00296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00296");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Collection<java.lang.Object> objCollection6 = properties3.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str8 = atomikosProperties7.getConsoleFileName();
        atomikosProperties7.setOutputDir("hi!");
        int int11 = atomikosProperties7.getConsoleFileLimit();
        java.util.Properties properties12 = atomikosProperties7.asProperties();
        boolean boolean13 = properties3.containsValue((java.lang.Object) atomikosProperties7);
        boolean boolean14 = properties3.isEmpty();
        java.util.Properties properties15 = new java.util.Properties();
        java.util.Properties properties16 = new java.util.Properties(properties15);
        properties16.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.getConsoleFileName();
        atomikosProperties19.setOutputDir("hi!");
        int int23 = atomikosProperties19.getConsoleFileLimit();
        java.lang.Object obj24 = properties16.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties19);
        atomikosProperties19.setLogBaseName("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel29 = atomikosProperties27.getConsoleLogLevel();
        atomikosProperties19.setConsoleLogLevel(atomikosLoggingLevel29);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties31.setConsoleFileCount(100);
        atomikosProperties31.setAllowSubTransactions(true);
        boolean boolean36 = atomikosProperties31.isForceShutdownOnVmExit();
        int int37 = atomikosProperties31.getConsoleFileCount();
        java.util.Properties properties38 = atomikosProperties31.asProperties();
        java.lang.Object obj39 = properties3.replace((java.lang.Object) atomikosLoggingLevel29, (java.lang.Object) atomikosProperties31);
        java.lang.String str42 = properties3.getProperty("tm.out", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tm.out" + "'", str8, "tm.out");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tm.out" + "'", str20, "tm.out");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tm.out" + "'", str28, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel29 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel29.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str42, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
    }

    @Test
    public void test00297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00297");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties6 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str8 = atomikosProperties7.getConsoleFileName();
        java.lang.Object obj10 = properties6.put((java.lang.Object) atomikosProperties7, (java.lang.Object) 0L);
        properties6.clear();
        java.util.Properties properties12 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str14 = atomikosProperties13.getConsoleFileName();
        java.lang.Object obj16 = properties12.put((java.lang.Object) atomikosProperties13, (java.lang.Object) 0L);
        java.util.Properties properties17 = new java.util.Properties(properties12);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setConsoleFileCount((-1));
        atomikosProperties18.setTransactionManagerUniqueName("tm.out");
        java.lang.Object obj23 = properties12.remove((java.lang.Object) atomikosProperties18);
        java.lang.Object obj24 = properties1.getOrDefault((java.lang.Object) properties6, (java.lang.Object) properties12);
        int int25 = properties12.size();
        java.io.OutputStream outputStream26 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties12.store(outputStream26, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=100}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tm.out" + "'", str8, "tm.out");
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tm.out" + "'", str14, "tm.out");
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test00298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00298");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean5 = atomikosProperties0.isForceShutdownOnVmExit();
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        java.io.InputStream inputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties6.loadFromXML(inputStream7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(properties6);
    }

    @Test
    public void test00299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00299");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.lang.Object obj4 = properties0.setProperty("hi!", "");
        java.io.OutputStream outputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream5, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=hi!, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test00300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00300");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.get((java.lang.Object) (byte) -1);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties0.elements();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Properties properties7 = new java.util.Properties(properties6);
        properties7.clear();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        boolean boolean11 = properties5.equals((java.lang.Object) (-1.0d));
        java.lang.Object obj12 = properties0.remove((java.lang.Object) properties5);
        java.io.OutputStream outputStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(outputStream13, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test00301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00301");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        java.lang.String str5 = properties2.getProperty("hi!");
        java.util.Properties properties6 = new java.util.Properties(properties2);
        java.io.OutputStream outputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties6.storeToXML(outputStream7, "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test00302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00302");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Properties properties6 = new java.util.Properties(properties5);
        properties6.clear();
        properties4.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties6);
        java.lang.Object obj11 = properties6.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet12 = properties6.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.setConsoleFileCount((-1));
        java.lang.String str16 = atomikosProperties13.getOutputDir();
        atomikosProperties13.setLogBaseName("tm.out");
        int int19 = atomikosProperties13.getConsoleFileCount();
        boolean boolean20 = properties6.containsKey((java.lang.Object) atomikosProperties13);
        boolean boolean21 = properties1.containsValue((java.lang.Object) atomikosProperties13);
        java.util.Set<java.lang.Object> objSet22 = properties1.keySet();
        java.io.Writer writer23 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(writer23, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objSet22);
    }

    @Test
    public void test00303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00303");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.util.Properties properties28 = new java.util.Properties();
        java.util.Properties properties29 = new java.util.Properties(properties28);
        properties29.clear();
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        java.lang.Object obj32 = properties3.get((java.lang.Object) properties29);
        properties29.clear();
        java.util.Properties properties34 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str36 = atomikosProperties35.getConsoleFileName();
        java.lang.Object obj38 = properties34.put((java.lang.Object) atomikosProperties35, (java.lang.Object) 0L);
        java.util.Properties properties39 = new java.util.Properties(properties34);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties40.setConsoleFileCount((-1));
        atomikosProperties40.setTransactionManagerUniqueName("tm.out");
        java.lang.Object obj45 = properties34.remove((java.lang.Object) atomikosProperties40);
        boolean boolean46 = atomikosProperties40.isForceShutdownOnVmExit();
        java.lang.Object obj48 = properties29.putIfAbsent((java.lang.Object) boolean46, (java.lang.Object) 500L);
        java.util.Properties properties49 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection50 = properties49.values();
        java.util.Properties properties51 = new java.util.Properties(properties49);
        java.util.Enumeration<java.lang.Object> objEnumeration52 = properties49.keys();
        boolean boolean53 = properties29.containsValue((java.lang.Object) properties49);
        java.util.Properties properties54 = new java.util.Properties(properties49);
        java.util.Properties properties55 = new java.util.Properties(properties54);
        java.io.InputStream inputStream56 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties55.load(inputStream56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tm.out" + "'", str36, "tm.out");
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(objCollection50);
        org.junit.Assert.assertNotNull(objEnumeration52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test00304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00304");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        atomikosProperties0.setTransactionManagerUniqueName("tm.out");
        java.lang.String str5 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setConsoleFileLimit((int) (byte) 1);
        atomikosProperties0.setService("tm.out");
        boolean boolean10 = atomikosProperties0.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.getConsoleFileName();
        java.lang.String str13 = atomikosProperties11.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = atomikosProperties11.getConsoleLogLevel();
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel14);
        atomikosProperties0.setMaxActives(18);
        java.lang.String str18 = atomikosProperties0.getService();
        atomikosProperties0.setEnableLogging(false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tm.out" + "'", str12, "tm.out");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel14 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel14.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tm.out" + "'", str18, "tm.out");
    }

    @Test
    public void test00305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00305");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties1.keys();
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection6 = properties5.values();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        properties10.clear();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.lang.Object obj15 = properties8.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setConsoleFileCount((-1));
        java.lang.String str20 = atomikosProperties17.getOutputDir();
        atomikosProperties17.setLogBaseName("tm.out");
        boolean boolean23 = properties8.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.setConsoleFileCount(100);
        atomikosProperties24.setAllowSubTransactions(true);
        java.lang.Object obj29 = properties8.remove((java.lang.Object) atomikosProperties24);
        atomikosProperties24.setAllowSubTransactions(false);
        atomikosProperties24.setSerialJtaTransactions(true);
        boolean boolean34 = properties1.containsKey((java.lang.Object) atomikosProperties24);
        java.util.Properties properties35 = new java.util.Properties(properties1);
        java.io.OutputStream outputStream36 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties35.storeToXML(outputStream36, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test00306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00306");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Collection<java.lang.Object> objCollection6 = properties3.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str8 = atomikosProperties7.getConsoleFileName();
        atomikosProperties7.setOutputDir("hi!");
        int int11 = atomikosProperties7.getConsoleFileLimit();
        java.util.Properties properties12 = atomikosProperties7.asProperties();
        boolean boolean13 = properties3.containsValue((java.lang.Object) atomikosProperties7);
        java.io.PrintWriter printWriter14 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.list(printWriter14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tm.out" + "'", str8, "tm.out");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test00307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00307");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean5 = atomikosProperties0.isForceShutdownOnVmExit();
        java.lang.String str6 = atomikosProperties0.getTransactionManagerUniqueName();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test00308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00308");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        int int26 = properties3.size();
        java.lang.Object obj27 = null;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery28 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long29 = recovery28.getForgetOrphanedLogEntriesDelay();
        recovery28.setDelay((long) (short) 1);
        recovery28.setRetryInterval(100L);
        recovery28.setMaxRetries((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj36 = properties3.replace(obj27, (java.lang.Object) recovery28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 86400000L + "'", long29 == 86400000L);
    }

    @Test
    public void test00309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00309");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Properties properties8 = new java.util.Properties();
        java.util.Properties properties9 = new java.util.Properties(properties8);
        properties9.clear();
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        java.lang.Object obj14 = properties9.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        boolean boolean15 = properties5.equals(obj14);
        java.util.Collection<java.lang.Object> objCollection16 = properties5.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.getConsoleFileName();
        atomikosProperties17.setOutputDir("hi!");
        int int21 = atomikosProperties17.getConsoleFileLimit();
        java.util.Properties properties22 = atomikosProperties17.asProperties();
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Properties properties24 = new java.util.Properties(properties23);
        properties24.clear();
        properties22.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.setConsoleFileCount((-1));
        java.lang.String str30 = atomikosProperties27.getOutputDir();
        atomikosProperties27.setLogBaseName("tm.out");
        int int33 = atomikosProperties27.getMaxActives();
        boolean boolean34 = properties5.remove((java.lang.Object) properties22, (java.lang.Object) int33);
        java.util.Properties properties35 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection36 = properties35.values();
        java.util.Properties properties37 = null;
        java.util.Properties properties38 = new java.util.Properties(properties37);
        java.util.Properties properties39 = new java.util.Properties();
        java.util.Properties properties40 = new java.util.Properties(properties39);
        properties40.clear();
        properties38.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties40);
        java.lang.Object obj45 = properties38.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties35.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties47.setConsoleFileCount((-1));
        java.lang.String str50 = atomikosProperties47.getOutputDir();
        atomikosProperties47.setLogBaseName("tm.out");
        boolean boolean53 = properties38.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties54.setConsoleFileCount(100);
        atomikosProperties54.setAllowSubTransactions(true);
        java.lang.Object obj59 = properties38.remove((java.lang.Object) atomikosProperties54);
        atomikosProperties54.setAllowSubTransactions(false);
        atomikosProperties54.setSerialJtaTransactions(true);
        java.util.Properties properties64 = new java.util.Properties();
        java.util.Properties properties65 = new java.util.Properties(properties64);
        properties65.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str69 = atomikosProperties68.getConsoleFileName();
        atomikosProperties68.setOutputDir("hi!");
        int int72 = atomikosProperties68.getConsoleFileLimit();
        java.lang.Object obj73 = properties65.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties68);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel74 = atomikosProperties68.getConsoleLogLevel();
        atomikosProperties54.setConsoleLogLevel(atomikosLoggingLevel74);
        atomikosProperties54.setDefaultJtaTimeout((long) 10);
        boolean boolean78 = properties5.equals((java.lang.Object) atomikosProperties54);
        java.io.InputStream inputStream79 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.load(inputStream79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tm.out" + "'", str18, "tm.out");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objCollection36);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "tm.out" + "'", str69, "tm.out");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel74 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel74.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test00310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00310");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties1.entrySet();
        java.util.Properties properties11 = new java.util.Properties(properties1);
        boolean boolean12 = properties11.isEmpty();
        java.io.PrintWriter printWriter13 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties11.list(printWriter13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(objEntrySet10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test00311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00311");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        boolean boolean4 = properties2.isEmpty();
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection6 = properties5.values();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        properties10.clear();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.lang.Object obj15 = properties8.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        boolean boolean20 = properties18.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties18.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet22 = properties18.entrySet();
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection24 = properties23.values();
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        java.util.Properties properties27 = new java.util.Properties();
        java.util.Properties properties28 = new java.util.Properties(properties27);
        properties28.clear();
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        java.lang.Object obj33 = properties26.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setConsoleFileCount((-1));
        java.lang.String str38 = atomikosProperties35.getOutputDir();
        atomikosProperties35.setLogBaseName("tm.out");
        boolean boolean41 = properties26.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties42.setConsoleFileCount(100);
        atomikosProperties42.setAllowSubTransactions(true);
        java.lang.Object obj47 = properties26.remove((java.lang.Object) atomikosProperties42);
        java.util.Set<java.lang.Object> objSet48 = properties26.keySet();
        boolean boolean49 = properties2.replace((java.lang.Object) properties8, (java.lang.Object) objEntrySet22, (java.lang.Object) properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery50 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long51 = recovery50.getForgetOrphanedLogEntriesDelay();
        recovery50.setDelay((long) (short) 1);
        recovery50.setDelay((long) (-1));
        java.util.Properties properties56 = null;
        java.util.Properties properties57 = new java.util.Properties(properties56);
        boolean boolean59 = properties57.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str61 = atomikosProperties60.getTransactionManagerUniqueName();
        atomikosProperties60.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str65 = atomikosProperties64.getConsoleFileName();
        atomikosProperties64.setOutputDir("hi!");
        int int68 = atomikosProperties64.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel69 = atomikosProperties64.getConsoleLogLevel();
        java.lang.Object obj70 = properties57.putIfAbsent((java.lang.Object) atomikosProperties60, (java.lang.Object) atomikosLoggingLevel69);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str72 = atomikosProperties71.getConsoleFileName();
        atomikosProperties71.setOutputDir("hi!");
        int int75 = atomikosProperties71.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel76 = atomikosProperties71.getConsoleLogLevel();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery77 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long78 = recovery77.getForgetOrphanedLogEntriesDelay();
        java.util.Properties properties79 = new java.util.Properties();
        java.util.Properties properties80 = new java.util.Properties(properties79);
        properties80.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties83 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str84 = atomikosProperties83.getConsoleFileName();
        atomikosProperties83.setOutputDir("hi!");
        int int87 = atomikosProperties83.getConsoleFileLimit();
        java.lang.Object obj88 = properties80.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties83);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel89 = atomikosProperties83.getConsoleLogLevel();
        java.lang.String str90 = atomikosProperties83.getTransactionManagerUniqueName();
        atomikosProperties83.setThreadedTwoPhaseCommit(false);
        boolean boolean93 = properties57.replace((java.lang.Object) atomikosProperties71, (java.lang.Object) recovery77, (java.lang.Object) false);
        java.lang.Object obj94 = properties2.put((java.lang.Object) (-1), (java.lang.Object) false);
        java.io.InputStream inputStream95 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.load(inputStream95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNotNull(objEntrySet22);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(objSet48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 86400000L + "'", long51 == 86400000L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "tm.out" + "'", str65, "tm.out");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel69 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel69.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "tm.out" + "'", str72, "tm.out");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel76 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel76.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 86400000L + "'", long78 == 86400000L);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "tm.out" + "'", str84, "tm.out");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel89 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel89.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(obj94);
    }

    @Test
    public void test00312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00312");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties8.getConsoleLogLevel();
        java.lang.Object obj14 = properties1.putIfAbsent((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosLoggingLevel13);
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.Object obj17 = properties15.get((java.lang.Object) (byte) -1);
        java.util.Properties properties18 = new java.util.Properties(properties15);
        boolean boolean19 = properties1.equals((java.lang.Object) properties15);
        java.util.Properties properties20 = new java.util.Properties();
        java.util.Properties properties21 = new java.util.Properties(properties20);
        properties21.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str25 = atomikosProperties24.getConsoleFileName();
        atomikosProperties24.setOutputDir("hi!");
        int int28 = atomikosProperties24.getConsoleFileLimit();
        java.lang.Object obj29 = properties21.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties24);
        boolean boolean30 = atomikosProperties24.isForceShutdownOnVmExit();
        atomikosProperties24.setConsoleFileName("");
        java.lang.String str33 = atomikosProperties24.getService();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery34 = atomikosProperties24.getRecovery();
        long long35 = recovery34.getDelay();
        boolean boolean36 = properties15.containsValue((java.lang.Object) recovery34);
        java.util.Properties properties37 = new java.util.Properties(properties15);
        java.io.OutputStream outputStream38 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties37.storeToXML(outputStream38, "tmlog", "{hi!=}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "tm.out" + "'", str25, "tm.out");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(recovery34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10000L + "'", long35 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test00313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00313");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        boolean boolean7 = properties1.equals((java.lang.Object) (-1.0d));
        java.util.Properties properties8 = new java.util.Properties(properties1);
        java.lang.String str11 = properties8.getProperty("", "tmlog");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tmlog" + "'", str11, "tmlog");
    }

    @Test
    public void test00314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00314");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        atomikosProperties0.setCheckpointInterval((long) (short) 10);
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = new java.util.Properties(properties5);
        java.io.OutputStream outputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties6.save(outputStream7, "{hi!=}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties5);
    }

    @Test
    public void test00315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00315");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        java.lang.String str3 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseName("tm.out");
        atomikosProperties0.setLogBaseDir("tm.out");
        int int8 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setDefaultJtaTimeout((long) (short) 100);
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.Object> objSet12 = properties11.keySet();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objSet12);
    }

    @Test
    public void test00316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00316");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Properties properties25 = new java.util.Properties(properties3);
        java.lang.String str27 = properties25.getProperty("");
        java.util.Set<java.lang.Object> objSet28 = properties25.keySet();
        java.lang.String str31 = properties25.getProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=hi!, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "tm.out");
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(objSet28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tm.out" + "'", str31, "tm.out");
    }

    @Test
    public void test00317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00317");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.lang.Object obj7 = properties0.setProperty("", "");
        java.util.Properties properties8 = new java.util.Properties(properties0);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection10 = properties9.values();
        java.util.Properties properties11 = new java.util.Properties(properties9);
        java.util.Enumeration<java.lang.Object> objEnumeration12 = properties11.elements();
        boolean boolean13 = properties11.isEmpty();
        java.util.Properties properties14 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection15 = properties14.values();
        java.util.Properties properties16 = null;
        java.util.Properties properties17 = new java.util.Properties(properties16);
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Properties properties19 = new java.util.Properties(properties18);
        properties19.clear();
        properties17.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties19);
        java.lang.Object obj24 = properties17.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties14.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties17);
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        boolean boolean29 = properties27.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration30 = properties27.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet31 = properties27.entrySet();
        java.util.Properties properties32 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection33 = properties32.values();
        java.util.Properties properties34 = null;
        java.util.Properties properties35 = new java.util.Properties(properties34);
        java.util.Properties properties36 = new java.util.Properties();
        java.util.Properties properties37 = new java.util.Properties(properties36);
        properties37.clear();
        properties35.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties37);
        java.lang.Object obj42 = properties35.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties32.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties35);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setConsoleFileCount((-1));
        java.lang.String str47 = atomikosProperties44.getOutputDir();
        atomikosProperties44.setLogBaseName("tm.out");
        boolean boolean50 = properties35.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties51.setConsoleFileCount(100);
        atomikosProperties51.setAllowSubTransactions(true);
        java.lang.Object obj56 = properties35.remove((java.lang.Object) atomikosProperties51);
        java.util.Set<java.lang.Object> objSet57 = properties35.keySet();
        boolean boolean58 = properties11.replace((java.lang.Object) properties17, (java.lang.Object) objEntrySet31, (java.lang.Object) properties35);
        java.lang.String str60 = properties17.getProperty("{}");
        java.util.Properties properties61 = new java.util.Properties(properties17);
        boolean boolean62 = properties8.equals((java.lang.Object) properties17);
        java.io.OutputStream outputStream63 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.save(outputStream63, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(objCollection10);
        org.junit.Assert.assertNotNull(objEnumeration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objCollection15);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objEnumeration30);
        org.junit.Assert.assertNotNull(objEntrySet31);
        org.junit.Assert.assertNotNull(objCollection33);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(objSet57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test00318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00318");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.util.Properties properties28 = new java.util.Properties();
        java.util.Properties properties29 = new java.util.Properties(properties28);
        properties29.clear();
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        java.lang.Object obj32 = properties3.get((java.lang.Object) properties29);
        properties29.clear();
        java.util.Properties properties34 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str36 = atomikosProperties35.getConsoleFileName();
        java.lang.Object obj38 = properties34.put((java.lang.Object) atomikosProperties35, (java.lang.Object) 0L);
        java.util.Properties properties39 = new java.util.Properties(properties34);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties40.setConsoleFileCount((-1));
        atomikosProperties40.setTransactionManagerUniqueName("tm.out");
        java.lang.Object obj45 = properties34.remove((java.lang.Object) atomikosProperties40);
        boolean boolean46 = atomikosProperties40.isForceShutdownOnVmExit();
        java.lang.Object obj48 = properties29.putIfAbsent((java.lang.Object) boolean46, (java.lang.Object) 500L);
        java.util.Set<java.lang.String> strSet49 = properties29.stringPropertyNames();
        java.util.Enumeration<java.lang.Object> objEnumeration50 = properties29.keys();
        java.io.OutputStream outputStream51 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties29.storeToXML(outputStream51, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tm.out" + "'", str36, "tm.out");
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(objEnumeration50);
    }

    @Test
    public void test00319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00319");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        atomikosProperties4.setOutputDir("hi!");
        boolean boolean12 = atomikosProperties4.isForceShutdownOnVmExit();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test00320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00320");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        boolean boolean10 = atomikosProperties4.isForceShutdownOnVmExit();
        atomikosProperties4.setConsoleFileName("");
        java.lang.String str13 = atomikosProperties4.getService();
        java.util.Properties properties14 = atomikosProperties4.asProperties();
        java.lang.Object obj17 = properties14.setProperty("tmlog", "tm.out");
        java.lang.Object obj19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj20 = properties14.putIfAbsent((java.lang.Object) "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=hi!, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", obj19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNull(obj17);
    }

    @Test
    public void test00321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00321");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet6 = properties5.stringPropertyNames();
        java.util.Properties properties7 = new java.util.Properties(properties5);
        int int8 = properties7.size();
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection10 = properties9.values();
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        java.util.Properties properties13 = new java.util.Properties();
        java.util.Properties properties14 = new java.util.Properties(properties13);
        properties14.clear();
        properties12.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties14);
        java.lang.Object obj19 = properties12.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties12);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.setConsoleFileCount((-1));
        java.lang.String str24 = atomikosProperties21.getOutputDir();
        atomikosProperties21.setLogBaseName("tm.out");
        boolean boolean27 = properties12.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties28.setConsoleFileCount(100);
        atomikosProperties28.setAllowSubTransactions(true);
        java.lang.Object obj33 = properties12.remove((java.lang.Object) atomikosProperties28);
        atomikosProperties28.setAllowSubTransactions(false);
        boolean boolean36 = properties7.containsKey((java.lang.Object) atomikosProperties28);
        properties7.clear();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(objCollection10);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test00322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00322");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        java.lang.Object obj6 = properties0.clone();
        java.util.Set<java.lang.Object> objSet7 = properties0.keySet();
        java.util.Properties properties8 = new java.util.Properties(properties0);
        java.io.Reader reader9 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.load(reader9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(objSet7);
    }

    @Test
    public void test00323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00323");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Set<java.lang.Object> objSet12 = properties3.keySet();
        java.io.OutputStream outputStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.save(outputStream13, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(objSet12);
    }

    @Test
    public void test00324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00324");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        int int3 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setOutputDir("");
        java.lang.String str6 = atomikosProperties0.getConsoleFileName();
        long long7 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.setMaxActives(100);
        int int10 = atomikosProperties0.getConsoleFileCount();
        int int11 = atomikosProperties0.getConsoleFileCount();
        java.lang.String str12 = atomikosProperties0.getOutputDir();
        java.lang.String str13 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setMaxActives(18);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tm.out" + "'", str6, "tm.out");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tm.out" + "'", str13, "tm.out");
    }

    @Test
    public void test00325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00325");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties3.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        properties10.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str14 = atomikosProperties13.getConsoleFileName();
        atomikosProperties13.setOutputDir("hi!");
        int int17 = atomikosProperties13.getConsoleFileLimit();
        java.lang.Object obj18 = properties10.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties13);
        atomikosProperties13.setLogBaseName("tm.out");
        boolean boolean21 = properties3.containsKey((java.lang.Object) "tm.out");
        java.util.Properties properties22 = null;
        java.util.Properties properties23 = new java.util.Properties(properties22);
        java.util.Properties properties24 = new java.util.Properties();
        java.util.Properties properties25 = new java.util.Properties(properties24);
        properties25.clear();
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties25);
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties23);
        java.util.Properties properties29 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str31 = atomikosProperties30.getConsoleFileName();
        java.lang.Object obj33 = properties29.put((java.lang.Object) atomikosProperties30, (java.lang.Object) 0L);
        java.lang.Object obj36 = properties29.setProperty("", "");
        java.util.Properties properties37 = new java.util.Properties(properties29);
        java.lang.Object obj38 = properties37.clone();
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties37);
        java.io.OutputStream outputStream40 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties37.storeToXML(outputStream40, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tm.out" + "'", str14, "tm.out");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tm.out" + "'", str31, "tm.out");
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "{}");
    }

    @Test
    public void test00326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00326");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.setDelay((long) (short) 1);
        recovery0.setRetryInterval(100L);
        long long6 = recovery0.getRetryInterval();
        recovery0.setDelay(0L);
        recovery0.setForgetOrphanedLogEntriesDelay((long) (short) 100);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 86400000L + "'", long1 == 86400000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
    }

    @Test
    public void test00327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00327");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        int int3 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setOutputDir("");
        java.lang.String str6 = atomikosProperties0.getConsoleFileName();
        long long7 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.setMaxActives(100);
        int int10 = atomikosProperties0.getConsoleFileCount();
        int int11 = atomikosProperties0.getConsoleFileCount();
        java.lang.String str12 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setDefaultJtaTimeout(100L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tm.out" + "'", str6, "tm.out");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test00328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00328");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        boolean boolean5 = properties1.contains((java.lang.Object) 5L);
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection7 = properties6.values();
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Properties properties11 = new java.util.Properties(properties10);
        properties11.clear();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.lang.Object obj16 = properties9.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        java.util.Set<java.lang.Object> objSet18 = properties6.keySet();
        java.util.Properties properties19 = new java.util.Properties();
        java.util.Properties properties20 = new java.util.Properties(properties19);
        int int21 = properties20.size();
        boolean boolean22 = properties20.isEmpty();
        java.util.Properties properties23 = new java.util.Properties(properties20);
        java.util.Properties properties24 = new java.util.Properties(properties20);
        int int25 = properties20.size();
        java.util.Properties properties26 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.getConsoleFileName();
        atomikosProperties27.setOutputDir("hi!");
        int int31 = atomikosProperties27.getConsoleFileLimit();
        java.util.Properties properties32 = atomikosProperties27.asProperties();
        java.lang.String str33 = atomikosProperties27.getService();
        atomikosProperties27.setService("hi!");
        java.lang.Object obj37 = properties26.putIfAbsent((java.lang.Object) "hi!", (java.lang.Object) 10L);
        properties20.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        java.util.Properties properties39 = null;
        java.util.Properties properties40 = new java.util.Properties(properties39);
        java.util.Properties properties41 = new java.util.Properties();
        java.util.Properties properties42 = new java.util.Properties(properties41);
        properties42.clear();
        properties40.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties42);
        java.lang.Object obj47 = properties42.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet48 = properties42.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties49.setConsoleFileCount((-1));
        java.lang.String str52 = atomikosProperties49.getOutputDir();
        atomikosProperties49.setLogBaseName("tm.out");
        int int55 = atomikosProperties49.getConsoleFileCount();
        boolean boolean56 = properties42.containsKey((java.lang.Object) atomikosProperties49);
        atomikosProperties49.setConsoleFileCount((int) (byte) -1);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery59 = atomikosProperties49.getRecovery();
        java.util.Properties properties60 = null;
        java.util.Properties properties61 = new java.util.Properties(properties60);
        boolean boolean63 = properties61.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str65 = atomikosProperties64.getTransactionManagerUniqueName();
        atomikosProperties64.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str69 = atomikosProperties68.getConsoleFileName();
        atomikosProperties68.setOutputDir("hi!");
        int int72 = atomikosProperties68.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel73 = atomikosProperties68.getConsoleLogLevel();
        java.lang.Object obj74 = properties61.putIfAbsent((java.lang.Object) atomikosProperties64, (java.lang.Object) atomikosLoggingLevel73);
        java.util.Properties properties75 = new java.util.Properties();
        java.lang.Object obj77 = properties75.get((java.lang.Object) (byte) -1);
        java.util.Properties properties78 = new java.util.Properties(properties75);
        boolean boolean79 = properties61.equals((java.lang.Object) properties75);
        java.util.Enumeration<java.lang.Object> objEnumeration80 = properties61.keys();
        java.lang.Object obj81 = properties20.getOrDefault((java.lang.Object) atomikosProperties49, (java.lang.Object) properties61);
        java.lang.Object obj82 = properties1.getOrDefault((java.lang.Object) properties6, (java.lang.Object) atomikosProperties49);
        java.util.Properties properties83 = atomikosProperties49.asProperties();
        java.lang.String str84 = properties83.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objCollection7);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objSet18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tm.out" + "'", str28, "tm.out");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(recovery59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "tm.out" + "'", str69, "tm.out");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel73 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel73.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objEnumeration80);
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertNotNull(obj82);
        org.junit.Assert.assertNotNull(properties83);
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str84, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
    }

    @Test
    public void test00329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00329");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        atomikosProperties0.setDefaultJtaTimeout(1L);
        atomikosProperties0.setForceShutdownOnVmExit(false);
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        java.lang.String str12 = properties9.getProperty("{10=10.0}", "{hi!=}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{hi!=}" + "'", str12, "{hi!=}");
    }

    @Test
    public void test00330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00330");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        boolean boolean10 = atomikosProperties4.isForceShutdownOnVmExit();
        atomikosProperties4.setConsoleFileName("");
        java.lang.String str13 = atomikosProperties4.getService();
        atomikosProperties4.setForceShutdownOnVmExit(true);
        boolean boolean16 = atomikosProperties4.isForceShutdownOnVmExit();
        atomikosProperties4.setSerialJtaTransactions(false);
        boolean boolean19 = atomikosProperties4.isForceShutdownOnVmExit();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test00331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00331");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Properties properties8 = new java.util.Properties();
        java.util.Properties properties9 = new java.util.Properties(properties8);
        properties9.clear();
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        java.lang.Object obj14 = properties9.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        boolean boolean15 = properties5.equals(obj14);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet16 = properties5.entrySet();
        int int17 = properties5.size();
        java.io.InputStream inputStream18 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.loadFromXML(inputStream18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objEntrySet16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 19 + "'", int17 == 19);
    }

    @Test
    public void test00332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00332");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean5 = atomikosProperties0.isAllowSubTransactions();
        int int6 = atomikosProperties0.getConsoleFileLimit();
        java.lang.String str7 = atomikosProperties0.getTransactionManagerUniqueName();
        boolean boolean8 = atomikosProperties0.isSerialJtaTransactions();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test00333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00333");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery4 = atomikosProperties0.getRecovery();
        recovery4.setMaxRetries((int) (short) 0);
        recovery4.setRetryInterval((long) (short) 0);
        long long9 = recovery4.getDelay();
        java.lang.Class<?> wildcardClass10 = recovery4.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertNotNull(recovery4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test00334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00334");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel2 = atomikosProperties0.getConsoleLogLevel();
        atomikosProperties0.setMaxTimeout(1L);
        int int5 = atomikosProperties0.getConsoleFileLimit();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel2 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel2.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test00335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00335");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties1.keys();
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection6 = properties5.values();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        properties10.clear();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.lang.Object obj15 = properties8.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setConsoleFileCount((-1));
        java.lang.String str20 = atomikosProperties17.getOutputDir();
        atomikosProperties17.setLogBaseName("tm.out");
        boolean boolean23 = properties8.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.setConsoleFileCount(100);
        atomikosProperties24.setAllowSubTransactions(true);
        java.lang.Object obj29 = properties8.remove((java.lang.Object) atomikosProperties24);
        atomikosProperties24.setAllowSubTransactions(false);
        atomikosProperties24.setSerialJtaTransactions(true);
        boolean boolean34 = properties1.containsKey((java.lang.Object) atomikosProperties24);
        java.util.Properties properties35 = new java.util.Properties(properties1);
        java.lang.Object obj38 = properties35.setProperty("{}", "hi!");
        java.lang.Object obj39 = properties35.clone();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "{{}=hi!}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "{{}=hi!}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "{{}=hi!}");
    }

    @Test
    public void test00336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00336");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet6 = properties5.stringPropertyNames();
        java.util.Properties properties7 = new java.util.Properties(properties5);
        java.io.OutputStream outputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.store(outputStream8, "{10=10.0}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(strSet6);
    }

    @Test
    public void test00337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00337");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str2 = properties0.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str4 = atomikosProperties3.getTransactionManagerUniqueName();
        boolean boolean5 = atomikosProperties3.isForceShutdownOnVmExit();
        java.util.Properties properties6 = atomikosProperties3.asProperties();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties6);
        java.io.InputStream inputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.load(inputStream8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(properties6);
    }

    @Test
    public void test00338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00338");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties1.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        boolean boolean9 = properties1.isEmpty();
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection11 = properties10.values();
        java.util.Properties properties12 = null;
        java.util.Properties properties13 = new java.util.Properties(properties12);
        java.util.Properties properties14 = new java.util.Properties();
        java.util.Properties properties15 = new java.util.Properties(properties14);
        properties15.clear();
        properties13.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.lang.Object obj20 = properties13.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties10.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties13);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.setConsoleFileCount((-1));
        java.lang.String str25 = atomikosProperties22.getOutputDir();
        atomikosProperties22.setLogBaseName("tm.out");
        boolean boolean28 = properties13.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setConsoleFileCount(100);
        atomikosProperties29.setAllowSubTransactions(true);
        java.lang.Object obj34 = properties13.remove((java.lang.Object) atomikosProperties29);
        java.util.Set<java.lang.Object> objSet35 = properties13.keySet();
        java.util.Properties properties36 = null;
        java.util.Properties properties37 = new java.util.Properties(properties36);
        java.util.Properties properties38 = new java.util.Properties();
        java.util.Properties properties39 = new java.util.Properties(properties38);
        properties39.clear();
        properties37.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties39);
        java.lang.Object obj42 = properties13.get((java.lang.Object) properties39);
        properties39.clear();
        java.util.Properties properties44 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str46 = atomikosProperties45.getConsoleFileName();
        java.lang.Object obj48 = properties44.put((java.lang.Object) atomikosProperties45, (java.lang.Object) 0L);
        java.util.Properties properties49 = new java.util.Properties(properties44);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties50.setConsoleFileCount((-1));
        atomikosProperties50.setTransactionManagerUniqueName("tm.out");
        java.lang.Object obj55 = properties44.remove((java.lang.Object) atomikosProperties50);
        boolean boolean56 = atomikosProperties50.isForceShutdownOnVmExit();
        java.lang.Object obj58 = properties39.putIfAbsent((java.lang.Object) boolean56, (java.lang.Object) 500L);
        java.util.Collection<java.lang.Object> objCollection59 = properties39.values();
        boolean boolean60 = properties1.containsValue((java.lang.Object) objCollection59);
        java.lang.Object obj61 = properties1.clone();
        java.util.Map<java.lang.Object, java.lang.Object> objMap62 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.putAll(objMap62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(objSet35);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "tm.out" + "'", str46, "tm.out");
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNotNull(objCollection59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals(obj61.toString(), "{10=10.0}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "{10=10.0}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "{10=10.0}");
    }

    @Test
    public void test00339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00339");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet3 = properties1.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties4.setConsoleFileCount(100);
        atomikosProperties4.setAllowSubTransactions(true);
        boolean boolean9 = atomikosProperties4.isForceShutdownOnVmExit();
        int int10 = atomikosProperties4.getConsoleFileCount();
        java.util.Properties properties11 = atomikosProperties4.asProperties();
        boolean boolean12 = properties1.equals((java.lang.Object) atomikosProperties4);
        java.util.Set<java.lang.String> strSet13 = properties1.stringPropertyNames();
        java.util.Properties properties14 = null;
        java.util.Properties properties15 = new java.util.Properties(properties14);
        java.util.Properties properties16 = new java.util.Properties();
        java.util.Properties properties17 = new java.util.Properties(properties16);
        properties17.clear();
        properties15.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties17);
        java.lang.Object obj22 = properties15.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.io.OutputStream outputStream24 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties15.store(outputStream24, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=32, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(objEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNull(obj22);
    }

    @Test
    public void test00340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00340");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Set<java.lang.Object> objSet4 = properties1.keySet();
        java.util.Properties properties5 = null;
        java.util.Properties properties6 = new java.util.Properties(properties5);
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Properties properties8 = new java.util.Properties(properties7);
        properties8.clear();
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.getConsoleFileName();
        atomikosProperties12.setOutputDir("hi!");
        int int16 = atomikosProperties12.getConsoleFileLimit();
        java.util.Properties properties17 = atomikosProperties12.asProperties();
        boolean boolean18 = properties8.containsValue((java.lang.Object) atomikosProperties12);
        boolean boolean19 = properties8.isEmpty();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Properties properties21 = new java.util.Properties(properties1);
        java.util.Enumeration<java.lang.Object> objEnumeration22 = properties1.keys();
        java.io.InputStream inputStream23 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.loadFromXML(inputStream23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objSet4);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tm.out" + "'", str13, "tm.out");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objEnumeration22);
    }

    @Test
    public void test00341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00341");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.setDelay((long) (short) 1);
        recovery0.setMaxRetries((int) (byte) 10);
        recovery0.setDelay((-1L));
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 86400000L + "'", long1 == 86400000L);
    }

    @Test
    public void test00342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00342");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties1.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        boolean boolean9 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties1.keys();
        java.io.PrintWriter printWriter11 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printWriter11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objEnumeration10);
    }

    @Test
    public void test00343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00343");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties3.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet9 = properties3.stringPropertyNames();
        java.lang.Object obj10 = new java.lang.Object();
        java.lang.Object obj11 = properties3.get(obj10);
        java.util.Collection<java.lang.Object> objCollection12 = properties3.values();
        java.util.Properties properties13 = new java.util.Properties(properties3);
        java.io.Reader reader14 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.load(reader14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(objCollection12);
    }

    @Test
    public void test00344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00344");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties3.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet9 = properties3.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setConsoleFileCount((-1));
        java.lang.String str13 = atomikosProperties10.getOutputDir();
        atomikosProperties10.setLogBaseName("tm.out");
        int int16 = atomikosProperties10.getConsoleFileCount();
        boolean boolean17 = properties3.containsKey((java.lang.Object) atomikosProperties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long19 = recovery18.getForgetOrphanedLogEntriesDelay();
        recovery18.setDelay((long) (short) 1);
        recovery18.setRetryInterval(100L);
        java.lang.Object obj24 = properties3.get((java.lang.Object) 100L);
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        boolean boolean28 = properties26.containsValue((java.lang.Object) 10L);
        java.util.Collection<java.lang.Object> objCollection29 = properties26.values();
        java.lang.String str31 = properties26.getProperty("hi!");
        java.util.Set<java.lang.String> strSet32 = properties26.stringPropertyNames();
        java.util.Properties properties33 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection34 = properties33.values();
        java.util.Properties properties35 = new java.util.Properties(properties33);
        java.util.Enumeration<java.lang.Object> objEnumeration36 = properties35.elements();
        java.lang.String str38 = properties35.getProperty("hi!");
        java.lang.Object obj39 = properties3.getOrDefault((java.lang.Object) strSet32, (java.lang.Object) "hi!");
        java.util.Properties properties40 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str42 = atomikosProperties41.getConsoleFileName();
        java.lang.Object obj44 = properties40.put((java.lang.Object) atomikosProperties41, (java.lang.Object) 0L);
        java.lang.Object obj47 = properties40.setProperty("", "");
        java.util.Properties properties48 = new java.util.Properties(properties40);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str50 = atomikosProperties49.getConsoleFileName();
        atomikosProperties49.setOutputDir("hi!");
        int int53 = atomikosProperties49.getConsoleFileLimit();
        java.util.Properties properties54 = atomikosProperties49.asProperties();
        java.util.Properties properties55 = new java.util.Properties();
        java.util.Properties properties56 = new java.util.Properties(properties55);
        properties56.clear();
        properties54.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties56);
        java.util.Properties properties59 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str61 = atomikosProperties60.getConsoleFileName();
        java.lang.Object obj63 = properties59.put((java.lang.Object) atomikosProperties60, (java.lang.Object) 0L);
        java.lang.Object obj66 = properties59.setProperty("", "");
        java.util.Properties properties67 = new java.util.Properties(properties59);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str69 = atomikosProperties68.getConsoleFileName();
        atomikosProperties68.setOutputDir("hi!");
        int int72 = atomikosProperties68.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel73 = atomikosProperties68.getConsoleLogLevel();
        java.lang.Object obj74 = properties54.getOrDefault((java.lang.Object) properties59, (java.lang.Object) atomikosProperties68);
        boolean boolean75 = properties40.contains((java.lang.Object) properties59);
        boolean boolean76 = properties3.containsValue((java.lang.Object) properties59);
        java.io.OutputStream outputStream77 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties59.storeToXML(outputStream77, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=100}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 86400000L + "'", long19 == 86400000L);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objCollection29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(objCollection34);
        org.junit.Assert.assertNotNull(objEnumeration36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + obj39 + "' != '" + "hi!" + "'", obj39, "hi!");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "tm.out" + "'", str42, "tm.out");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tm.out" + "'", str50, "tm.out");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(properties54);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "tm.out" + "'", str61, "tm.out");
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "tm.out" + "'", str69, "tm.out");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel73 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel73.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test00345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00345");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        java.lang.Object obj6 = properties0.clone();
        java.util.Set<java.lang.Object> objSet7 = properties0.keySet();
        java.util.Properties properties8 = new java.util.Properties(properties0);
        java.io.OutputStream outputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream9, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(objSet7);
    }

    @Test
    public void test00346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00346");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str2 = properties0.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str4 = atomikosProperties3.getTransactionManagerUniqueName();
        boolean boolean5 = atomikosProperties3.isForceShutdownOnVmExit();
        java.util.Properties properties6 = atomikosProperties3.asProperties();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties6);
        java.util.Set<java.lang.String> strSet8 = properties0.stringPropertyNames();
        java.lang.Object obj9 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean10 = properties0.containsKey(obj9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNotNull(strSet8);
    }

    @Test
    public void test00347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00347");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties8.getConsoleLogLevel();
        java.lang.Object obj14 = properties1.putIfAbsent((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosLoggingLevel13);
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.Object obj17 = properties15.get((java.lang.Object) (byte) -1);
        java.util.Properties properties18 = new java.util.Properties(properties15);
        boolean boolean19 = properties1.equals((java.lang.Object) properties15);
        java.util.Properties properties20 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.getConsoleFileName();
        java.lang.Object obj24 = properties20.put((java.lang.Object) atomikosProperties21, (java.lang.Object) 0L);
        java.util.Properties properties25 = new java.util.Properties(properties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setConsoleFileCount((-1));
        atomikosProperties26.setTransactionManagerUniqueName("tm.out");
        java.lang.Object obj31 = properties20.remove((java.lang.Object) atomikosProperties26);
        boolean boolean32 = atomikosProperties26.isForceShutdownOnVmExit();
        java.util.Properties properties33 = atomikosProperties26.asProperties();
        java.util.Properties properties34 = null;
        java.util.Properties properties35 = new java.util.Properties(properties34);
        boolean boolean37 = properties35.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str39 = atomikosProperties38.getTransactionManagerUniqueName();
        atomikosProperties38.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str43 = atomikosProperties42.getConsoleFileName();
        atomikosProperties42.setOutputDir("hi!");
        int int46 = atomikosProperties42.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel47 = atomikosProperties42.getConsoleLogLevel();
        java.lang.Object obj48 = properties35.putIfAbsent((java.lang.Object) atomikosProperties38, (java.lang.Object) atomikosLoggingLevel47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str50 = atomikosProperties49.getConsoleFileName();
        atomikosProperties49.setOutputDir("hi!");
        int int53 = atomikosProperties49.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel54 = atomikosProperties49.getConsoleLogLevel();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery55 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long56 = recovery55.getForgetOrphanedLogEntriesDelay();
        java.util.Properties properties57 = new java.util.Properties();
        java.util.Properties properties58 = new java.util.Properties(properties57);
        properties58.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str62 = atomikosProperties61.getConsoleFileName();
        atomikosProperties61.setOutputDir("hi!");
        int int65 = atomikosProperties61.getConsoleFileLimit();
        java.lang.Object obj66 = properties58.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties61);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel67 = atomikosProperties61.getConsoleLogLevel();
        java.lang.String str68 = atomikosProperties61.getTransactionManagerUniqueName();
        atomikosProperties61.setThreadedTwoPhaseCommit(false);
        boolean boolean71 = properties35.replace((java.lang.Object) atomikosProperties49, (java.lang.Object) recovery55, (java.lang.Object) false);
        java.lang.Object obj72 = properties15.replace((java.lang.Object) atomikosProperties26, (java.lang.Object) properties35);
        java.util.Enumeration<java.lang.Object> objEnumeration73 = properties15.keys();
        java.lang.Object obj76 = properties15.setProperty("tm.out", "{10=10.0}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tm.out" + "'", str22, "tm.out");
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tm.out" + "'", str43, "tm.out");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel47 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel47.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tm.out" + "'", str50, "tm.out");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel54 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel54.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 86400000L + "'", long56 == 86400000L);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tm.out" + "'", str62, "tm.out");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel67 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel67.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertNotNull(objEnumeration73);
        org.junit.Assert.assertNull(obj76);
    }

    @Test
    public void test00348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00348");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Properties properties6 = new java.util.Properties(properties5);
        properties6.clear();
        properties4.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties6);
        java.lang.Object obj11 = properties6.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet12 = properties6.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.setConsoleFileCount((-1));
        java.lang.String str16 = atomikosProperties13.getOutputDir();
        atomikosProperties13.setLogBaseName("tm.out");
        int int19 = atomikosProperties13.getConsoleFileCount();
        boolean boolean20 = properties6.containsKey((java.lang.Object) atomikosProperties13);
        boolean boolean21 = properties1.containsValue((java.lang.Object) atomikosProperties13);
        java.io.OutputStream outputStream22 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream22, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=100}", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=100}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test00349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00349");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.util.Properties properties28 = new java.util.Properties();
        java.util.Properties properties29 = new java.util.Properties(properties28);
        properties29.clear();
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        java.lang.Object obj32 = properties3.get((java.lang.Object) properties29);
        properties29.clear();
        java.util.Properties properties34 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str36 = atomikosProperties35.getConsoleFileName();
        java.lang.Object obj38 = properties34.put((java.lang.Object) atomikosProperties35, (java.lang.Object) 0L);
        java.util.Properties properties39 = new java.util.Properties(properties34);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties40.setConsoleFileCount((-1));
        atomikosProperties40.setTransactionManagerUniqueName("tm.out");
        java.lang.Object obj45 = properties34.remove((java.lang.Object) atomikosProperties40);
        boolean boolean46 = atomikosProperties40.isForceShutdownOnVmExit();
        java.lang.Object obj48 = properties29.putIfAbsent((java.lang.Object) boolean46, (java.lang.Object) 500L);
        java.util.Properties properties49 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection50 = properties49.values();
        java.util.Properties properties51 = new java.util.Properties(properties49);
        java.util.Enumeration<java.lang.Object> objEnumeration52 = properties49.keys();
        boolean boolean53 = properties29.containsValue((java.lang.Object) properties49);
        java.util.Properties properties54 = new java.util.Properties(properties49);
        java.util.Properties properties55 = new java.util.Properties(properties54);
        java.io.PrintWriter printWriter56 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties54.list(printWriter56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tm.out" + "'", str36, "tm.out");
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(objCollection50);
        org.junit.Assert.assertNotNull(objEnumeration52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test00350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00350");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        boolean boolean5 = properties1.contains((java.lang.Object) 5L);
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection7 = properties6.values();
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Properties properties11 = new java.util.Properties(properties10);
        properties11.clear();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.lang.Object obj16 = properties9.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        java.util.Set<java.lang.Object> objSet18 = properties6.keySet();
        java.util.Properties properties19 = new java.util.Properties();
        java.util.Properties properties20 = new java.util.Properties(properties19);
        int int21 = properties20.size();
        boolean boolean22 = properties20.isEmpty();
        java.util.Properties properties23 = new java.util.Properties(properties20);
        java.util.Properties properties24 = new java.util.Properties(properties20);
        int int25 = properties20.size();
        java.util.Properties properties26 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.getConsoleFileName();
        atomikosProperties27.setOutputDir("hi!");
        int int31 = atomikosProperties27.getConsoleFileLimit();
        java.util.Properties properties32 = atomikosProperties27.asProperties();
        java.lang.String str33 = atomikosProperties27.getService();
        atomikosProperties27.setService("hi!");
        java.lang.Object obj37 = properties26.putIfAbsent((java.lang.Object) "hi!", (java.lang.Object) 10L);
        properties20.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        java.util.Properties properties39 = null;
        java.util.Properties properties40 = new java.util.Properties(properties39);
        java.util.Properties properties41 = new java.util.Properties();
        java.util.Properties properties42 = new java.util.Properties(properties41);
        properties42.clear();
        properties40.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties42);
        java.lang.Object obj47 = properties42.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet48 = properties42.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties49.setConsoleFileCount((-1));
        java.lang.String str52 = atomikosProperties49.getOutputDir();
        atomikosProperties49.setLogBaseName("tm.out");
        int int55 = atomikosProperties49.getConsoleFileCount();
        boolean boolean56 = properties42.containsKey((java.lang.Object) atomikosProperties49);
        atomikosProperties49.setConsoleFileCount((int) (byte) -1);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery59 = atomikosProperties49.getRecovery();
        java.util.Properties properties60 = null;
        java.util.Properties properties61 = new java.util.Properties(properties60);
        boolean boolean63 = properties61.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str65 = atomikosProperties64.getTransactionManagerUniqueName();
        atomikosProperties64.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str69 = atomikosProperties68.getConsoleFileName();
        atomikosProperties68.setOutputDir("hi!");
        int int72 = atomikosProperties68.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel73 = atomikosProperties68.getConsoleLogLevel();
        java.lang.Object obj74 = properties61.putIfAbsent((java.lang.Object) atomikosProperties64, (java.lang.Object) atomikosLoggingLevel73);
        java.util.Properties properties75 = new java.util.Properties();
        java.lang.Object obj77 = properties75.get((java.lang.Object) (byte) -1);
        java.util.Properties properties78 = new java.util.Properties(properties75);
        boolean boolean79 = properties61.equals((java.lang.Object) properties75);
        java.util.Enumeration<java.lang.Object> objEnumeration80 = properties61.keys();
        java.lang.Object obj81 = properties20.getOrDefault((java.lang.Object) atomikosProperties49, (java.lang.Object) properties61);
        java.lang.Object obj82 = properties1.getOrDefault((java.lang.Object) properties6, (java.lang.Object) atomikosProperties49);
        java.lang.String str85 = properties6.getProperty("{hi!=}", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objCollection7);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objSet18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tm.out" + "'", str28, "tm.out");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(recovery59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "tm.out" + "'", str69, "tm.out");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel73 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel73.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objEnumeration80);
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertNotNull(obj82);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str85, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
    }

    @Test
    public void test00351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00351");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str11 = atomikosProperties10.getConsoleFileName();
        atomikosProperties10.setOutputDir("hi!");
        int int14 = atomikosProperties10.getConsoleFileLimit();
        java.util.Properties properties15 = atomikosProperties10.asProperties();
        java.lang.String str16 = atomikosProperties10.getService();
        int int17 = atomikosProperties10.getMaxActives();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str19 = atomikosProperties18.getConsoleFileName();
        atomikosProperties18.setOutputDir("hi!");
        int int22 = atomikosProperties18.getConsoleFileLimit();
        java.util.Properties properties23 = atomikosProperties18.asProperties();
        java.util.Properties properties24 = new java.util.Properties();
        java.util.Properties properties25 = new java.util.Properties(properties24);
        properties25.clear();
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties25);
        java.util.Enumeration<?> wildcardEnumeration28 = properties25.propertyNames();
        java.lang.Object obj29 = properties1.getOrDefault((java.lang.Object) int17, (java.lang.Object) properties25);
        java.io.OutputStream outputStream30 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties25.save(outputStream30, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tm.out" + "'", str11, "tm.out");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tm.out" + "'", str19, "tm.out");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertNotNull(wildcardEnumeration28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{}");
    }

    @Test
    public void test00352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00352");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setConsoleFileCount((-1));
        atomikosProperties6.setTransactionManagerUniqueName("tm.out");
        java.lang.Object obj11 = properties0.remove((java.lang.Object) atomikosProperties6);
        java.util.Properties properties12 = new java.util.Properties(properties0);
        java.io.OutputStream outputStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream13, "{hi!=}", "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test00353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00353");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.lang.Object obj3 = null;
        boolean boolean4 = properties0.equals(obj3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties0.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str8 = atomikosProperties7.getTransactionManagerUniqueName();
        boolean boolean9 = atomikosProperties7.isForceShutdownOnVmExit();
        atomikosProperties7.setAllowSubTransactions(false);
        atomikosProperties7.setLogBaseName("");
        java.lang.Object obj14 = properties0.remove((java.lang.Object) atomikosProperties7);
        atomikosProperties7.setLogBaseDir("{=hi!}");
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj14);
    }

    @Test
    public void test00354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00354");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        boolean boolean4 = properties2.isEmpty();
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection6 = properties5.values();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        properties10.clear();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.lang.Object obj15 = properties8.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        boolean boolean20 = properties18.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties18.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet22 = properties18.entrySet();
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection24 = properties23.values();
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        java.util.Properties properties27 = new java.util.Properties();
        java.util.Properties properties28 = new java.util.Properties(properties27);
        properties28.clear();
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        java.lang.Object obj33 = properties26.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setConsoleFileCount((-1));
        java.lang.String str38 = atomikosProperties35.getOutputDir();
        atomikosProperties35.setLogBaseName("tm.out");
        boolean boolean41 = properties26.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties42.setConsoleFileCount(100);
        atomikosProperties42.setAllowSubTransactions(true);
        java.lang.Object obj47 = properties26.remove((java.lang.Object) atomikosProperties42);
        java.util.Set<java.lang.Object> objSet48 = properties26.keySet();
        boolean boolean49 = properties2.replace((java.lang.Object) properties8, (java.lang.Object) objEntrySet22, (java.lang.Object) properties26);
        java.lang.String str51 = properties8.getProperty("{}");
        java.util.Properties properties52 = new java.util.Properties(properties8);
        java.util.Properties properties53 = new java.util.Properties(properties52);
        java.util.Set<java.lang.String> strSet54 = properties53.stringPropertyNames();
        boolean boolean55 = properties53.isEmpty();
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNotNull(objEntrySet22);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(objSet48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test00355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00355");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Properties properties25 = new java.util.Properties(properties3);
        java.lang.String str27 = properties25.getProperty("");
        java.util.Set<java.lang.Object> objSet28 = properties25.keySet();
        java.util.Properties properties29 = null;
        java.util.Properties properties30 = new java.util.Properties(properties29);
        java.util.Collection<java.lang.Object> objCollection31 = properties30.values();
        java.util.Properties properties32 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection33 = properties32.values();
        java.util.Properties properties34 = null;
        java.util.Properties properties35 = new java.util.Properties(properties34);
        java.util.Properties properties36 = new java.util.Properties();
        java.util.Properties properties37 = new java.util.Properties(properties36);
        properties37.clear();
        properties35.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties37);
        java.lang.Object obj42 = properties35.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties32.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties35);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setConsoleFileCount((-1));
        java.lang.String str47 = atomikosProperties44.getOutputDir();
        atomikosProperties44.setLogBaseName("tm.out");
        boolean boolean50 = properties35.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties51.setConsoleFileCount(100);
        atomikosProperties51.setAllowSubTransactions(true);
        java.lang.Object obj56 = properties35.remove((java.lang.Object) atomikosProperties51);
        java.util.Set<java.lang.Object> objSet57 = properties35.keySet();
        int int58 = properties35.size();
        boolean boolean60 = properties25.replace((java.lang.Object) properties30, (java.lang.Object) properties35, (java.lang.Object) 86400000L);
        java.io.OutputStream outputStream61 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties25.store(outputStream61, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(objSet28);
        org.junit.Assert.assertNotNull(objCollection31);
        org.junit.Assert.assertNotNull(objCollection33);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(objSet57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test00356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00356");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        atomikosProperties4.setLogBaseName("tm.out");
        atomikosProperties4.setForceShutdownOnVmExit(false);
        int int14 = atomikosProperties4.getMaxActives();
        java.util.Properties properties15 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection16 = properties15.values();
        java.util.Properties properties17 = new java.util.Properties(properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties17.elements();
        boolean boolean19 = properties17.isEmpty();
        java.util.Properties properties20 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection21 = properties20.values();
        java.util.Properties properties22 = null;
        java.util.Properties properties23 = new java.util.Properties(properties22);
        java.util.Properties properties24 = new java.util.Properties();
        java.util.Properties properties25 = new java.util.Properties(properties24);
        properties25.clear();
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties25);
        java.lang.Object obj30 = properties23.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties20.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties23);
        java.util.Properties properties32 = null;
        java.util.Properties properties33 = new java.util.Properties(properties32);
        boolean boolean35 = properties33.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration36 = properties33.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet37 = properties33.entrySet();
        java.util.Properties properties38 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection39 = properties38.values();
        java.util.Properties properties40 = null;
        java.util.Properties properties41 = new java.util.Properties(properties40);
        java.util.Properties properties42 = new java.util.Properties();
        java.util.Properties properties43 = new java.util.Properties(properties42);
        properties43.clear();
        properties41.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties43);
        java.lang.Object obj48 = properties41.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties38.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties41);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties50.setConsoleFileCount((-1));
        java.lang.String str53 = atomikosProperties50.getOutputDir();
        atomikosProperties50.setLogBaseName("tm.out");
        boolean boolean56 = properties41.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties57.setConsoleFileCount(100);
        atomikosProperties57.setAllowSubTransactions(true);
        java.lang.Object obj62 = properties41.remove((java.lang.Object) atomikosProperties57);
        java.util.Set<java.lang.Object> objSet63 = properties41.keySet();
        boolean boolean64 = properties17.replace((java.lang.Object) properties23, (java.lang.Object) objEntrySet37, (java.lang.Object) properties41);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str66 = atomikosProperties65.getConsoleFileName();
        atomikosProperties65.setOutputDir("hi!");
        int int69 = atomikosProperties65.getConsoleFileLimit();
        java.util.Properties properties70 = atomikosProperties65.asProperties();
        java.util.Properties properties71 = new java.util.Properties();
        java.util.Properties properties72 = new java.util.Properties(properties71);
        properties72.clear();
        properties70.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties72);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties75 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str76 = atomikosProperties75.getConsoleFileName();
        atomikosProperties75.setOutputDir("hi!");
        int int79 = atomikosProperties75.getConsoleFileLimit();
        java.util.Properties properties80 = atomikosProperties75.asProperties();
        java.lang.String str81 = atomikosProperties75.getService();
        atomikosProperties75.setService("hi!");
        atomikosProperties75.setConsoleFileName("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery86 = atomikosProperties75.getRecovery();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties87 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str88 = atomikosProperties87.getConsoleFileName();
        atomikosProperties87.setOutputDir("hi!");
        java.lang.String str91 = atomikosProperties87.getOutputDir();
        boolean boolean92 = properties41.replace((java.lang.Object) properties72, (java.lang.Object) atomikosProperties75, (java.lang.Object) atomikosProperties87);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel93 = atomikosProperties75.getConsoleLogLevel();
        atomikosProperties4.setConsoleLogLevel(atomikosLoggingLevel93);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 50 + "'", int14 == 50);
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objCollection21);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objEnumeration36);
        org.junit.Assert.assertNotNull(objEntrySet37);
        org.junit.Assert.assertNotNull(objCollection39);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNotNull(objSet63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "tm.out" + "'", str66, "tm.out");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(properties70);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "tm.out" + "'", str76, "tm.out");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(properties80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(recovery86);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "tm.out" + "'", str88, "tm.out");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "hi!" + "'", str91, "hi!");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel93 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel93.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test00357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00357");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str11 = atomikosProperties10.getConsoleFileName();
        long long12 = atomikosProperties10.getMaxTimeout();
        java.util.Properties properties13 = atomikosProperties10.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery14 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long15 = recovery14.getForgetOrphanedLogEntriesDelay();
        recovery14.setDelay((long) (short) 1);
        recovery14.setRetryInterval(100L);
        boolean boolean20 = properties13.containsValue((java.lang.Object) 100L);
        java.util.Properties properties21 = new java.util.Properties();
        java.util.Properties properties22 = new java.util.Properties(properties21);
        int int23 = properties22.size();
        boolean boolean24 = properties22.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties22.elements();
        java.util.Properties properties26 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection27 = properties26.values();
        java.util.Properties properties28 = new java.util.Properties(properties26);
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties28.elements();
        boolean boolean30 = properties28.isEmpty();
        boolean boolean31 = properties22.containsValue((java.lang.Object) boolean30);
        java.util.Properties properties32 = new java.util.Properties(properties22);
        java.util.Enumeration<?> wildcardEnumeration33 = properties32.propertyNames();
        boolean boolean34 = properties13.containsKey((java.lang.Object) properties32);
        java.lang.Object obj35 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj36 = properties1.putIfAbsent((java.lang.Object) boolean34, obj35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tm.out" + "'", str11, "tm.out");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 300000L + "'", long12 == 300000L);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 86400000L + "'", long15 == 86400000L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNotNull(objCollection27);
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test00358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00358");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setConsoleFileCount((-1));
        atomikosProperties6.setTransactionManagerUniqueName("tm.out");
        java.lang.Object obj11 = properties0.remove((java.lang.Object) atomikosProperties6);
        boolean boolean12 = atomikosProperties6.isForceShutdownOnVmExit();
        java.util.Properties properties13 = atomikosProperties6.asProperties();
        java.lang.String str14 = properties13.toString();
        java.io.Writer writer15 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties13.store(writer15, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(properties13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str14, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
    }

    @Test
    public void test00359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00359");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean5 = atomikosProperties0.isForceShutdownOnVmExit();
        int int6 = atomikosProperties0.getConsoleFileCount();
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str10 = atomikosProperties9.getConsoleFileName();
        atomikosProperties9.setOutputDir("hi!");
        int int13 = atomikosProperties9.getConsoleFileLimit();
        java.util.Properties properties14 = atomikosProperties9.asProperties();
        java.lang.String str15 = atomikosProperties9.getService();
        atomikosProperties9.setService("hi!");
        atomikosProperties9.setConsoleFileName("tm.out");
        java.lang.String str20 = atomikosProperties9.getTransactionManagerUniqueName();
        long long21 = atomikosProperties9.getMaxTimeout();
        int int22 = atomikosProperties9.getConsoleFileLimit();
        java.lang.Object obj23 = properties8.get((java.lang.Object) atomikosProperties9);
        java.io.OutputStream outputStream24 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.store(outputStream24, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tm.out" + "'", str10, "tm.out");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 300000L + "'", long21 == 300000L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNull(obj23);
    }

    @Test
    public void test00360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00360");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        java.lang.String str3 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseName("tm.out");
        atomikosProperties0.setLogBaseDir("tm.out");
        atomikosProperties0.setSerialJtaTransactions(false);
        boolean boolean10 = atomikosProperties0.isThreadedTwoPhaseCommit();
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        java.io.InputStream inputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties11.load(inputStream12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(properties11);
    }

    @Test
    public void test00361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00361");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        java.util.Properties properties27 = new java.util.Properties();
        java.util.Properties properties28 = new java.util.Properties(properties27);
        properties28.clear();
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        java.lang.Object obj33 = properties26.setProperty("", "hi!");
        java.util.Set<java.lang.Object> objSet34 = properties26.keySet();
        boolean boolean35 = properties26.isEmpty();
        java.lang.Object obj36 = properties3.remove((java.lang.Object) boolean35);
        java.util.Collection<java.lang.Object> objCollection37 = properties3.values();
        java.lang.String str40 = properties3.getProperty("{10=10.0}", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=100}");
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(objSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(objCollection37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=100}" + "'", str40, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=100}");
    }

    @Test
    public void test00362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00362");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Properties properties7 = new java.util.Properties(properties6);
        properties7.clear();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties5.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long12 = recovery11.getForgetOrphanedLogEntriesDelay();
        recovery11.setForgetOrphanedLogEntriesDelay((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery15 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long16 = recovery15.getForgetOrphanedLogEntriesDelay();
        recovery15.setDelay((long) (short) 1);
        recovery15.setMaxRetries((int) (byte) 10);
        java.lang.Object obj21 = properties5.getOrDefault((java.lang.Object) (byte) 100, (java.lang.Object) (byte) 10);
        java.io.OutputStream outputStream22 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.save(outputStream22, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(objEntrySet10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 86400000L + "'", long12 == 86400000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 86400000L + "'", long16 == 86400000L);
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + (byte) 10 + "'", obj21, (byte) 10);
    }

    @Test
    public void test00363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00363");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setConsoleFileCount(100);
        atomikosProperties6.setAllowSubTransactions(true);
        boolean boolean11 = atomikosProperties6.isForceShutdownOnVmExit();
        boolean boolean12 = properties5.contains((java.lang.Object) atomikosProperties6);
        java.util.Properties properties13 = new java.util.Properties();
        java.util.Properties properties14 = new java.util.Properties(properties13);
        properties14.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.getConsoleFileName();
        atomikosProperties17.setOutputDir("hi!");
        int int21 = atomikosProperties17.getConsoleFileLimit();
        java.lang.Object obj22 = properties14.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties17);
        boolean boolean23 = atomikosProperties17.isForceShutdownOnVmExit();
        atomikosProperties17.setConsoleFileName("");
        java.lang.String str26 = atomikosProperties17.getService();
        atomikosProperties17.setTransactionManagerUniqueName("");
        java.lang.Object obj29 = properties5.get((java.lang.Object) "");
        java.util.Properties properties30 = new java.util.Properties();
        java.util.Properties properties31 = new java.util.Properties(properties30);
        int int32 = properties31.size();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties31);
        java.util.Properties properties34 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str36 = atomikosProperties35.getConsoleFileName();
        java.lang.Object obj38 = properties34.put((java.lang.Object) atomikosProperties35, (java.lang.Object) 0L);
        java.util.Properties properties39 = new java.util.Properties(properties34);
        java.lang.Object obj40 = properties34.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str42 = atomikosProperties41.getConsoleFileName();
        java.lang.String str43 = atomikosProperties41.getTransactionManagerUniqueName();
        boolean boolean44 = atomikosProperties41.isEnableLogging();
        java.lang.Object obj45 = properties5.replace(obj40, (java.lang.Object) atomikosProperties41);
        java.io.OutputStream outputStream46 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.store(outputStream46, "{10=10.0}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tm.out" + "'", str18, "tm.out");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tm.out" + "'", str36, "tm.out");
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "tm.out" + "'", str42, "tm.out");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(obj45);
    }

    @Test
    public void test00364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00364");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.lang.String str6 = atomikosProperties0.getService();
        atomikosProperties0.setService("hi!");
        atomikosProperties0.setForceShutdownOnVmExit(true);
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        java.util.Properties properties13 = atomikosProperties0.asProperties();
        java.util.Properties properties14 = new java.util.Properties();
        java.util.Properties properties15 = new java.util.Properties(properties14);
        int int16 = properties15.size();
        boolean boolean17 = properties15.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties15.elements();
        java.util.Properties properties19 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection20 = properties19.values();
        java.util.Properties properties21 = new java.util.Properties(properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration22 = properties21.elements();
        boolean boolean23 = properties21.isEmpty();
        boolean boolean24 = properties15.containsValue((java.lang.Object) boolean23);
        java.util.Properties properties25 = new java.util.Properties(properties15);
        java.util.Enumeration<?> wildcardEnumeration26 = properties25.propertyNames();
        java.lang.Object obj29 = properties25.setProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=hi!, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "{10=10.0}");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = properties13.containsKey(obj29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertNotNull(objCollection20);
        org.junit.Assert.assertNotNull(objEnumeration22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration26);
        org.junit.Assert.assertNull(obj29);
    }

    @Test
    public void test00365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00365");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Properties properties4 = new java.util.Properties(properties1);
        java.util.Collection<java.lang.Object> objCollection5 = properties4.values();
        java.util.Set<java.lang.Object> objSet6 = properties4.keySet();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objCollection5);
        org.junit.Assert.assertNotNull(objSet6);
    }

    @Test
    public void test00366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00366");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileLimit((int) (byte) 10);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel3 = atomikosProperties0.getConsoleLogLevel();
        boolean boolean4 = atomikosProperties0.isAllowSubTransactions();
        boolean boolean5 = atomikosProperties0.isThreadedTwoPhaseCommit();
        boolean boolean6 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setEnableLogging(false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel3 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel3.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test00367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00367");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.io.Writer writer2 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(writer2, "{10=10.0}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00368");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.util.Properties properties28 = new java.util.Properties();
        java.util.Properties properties29 = new java.util.Properties(properties28);
        properties29.clear();
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        java.lang.Object obj32 = properties3.get((java.lang.Object) properties29);
        properties29.clear();
        java.util.Properties properties34 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str36 = atomikosProperties35.getConsoleFileName();
        java.lang.Object obj38 = properties34.put((java.lang.Object) atomikosProperties35, (java.lang.Object) 0L);
        java.util.Properties properties39 = new java.util.Properties(properties34);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties40.setConsoleFileCount((-1));
        atomikosProperties40.setTransactionManagerUniqueName("tm.out");
        java.lang.Object obj45 = properties34.remove((java.lang.Object) atomikosProperties40);
        boolean boolean46 = atomikosProperties40.isForceShutdownOnVmExit();
        java.lang.Object obj48 = properties29.putIfAbsent((java.lang.Object) boolean46, (java.lang.Object) 500L);
        java.util.Properties properties49 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection50 = properties49.values();
        java.util.Properties properties51 = new java.util.Properties(properties49);
        java.util.Enumeration<java.lang.Object> objEnumeration52 = properties49.keys();
        boolean boolean53 = properties29.containsValue((java.lang.Object) properties49);
        java.util.Properties properties54 = new java.util.Properties(properties49);
        java.io.InputStream inputStream55 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties54.load(inputStream55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tm.out" + "'", str36, "tm.out");
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(objCollection50);
        org.junit.Assert.assertNotNull(objEnumeration52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test00369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00369");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        atomikosProperties4.setLogBaseName("tm.out");
        long long12 = atomikosProperties4.getDefaultJtaTimeout();
        atomikosProperties4.setSerialJtaTransactions(true);
        atomikosProperties4.setLogBaseName("{}");
        atomikosProperties4.setDefaultJtaTimeout((long) (-1));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
    }

    @Test
    public void test00370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00370");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties1.setProperty("", "hi!");
        java.util.Set<java.lang.Object> objSet9 = properties1.keySet();
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties1.elements();
        boolean boolean11 = properties1.isEmpty();
        int int12 = properties1.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery13 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long14 = recovery13.getForgetOrphanedLogEntriesDelay();
        recovery13.setDelay((long) (short) 1);
        long long17 = recovery13.getRetryInterval();
        long long18 = recovery13.getForgetOrphanedLogEntriesDelay();
        boolean boolean19 = properties1.containsKey((java.lang.Object) recovery13);
        java.util.Enumeration<?> wildcardEnumeration20 = properties1.propertyNames();
        java.lang.String str21 = properties1.toString();
        java.io.OutputStream outputStream22 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream22, "hi!", "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objSet9);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 86400000L + "'", long14 == 86400000L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10000L + "'", long17 == 10000L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 86400000L + "'", long18 == 86400000L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{=hi!}" + "'", str21, "{=hi!}");
    }

    @Test
    public void test00371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00371");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties8.getConsoleLogLevel();
        java.lang.Object obj14 = properties1.putIfAbsent((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosLoggingLevel13);
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.Object obj17 = properties15.get((java.lang.Object) (byte) -1);
        java.util.Properties properties18 = new java.util.Properties(properties15);
        boolean boolean19 = properties1.equals((java.lang.Object) properties15);
        java.util.Properties properties20 = new java.util.Properties();
        java.util.Properties properties21 = new java.util.Properties(properties20);
        properties21.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str25 = atomikosProperties24.getConsoleFileName();
        atomikosProperties24.setOutputDir("hi!");
        int int28 = atomikosProperties24.getConsoleFileLimit();
        java.lang.Object obj29 = properties21.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties24);
        boolean boolean30 = atomikosProperties24.isForceShutdownOnVmExit();
        atomikosProperties24.setConsoleFileName("");
        java.lang.String str33 = atomikosProperties24.getService();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery34 = atomikosProperties24.getRecovery();
        long long35 = recovery34.getDelay();
        boolean boolean36 = properties15.containsValue((java.lang.Object) recovery34);
        java.util.Properties properties37 = null;
        java.util.Properties properties38 = new java.util.Properties(properties37);
        boolean boolean40 = properties38.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str42 = atomikosProperties41.getTransactionManagerUniqueName();
        atomikosProperties41.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str46 = atomikosProperties45.getConsoleFileName();
        atomikosProperties45.setOutputDir("hi!");
        int int49 = atomikosProperties45.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel50 = atomikosProperties45.getConsoleLogLevel();
        java.lang.Object obj51 = properties38.putIfAbsent((java.lang.Object) atomikosProperties41, (java.lang.Object) atomikosLoggingLevel50);
        java.util.Collection<java.lang.Object> objCollection52 = properties38.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str54 = atomikosProperties53.getTransactionManagerUniqueName();
        atomikosProperties53.setDefaultJtaTimeout((long) (byte) 100);
        java.util.Properties properties57 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str59 = atomikosProperties58.getConsoleFileName();
        java.lang.Object obj61 = properties57.put((java.lang.Object) atomikosProperties58, (java.lang.Object) 0L);
        java.util.Properties properties62 = new java.util.Properties(properties57);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties63.setConsoleFileCount(100);
        atomikosProperties63.setAllowSubTransactions(true);
        boolean boolean68 = atomikosProperties63.isForceShutdownOnVmExit();
        boolean boolean69 = properties62.contains((java.lang.Object) atomikosProperties63);
        java.util.Collection<java.lang.Object> objCollection70 = properties62.values();
        boolean boolean71 = properties15.replace((java.lang.Object) properties38, (java.lang.Object) (byte) 100, (java.lang.Object) objCollection70);
        java.util.Properties properties72 = new java.util.Properties(properties38);
        java.io.OutputStream outputStream73 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties72.save(outputStream73, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=32, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "tm.out" + "'", str25, "tm.out");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(recovery34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10000L + "'", long35 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "tm.out" + "'", str46, "tm.out");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel50 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel50.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(objCollection52);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "tm.out" + "'", str59, "tm.out");
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objCollection70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test00372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00372");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        java.lang.String str3 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseName("tm.out");
        atomikosProperties0.setLogBaseDir("tm.out");
        java.lang.String str8 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setDefaultJtaTimeout(10L);
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        java.lang.String str12 = atomikosProperties0.getService();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tm.out" + "'", str8, "tm.out");
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test00373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00373");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties3.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet9 = properties3.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setConsoleFileCount((-1));
        java.lang.String str13 = atomikosProperties10.getOutputDir();
        atomikosProperties10.setLogBaseName("tm.out");
        int int16 = atomikosProperties10.getConsoleFileCount();
        boolean boolean17 = properties3.containsKey((java.lang.Object) atomikosProperties10);
        java.io.OutputStream outputStream18 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.save(outputStream18, "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test00374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00374");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setConsoleFileCount((-1));
        atomikosProperties6.setTransactionManagerUniqueName("tm.out");
        java.lang.Object obj11 = properties0.remove((java.lang.Object) atomikosProperties6);
        java.util.Properties properties12 = new java.util.Properties(properties0);
        java.io.PrintStream printStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.list(printStream13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test00375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00375");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet6 = properties5.stringPropertyNames();
        java.util.Properties properties7 = new java.util.Properties(properties5);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Properties properties11 = new java.util.Properties(properties10);
        properties11.clear();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.lang.Object obj16 = properties11.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet17 = properties11.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setConsoleFileCount((-1));
        java.lang.String str21 = atomikosProperties18.getOutputDir();
        atomikosProperties18.setLogBaseName("tm.out");
        int int24 = atomikosProperties18.getConsoleFileCount();
        boolean boolean25 = properties11.containsKey((java.lang.Object) atomikosProperties18);
        atomikosProperties18.setConsoleFileCount((int) (byte) -1);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery28 = atomikosProperties18.getRecovery();
        java.util.Properties properties29 = new java.util.Properties();
        java.util.Properties properties30 = new java.util.Properties(properties29);
        properties30.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.getConsoleFileName();
        atomikosProperties33.setOutputDir("hi!");
        int int37 = atomikosProperties33.getConsoleFileLimit();
        java.lang.Object obj38 = properties30.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties33);
        atomikosProperties33.setLogBaseName("tm.out");
        atomikosProperties33.setForceShutdownOnVmExit(false);
        java.lang.Object obj43 = properties7.replace((java.lang.Object) recovery28, (java.lang.Object) atomikosProperties33);
        java.util.Enumeration<java.lang.Object> objEnumeration44 = properties7.keys();
        java.lang.Object obj47 = properties7.setProperty("tm.out", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=hi!, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        java.io.PrintStream printStream48 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties7.list(printStream48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(recovery28);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tm.out" + "'", str34, "tm.out");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(objEnumeration44);
        org.junit.Assert.assertNull(obj47);
    }

    @Test
    public void test00376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00376");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.lang.Object obj4 = properties0.setProperty("hi!", "");
        java.util.Properties properties5 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.getConsoleFileName();
        java.lang.Object obj9 = properties5.put((java.lang.Object) atomikosProperties6, (java.lang.Object) 0L);
        java.lang.Object obj12 = properties5.setProperty("", "");
        java.util.Properties properties13 = new java.util.Properties(properties5);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties13);
        java.util.Properties properties15 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.getConsoleFileName();
        java.lang.Object obj19 = properties15.put((java.lang.Object) atomikosProperties16, (java.lang.Object) 0L);
        java.util.Properties properties20 = new java.util.Properties(properties15);
        java.util.Properties properties21 = new java.util.Properties(properties20);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.util.Properties properties23 = new java.util.Properties(properties0);
        java.io.OutputStream outputStream24 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties23.storeToXML(outputStream24, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=100}", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=100}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tm.out" + "'", str7, "tm.out");
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tm.out" + "'", str17, "tm.out");
        org.junit.Assert.assertNull(obj19);
    }

    @Test
    public void test00377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00377");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        atomikosProperties19.setAllowSubTransactions(false);
        atomikosProperties19.setSerialJtaTransactions(true);
        java.util.Properties properties29 = new java.util.Properties();
        java.util.Properties properties30 = new java.util.Properties(properties29);
        properties30.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.getConsoleFileName();
        atomikosProperties33.setOutputDir("hi!");
        int int37 = atomikosProperties33.getConsoleFileLimit();
        java.lang.Object obj38 = properties30.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties33);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel39 = atomikosProperties33.getConsoleLogLevel();
        atomikosProperties19.setConsoleLogLevel(atomikosLoggingLevel39);
        atomikosProperties19.setDefaultJtaTimeout((long) 10);
        boolean boolean43 = atomikosProperties19.isEnableLogging();
        int int44 = atomikosProperties19.getConsoleFileCount();
        int int45 = atomikosProperties19.getMaxActives();
        atomikosProperties19.setConsoleFileName("");
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tm.out" + "'", str34, "tm.out");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel39 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel39.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 50 + "'", int45 == 50);
    }

    @Test
    public void test00378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00378");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties1.entrySet();
        java.util.Properties properties11 = new java.util.Properties(properties1);
        boolean boolean12 = properties11.isEmpty();
        java.io.OutputStream outputStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties11.store(outputStream13, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(objEntrySet10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test00379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00379");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        atomikosProperties0.setAllowSubTransactions(false);
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Enumeration<?> wildcardEnumeration6 = properties5.propertyNames();
        java.util.Properties properties7 = new java.util.Properties();
        java.lang.Object obj9 = properties7.get((java.lang.Object) (byte) -1);
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties7.elements();
        java.util.Properties properties11 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection12 = properties11.values();
        java.util.Properties properties13 = null;
        java.util.Properties properties14 = new java.util.Properties(properties13);
        java.util.Properties properties15 = new java.util.Properties();
        java.util.Properties properties16 = new java.util.Properties(properties15);
        properties16.clear();
        properties14.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties16);
        java.lang.Object obj21 = properties14.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties11.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties14);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties23.setConsoleFileCount((-1));
        java.lang.String str26 = atomikosProperties23.getOutputDir();
        atomikosProperties23.setLogBaseName("tm.out");
        boolean boolean29 = properties14.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties30.setConsoleFileCount(100);
        atomikosProperties30.setAllowSubTransactions(true);
        java.lang.Object obj35 = properties14.remove((java.lang.Object) atomikosProperties30);
        java.util.Set<java.lang.Object> objSet36 = properties14.keySet();
        java.util.Properties properties37 = null;
        java.util.Properties properties38 = new java.util.Properties(properties37);
        java.util.Properties properties39 = new java.util.Properties();
        java.util.Properties properties40 = new java.util.Properties(properties39);
        properties40.clear();
        properties38.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties40);
        java.lang.Object obj43 = properties14.get((java.lang.Object) properties40);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setConsoleFileCount((-1));
        atomikosProperties44.setAllowSubTransactions(false);
        boolean boolean49 = properties14.contains((java.lang.Object) false);
        java.util.Properties properties50 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str52 = atomikosProperties51.getConsoleFileName();
        java.lang.Object obj54 = properties50.put((java.lang.Object) atomikosProperties51, (java.lang.Object) 0L);
        java.util.Properties properties55 = new java.util.Properties();
        java.util.Properties properties56 = new java.util.Properties(properties55);
        properties56.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str60 = atomikosProperties59.getConsoleFileName();
        atomikosProperties59.setOutputDir("hi!");
        int int63 = atomikosProperties59.getConsoleFileLimit();
        java.lang.Object obj64 = properties56.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties59);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet65 = properties56.entrySet();
        java.util.Properties properties66 = new java.util.Properties(properties56);
        boolean boolean67 = properties14.remove((java.lang.Object) 0L, (java.lang.Object) properties56);
        java.lang.Object obj70 = properties56.setProperty("tm.out", "");
        java.lang.Object obj71 = properties5.getOrDefault((java.lang.Object) properties7, (java.lang.Object) "");
        java.lang.String str74 = properties5.getProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "");
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(wildcardEnumeration6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertNotNull(objCollection12);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(objSet36);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "tm.out" + "'", str52, "tm.out");
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "tm.out" + "'", str60, "tm.out");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNotNull(objEntrySet65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertEquals("'" + obj71 + "' != '" + "" + "'", obj71, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
    }

    @Test
    public void test00380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00380");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.util.Properties properties28 = new java.util.Properties();
        java.util.Properties properties29 = new java.util.Properties(properties28);
        properties29.clear();
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        java.lang.Object obj32 = properties3.get((java.lang.Object) properties29);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.setConsoleFileCount((-1));
        atomikosProperties33.setAllowSubTransactions(false);
        boolean boolean38 = properties3.contains((java.lang.Object) false);
        java.util.Properties properties39 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str41 = atomikosProperties40.getConsoleFileName();
        java.lang.Object obj43 = properties39.put((java.lang.Object) atomikosProperties40, (java.lang.Object) 0L);
        java.util.Properties properties44 = new java.util.Properties();
        java.util.Properties properties45 = new java.util.Properties(properties44);
        properties45.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str49 = atomikosProperties48.getConsoleFileName();
        atomikosProperties48.setOutputDir("hi!");
        int int52 = atomikosProperties48.getConsoleFileLimit();
        java.lang.Object obj53 = properties45.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties48);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet54 = properties45.entrySet();
        java.util.Properties properties55 = new java.util.Properties(properties45);
        boolean boolean56 = properties3.remove((java.lang.Object) 0L, (java.lang.Object) properties45);
        java.io.Writer writer57 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.store(writer57, "{=hi!}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "tm.out" + "'", str41, "tm.out");
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tm.out" + "'", str49, "tm.out");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNotNull(objEntrySet54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test00381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00381");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        java.lang.String str2 = atomikosProperties0.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str4 = atomikosProperties3.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = atomikosProperties3.getConsoleLogLevel();
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        atomikosProperties0.setForceShutdownOnVmExit(false);
        java.lang.String str9 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.setDefaultJtaTimeout((long) (byte) -1);
        atomikosProperties0.setForceShutdownOnVmExit(false);
        int int14 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setTransactionManagerUniqueName("hi!");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tm.out" + "'", str4, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel5 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel5.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test00382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00382");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.util.Properties properties28 = new java.util.Properties();
        java.util.Properties properties29 = new java.util.Properties(properties28);
        properties29.clear();
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        java.lang.Object obj32 = properties3.get((java.lang.Object) properties29);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.setConsoleFileCount((-1));
        atomikosProperties33.setAllowSubTransactions(false);
        boolean boolean38 = properties3.contains((java.lang.Object) false);
        java.util.Properties properties39 = new java.util.Properties(properties3);
        java.io.OutputStream outputStream40 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.store(outputStream40, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test00383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00383");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties3.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet9 = properties3.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setConsoleFileCount((-1));
        java.lang.String str13 = atomikosProperties10.getOutputDir();
        atomikosProperties10.setLogBaseName("tm.out");
        int int16 = atomikosProperties10.getConsoleFileCount();
        boolean boolean17 = properties3.containsKey((java.lang.Object) atomikosProperties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long19 = recovery18.getForgetOrphanedLogEntriesDelay();
        recovery18.setDelay((long) (short) 1);
        recovery18.setRetryInterval(100L);
        java.lang.Object obj24 = properties3.get((java.lang.Object) 100L);
        java.io.InputStream inputStream25 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.loadFromXML(inputStream25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 86400000L + "'", long19 == 86400000L);
        org.junit.Assert.assertNull(obj24);
    }

    @Test
    public void test00384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00384");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Properties properties4 = new java.util.Properties(properties1);
        java.util.Properties properties5 = new java.util.Properties(properties1);
        int int6 = properties1.size();
        java.util.Properties properties7 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        java.util.Properties properties13 = atomikosProperties8.asProperties();
        java.lang.String str14 = atomikosProperties8.getService();
        atomikosProperties8.setService("hi!");
        java.lang.Object obj18 = properties7.putIfAbsent((java.lang.Object) "hi!", (java.lang.Object) 10L);
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        int int20 = properties1.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.getConsoleFileName();
        atomikosProperties21.setOutputDir("hi!");
        int int25 = atomikosProperties21.getConsoleFileLimit();
        java.util.Properties properties26 = atomikosProperties21.asProperties();
        java.lang.String str27 = atomikosProperties21.getService();
        atomikosProperties21.setService("hi!");
        atomikosProperties21.setConsoleFileName("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery32 = atomikosProperties21.getRecovery();
        java.util.Properties properties33 = atomikosProperties21.asProperties();
        java.util.Properties properties34 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection35 = properties34.values();
        java.util.Properties properties36 = null;
        java.util.Properties properties37 = new java.util.Properties(properties36);
        java.util.Properties properties38 = new java.util.Properties();
        java.util.Properties properties39 = new java.util.Properties(properties38);
        properties39.clear();
        properties37.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties39);
        java.lang.Object obj44 = properties37.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties34.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties37);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties46.setConsoleFileCount((-1));
        java.lang.String str49 = atomikosProperties46.getOutputDir();
        atomikosProperties46.setLogBaseName("tm.out");
        boolean boolean52 = properties37.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties53.setConsoleFileCount(100);
        atomikosProperties53.setAllowSubTransactions(true);
        java.lang.Object obj58 = properties37.remove((java.lang.Object) atomikosProperties53);
        java.lang.String str59 = atomikosProperties53.getLogBaseDir();
        java.lang.Class<?> wildcardClass60 = atomikosProperties53.getClass();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties61.setConsoleFileLimit((int) (byte) 10);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel64 = atomikosProperties61.getConsoleLogLevel();
        java.lang.Object obj65 = properties33.put((java.lang.Object) wildcardClass60, (java.lang.Object) atomikosLoggingLevel64);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str67 = atomikosProperties66.getConsoleFileName();
        atomikosProperties66.setOutputDir("hi!");
        int int70 = atomikosProperties66.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel71 = atomikosProperties66.getConsoleLogLevel();
        atomikosProperties66.setDefaultJtaTimeout((long) (byte) 100);
        long long74 = atomikosProperties66.getCheckpointInterval();
        java.lang.String str75 = atomikosProperties66.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery76 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery76.setRetryInterval((long) (byte) 10);
        long long79 = recovery76.getRetryInterval();
        long long80 = recovery76.getRetryInterval();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean81 = properties1.replace(obj65, (java.lang.Object) atomikosProperties66, (java.lang.Object) recovery76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tm.out" + "'", str22, "tm.out");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(recovery32);
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertNotNull(objCollection35);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel64 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel64.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "tm.out" + "'", str67, "tm.out");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel71 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel71.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 500L + "'", long74 == 500L);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "tmlog" + "'", str75, "tmlog");
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 10L + "'", long79 == 10L);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 10L + "'", long80 == 10L);
    }

    @Test
    public void test00385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00385");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        atomikosProperties19.setAllowSubTransactions(false);
        atomikosProperties19.setSerialJtaTransactions(true);
        java.util.Properties properties29 = atomikosProperties19.asProperties();
        atomikosProperties19.setConsoleFileLimit((int) '#');
        atomikosProperties19.setConsoleFileName("");
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(properties29);
    }

    @Test
    public void test00386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00386");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        atomikosProperties4.setLogBaseName("tm.out");
        boolean boolean12 = atomikosProperties4.isForceShutdownOnVmExit();
        boolean boolean13 = atomikosProperties4.isForceShutdownOnVmExit();
        boolean boolean14 = atomikosProperties4.isForceShutdownOnVmExit();
        int int15 = atomikosProperties4.getConsoleFileCount();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test00387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00387");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties3.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Properties properties9 = new java.util.Properties(properties3);
        java.util.Properties properties10 = new java.util.Properties(properties9);
        java.lang.Object obj11 = properties9.clone();
        java.util.Set<java.lang.Object> objSet12 = properties9.keySet();
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "{}");
        org.junit.Assert.assertNotNull(objSet12);
    }

    @Test
    public void test00388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00388");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        java.lang.String str3 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseName("tm.out");
        atomikosProperties0.setForceShutdownOnVmExit(true);
        atomikosProperties0.setMaxTimeout((long) (short) 1);
        java.util.Properties properties10 = atomikosProperties0.asProperties();
        java.lang.String str13 = properties10.getProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=100}");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=100}" + "'", str13, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=100}");
    }

    @Test
    public void test00389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00389");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Set<java.lang.Object> objSet4 = properties1.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.getConsoleFileName();
        atomikosProperties5.setOutputDir("hi!");
        int int9 = atomikosProperties5.getConsoleFileLimit();
        java.util.Properties properties10 = atomikosProperties5.asProperties();
        java.lang.String str11 = atomikosProperties5.getService();
        int int12 = atomikosProperties5.getMaxActives();
        boolean boolean13 = properties1.equals((java.lang.Object) atomikosProperties5);
        int int14 = atomikosProperties5.getConsoleFileCount();
        java.util.Properties properties15 = atomikosProperties5.asProperties();
        java.util.Properties properties16 = new java.util.Properties();
        java.util.Properties properties17 = new java.util.Properties(properties16);
        properties17.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str21 = atomikosProperties20.getConsoleFileName();
        atomikosProperties20.setOutputDir("hi!");
        int int24 = atomikosProperties20.getConsoleFileLimit();
        java.lang.Object obj25 = properties17.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties20);
        atomikosProperties20.setLogBaseName("tm.out");
        long long28 = atomikosProperties20.getDefaultJtaTimeout();
        atomikosProperties20.setSerialJtaTransactions(true);
        atomikosProperties20.setCheckpointInterval(10000L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.getConsoleFileName();
        atomikosProperties33.setOutputDir("hi!");
        java.lang.String str37 = atomikosProperties33.getOutputDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties38.setConsoleFileCount((-1));
        java.util.Properties properties41 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection42 = properties41.values();
        java.util.Properties properties43 = null;
        java.util.Properties properties44 = new java.util.Properties(properties43);
        java.util.Properties properties45 = new java.util.Properties();
        java.util.Properties properties46 = new java.util.Properties(properties45);
        properties46.clear();
        properties44.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties46);
        java.lang.Object obj51 = properties44.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties41.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties44);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties53.setConsoleFileCount((-1));
        java.lang.String str56 = atomikosProperties53.getOutputDir();
        atomikosProperties53.setLogBaseName("tm.out");
        boolean boolean59 = properties44.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties60.setConsoleFileCount(100);
        atomikosProperties60.setAllowSubTransactions(true);
        java.lang.Object obj65 = properties44.remove((java.lang.Object) atomikosProperties60);
        atomikosProperties60.setAllowSubTransactions(false);
        atomikosProperties60.setSerialJtaTransactions(true);
        java.util.Properties properties70 = new java.util.Properties();
        java.util.Properties properties71 = new java.util.Properties(properties70);
        properties71.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties74 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str75 = atomikosProperties74.getConsoleFileName();
        atomikosProperties74.setOutputDir("hi!");
        int int78 = atomikosProperties74.getConsoleFileLimit();
        java.lang.Object obj79 = properties71.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties74);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel80 = atomikosProperties74.getConsoleLogLevel();
        atomikosProperties60.setConsoleLogLevel(atomikosLoggingLevel80);
        atomikosProperties38.setConsoleLogLevel(atomikosLoggingLevel80);
        atomikosProperties33.setConsoleLogLevel(atomikosLoggingLevel80);
        atomikosProperties20.setConsoleLogLevel(atomikosLoggingLevel80);
        boolean boolean85 = properties15.containsValue((java.lang.Object) atomikosProperties20);
        atomikosProperties20.setTransactionManagerUniqueName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objSet4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tm.out" + "'", str6, "tm.out");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tm.out" + "'", str21, "tm.out");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10000L + "'", long28 == 10000L);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tm.out" + "'", str34, "tm.out");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "tm.out" + "'", str75, "tm.out");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel80 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel80.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test00390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00390");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setConsoleFileCount(100);
        atomikosProperties6.setAllowSubTransactions(true);
        boolean boolean11 = atomikosProperties6.isForceShutdownOnVmExit();
        boolean boolean12 = properties5.contains((java.lang.Object) atomikosProperties6);
        java.util.Properties properties13 = new java.util.Properties();
        java.util.Properties properties14 = new java.util.Properties(properties13);
        properties14.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.getConsoleFileName();
        atomikosProperties17.setOutputDir("hi!");
        int int21 = atomikosProperties17.getConsoleFileLimit();
        java.lang.Object obj22 = properties14.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties17);
        boolean boolean23 = atomikosProperties17.isForceShutdownOnVmExit();
        atomikosProperties17.setConsoleFileName("");
        java.lang.String str26 = atomikosProperties17.getService();
        atomikosProperties17.setTransactionManagerUniqueName("");
        java.lang.Object obj29 = properties5.get((java.lang.Object) "");
        java.util.Properties properties30 = new java.util.Properties();
        java.util.Properties properties31 = new java.util.Properties(properties30);
        int int32 = properties31.size();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties31);
        java.util.Enumeration<?> wildcardEnumeration34 = properties31.propertyNames();
        java.io.OutputStream outputStream35 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties31.storeToXML(outputStream35, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tm.out" + "'", str18, "tm.out");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(wildcardEnumeration34);
    }

    @Test
    public void test00391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00391");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.util.Properties properties28 = new java.util.Properties();
        java.util.Properties properties29 = new java.util.Properties(properties28);
        properties29.clear();
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        java.lang.Object obj32 = properties3.get((java.lang.Object) properties29);
        properties29.clear();
        int int34 = properties29.size();
        java.io.OutputStream outputStream35 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties29.save(outputStream35, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test00392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00392");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Properties properties6 = new java.util.Properties(properties5);
        properties6.clear();
        properties4.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties6);
        java.lang.Object obj11 = properties6.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet12 = properties6.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.setConsoleFileCount((-1));
        java.lang.String str16 = atomikosProperties13.getOutputDir();
        atomikosProperties13.setLogBaseName("tm.out");
        int int19 = atomikosProperties13.getConsoleFileCount();
        boolean boolean20 = properties6.containsKey((java.lang.Object) atomikosProperties13);
        boolean boolean21 = properties1.containsValue((java.lang.Object) atomikosProperties13);
        java.util.Set<java.lang.Object> objSet22 = properties1.keySet();
        java.io.OutputStream outputStream23 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream23, "{10=10.0}", "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objSet22);
    }

    @Test
    public void test00393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00393");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.lang.Object obj7 = properties0.setProperty("", "");
        java.util.Properties properties8 = new java.util.Properties(properties0);
        java.lang.Object obj9 = properties8.clone();
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean13 = properties11.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str15 = atomikosProperties14.getTransactionManagerUniqueName();
        atomikosProperties14.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str19 = atomikosProperties18.getConsoleFileName();
        atomikosProperties18.setOutputDir("hi!");
        int int22 = atomikosProperties18.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel23 = atomikosProperties18.getConsoleLogLevel();
        java.lang.Object obj24 = properties11.putIfAbsent((java.lang.Object) atomikosProperties14, (java.lang.Object) atomikosLoggingLevel23);
        boolean boolean25 = properties8.contains((java.lang.Object) atomikosProperties14);
        java.io.OutputStream outputStream26 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.store(outputStream26, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "{}");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tm.out" + "'", str19, "tm.out");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel23 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel23.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test00394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00394");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties0.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties3.setConsoleFileCount(100);
        atomikosProperties3.setAllowSubTransactions(true);
        boolean boolean8 = atomikosProperties3.isForceShutdownOnVmExit();
        atomikosProperties3.setConsoleFileCount(10);
        boolean boolean11 = atomikosProperties3.isForceShutdownOnVmExit();
        atomikosProperties3.setThreadedTwoPhaseCommit(true);
        atomikosProperties3.setSerialJtaTransactions(false);
        java.lang.Object obj16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj17 = properties0.replace((java.lang.Object) false, obj16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test00395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00395");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        boolean boolean4 = properties2.isEmpty();
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection6 = properties5.values();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        properties10.clear();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.lang.Object obj15 = properties8.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        boolean boolean20 = properties18.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties18.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet22 = properties18.entrySet();
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection24 = properties23.values();
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        java.util.Properties properties27 = new java.util.Properties();
        java.util.Properties properties28 = new java.util.Properties(properties27);
        properties28.clear();
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        java.lang.Object obj33 = properties26.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setConsoleFileCount((-1));
        java.lang.String str38 = atomikosProperties35.getOutputDir();
        atomikosProperties35.setLogBaseName("tm.out");
        boolean boolean41 = properties26.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties42.setConsoleFileCount(100);
        atomikosProperties42.setAllowSubTransactions(true);
        java.lang.Object obj47 = properties26.remove((java.lang.Object) atomikosProperties42);
        java.util.Set<java.lang.Object> objSet48 = properties26.keySet();
        boolean boolean49 = properties2.replace((java.lang.Object) properties8, (java.lang.Object) objEntrySet22, (java.lang.Object) properties26);
        java.lang.String str51 = properties8.getProperty("{}");
        java.util.Enumeration<java.lang.Object> objEnumeration52 = properties8.keys();
        java.io.InputStream inputStream53 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.load(inputStream53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNotNull(objEntrySet22);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(objSet48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(objEnumeration52);
    }

    @Test
    public void test00396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00396");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str2 = properties0.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str4 = atomikosProperties3.getTransactionManagerUniqueName();
        boolean boolean5 = atomikosProperties3.isForceShutdownOnVmExit();
        java.util.Properties properties6 = atomikosProperties3.asProperties();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties6);
        java.util.Set<java.lang.String> strSet8 = properties0.stringPropertyNames();
        java.io.Writer writer9 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(writer9, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNotNull(strSet8);
    }

    @Test
    public void test00397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00397");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties1.keys();
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection6 = properties5.values();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        properties10.clear();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.lang.Object obj15 = properties8.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setConsoleFileCount((-1));
        java.lang.String str20 = atomikosProperties17.getOutputDir();
        atomikosProperties17.setLogBaseName("tm.out");
        boolean boolean23 = properties8.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.setConsoleFileCount(100);
        atomikosProperties24.setAllowSubTransactions(true);
        java.lang.Object obj29 = properties8.remove((java.lang.Object) atomikosProperties24);
        atomikosProperties24.setAllowSubTransactions(false);
        atomikosProperties24.setSerialJtaTransactions(true);
        boolean boolean34 = properties1.containsKey((java.lang.Object) atomikosProperties24);
        java.util.Properties properties35 = new java.util.Properties(properties1);
        java.util.Collection<java.lang.Object> objCollection36 = properties35.values();
        java.util.Properties properties37 = new java.util.Properties(properties35);
        java.lang.String str40 = properties35.getProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=32, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "{10=10.0}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objCollection36);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "{10=10.0}" + "'", str40, "{10=10.0}");
    }

    @Test
    public void test00398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00398");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("", "hi!");
        java.util.Properties properties4 = new java.util.Properties(properties0);
        java.io.Reader reader5 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.load(reader5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj3);
    }

    @Test
    public void test00399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00399");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties1.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        boolean boolean9 = properties1.isEmpty();
        properties1.clear();
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test00400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00400");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Properties properties7 = new java.util.Properties(properties6);
        properties7.clear();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties5.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties11.setConsoleFileCount((-1));
        atomikosProperties11.setAllowSubTransactions(false);
        boolean boolean16 = properties5.containsValue((java.lang.Object) false);
        java.util.Properties properties17 = new java.util.Properties(properties5);
        properties5.clear();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(objEntrySet10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test00401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00401");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Set<java.lang.Object> objSet4 = properties1.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.getConsoleFileName();
        atomikosProperties5.setOutputDir("hi!");
        int int9 = atomikosProperties5.getConsoleFileLimit();
        java.util.Properties properties10 = atomikosProperties5.asProperties();
        java.lang.String str11 = atomikosProperties5.getService();
        int int12 = atomikosProperties5.getMaxActives();
        boolean boolean13 = properties1.equals((java.lang.Object) atomikosProperties5);
        java.util.Properties properties14 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection15 = properties14.values();
        java.util.Properties properties16 = new java.util.Properties(properties14);
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties16.elements();
        boolean boolean18 = properties16.isEmpty();
        java.util.Properties properties19 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection20 = properties19.values();
        java.util.Properties properties21 = null;
        java.util.Properties properties22 = new java.util.Properties(properties21);
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Properties properties24 = new java.util.Properties(properties23);
        properties24.clear();
        properties22.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        java.lang.Object obj29 = properties22.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties19.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties22);
        java.util.Properties properties31 = null;
        java.util.Properties properties32 = new java.util.Properties(properties31);
        boolean boolean34 = properties32.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration35 = properties32.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet36 = properties32.entrySet();
        java.util.Properties properties37 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection38 = properties37.values();
        java.util.Properties properties39 = null;
        java.util.Properties properties40 = new java.util.Properties(properties39);
        java.util.Properties properties41 = new java.util.Properties();
        java.util.Properties properties42 = new java.util.Properties(properties41);
        properties42.clear();
        properties40.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties42);
        java.lang.Object obj47 = properties40.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties37.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties40);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties49.setConsoleFileCount((-1));
        java.lang.String str52 = atomikosProperties49.getOutputDir();
        atomikosProperties49.setLogBaseName("tm.out");
        boolean boolean55 = properties40.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties56.setConsoleFileCount(100);
        atomikosProperties56.setAllowSubTransactions(true);
        java.lang.Object obj61 = properties40.remove((java.lang.Object) atomikosProperties56);
        java.util.Set<java.lang.Object> objSet62 = properties40.keySet();
        boolean boolean63 = properties16.replace((java.lang.Object) properties22, (java.lang.Object) objEntrySet36, (java.lang.Object) properties40);
        int int64 = properties16.size();
        boolean boolean65 = properties1.equals((java.lang.Object) int64);
        java.io.Reader reader66 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(reader66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objSet4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tm.out" + "'", str6, "tm.out");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objCollection15);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objCollection20);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objEnumeration35);
        org.junit.Assert.assertNotNull(objEntrySet36);
        org.junit.Assert.assertNotNull(objCollection38);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNotNull(objSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test00402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00402");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        java.util.Set<java.lang.Object> objSet6 = properties5.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getTransactionManagerUniqueName();
        atomikosProperties8.setDefaultJtaTimeout((long) (byte) 100);
        int int12 = atomikosProperties8.getConsoleFileLimit();
        java.lang.String str13 = atomikosProperties8.getConsoleFileName();
        java.lang.Object obj14 = properties5.putIfAbsent((java.lang.Object) (-1.0f), (java.lang.Object) atomikosProperties8);
        java.lang.String str17 = properties5.getProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=100}", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(objSet6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tm.out" + "'", str13, "tm.out");
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str17, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
    }

    @Test
    public void test00403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00403");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Properties properties4 = new java.util.Properties(properties1);
        java.util.Properties properties5 = new java.util.Properties(properties1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.getConsoleFileName();
        atomikosProperties6.setOutputDir("hi!");
        int int10 = atomikosProperties6.getConsoleFileLimit();
        java.util.Properties properties11 = atomikosProperties6.asProperties();
        java.lang.String str12 = atomikosProperties6.getService();
        atomikosProperties6.setService("hi!");
        atomikosProperties6.setForceShutdownOnVmExit(true);
        atomikosProperties6.setThreadedTwoPhaseCommit(false);
        java.util.Properties properties19 = atomikosProperties6.asProperties();
        java.util.Properties properties21 = new java.util.Properties();
        java.util.Properties properties22 = new java.util.Properties(properties21);
        int int23 = properties22.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery24 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long25 = recovery24.getForgetOrphanedLogEntriesDelay();
        java.lang.Class<?> wildcardClass26 = recovery24.getClass();
        boolean boolean27 = properties22.containsKey((java.lang.Object) wildcardClass26);
        boolean boolean28 = properties1.replace((java.lang.Object) properties19, (java.lang.Object) 1.0f, (java.lang.Object) wildcardClass26);
        java.util.Properties properties29 = new java.util.Properties(properties19);
        java.util.Properties properties30 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str32 = atomikosProperties31.getConsoleFileName();
        java.lang.Object obj34 = properties30.put((java.lang.Object) atomikosProperties31, (java.lang.Object) 0L);
        java.util.Properties properties35 = new java.util.Properties(properties30);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties36.setConsoleFileCount((-1));
        atomikosProperties36.setTransactionManagerUniqueName("tm.out");
        java.lang.Object obj41 = properties30.remove((java.lang.Object) atomikosProperties36);
        boolean boolean42 = atomikosProperties36.isForceShutdownOnVmExit();
        java.lang.Object obj43 = properties19.get((java.lang.Object) boolean42);
        java.util.Properties properties44 = new java.util.Properties(properties19);
        java.io.OutputStream outputStream45 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties19.storeToXML(outputStream45, "{hi!=10}", "{=hi!}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tm.out" + "'", str7, "tm.out");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 86400000L + "'", long25 == 86400000L);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tm.out" + "'", str32, "tm.out");
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(obj43);
    }

    @Test
    public void test00404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00404");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.util.Properties properties28 = new java.util.Properties();
        java.util.Properties properties29 = new java.util.Properties(properties28);
        properties29.clear();
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        java.lang.Object obj32 = properties3.get((java.lang.Object) properties29);
        properties29.clear();
        java.util.Properties properties34 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str36 = atomikosProperties35.getConsoleFileName();
        java.lang.Object obj38 = properties34.put((java.lang.Object) atomikosProperties35, (java.lang.Object) 0L);
        java.util.Properties properties39 = new java.util.Properties(properties34);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties40.setConsoleFileCount((-1));
        atomikosProperties40.setTransactionManagerUniqueName("tm.out");
        java.lang.Object obj45 = properties34.remove((java.lang.Object) atomikosProperties40);
        boolean boolean46 = atomikosProperties40.isForceShutdownOnVmExit();
        java.lang.Object obj48 = properties29.putIfAbsent((java.lang.Object) boolean46, (java.lang.Object) 500L);
        java.util.Set<java.lang.String> strSet49 = properties29.stringPropertyNames();
        int int50 = properties29.size();
        java.io.OutputStream outputStream51 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties29.storeToXML(outputStream51, "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tm.out" + "'", str36, "tm.out");
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
    }

    @Test
    public void test00405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00405");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet6 = properties5.stringPropertyNames();
        java.util.Properties properties7 = new java.util.Properties(properties5);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet8 = properties5.entrySet();
        java.lang.String str11 = properties5.getProperty("{}", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(objEntrySet8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str11, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
    }

    @Test
    public void test00406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00406");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties1.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        boolean boolean9 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties1.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet11 = properties1.entrySet();
        java.io.Reader reader12 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(reader12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertNotNull(objEntrySet11);
    }

    @Test
    public void test00407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00407");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties1.keys();
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection6 = properties5.values();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        properties10.clear();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.lang.Object obj15 = properties8.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setConsoleFileCount((-1));
        java.lang.String str20 = atomikosProperties17.getOutputDir();
        atomikosProperties17.setLogBaseName("tm.out");
        boolean boolean23 = properties8.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.setConsoleFileCount(100);
        atomikosProperties24.setAllowSubTransactions(true);
        java.lang.Object obj29 = properties8.remove((java.lang.Object) atomikosProperties24);
        atomikosProperties24.setAllowSubTransactions(false);
        atomikosProperties24.setSerialJtaTransactions(true);
        boolean boolean34 = properties1.containsKey((java.lang.Object) atomikosProperties24);
        java.util.Properties properties35 = new java.util.Properties(properties1);
        java.io.OutputStream outputStream36 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties35.save(outputStream36, "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test00408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00408");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        boolean boolean5 = properties1.contains((java.lang.Object) 5L);
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection7 = properties6.values();
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Properties properties11 = new java.util.Properties(properties10);
        properties11.clear();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.lang.Object obj16 = properties9.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        java.util.Set<java.lang.Object> objSet18 = properties6.keySet();
        java.util.Properties properties19 = new java.util.Properties();
        java.util.Properties properties20 = new java.util.Properties(properties19);
        int int21 = properties20.size();
        boolean boolean22 = properties20.isEmpty();
        java.util.Properties properties23 = new java.util.Properties(properties20);
        java.util.Properties properties24 = new java.util.Properties(properties20);
        int int25 = properties20.size();
        java.util.Properties properties26 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.getConsoleFileName();
        atomikosProperties27.setOutputDir("hi!");
        int int31 = atomikosProperties27.getConsoleFileLimit();
        java.util.Properties properties32 = atomikosProperties27.asProperties();
        java.lang.String str33 = atomikosProperties27.getService();
        atomikosProperties27.setService("hi!");
        java.lang.Object obj37 = properties26.putIfAbsent((java.lang.Object) "hi!", (java.lang.Object) 10L);
        properties20.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        java.util.Properties properties39 = null;
        java.util.Properties properties40 = new java.util.Properties(properties39);
        java.util.Properties properties41 = new java.util.Properties();
        java.util.Properties properties42 = new java.util.Properties(properties41);
        properties42.clear();
        properties40.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties42);
        java.lang.Object obj47 = properties42.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet48 = properties42.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties49.setConsoleFileCount((-1));
        java.lang.String str52 = atomikosProperties49.getOutputDir();
        atomikosProperties49.setLogBaseName("tm.out");
        int int55 = atomikosProperties49.getConsoleFileCount();
        boolean boolean56 = properties42.containsKey((java.lang.Object) atomikosProperties49);
        atomikosProperties49.setConsoleFileCount((int) (byte) -1);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery59 = atomikosProperties49.getRecovery();
        java.util.Properties properties60 = null;
        java.util.Properties properties61 = new java.util.Properties(properties60);
        boolean boolean63 = properties61.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str65 = atomikosProperties64.getTransactionManagerUniqueName();
        atomikosProperties64.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str69 = atomikosProperties68.getConsoleFileName();
        atomikosProperties68.setOutputDir("hi!");
        int int72 = atomikosProperties68.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel73 = atomikosProperties68.getConsoleLogLevel();
        java.lang.Object obj74 = properties61.putIfAbsent((java.lang.Object) atomikosProperties64, (java.lang.Object) atomikosLoggingLevel73);
        java.util.Properties properties75 = new java.util.Properties();
        java.lang.Object obj77 = properties75.get((java.lang.Object) (byte) -1);
        java.util.Properties properties78 = new java.util.Properties(properties75);
        boolean boolean79 = properties61.equals((java.lang.Object) properties75);
        java.util.Enumeration<java.lang.Object> objEnumeration80 = properties61.keys();
        java.lang.Object obj81 = properties20.getOrDefault((java.lang.Object) atomikosProperties49, (java.lang.Object) properties61);
        java.lang.Object obj82 = properties1.getOrDefault((java.lang.Object) properties6, (java.lang.Object) atomikosProperties49);
        java.util.Properties properties83 = atomikosProperties49.asProperties();
        java.lang.String str85 = properties83.getProperty("{hi!=10}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objCollection7);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objSet18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tm.out" + "'", str28, "tm.out");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(recovery59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "tm.out" + "'", str69, "tm.out");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel73 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel73.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objEnumeration80);
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertNotNull(obj82);
        org.junit.Assert.assertNotNull(properties83);
        org.junit.Assert.assertNull(str85);
    }

    @Test
    public void test00409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00409");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        boolean boolean5 = properties1.contains((java.lang.Object) 5L);
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection7 = properties6.values();
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Properties properties11 = new java.util.Properties(properties10);
        properties11.clear();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.lang.Object obj16 = properties9.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        java.util.Set<java.lang.Object> objSet18 = properties6.keySet();
        java.util.Properties properties19 = new java.util.Properties();
        java.util.Properties properties20 = new java.util.Properties(properties19);
        int int21 = properties20.size();
        boolean boolean22 = properties20.isEmpty();
        java.util.Properties properties23 = new java.util.Properties(properties20);
        java.util.Properties properties24 = new java.util.Properties(properties20);
        int int25 = properties20.size();
        java.util.Properties properties26 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.getConsoleFileName();
        atomikosProperties27.setOutputDir("hi!");
        int int31 = atomikosProperties27.getConsoleFileLimit();
        java.util.Properties properties32 = atomikosProperties27.asProperties();
        java.lang.String str33 = atomikosProperties27.getService();
        atomikosProperties27.setService("hi!");
        java.lang.Object obj37 = properties26.putIfAbsent((java.lang.Object) "hi!", (java.lang.Object) 10L);
        properties20.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        java.util.Properties properties39 = null;
        java.util.Properties properties40 = new java.util.Properties(properties39);
        java.util.Properties properties41 = new java.util.Properties();
        java.util.Properties properties42 = new java.util.Properties(properties41);
        properties42.clear();
        properties40.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties42);
        java.lang.Object obj47 = properties42.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet48 = properties42.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties49.setConsoleFileCount((-1));
        java.lang.String str52 = atomikosProperties49.getOutputDir();
        atomikosProperties49.setLogBaseName("tm.out");
        int int55 = atomikosProperties49.getConsoleFileCount();
        boolean boolean56 = properties42.containsKey((java.lang.Object) atomikosProperties49);
        atomikosProperties49.setConsoleFileCount((int) (byte) -1);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery59 = atomikosProperties49.getRecovery();
        java.util.Properties properties60 = null;
        java.util.Properties properties61 = new java.util.Properties(properties60);
        boolean boolean63 = properties61.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str65 = atomikosProperties64.getTransactionManagerUniqueName();
        atomikosProperties64.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str69 = atomikosProperties68.getConsoleFileName();
        atomikosProperties68.setOutputDir("hi!");
        int int72 = atomikosProperties68.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel73 = atomikosProperties68.getConsoleLogLevel();
        java.lang.Object obj74 = properties61.putIfAbsent((java.lang.Object) atomikosProperties64, (java.lang.Object) atomikosLoggingLevel73);
        java.util.Properties properties75 = new java.util.Properties();
        java.lang.Object obj77 = properties75.get((java.lang.Object) (byte) -1);
        java.util.Properties properties78 = new java.util.Properties(properties75);
        boolean boolean79 = properties61.equals((java.lang.Object) properties75);
        java.util.Enumeration<java.lang.Object> objEnumeration80 = properties61.keys();
        java.lang.Object obj81 = properties20.getOrDefault((java.lang.Object) atomikosProperties49, (java.lang.Object) properties61);
        java.lang.Object obj82 = properties1.getOrDefault((java.lang.Object) properties6, (java.lang.Object) atomikosProperties49);
        java.util.Map<java.lang.Object, java.lang.Object> objMap83 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties6.putAll(objMap83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objCollection7);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objSet18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tm.out" + "'", str28, "tm.out");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(recovery59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "tm.out" + "'", str69, "tm.out");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel73 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel73.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objEnumeration80);
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertNotNull(obj82);
    }

    @Test
    public void test00410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00410");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        atomikosProperties0.setConsoleFileName("");
        atomikosProperties0.setDefaultJtaTimeout((long) '4');
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        java.lang.Object obj8 = properties7.clone();
        java.lang.Object obj9 = null;
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Properties properties11 = new java.util.Properties(properties10);
        properties11.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str15 = atomikosProperties14.getConsoleFileName();
        atomikosProperties14.setOutputDir("hi!");
        int int18 = atomikosProperties14.getConsoleFileLimit();
        java.lang.Object obj19 = properties11.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties14);
        atomikosProperties14.setOutputDir("hi!");
        atomikosProperties14.setLogBaseDir("tm.out");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj24 = properties7.replace(obj9, (java.lang.Object) atomikosProperties14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(obj8);
// flaky:         org.junit.Assert.assertEquals(obj8.toString(), "{com.atomikos.icatch.console_file_name=, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=52}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "{com.atomikos.icatch.console_file_name=, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=52}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "{com.atomikos.icatch.console_file_name=, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=52}");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tm.out" + "'", str15, "tm.out");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNull(obj19);
    }

    @Test
    public void test00411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00411");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.util.Properties properties28 = new java.util.Properties();
        java.util.Properties properties29 = new java.util.Properties(properties28);
        properties29.clear();
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        java.lang.Object obj32 = properties3.get((java.lang.Object) properties29);
        properties29.clear();
        int int34 = properties29.size();
        java.io.Writer writer35 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties29.store(writer35, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test00412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00412");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        boolean boolean10 = atomikosProperties4.isForceShutdownOnVmExit();
        atomikosProperties4.setConsoleFileName("");
        java.lang.String str13 = atomikosProperties4.getService();
        atomikosProperties4.setForceShutdownOnVmExit(true);
        boolean boolean16 = atomikosProperties4.isForceShutdownOnVmExit();
        boolean boolean17 = atomikosProperties4.isThreadedTwoPhaseCommit();
        atomikosProperties4.setSerialJtaTransactions(true);
        atomikosProperties4.setSerialJtaTransactions(true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test00413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00413");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str4 = atomikosProperties3.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel7 = atomikosProperties5.getConsoleLogLevel();
        atomikosProperties3.setConsoleLogLevel(atomikosLoggingLevel7);
        atomikosProperties3.setSerialJtaTransactions(false);
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties3);
        java.util.Enumeration<?> wildcardEnumeration12 = properties2.propertyNames();
        java.io.PrintStream printStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.list(printStream13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tm.out" + "'", str6, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel7 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel7.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration12);
    }

    @Test
    public void test00414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00414");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Properties properties8 = new java.util.Properties();
        java.util.Properties properties9 = new java.util.Properties(properties8);
        properties9.clear();
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        java.lang.Object obj14 = properties9.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        boolean boolean15 = properties5.equals(obj14);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet16 = properties5.entrySet();
        int int17 = properties5.size();
        java.util.Set<java.lang.Object> objSet18 = properties5.keySet();
        java.io.InputStream inputStream19 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.loadFromXML(inputStream19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objEntrySet16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 19 + "'", int17 == 19);
        org.junit.Assert.assertNotNull(objSet18);
    }

    @Test
    public void test00415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00415");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean5 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setConsoleFileCount(10);
        atomikosProperties0.setConsoleFileCount(50);
        java.lang.String str10 = atomikosProperties0.getService();
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        atomikosProperties0.setOutputDir("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=32, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(properties11);
    }

    @Test
    public void test00416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00416");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getTransactionManagerUniqueName();
        boolean boolean2 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setAllowSubTransactions(false);
        int int5 = atomikosProperties0.getMaxActives();
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        properties6.clear();
        java.io.OutputStream outputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties6.storeToXML(outputStream8, "", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
        org.junit.Assert.assertNotNull(properties6);
    }

    @Test
    public void test00417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00417");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        boolean boolean5 = properties1.contains((java.lang.Object) 5L);
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection7 = properties6.values();
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Properties properties11 = new java.util.Properties(properties10);
        properties11.clear();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.lang.Object obj16 = properties9.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        java.util.Set<java.lang.Object> objSet18 = properties6.keySet();
        java.util.Properties properties19 = new java.util.Properties();
        java.util.Properties properties20 = new java.util.Properties(properties19);
        int int21 = properties20.size();
        boolean boolean22 = properties20.isEmpty();
        java.util.Properties properties23 = new java.util.Properties(properties20);
        java.util.Properties properties24 = new java.util.Properties(properties20);
        int int25 = properties20.size();
        java.util.Properties properties26 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.getConsoleFileName();
        atomikosProperties27.setOutputDir("hi!");
        int int31 = atomikosProperties27.getConsoleFileLimit();
        java.util.Properties properties32 = atomikosProperties27.asProperties();
        java.lang.String str33 = atomikosProperties27.getService();
        atomikosProperties27.setService("hi!");
        java.lang.Object obj37 = properties26.putIfAbsent((java.lang.Object) "hi!", (java.lang.Object) 10L);
        properties20.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        java.util.Properties properties39 = null;
        java.util.Properties properties40 = new java.util.Properties(properties39);
        java.util.Properties properties41 = new java.util.Properties();
        java.util.Properties properties42 = new java.util.Properties(properties41);
        properties42.clear();
        properties40.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties42);
        java.lang.Object obj47 = properties42.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet48 = properties42.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties49.setConsoleFileCount((-1));
        java.lang.String str52 = atomikosProperties49.getOutputDir();
        atomikosProperties49.setLogBaseName("tm.out");
        int int55 = atomikosProperties49.getConsoleFileCount();
        boolean boolean56 = properties42.containsKey((java.lang.Object) atomikosProperties49);
        atomikosProperties49.setConsoleFileCount((int) (byte) -1);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery59 = atomikosProperties49.getRecovery();
        java.util.Properties properties60 = null;
        java.util.Properties properties61 = new java.util.Properties(properties60);
        boolean boolean63 = properties61.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str65 = atomikosProperties64.getTransactionManagerUniqueName();
        atomikosProperties64.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str69 = atomikosProperties68.getConsoleFileName();
        atomikosProperties68.setOutputDir("hi!");
        int int72 = atomikosProperties68.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel73 = atomikosProperties68.getConsoleLogLevel();
        java.lang.Object obj74 = properties61.putIfAbsent((java.lang.Object) atomikosProperties64, (java.lang.Object) atomikosLoggingLevel73);
        java.util.Properties properties75 = new java.util.Properties();
        java.lang.Object obj77 = properties75.get((java.lang.Object) (byte) -1);
        java.util.Properties properties78 = new java.util.Properties(properties75);
        boolean boolean79 = properties61.equals((java.lang.Object) properties75);
        java.util.Enumeration<java.lang.Object> objEnumeration80 = properties61.keys();
        java.lang.Object obj81 = properties20.getOrDefault((java.lang.Object) atomikosProperties49, (java.lang.Object) properties61);
        java.lang.Object obj82 = properties1.getOrDefault((java.lang.Object) properties6, (java.lang.Object) atomikosProperties49);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties83 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties83.setConsoleFileCount(100);
        atomikosProperties83.setAllowSubTransactions(true);
        atomikosProperties83.setMaxTimeout((long) '4');
        java.lang.String str90 = atomikosProperties83.getLogBaseDir();
        boolean boolean91 = atomikosProperties83.isForceShutdownOnVmExit();
        atomikosProperties83.setLogBaseDir("tm.out");
        atomikosProperties83.setLogBaseName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=hi!, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        boolean boolean96 = properties1.containsKey((java.lang.Object) atomikosProperties83);
        java.util.Collection<java.lang.Object> objCollection97 = properties1.values();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objCollection7);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objSet18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tm.out" + "'", str28, "tm.out");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(recovery59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "tm.out" + "'", str69, "tm.out");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel73 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel73.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objEnumeration80);
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertNotNull(obj82);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(objCollection97);
    }

    @Test
    public void test00418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00418");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str2 = properties0.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str4 = atomikosProperties3.getTransactionManagerUniqueName();
        boolean boolean5 = atomikosProperties3.isForceShutdownOnVmExit();
        java.util.Properties properties6 = atomikosProperties3.asProperties();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties6);
        java.util.Properties properties8 = new java.util.Properties(properties6);
        java.io.InputStream inputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.load(inputStream9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(properties6);
    }

    @Test
    public void test00419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00419");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties1.elements();
        java.util.Properties properties5 = new java.util.Properties(properties1);
        int int6 = properties1.size();
        java.util.Enumeration<java.lang.Object> objEnumeration7 = properties1.keys();
        java.util.Properties properties8 = new java.util.Properties(properties1);
        java.io.OutputStream outputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(outputStream9, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(objEnumeration7);
    }

    @Test
    public void test00420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00420");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.lang.Object obj7 = properties0.setProperty("", "");
        java.util.Properties properties8 = new java.util.Properties(properties0);
        java.io.Reader reader9 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.load(reader9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test00421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00421");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        int int26 = properties3.size();
        java.util.Properties properties27 = new java.util.Properties(properties3);
        java.lang.Object obj30 = properties3.setProperty("tm.out", "{}");
        java.io.OutputStream outputStream31 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.storeToXML(outputStream31, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=hi!, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNull(obj30);
    }

    @Test
    public void test00422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00422");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Set<java.lang.Object> objSet4 = properties1.keySet();
        java.util.Properties properties5 = null;
        java.util.Properties properties6 = new java.util.Properties(properties5);
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Properties properties8 = new java.util.Properties(properties7);
        properties8.clear();
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.getConsoleFileName();
        atomikosProperties12.setOutputDir("hi!");
        int int16 = atomikosProperties12.getConsoleFileLimit();
        java.util.Properties properties17 = atomikosProperties12.asProperties();
        boolean boolean18 = properties8.containsValue((java.lang.Object) atomikosProperties12);
        boolean boolean19 = properties8.isEmpty();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Properties properties21 = new java.util.Properties(properties1);
        java.util.Enumeration<java.lang.Object> objEnumeration22 = properties1.keys();
        java.util.Properties properties23 = new java.util.Properties(properties1);
        java.io.OutputStream outputStream24 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream24, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objSet4);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tm.out" + "'", str13, "tm.out");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objEnumeration22);
    }

    @Test
    public void test00423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00423");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties1.setProperty("", "hi!");
        java.util.Properties properties9 = new java.util.Properties(properties1);
        java.util.Enumeration<?> wildcardEnumeration10 = properties9.propertyNames();
        java.util.Properties properties11 = new java.util.Properties(properties9);
        java.io.OutputStream outputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties11.save(outputStream12, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=hi!, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(wildcardEnumeration10);
    }

    @Test
    public void test00424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00424");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties0.containsValue((java.lang.Object) 10000L);
        java.util.Properties properties5 = null;
        java.util.Properties properties6 = new java.util.Properties(properties5);
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Properties properties8 = new java.util.Properties(properties7);
        properties8.clear();
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        java.lang.Object obj12 = properties0.putIfAbsent((java.lang.Object) (byte) 1, (java.lang.Object) properties8);
        java.lang.Object obj15 = properties8.setProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setConsoleFileCount((-1));
        java.lang.String str19 = atomikosProperties16.getOutputDir();
        java.lang.Class<?> wildcardClass20 = atomikosProperties16.getClass();
        java.util.Properties properties21 = null;
        java.util.Properties properties22 = new java.util.Properties(properties21);
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Properties properties24 = new java.util.Properties(properties23);
        properties24.clear();
        properties22.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        java.lang.Object obj29 = properties22.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        boolean boolean30 = properties22.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties22.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = properties22.entrySet();
        boolean boolean33 = properties8.remove((java.lang.Object) atomikosProperties16, (java.lang.Object) properties22);
        java.io.OutputStream outputStream34 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.store(outputStream34, "{hi!=10}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objEnumeration31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test00425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00425");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties8.getConsoleLogLevel();
        java.lang.Object obj14 = properties1.putIfAbsent((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosLoggingLevel13);
        java.util.Collection<java.lang.Object> objCollection15 = properties1.values();
        java.io.OutputStream outputStream16 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream16, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=hi!, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(objCollection15);
    }

    @Test
    public void test00426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00426");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties1.setProperty("", "hi!");
        java.util.Set<java.lang.Object> objSet9 = properties1.keySet();
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties1.elements();
        boolean boolean11 = properties1.isEmpty();
        java.io.OutputStream outputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(outputStream12, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objSet9);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test00427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00427");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        boolean boolean10 = atomikosProperties4.isForceShutdownOnVmExit();
        atomikosProperties4.setConsoleFileName("");
        java.lang.String str13 = atomikosProperties4.getService();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery14 = atomikosProperties4.getRecovery();
        java.lang.String str15 = atomikosProperties4.getTransactionManagerUniqueName();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(recovery14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test00428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00428");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties3.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        properties10.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str14 = atomikosProperties13.getConsoleFileName();
        atomikosProperties13.setOutputDir("hi!");
        int int17 = atomikosProperties13.getConsoleFileLimit();
        java.lang.Object obj18 = properties10.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties13);
        atomikosProperties13.setLogBaseName("tm.out");
        boolean boolean21 = properties3.containsKey((java.lang.Object) "tm.out");
        java.util.Properties properties22 = null;
        java.util.Properties properties23 = new java.util.Properties(properties22);
        java.util.Properties properties24 = new java.util.Properties();
        java.util.Properties properties25 = new java.util.Properties(properties24);
        properties25.clear();
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties25);
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties23);
        java.util.Properties properties29 = new java.util.Properties(properties23);
        java.util.Properties properties30 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection31 = properties30.values();
        java.util.Properties properties32 = new java.util.Properties(properties30);
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties30);
        java.io.InputStream inputStream34 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties23.loadFromXML(inputStream34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tm.out" + "'", str14, "tm.out");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objCollection31);
    }

    @Test
    public void test00429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00429");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.setDelay((long) 5);
        recovery0.setMaxRetries((-1));
        int int5 = recovery0.getMaxRetries();
        recovery0.setRetryInterval(86400000L);
        recovery0.setDelay(52L);
        recovery0.setDelay(500L);
        int int12 = recovery0.getMaxRetries();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test00430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00430");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        atomikosProperties4.setLogBaseName("tm.out");
        long long12 = atomikosProperties4.getDefaultJtaTimeout();
        atomikosProperties4.setTransactionManagerUniqueName("hi!");
        atomikosProperties4.setSerialJtaTransactions(true);
        java.lang.String str17 = atomikosProperties4.getTransactionManagerUniqueName();
        int int18 = atomikosProperties4.getConsoleFileCount();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test00431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00431");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties1.elements();
        java.util.Properties properties5 = new java.util.Properties(properties1);
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Properties properties7 = new java.util.Properties(properties6);
        int int8 = properties7.size();
        boolean boolean9 = properties7.isEmpty();
        java.util.Properties properties10 = new java.util.Properties(properties7);
        java.util.Properties properties11 = new java.util.Properties(properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.getConsoleFileName();
        atomikosProperties12.setOutputDir("hi!");
        int int16 = atomikosProperties12.getConsoleFileLimit();
        java.util.Properties properties17 = atomikosProperties12.asProperties();
        java.lang.String str18 = atomikosProperties12.getService();
        atomikosProperties12.setService("hi!");
        atomikosProperties12.setForceShutdownOnVmExit(true);
        atomikosProperties12.setThreadedTwoPhaseCommit(false);
        java.util.Properties properties25 = atomikosProperties12.asProperties();
        java.util.Properties properties27 = new java.util.Properties();
        java.util.Properties properties28 = new java.util.Properties(properties27);
        int int29 = properties28.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery30 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long31 = recovery30.getForgetOrphanedLogEntriesDelay();
        java.lang.Class<?> wildcardClass32 = recovery30.getClass();
        boolean boolean33 = properties28.containsKey((java.lang.Object) wildcardClass32);
        boolean boolean34 = properties7.replace((java.lang.Object) properties25, (java.lang.Object) 1.0f, (java.lang.Object) wildcardClass32);
        java.util.Properties properties35 = new java.util.Properties(properties25);
        java.util.Properties properties36 = new java.util.Properties();
        java.util.Properties properties37 = new java.util.Properties(properties36);
        properties37.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str41 = atomikosProperties40.getConsoleFileName();
        atomikosProperties40.setOutputDir("hi!");
        int int44 = atomikosProperties40.getConsoleFileLimit();
        java.lang.Object obj45 = properties37.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties40);
        boolean boolean46 = atomikosProperties40.isForceShutdownOnVmExit();
        atomikosProperties40.setConsoleFileName("");
        java.lang.String str49 = atomikosProperties40.getService();
        java.util.Properties properties50 = atomikosProperties40.asProperties();
        boolean boolean51 = properties1.remove((java.lang.Object) properties25, (java.lang.Object) atomikosProperties40);
        java.io.PrintStream printStream52 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printStream52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tm.out" + "'", str13, "tm.out");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 86400000L + "'", long31 == 86400000L);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "tm.out" + "'", str41, "tm.out");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test00432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00432");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.lang.Object obj4 = properties0.setProperty("hi!", "");
        java.util.Properties properties5 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.getConsoleFileName();
        java.lang.Object obj9 = properties5.put((java.lang.Object) atomikosProperties6, (java.lang.Object) 0L);
        java.lang.Object obj12 = properties5.setProperty("", "");
        java.util.Properties properties13 = new java.util.Properties(properties5);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties13);
        java.util.Collection<java.lang.Object> objCollection15 = properties0.values();
        java.util.Set<java.lang.String> strSet16 = properties0.stringPropertyNames();
        java.io.InputStream inputStream17 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.load(inputStream17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tm.out" + "'", str7, "tm.out");
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(objCollection15);
        org.junit.Assert.assertNotNull(strSet16);
    }

    @Test
    public void test00433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00433");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties1.elements();
        java.util.Properties properties5 = new java.util.Properties(properties1);
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Properties properties7 = new java.util.Properties(properties6);
        int int8 = properties7.size();
        boolean boolean9 = properties7.isEmpty();
        java.util.Properties properties10 = new java.util.Properties(properties7);
        java.util.Properties properties11 = new java.util.Properties(properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.getConsoleFileName();
        atomikosProperties12.setOutputDir("hi!");
        int int16 = atomikosProperties12.getConsoleFileLimit();
        java.util.Properties properties17 = atomikosProperties12.asProperties();
        java.lang.String str18 = atomikosProperties12.getService();
        atomikosProperties12.setService("hi!");
        atomikosProperties12.setForceShutdownOnVmExit(true);
        atomikosProperties12.setThreadedTwoPhaseCommit(false);
        java.util.Properties properties25 = atomikosProperties12.asProperties();
        java.util.Properties properties27 = new java.util.Properties();
        java.util.Properties properties28 = new java.util.Properties(properties27);
        int int29 = properties28.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery30 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long31 = recovery30.getForgetOrphanedLogEntriesDelay();
        java.lang.Class<?> wildcardClass32 = recovery30.getClass();
        boolean boolean33 = properties28.containsKey((java.lang.Object) wildcardClass32);
        boolean boolean34 = properties7.replace((java.lang.Object) properties25, (java.lang.Object) 1.0f, (java.lang.Object) wildcardClass32);
        java.util.Properties properties35 = new java.util.Properties(properties25);
        java.util.Properties properties36 = new java.util.Properties();
        java.util.Properties properties37 = new java.util.Properties(properties36);
        properties37.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str41 = atomikosProperties40.getConsoleFileName();
        atomikosProperties40.setOutputDir("hi!");
        int int44 = atomikosProperties40.getConsoleFileLimit();
        java.lang.Object obj45 = properties37.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties40);
        boolean boolean46 = atomikosProperties40.isForceShutdownOnVmExit();
        atomikosProperties40.setConsoleFileName("");
        java.lang.String str49 = atomikosProperties40.getService();
        java.util.Properties properties50 = atomikosProperties40.asProperties();
        boolean boolean51 = properties1.remove((java.lang.Object) properties25, (java.lang.Object) atomikosProperties40);
        java.util.Properties properties52 = new java.util.Properties(properties1);
        java.io.Writer writer53 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(writer53, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tm.out" + "'", str13, "tm.out");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 86400000L + "'", long31 == 86400000L);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "tm.out" + "'", str41, "tm.out");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test00434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00434");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Set<java.lang.Object> objSet4 = properties1.keySet();
        java.util.Properties properties5 = null;
        java.util.Properties properties6 = new java.util.Properties(properties5);
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Properties properties8 = new java.util.Properties(properties7);
        properties8.clear();
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.getConsoleFileName();
        atomikosProperties12.setOutputDir("hi!");
        int int16 = atomikosProperties12.getConsoleFileLimit();
        java.util.Properties properties17 = atomikosProperties12.asProperties();
        boolean boolean18 = properties8.containsValue((java.lang.Object) atomikosProperties12);
        boolean boolean19 = properties8.isEmpty();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Properties properties21 = new java.util.Properties(properties1);
        java.util.Enumeration<java.lang.Object> objEnumeration22 = properties1.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery23 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery23.setDelay((long) 5);
        int int26 = recovery23.getMaxRetries();
        recovery23.setRetryInterval((long) 'a');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setConsoleFileCount((-1));
        java.lang.String str32 = atomikosProperties29.getOutputDir();
        atomikosProperties29.setLogBaseName("tm.out");
        atomikosProperties29.setLogBaseDir("tm.out");
        java.lang.String str37 = atomikosProperties29.getLogBaseDir();
        atomikosProperties29.setDefaultJtaTimeout(10L);
        int int40 = atomikosProperties29.getMaxActives();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str42 = atomikosProperties41.getConsoleFileName();
        java.lang.String str43 = atomikosProperties41.getTransactionManagerUniqueName();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean44 = properties1.replace((java.lang.Object) recovery23, (java.lang.Object) int40, (java.lang.Object) str43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objSet4);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tm.out" + "'", str13, "tm.out");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objEnumeration22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tm.out" + "'", str37, "tm.out");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 50 + "'", int40 == 50);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "tm.out" + "'", str42, "tm.out");
        org.junit.Assert.assertNull(str43);
    }

    @Test
    public void test00435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00435");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setConsoleFileCount((-1));
        atomikosProperties6.setTransactionManagerUniqueName("tm.out");
        java.lang.Object obj11 = properties0.remove((java.lang.Object) atomikosProperties6);
        boolean boolean12 = atomikosProperties6.isForceShutdownOnVmExit();
        java.util.Properties properties13 = atomikosProperties6.asProperties();
        boolean boolean14 = atomikosProperties6.isThreadedTwoPhaseCommit();
        int int15 = atomikosProperties6.getConsoleFileCount();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test00436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00436");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties0.keys();
        java.util.Properties properties4 = new java.util.Properties(properties0);
        java.lang.String str5 = properties0.toString();
        java.io.OutputStream outputStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(outputStream6, "{10=10.0}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
    }

    @Test
    public void test00437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00437");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Collection<java.lang.Object> objCollection6 = properties3.values();
        java.lang.Object obj7 = null;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Properties properties11 = new java.util.Properties(properties10);
        properties11.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str15 = atomikosProperties14.getConsoleFileName();
        atomikosProperties14.setOutputDir("hi!");
        int int18 = atomikosProperties14.getConsoleFileLimit();
        java.lang.Object obj19 = properties11.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties14);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel20 = atomikosProperties14.getConsoleLogLevel();
        java.lang.String str21 = atomikosProperties14.getTransactionManagerUniqueName();
        java.util.Properties properties22 = new java.util.Properties();
        java.util.Properties properties23 = new java.util.Properties(properties22);
        properties23.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str27 = atomikosProperties26.getConsoleFileName();
        atomikosProperties26.setOutputDir("hi!");
        int int30 = atomikosProperties26.getConsoleFileLimit();
        java.lang.Object obj31 = properties23.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties26);
        boolean boolean32 = atomikosProperties26.isForceShutdownOnVmExit();
        atomikosProperties26.setConsoleFileName("");
        java.lang.String str35 = atomikosProperties26.getService();
        java.util.Properties properties36 = atomikosProperties26.asProperties();
        java.lang.Object obj37 = null;
        boolean boolean38 = properties36.equals(obj37);
        java.util.Properties properties39 = null;
        java.util.Properties properties40 = new java.util.Properties(properties39);
        boolean boolean42 = properties40.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str44 = atomikosProperties43.getTransactionManagerUniqueName();
        atomikosProperties43.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str48 = atomikosProperties47.getConsoleFileName();
        atomikosProperties47.setOutputDir("hi!");
        int int51 = atomikosProperties47.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel52 = atomikosProperties47.getConsoleLogLevel();
        java.lang.Object obj53 = properties40.putIfAbsent((java.lang.Object) atomikosProperties43, (java.lang.Object) atomikosLoggingLevel52);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery54 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery54.setRetryInterval((long) (byte) 10);
        int int57 = recovery54.getMaxRetries();
        recovery54.setDelay(10L);
        recovery54.setRetryInterval((long) (short) 10);
        java.lang.Object obj62 = properties36.replace((java.lang.Object) atomikosLoggingLevel52, (java.lang.Object) recovery54);
        atomikosProperties14.setConsoleLogLevel(atomikosLoggingLevel52);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean64 = properties3.replace(obj7, (java.lang.Object) str9, (java.lang.Object) atomikosProperties14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tm.out" + "'", str15, "tm.out");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel20 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel20.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tm.out" + "'", str27, "tm.out");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "tm.out" + "'", str48, "tm.out");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel52 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel52.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 5 + "'", int57 == 5);
        org.junit.Assert.assertNull(obj62);
    }

    @Test
    public void test00438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00438");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        int int3 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setOutputDir("");
        java.lang.String str6 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setEnableLogging(true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tm.out" + "'", str6, "tm.out");
    }

    @Test
    public void test00439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00439");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.lang.Object obj3 = null;
        boolean boolean4 = properties0.equals(obj3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.keys();
        java.lang.Object obj6 = null;
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection8 = properties7.values();
        java.util.Properties properties9 = new java.util.Properties(properties7);
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties9.elements();
        java.lang.String str12 = properties9.getProperty("tmlog");
        java.util.Properties properties13 = new java.util.Properties(properties9);
        java.util.Properties properties14 = new java.util.Properties();
        java.util.Properties properties15 = new java.util.Properties(properties14);
        int int16 = properties15.size();
        boolean boolean17 = properties15.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties15.elements();
        java.util.Properties properties19 = new java.util.Properties(properties15);
        java.util.Enumeration<?> wildcardEnumeration20 = properties15.propertyNames();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean21 = properties0.replace(obj6, (java.lang.Object) properties9, (java.lang.Object) wildcardEnumeration20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(objCollection8);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertNotNull(wildcardEnumeration20);
    }

    @Test
    public void test00440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00440");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setConsoleFileCount(100);
        atomikosProperties6.setAllowSubTransactions(true);
        boolean boolean11 = atomikosProperties6.isForceShutdownOnVmExit();
        boolean boolean12 = properties5.contains((java.lang.Object) atomikosProperties6);
        java.io.OutputStream outputStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.store(outputStream13, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test00441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00441");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str2 = properties0.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str4 = atomikosProperties3.getTransactionManagerUniqueName();
        boolean boolean5 = atomikosProperties3.isForceShutdownOnVmExit();
        java.util.Properties properties6 = atomikosProperties3.asProperties();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties6);
        java.util.Properties properties8 = new java.util.Properties(properties6);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection10 = properties9.values();
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        java.util.Properties properties13 = new java.util.Properties();
        java.util.Properties properties14 = new java.util.Properties(properties13);
        properties14.clear();
        properties12.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties14);
        java.lang.Object obj19 = properties12.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties12);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.setConsoleFileCount((-1));
        java.lang.String str24 = atomikosProperties21.getOutputDir();
        atomikosProperties21.setLogBaseName("tm.out");
        boolean boolean27 = properties12.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties28.setConsoleFileCount(100);
        atomikosProperties28.setAllowSubTransactions(true);
        java.lang.Object obj33 = properties12.remove((java.lang.Object) atomikosProperties28);
        java.util.Set<java.lang.Object> objSet34 = properties12.keySet();
        java.util.Properties properties35 = new java.util.Properties(properties12);
        java.util.Set<java.lang.String> strSet36 = properties35.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet37 = properties35.keySet();
        java.lang.Object obj38 = properties6.get((java.lang.Object) objSet37);
        java.io.PrintStream printStream39 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties6.list(printStream39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNotNull(objCollection10);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(objSet34);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(objSet37);
        org.junit.Assert.assertNull(obj38);
    }

    @Test
    public void test00442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00442");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet6 = properties5.stringPropertyNames();
        java.util.Properties properties7 = new java.util.Properties(properties5);
        java.io.InputStream inputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties7.load(inputStream8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(strSet6);
    }

    @Test
    public void test00443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00443");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties1.entrySet();
        java.util.Properties properties11 = new java.util.Properties(properties1);
        java.util.Enumeration<java.lang.Object> objEnumeration12 = properties1.keys();
        java.io.InputStream inputStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.loadFromXML(inputStream13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(objEntrySet10);
        org.junit.Assert.assertNotNull(objEnumeration12);
    }

    @Test
    public void test00444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00444");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Properties properties7 = new java.util.Properties(properties6);
        properties7.clear();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.util.Properties properties10 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.getConsoleFileName();
        java.lang.Object obj14 = properties10.put((java.lang.Object) atomikosProperties11, (java.lang.Object) 0L);
        java.lang.Object obj17 = properties10.setProperty("", "");
        java.util.Properties properties18 = new java.util.Properties(properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.getConsoleFileName();
        atomikosProperties19.setOutputDir("hi!");
        int int23 = atomikosProperties19.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel24 = atomikosProperties19.getConsoleLogLevel();
        java.lang.Object obj25 = properties5.getOrDefault((java.lang.Object) properties10, (java.lang.Object) atomikosProperties19);
        java.util.Properties properties26 = atomikosProperties19.asProperties();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tm.out" + "'", str12, "tm.out");
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tm.out" + "'", str20, "tm.out");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel24 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel24.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(properties26);
    }

    @Test
    public void test00445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00445");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet6 = properties5.stringPropertyNames();
        java.util.Properties properties7 = new java.util.Properties(properties5);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Properties properties11 = new java.util.Properties(properties10);
        properties11.clear();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.lang.Object obj16 = properties11.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet17 = properties11.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setConsoleFileCount((-1));
        java.lang.String str21 = atomikosProperties18.getOutputDir();
        atomikosProperties18.setLogBaseName("tm.out");
        int int24 = atomikosProperties18.getConsoleFileCount();
        boolean boolean25 = properties11.containsKey((java.lang.Object) atomikosProperties18);
        atomikosProperties18.setConsoleFileCount((int) (byte) -1);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery28 = atomikosProperties18.getRecovery();
        java.util.Properties properties29 = new java.util.Properties();
        java.util.Properties properties30 = new java.util.Properties(properties29);
        properties30.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.getConsoleFileName();
        atomikosProperties33.setOutputDir("hi!");
        int int37 = atomikosProperties33.getConsoleFileLimit();
        java.lang.Object obj38 = properties30.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties33);
        atomikosProperties33.setLogBaseName("tm.out");
        atomikosProperties33.setForceShutdownOnVmExit(false);
        java.lang.Object obj43 = properties7.replace((java.lang.Object) recovery28, (java.lang.Object) atomikosProperties33);
        recovery28.setMaxRetries(0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(recovery28);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tm.out" + "'", str34, "tm.out");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNull(obj43);
    }

    @Test
    public void test00446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00446");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties1.setProperty("", "hi!");
        java.util.Properties properties9 = new java.util.Properties(properties1);
        java.util.Enumeration<?> wildcardEnumeration10 = properties9.propertyNames();
        java.lang.Object obj11 = properties9.clone();
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(wildcardEnumeration10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "{}");
    }

    @Test
    public void test00447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00447");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        boolean boolean5 = properties1.contains((java.lang.Object) 5L);
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection7 = properties6.values();
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Properties properties11 = new java.util.Properties(properties10);
        properties11.clear();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.lang.Object obj16 = properties9.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        java.util.Set<java.lang.Object> objSet18 = properties6.keySet();
        java.util.Properties properties19 = new java.util.Properties();
        java.util.Properties properties20 = new java.util.Properties(properties19);
        int int21 = properties20.size();
        boolean boolean22 = properties20.isEmpty();
        java.util.Properties properties23 = new java.util.Properties(properties20);
        java.util.Properties properties24 = new java.util.Properties(properties20);
        int int25 = properties20.size();
        java.util.Properties properties26 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.getConsoleFileName();
        atomikosProperties27.setOutputDir("hi!");
        int int31 = atomikosProperties27.getConsoleFileLimit();
        java.util.Properties properties32 = atomikosProperties27.asProperties();
        java.lang.String str33 = atomikosProperties27.getService();
        atomikosProperties27.setService("hi!");
        java.lang.Object obj37 = properties26.putIfAbsent((java.lang.Object) "hi!", (java.lang.Object) 10L);
        properties20.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        java.util.Properties properties39 = null;
        java.util.Properties properties40 = new java.util.Properties(properties39);
        java.util.Properties properties41 = new java.util.Properties();
        java.util.Properties properties42 = new java.util.Properties(properties41);
        properties42.clear();
        properties40.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties42);
        java.lang.Object obj47 = properties42.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet48 = properties42.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties49.setConsoleFileCount((-1));
        java.lang.String str52 = atomikosProperties49.getOutputDir();
        atomikosProperties49.setLogBaseName("tm.out");
        int int55 = atomikosProperties49.getConsoleFileCount();
        boolean boolean56 = properties42.containsKey((java.lang.Object) atomikosProperties49);
        atomikosProperties49.setConsoleFileCount((int) (byte) -1);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery59 = atomikosProperties49.getRecovery();
        java.util.Properties properties60 = null;
        java.util.Properties properties61 = new java.util.Properties(properties60);
        boolean boolean63 = properties61.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str65 = atomikosProperties64.getTransactionManagerUniqueName();
        atomikosProperties64.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str69 = atomikosProperties68.getConsoleFileName();
        atomikosProperties68.setOutputDir("hi!");
        int int72 = atomikosProperties68.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel73 = atomikosProperties68.getConsoleLogLevel();
        java.lang.Object obj74 = properties61.putIfAbsent((java.lang.Object) atomikosProperties64, (java.lang.Object) atomikosLoggingLevel73);
        java.util.Properties properties75 = new java.util.Properties();
        java.lang.Object obj77 = properties75.get((java.lang.Object) (byte) -1);
        java.util.Properties properties78 = new java.util.Properties(properties75);
        boolean boolean79 = properties61.equals((java.lang.Object) properties75);
        java.util.Enumeration<java.lang.Object> objEnumeration80 = properties61.keys();
        java.lang.Object obj81 = properties20.getOrDefault((java.lang.Object) atomikosProperties49, (java.lang.Object) properties61);
        java.lang.Object obj82 = properties1.getOrDefault((java.lang.Object) properties6, (java.lang.Object) atomikosProperties49);
        java.io.OutputStream outputStream83 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties6.storeToXML(outputStream83, "", "{hi!=10}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objCollection7);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objSet18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tm.out" + "'", str28, "tm.out");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(recovery59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "tm.out" + "'", str69, "tm.out");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel73 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel73.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objEnumeration80);
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertNotNull(obj82);
    }

    @Test
    public void test00448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00448");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.lang.String str6 = atomikosProperties0.getService();
        atomikosProperties0.setService("hi!");
        atomikosProperties0.setConsoleFileName("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = atomikosProperties0.getRecovery();
        boolean boolean12 = atomikosProperties0.isSerialJtaTransactions();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(recovery11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test00449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00449");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str4 = atomikosProperties3.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel7 = atomikosProperties5.getConsoleLogLevel();
        atomikosProperties3.setConsoleLogLevel(atomikosLoggingLevel7);
        atomikosProperties3.setSerialJtaTransactions(false);
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties3);
        java.util.Enumeration<?> wildcardEnumeration12 = properties2.propertyNames();
        java.util.Map<java.lang.Object, java.lang.Object> objMap13 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.putAll(objMap13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tm.out" + "'", str6, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel7 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel7.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration12);
    }

    @Test
    public void test00450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00450");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        properties1.clear();
        java.io.OutputStream outputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.save(outputStream5, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=100}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test00451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00451");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        java.lang.String str3 = atomikosProperties0.getOutputDir();
        long long4 = atomikosProperties0.getCheckpointInterval();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 500L + "'", long4 == 500L);
    }

    @Test
    public void test00452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00452");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Properties properties25 = new java.util.Properties(properties3);
        java.lang.String str27 = properties25.getProperty("");
        java.util.Set<java.lang.Object> objSet28 = properties25.keySet();
        java.util.Properties properties29 = null;
        java.util.Properties properties30 = new java.util.Properties(properties29);
        java.util.Collection<java.lang.Object> objCollection31 = properties30.values();
        java.util.Properties properties32 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection33 = properties32.values();
        java.util.Properties properties34 = null;
        java.util.Properties properties35 = new java.util.Properties(properties34);
        java.util.Properties properties36 = new java.util.Properties();
        java.util.Properties properties37 = new java.util.Properties(properties36);
        properties37.clear();
        properties35.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties37);
        java.lang.Object obj42 = properties35.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties32.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties35);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setConsoleFileCount((-1));
        java.lang.String str47 = atomikosProperties44.getOutputDir();
        atomikosProperties44.setLogBaseName("tm.out");
        boolean boolean50 = properties35.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties51.setConsoleFileCount(100);
        atomikosProperties51.setAllowSubTransactions(true);
        java.lang.Object obj56 = properties35.remove((java.lang.Object) atomikosProperties51);
        java.util.Set<java.lang.Object> objSet57 = properties35.keySet();
        int int58 = properties35.size();
        boolean boolean60 = properties25.replace((java.lang.Object) properties30, (java.lang.Object) properties35, (java.lang.Object) 86400000L);
        java.io.OutputStream outputStream61 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties25.storeToXML(outputStream61, "{hi!=}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(objSet28);
        org.junit.Assert.assertNotNull(objCollection31);
        org.junit.Assert.assertNotNull(objCollection33);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(objSet57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test00453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00453");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        java.io.OutputStream outputStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream6, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=32, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test00454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00454");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.get((java.lang.Object) (byte) -1);
        java.util.Properties properties3 = new java.util.Properties(properties0);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        java.lang.Object obj13 = properties5.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties8);
        boolean boolean14 = atomikosProperties8.isForceShutdownOnVmExit();
        atomikosProperties8.setConsoleFileName("");
        java.lang.String str17 = atomikosProperties8.getService();
        atomikosProperties8.setForceShutdownOnVmExit(true);
        boolean boolean20 = atomikosProperties8.isForceShutdownOnVmExit();
        java.lang.Object obj21 = properties0.remove((java.lang.Object) atomikosProperties8);
        java.lang.Class<?> wildcardClass22 = atomikosProperties8.getClass();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test00455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00455");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        java.util.Set<java.lang.Object> objSet6 = properties5.keySet();
        java.lang.Object obj9 = properties5.setProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "hi!");
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        boolean boolean13 = properties11.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str15 = atomikosProperties14.getTransactionManagerUniqueName();
        atomikosProperties14.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str19 = atomikosProperties18.getConsoleFileName();
        atomikosProperties18.setOutputDir("hi!");
        int int22 = atomikosProperties18.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel23 = atomikosProperties18.getConsoleLogLevel();
        java.lang.Object obj24 = properties11.putIfAbsent((java.lang.Object) atomikosProperties14, (java.lang.Object) atomikosLoggingLevel23);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str26 = atomikosProperties25.getConsoleFileName();
        atomikosProperties25.setOutputDir("hi!");
        int int29 = atomikosProperties25.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel30 = atomikosProperties25.getConsoleLogLevel();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery31 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long32 = recovery31.getForgetOrphanedLogEntriesDelay();
        java.util.Properties properties33 = new java.util.Properties();
        java.util.Properties properties34 = new java.util.Properties(properties33);
        properties34.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str38 = atomikosProperties37.getConsoleFileName();
        atomikosProperties37.setOutputDir("hi!");
        int int41 = atomikosProperties37.getConsoleFileLimit();
        java.lang.Object obj42 = properties34.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties37);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel43 = atomikosProperties37.getConsoleLogLevel();
        java.lang.String str44 = atomikosProperties37.getTransactionManagerUniqueName();
        atomikosProperties37.setThreadedTwoPhaseCommit(false);
        boolean boolean47 = properties11.replace((java.lang.Object) atomikosProperties25, (java.lang.Object) recovery31, (java.lang.Object) false);
        boolean boolean48 = properties5.containsKey((java.lang.Object) false);
        java.io.OutputStream outputStream49 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.storeToXML(outputStream49, "{hi!=10}", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(objSet6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tm.out" + "'", str19, "tm.out");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel23 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel23.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "tm.out" + "'", str26, "tm.out");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel30 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel30.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 86400000L + "'", long32 == 86400000L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tm.out" + "'", str38, "tm.out");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel43 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel43.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test00456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00456");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        boolean boolean4 = properties2.isEmpty();
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection6 = properties5.values();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        properties10.clear();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.lang.Object obj15 = properties8.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        boolean boolean20 = properties18.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties18.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet22 = properties18.entrySet();
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection24 = properties23.values();
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        java.util.Properties properties27 = new java.util.Properties();
        java.util.Properties properties28 = new java.util.Properties(properties27);
        properties28.clear();
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        java.lang.Object obj33 = properties26.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setConsoleFileCount((-1));
        java.lang.String str38 = atomikosProperties35.getOutputDir();
        atomikosProperties35.setLogBaseName("tm.out");
        boolean boolean41 = properties26.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties42.setConsoleFileCount(100);
        atomikosProperties42.setAllowSubTransactions(true);
        java.lang.Object obj47 = properties26.remove((java.lang.Object) atomikosProperties42);
        java.util.Set<java.lang.Object> objSet48 = properties26.keySet();
        boolean boolean49 = properties2.replace((java.lang.Object) properties8, (java.lang.Object) objEntrySet22, (java.lang.Object) properties26);
        java.util.Collection<java.lang.Object> objCollection50 = properties26.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str52 = atomikosProperties51.getConsoleFileName();
        java.lang.String str53 = atomikosProperties51.getTransactionManagerUniqueName();
        atomikosProperties51.setCheckpointInterval((long) (byte) 0);
        atomikosProperties51.setConsoleFileName("hi!");
        java.util.Properties properties58 = atomikosProperties51.asProperties();
        java.util.Properties properties59 = null;
        java.util.Properties properties60 = new java.util.Properties(properties59);
        java.util.Properties properties61 = new java.util.Properties();
        java.util.Properties properties62 = new java.util.Properties(properties61);
        properties62.clear();
        properties60.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties62);
        java.util.Collection<java.lang.Object> objCollection65 = properties62.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str67 = atomikosProperties66.getConsoleFileName();
        atomikosProperties66.setOutputDir("hi!");
        int int70 = atomikosProperties66.getConsoleFileLimit();
        java.util.Properties properties71 = atomikosProperties66.asProperties();
        boolean boolean72 = properties62.containsValue((java.lang.Object) atomikosProperties66);
        java.lang.String str73 = atomikosProperties66.getService();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj74 = properties26.putIfAbsent((java.lang.Object) atomikosProperties51, (java.lang.Object) str73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNotNull(objEntrySet22);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(objSet48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(objCollection50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "tm.out" + "'", str52, "tm.out");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(properties58);
        org.junit.Assert.assertNotNull(objCollection65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "tm.out" + "'", str67, "tm.out");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(properties71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(str73);
    }

    @Test
    public void test00457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00457");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        java.lang.String str3 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseName("tm.out");
        atomikosProperties0.setLogBaseDir("tm.out");
        java.lang.String str8 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setDefaultJtaTimeout(10L);
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery12 = atomikosProperties0.getRecovery();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery13 = atomikosProperties0.getRecovery();
        java.lang.String str14 = atomikosProperties0.getOutputDir();
        int int15 = atomikosProperties0.getConsoleFileLimit();
        long long16 = atomikosProperties0.getMaxTimeout();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tm.out" + "'", str8, "tm.out");
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(recovery12);
        org.junit.Assert.assertNotNull(recovery13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 300000L + "'", long16 == 300000L);
    }

    @Test
    public void test00458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00458");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Properties properties4 = new java.util.Properties(properties1);
        java.util.Properties properties5 = new java.util.Properties(properties1);
        int int6 = properties1.size();
        java.util.Properties properties7 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        java.util.Properties properties13 = atomikosProperties8.asProperties();
        java.lang.String str14 = atomikosProperties8.getService();
        atomikosProperties8.setService("hi!");
        java.lang.Object obj18 = properties7.putIfAbsent((java.lang.Object) "hi!", (java.lang.Object) 10L);
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.util.Properties properties20 = null;
        java.util.Properties properties21 = new java.util.Properties(properties20);
        java.util.Properties properties22 = new java.util.Properties();
        java.util.Properties properties23 = new java.util.Properties(properties22);
        properties23.clear();
        properties21.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties23);
        java.lang.Object obj28 = properties23.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet29 = properties23.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties30.setConsoleFileCount((-1));
        java.lang.String str33 = atomikosProperties30.getOutputDir();
        atomikosProperties30.setLogBaseName("tm.out");
        int int36 = atomikosProperties30.getConsoleFileCount();
        boolean boolean37 = properties23.containsKey((java.lang.Object) atomikosProperties30);
        atomikosProperties30.setConsoleFileCount((int) (byte) -1);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery40 = atomikosProperties30.getRecovery();
        java.util.Properties properties41 = null;
        java.util.Properties properties42 = new java.util.Properties(properties41);
        boolean boolean44 = properties42.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str46 = atomikosProperties45.getTransactionManagerUniqueName();
        atomikosProperties45.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str50 = atomikosProperties49.getConsoleFileName();
        atomikosProperties49.setOutputDir("hi!");
        int int53 = atomikosProperties49.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel54 = atomikosProperties49.getConsoleLogLevel();
        java.lang.Object obj55 = properties42.putIfAbsent((java.lang.Object) atomikosProperties45, (java.lang.Object) atomikosLoggingLevel54);
        java.util.Properties properties56 = new java.util.Properties();
        java.lang.Object obj58 = properties56.get((java.lang.Object) (byte) -1);
        java.util.Properties properties59 = new java.util.Properties(properties56);
        boolean boolean60 = properties42.equals((java.lang.Object) properties56);
        java.util.Enumeration<java.lang.Object> objEnumeration61 = properties42.keys();
        java.lang.Object obj62 = properties1.getOrDefault((java.lang.Object) atomikosProperties30, (java.lang.Object) properties42);
        java.util.Properties properties63 = new java.util.Properties();
        java.util.Properties properties64 = new java.util.Properties(properties63);
        int int65 = properties64.size();
        boolean boolean66 = properties64.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration67 = properties64.elements();
        java.util.Properties properties68 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection69 = properties68.values();
        java.util.Properties properties70 = new java.util.Properties(properties68);
        java.util.Enumeration<java.lang.Object> objEnumeration71 = properties70.elements();
        boolean boolean72 = properties70.isEmpty();
        boolean boolean73 = properties64.containsValue((java.lang.Object) boolean72);
        java.util.Properties properties74 = new java.util.Properties();
        java.util.Properties properties75 = new java.util.Properties(properties74);
        boolean boolean77 = properties74.containsValue((java.lang.Object) 10000L);
        java.lang.Object obj78 = properties1.replace((java.lang.Object) boolean73, (java.lang.Object) properties74);
        java.lang.String str79 = properties74.toString();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(recovery40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tm.out" + "'", str50, "tm.out");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel54 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel54.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objEnumeration61);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(objEnumeration67);
        org.junit.Assert.assertNotNull(objCollection69);
        org.junit.Assert.assertNotNull(objEnumeration71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "{}" + "'", str79, "{}");
    }

    @Test
    public void test00459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00459");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Properties properties7 = new java.util.Properties(properties6);
        properties7.clear();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Properties properties11 = new java.util.Properties(properties10);
        properties11.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str15 = atomikosProperties14.getConsoleFileName();
        atomikosProperties14.setOutputDir("hi!");
        int int18 = atomikosProperties14.getConsoleFileLimit();
        java.lang.Object obj19 = properties11.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties14);
        atomikosProperties14.setLogBaseName("tm.out");
        atomikosProperties14.setForceShutdownOnVmExit(false);
        boolean boolean24 = properties7.containsValue((java.lang.Object) atomikosProperties14);
        atomikosProperties14.setService("hi!");
        int int27 = atomikosProperties14.getConsoleFileLimit();
        boolean boolean28 = atomikosProperties14.isThreadedTwoPhaseCommit();
        java.lang.String str29 = atomikosProperties14.getLogBaseDir();
        atomikosProperties14.setConsoleFileName("tm.out");
        java.lang.Class<?> wildcardClass32 = atomikosProperties14.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tm.out" + "'", str15, "tm.out");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test00460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00460");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Object obj6 = properties0.get(obj5);
        properties0.clear();
        java.util.Set<java.lang.String> strSet8 = properties0.stringPropertyNames();
        java.io.OutputStream outputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream9, "{=hi!}", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=hi!, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(strSet8);
    }

    @Test
    public void test00461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00461");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.setDelay((long) (short) 1);
        long long4 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.setDelay((long) '4');
        long long7 = recovery0.getForgetOrphanedLogEntriesDelay();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 86400000L + "'", long1 == 86400000L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 86400000L + "'", long4 == 86400000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 86400000L + "'", long7 == 86400000L);
    }

    @Test
    public void test00462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00462");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        java.lang.String str3 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseName("tm.out");
        int int6 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setMaxTimeout(10000L);
        boolean boolean9 = atomikosProperties0.isThreadedTwoPhaseCommit();
        java.lang.String str10 = atomikosProperties0.getLogBaseName();
        long long11 = atomikosProperties0.getDefaultJtaTimeout();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tm.out" + "'", str10, "tm.out");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
    }

    @Test
    public void test00463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00463");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Set<java.lang.Object> objSet4 = properties1.keySet();
        java.io.OutputStream outputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream5, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objSet4);
    }

    @Test
    public void test00464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00464");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        java.lang.String str3 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseName("tm.out");
        atomikosProperties0.setForceShutdownOnVmExit(true);
        int int8 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean11 = atomikosProperties0.isForceShutdownOnVmExit();
        java.lang.String str12 = atomikosProperties0.getLogBaseName();
        int int13 = atomikosProperties0.getMaxActives();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tm.out" + "'", str12, "tm.out");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
    }

    @Test
    public void test00465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00465");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet6 = properties5.stringPropertyNames();
        java.util.Properties properties7 = new java.util.Properties(properties5);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Properties properties11 = new java.util.Properties(properties10);
        properties11.clear();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.lang.Object obj16 = properties11.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet17 = properties11.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setConsoleFileCount((-1));
        java.lang.String str21 = atomikosProperties18.getOutputDir();
        atomikosProperties18.setLogBaseName("tm.out");
        int int24 = atomikosProperties18.getConsoleFileCount();
        boolean boolean25 = properties11.containsKey((java.lang.Object) atomikosProperties18);
        atomikosProperties18.setConsoleFileCount((int) (byte) -1);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery28 = atomikosProperties18.getRecovery();
        java.util.Properties properties29 = new java.util.Properties();
        java.util.Properties properties30 = new java.util.Properties(properties29);
        properties30.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.getConsoleFileName();
        atomikosProperties33.setOutputDir("hi!");
        int int37 = atomikosProperties33.getConsoleFileLimit();
        java.lang.Object obj38 = properties30.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties33);
        atomikosProperties33.setLogBaseName("tm.out");
        atomikosProperties33.setForceShutdownOnVmExit(false);
        java.lang.Object obj43 = properties7.replace((java.lang.Object) recovery28, (java.lang.Object) atomikosProperties33);
        java.util.Enumeration<java.lang.Object> objEnumeration44 = properties7.keys();
        boolean boolean46 = properties7.equals((java.lang.Object) 0.0d);
        java.util.Properties properties47 = new java.util.Properties(properties7);
        java.io.Reader reader48 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties47.load(reader48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(recovery28);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tm.out" + "'", str34, "tm.out");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(objEnumeration44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test00466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00466");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties3.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet9 = properties3.stringPropertyNames();
        java.lang.Object obj10 = new java.lang.Object();
        java.lang.Object obj11 = properties3.get(obj10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.getConsoleFileName();
        atomikosProperties12.setOutputDir("hi!");
        int int16 = atomikosProperties12.getConsoleFileLimit();
        java.util.Properties properties17 = atomikosProperties12.asProperties();
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Properties properties19 = new java.util.Properties(properties18);
        properties19.clear();
        properties17.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties19);
        java.util.Properties properties22 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str24 = atomikosProperties23.getConsoleFileName();
        java.lang.Object obj26 = properties22.put((java.lang.Object) atomikosProperties23, (java.lang.Object) 0L);
        java.lang.Object obj29 = properties22.setProperty("", "");
        java.util.Properties properties30 = new java.util.Properties(properties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str32 = atomikosProperties31.getConsoleFileName();
        atomikosProperties31.setOutputDir("hi!");
        int int35 = atomikosProperties31.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel36 = atomikosProperties31.getConsoleLogLevel();
        java.lang.Object obj37 = properties17.getOrDefault((java.lang.Object) properties22, (java.lang.Object) atomikosProperties31);
        java.util.Properties properties38 = null;
        java.util.Properties properties39 = new java.util.Properties(properties38);
        java.util.Properties properties40 = new java.util.Properties();
        java.util.Properties properties41 = new java.util.Properties(properties40);
        properties41.clear();
        properties39.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties41);
        java.util.Collection<java.lang.Object> objCollection44 = properties41.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str46 = atomikosProperties45.getConsoleFileName();
        atomikosProperties45.setOutputDir("hi!");
        int int49 = atomikosProperties45.getConsoleFileLimit();
        java.util.Properties properties50 = atomikosProperties45.asProperties();
        boolean boolean51 = properties41.containsValue((java.lang.Object) atomikosProperties45);
        java.util.Enumeration<java.lang.Object> objEnumeration52 = properties41.elements();
        java.util.Enumeration<java.lang.Object> objEnumeration53 = properties41.elements();
        java.lang.Object obj54 = properties3.putIfAbsent((java.lang.Object) atomikosProperties31, (java.lang.Object) properties41);
        java.io.OutputStream outputStream55 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.storeToXML(outputStream55, "{=hi!}", "{hi!=}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tm.out" + "'", str13, "tm.out");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tm.out" + "'", str24, "tm.out");
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tm.out" + "'", str32, "tm.out");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel36 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel36.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(objCollection44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "tm.out" + "'", str46, "tm.out");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objEnumeration52);
        org.junit.Assert.assertNotNull(objEnumeration53);
        org.junit.Assert.assertNull(obj54);
    }

    @Test
    public void test00467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00467");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel10 = atomikosProperties4.getConsoleLogLevel();
        java.lang.String str11 = atomikosProperties4.getTransactionManagerUniqueName();
        long long12 = atomikosProperties4.getDefaultJtaTimeout();
        long long13 = atomikosProperties4.getDefaultJtaTimeout();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel10 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel10.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
    }

    @Test
    public void test00468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00468");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.elements();
        boolean boolean4 = properties2.isEmpty();
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection6 = properties5.values();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        properties10.clear();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.lang.Object obj15 = properties8.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        boolean boolean20 = properties18.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties18.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet22 = properties18.entrySet();
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection24 = properties23.values();
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        java.util.Properties properties27 = new java.util.Properties();
        java.util.Properties properties28 = new java.util.Properties(properties27);
        properties28.clear();
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        java.lang.Object obj33 = properties26.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setConsoleFileCount((-1));
        java.lang.String str38 = atomikosProperties35.getOutputDir();
        atomikosProperties35.setLogBaseName("tm.out");
        boolean boolean41 = properties26.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties42.setConsoleFileCount(100);
        atomikosProperties42.setAllowSubTransactions(true);
        java.lang.Object obj47 = properties26.remove((java.lang.Object) atomikosProperties42);
        java.util.Set<java.lang.Object> objSet48 = properties26.keySet();
        boolean boolean49 = properties2.replace((java.lang.Object) properties8, (java.lang.Object) objEntrySet22, (java.lang.Object) properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str51 = atomikosProperties50.getConsoleFileName();
        atomikosProperties50.setOutputDir("hi!");
        int int54 = atomikosProperties50.getConsoleFileLimit();
        java.util.Properties properties55 = atomikosProperties50.asProperties();
        java.util.Properties properties56 = new java.util.Properties();
        java.util.Properties properties57 = new java.util.Properties(properties56);
        properties57.clear();
        properties55.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties57);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str61 = atomikosProperties60.getConsoleFileName();
        atomikosProperties60.setOutputDir("hi!");
        int int64 = atomikosProperties60.getConsoleFileLimit();
        java.util.Properties properties65 = atomikosProperties60.asProperties();
        java.lang.String str66 = atomikosProperties60.getService();
        atomikosProperties60.setService("hi!");
        atomikosProperties60.setConsoleFileName("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery71 = atomikosProperties60.getRecovery();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties72 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str73 = atomikosProperties72.getConsoleFileName();
        atomikosProperties72.setOutputDir("hi!");
        java.lang.String str76 = atomikosProperties72.getOutputDir();
        boolean boolean77 = properties26.replace((java.lang.Object) properties57, (java.lang.Object) atomikosProperties60, (java.lang.Object) atomikosProperties72);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel78 = atomikosProperties60.getConsoleLogLevel();
        java.util.Properties properties79 = atomikosProperties60.asProperties();
        java.io.Reader reader80 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties79.load(reader80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNotNull(objEntrySet22);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(objSet48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "tm.out" + "'", str51, "tm.out");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(properties55);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "tm.out" + "'", str61, "tm.out");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(properties65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(recovery71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "tm.out" + "'", str73, "tm.out");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "hi!" + "'", str76, "hi!");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel78 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel78.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties79);
    }

    @Test
    public void test00469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00469");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Properties properties6 = new java.util.Properties(properties5);
        properties6.clear();
        properties4.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties6);
        java.lang.Object obj11 = properties6.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet12 = properties6.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.setConsoleFileCount((-1));
        java.lang.String str16 = atomikosProperties13.getOutputDir();
        atomikosProperties13.setLogBaseName("tm.out");
        int int19 = atomikosProperties13.getConsoleFileCount();
        boolean boolean20 = properties6.containsKey((java.lang.Object) atomikosProperties13);
        boolean boolean21 = properties1.containsValue((java.lang.Object) atomikosProperties13);
        java.util.Set<java.lang.Object> objSet22 = properties1.keySet();
        java.io.Reader reader23 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(reader23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objSet22);
    }

    @Test
    public void test00470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00470");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties1.setProperty("", "hi!");
        java.util.Properties properties9 = new java.util.Properties(properties1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setConsoleFileCount((-1));
        java.lang.String str13 = atomikosProperties10.getOutputDir();
        atomikosProperties10.setLogBaseName("tm.out");
        atomikosProperties10.setLogBaseDir("tm.out");
        atomikosProperties10.setSerialJtaTransactions(false);
        boolean boolean20 = properties9.containsValue((java.lang.Object) false);
        properties9.clear();
        java.util.Properties properties22 = new java.util.Properties(properties9);
        java.io.OutputStream outputStream23 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties9.save(outputStream23, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=32, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test00471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00471");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        atomikosProperties0.setTransactionManagerUniqueName("tm.out");
        java.lang.String str5 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setConsoleFileLimit((int) (byte) 1);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Properties properties11 = new java.util.Properties(properties10);
        properties11.clear();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Collection<java.lang.Object> objCollection14 = properties11.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.getConsoleFileName();
        atomikosProperties15.setOutputDir("hi!");
        int int19 = atomikosProperties15.getConsoleFileLimit();
        java.util.Properties properties20 = atomikosProperties15.asProperties();
        boolean boolean21 = properties11.containsValue((java.lang.Object) atomikosProperties15);
        boolean boolean22 = properties11.isEmpty();
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Properties properties24 = new java.util.Properties(properties23);
        properties24.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.getConsoleFileName();
        atomikosProperties27.setOutputDir("hi!");
        int int31 = atomikosProperties27.getConsoleFileLimit();
        java.lang.Object obj32 = properties24.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties27);
        atomikosProperties27.setLogBaseName("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str36 = atomikosProperties35.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel37 = atomikosProperties35.getConsoleLogLevel();
        atomikosProperties27.setConsoleLogLevel(atomikosLoggingLevel37);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties39.setConsoleFileCount(100);
        atomikosProperties39.setAllowSubTransactions(true);
        boolean boolean44 = atomikosProperties39.isForceShutdownOnVmExit();
        int int45 = atomikosProperties39.getConsoleFileCount();
        java.util.Properties properties46 = atomikosProperties39.asProperties();
        java.lang.Object obj47 = properties11.replace((java.lang.Object) atomikosLoggingLevel37, (java.lang.Object) atomikosProperties39);
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel37);
        atomikosProperties0.setAllowSubTransactions(true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertNotNull(objCollection14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tm.out" + "'", str16, "tm.out");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tm.out" + "'", str28, "tm.out");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tm.out" + "'", str36, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel37 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel37.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNull(obj47);
    }

    @Test
    public void test00472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00472");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.io.OutputStream outputStream4 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(outputStream4, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test00473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00473");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        boolean boolean10 = atomikosProperties4.isForceShutdownOnVmExit();
        atomikosProperties4.setConsoleFileName("");
        java.lang.String str13 = atomikosProperties4.getService();
        boolean boolean14 = atomikosProperties4.isEnableLogging();
        int int15 = atomikosProperties4.getMaxActives();
        java.util.Properties properties16 = atomikosProperties4.asProperties();
        java.io.PrintWriter printWriter17 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties16.list(printWriter17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 50 + "'", int15 == 50);
        org.junit.Assert.assertNotNull(properties16);
    }

    @Test
    public void test00474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00474");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties1.entrySet();
        java.util.Properties properties11 = new java.util.Properties(properties1);
        java.util.Properties properties12 = new java.util.Properties(properties11);
        java.lang.String str14 = properties12.getProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        java.io.PrintWriter printWriter15 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties12.list(printWriter15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(objEntrySet10);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test00475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00475");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount((-1));
        atomikosProperties0.setTransactionManagerUniqueName("tm.out");
        java.lang.String str5 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setConsoleFileLimit((int) (byte) 1);
        atomikosProperties0.setLogBaseName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        atomikosProperties0.setMaxActives((int) '4');
        java.lang.Class<?> wildcardClass12 = atomikosProperties0.getClass();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test00476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00476");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setConsoleFileCount(100);
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean5 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setConsoleFileCount(10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel10 = atomikosProperties8.getConsoleLogLevel();
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel10);
        boolean boolean12 = atomikosProperties0.isSerialJtaTransactions();
        java.util.Properties properties13 = atomikosProperties0.asProperties();
        java.util.Properties properties14 = new java.util.Properties(properties13);
        java.util.Properties properties15 = new java.util.Properties(properties14);
        java.io.OutputStream outputStream16 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties15.store(outputStream16, "{hi!=10}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel10 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel10.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(properties13);
    }

    @Test
    public void test00477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00477");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str3 = atomikosProperties2.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel4 = atomikosProperties2.getConsoleLogLevel();
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel4);
        atomikosProperties0.setSerialJtaTransactions(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.getRecovery();
        long long9 = recovery8.getDelay();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "tm.out" + "'", str3, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel4 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel4.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
    }

    @Test
    public void test00478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00478");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        java.util.Properties properties5 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setConsoleFileCount(100);
        atomikosProperties6.setAllowSubTransactions(true);
        boolean boolean11 = atomikosProperties6.isForceShutdownOnVmExit();
        boolean boolean12 = properties5.contains((java.lang.Object) atomikosProperties6);
        java.util.Properties properties13 = new java.util.Properties();
        java.util.Properties properties14 = new java.util.Properties(properties13);
        properties14.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.getConsoleFileName();
        atomikosProperties17.setOutputDir("hi!");
        int int21 = atomikosProperties17.getConsoleFileLimit();
        java.lang.Object obj22 = properties14.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties17);
        boolean boolean23 = atomikosProperties17.isForceShutdownOnVmExit();
        atomikosProperties17.setConsoleFileName("");
        java.lang.String str26 = atomikosProperties17.getService();
        atomikosProperties17.setTransactionManagerUniqueName("");
        java.lang.Object obj29 = properties5.get((java.lang.Object) "");
        java.util.Properties properties30 = new java.util.Properties();
        java.util.Properties properties31 = new java.util.Properties(properties30);
        int int32 = properties31.size();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties31);
        java.util.Properties properties34 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str36 = atomikosProperties35.getConsoleFileName();
        java.lang.Object obj38 = properties34.put((java.lang.Object) atomikosProperties35, (java.lang.Object) 0L);
        java.util.Properties properties39 = new java.util.Properties(properties34);
        java.lang.Object obj40 = properties34.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str42 = atomikosProperties41.getConsoleFileName();
        java.lang.String str43 = atomikosProperties41.getTransactionManagerUniqueName();
        boolean boolean44 = atomikosProperties41.isEnableLogging();
        java.lang.Object obj45 = properties5.replace(obj40, (java.lang.Object) atomikosProperties41);
        java.util.Properties properties46 = new java.util.Properties(properties5);
        java.lang.Object obj47 = null;
        java.util.Properties properties48 = null;
        java.util.Properties properties49 = new java.util.Properties(properties48);
        boolean boolean51 = properties49.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration52 = properties49.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration53 = properties49.elements();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj54 = properties5.put(obj47, (java.lang.Object) properties49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tm.out" + "'", str18, "tm.out");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tm.out" + "'", str36, "tm.out");
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "tm.out" + "'", str42, "tm.out");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objEnumeration52);
        org.junit.Assert.assertNotNull(objEnumeration53);
    }

    @Test
    public void test00479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00479");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties1.entrySet();
        java.util.Properties properties11 = new java.util.Properties(properties1);
        java.util.Properties properties12 = new java.util.Properties(properties11);
        java.io.InputStream inputStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties12.loadFromXML(inputStream13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(objEntrySet10);
    }

    @Test
    public void test00480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00480");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties1.setProperty("", "hi!");
        java.util.Properties properties9 = new java.util.Properties(properties1);
        java.util.Properties properties10 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.getConsoleFileName();
        java.lang.Object obj14 = properties10.put((java.lang.Object) atomikosProperties11, (java.lang.Object) 0L);
        java.util.Properties properties15 = new java.util.Properties(properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setConsoleFileCount((-1));
        atomikosProperties16.setTransactionManagerUniqueName("tm.out");
        java.lang.Object obj21 = properties10.remove((java.lang.Object) atomikosProperties16);
        boolean boolean22 = atomikosProperties16.isForceShutdownOnVmExit();
        java.util.Properties properties23 = atomikosProperties16.asProperties();
        java.lang.String str24 = properties23.toString();
        boolean boolean25 = properties9.containsKey((java.lang.Object) properties23);
        java.io.Reader reader26 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties23.load(reader26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tm.out" + "'", str12, "tm.out");
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(properties23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str24, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name=tm.out, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test00481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00481");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Collection<java.lang.Object> objCollection2 = properties0.values();
        java.util.Properties properties3 = new java.util.Properties();
        java.util.Properties properties4 = new java.util.Properties(properties3);
        int int5 = properties4.size();
        boolean boolean6 = properties4.isEmpty();
        java.lang.Object obj7 = properties0.remove((java.lang.Object) boolean6);
        java.io.InputStream inputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.load(inputStream8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test00482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00482");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Properties properties25 = new java.util.Properties(properties3);
        java.lang.String str27 = properties25.getProperty("");
        java.util.Set<java.lang.Object> objSet28 = properties25.keySet();
        java.util.Properties properties29 = null;
        java.util.Properties properties30 = new java.util.Properties(properties29);
        java.util.Collection<java.lang.Object> objCollection31 = properties30.values();
        java.util.Properties properties32 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection33 = properties32.values();
        java.util.Properties properties34 = null;
        java.util.Properties properties35 = new java.util.Properties(properties34);
        java.util.Properties properties36 = new java.util.Properties();
        java.util.Properties properties37 = new java.util.Properties(properties36);
        properties37.clear();
        properties35.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties37);
        java.lang.Object obj42 = properties35.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties32.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties35);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setConsoleFileCount((-1));
        java.lang.String str47 = atomikosProperties44.getOutputDir();
        atomikosProperties44.setLogBaseName("tm.out");
        boolean boolean50 = properties35.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties51.setConsoleFileCount(100);
        atomikosProperties51.setAllowSubTransactions(true);
        java.lang.Object obj56 = properties35.remove((java.lang.Object) atomikosProperties51);
        java.util.Set<java.lang.Object> objSet57 = properties35.keySet();
        int int58 = properties35.size();
        boolean boolean60 = properties25.replace((java.lang.Object) properties30, (java.lang.Object) properties35, (java.lang.Object) 86400000L);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet61 = properties30.entrySet();
        java.io.PrintWriter printWriter62 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties30.list(printWriter62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(objSet28);
        org.junit.Assert.assertNotNull(objCollection31);
        org.junit.Assert.assertNotNull(objCollection33);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(objSet57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objEntrySet61);
    }

    @Test
    public void test00483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00483");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getTransactionManagerUniqueName();
        boolean boolean2 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setService("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=hi!, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(properties5);
    }

    @Test
    public void test00484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00484");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        boolean boolean10 = atomikosProperties4.isForceShutdownOnVmExit();
        atomikosProperties4.setConsoleFileName("");
        java.lang.String str13 = atomikosProperties4.getService();
        java.util.Properties properties14 = atomikosProperties4.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.getTransactionManagerUniqueName();
        boolean boolean17 = atomikosProperties15.isForceShutdownOnVmExit();
        java.util.Properties properties18 = atomikosProperties15.asProperties();
        int int19 = atomikosProperties15.getConsoleFileCount();
        java.lang.Object obj20 = properties14.get((java.lang.Object) atomikosProperties15);
        java.io.OutputStream outputStream21 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties14.storeToXML(outputStream21, "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNull(obj20);
    }

    @Test
    public void test00485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00485");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getTransactionManagerUniqueName();
        boolean boolean2 = atomikosProperties0.isForceShutdownOnVmExit();
        java.util.Properties properties3 = atomikosProperties0.asProperties();
        int int4 = properties3.size();
        int int5 = properties3.size();
        java.io.OutputStream outputStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.store(outputStream6, "{10=10.0}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 18 + "'", int4 == 18);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 18 + "'", int5 == 18);
    }

    @Test
    public void test00486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00486");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        java.lang.Object obj4 = properties0.put((java.lang.Object) atomikosProperties1, (java.lang.Object) 0L);
        atomikosProperties1.setThreadedTwoPhaseCommit(false);
        atomikosProperties1.setConsoleFileLimit((int) ' ');
        java.lang.String str9 = atomikosProperties1.getTransactionManagerUniqueName();
        boolean boolean10 = atomikosProperties1.isForceShutdownOnVmExit();
        java.lang.Class<?> wildcardClass11 = atomikosProperties1.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test00487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00487");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery2 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int3 = recovery2.getMaxRetries();
        recovery2.setForgetOrphanedLogEntriesDelay((long) (short) -1);
        java.lang.Object obj6 = properties1.get((java.lang.Object) (short) -1);
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Properties properties8 = new java.util.Properties(properties7);
        properties8.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.getConsoleFileName();
        atomikosProperties11.setOutputDir("hi!");
        int int15 = atomikosProperties11.getConsoleFileLimit();
        java.lang.Object obj16 = properties8.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties11);
        atomikosProperties11.setLogBaseName("tm.out");
        atomikosProperties11.setForceShutdownOnVmExit(false);
        int int21 = atomikosProperties11.getMaxActives();
        java.lang.Object obj22 = properties1.remove((java.lang.Object) int21);
        java.io.OutputStream outputStream23 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(outputStream23, "{=hi!}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tm.out" + "'", str12, "tm.out");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 50 + "'", int21 == 50);
        org.junit.Assert.assertNull(obj22);
    }

    @Test
    public void test00488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00488");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = atomikosProperties0.getConsoleLogLevel();
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        boolean boolean7 = atomikosProperties0.isThreadedTwoPhaseCommit();
        boolean boolean8 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.setSerialJtaTransactions(false);
        boolean boolean11 = atomikosProperties0.isThreadedTwoPhaseCommit();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel5 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel5.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test00489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00489");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long2 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.setForgetOrphanedLogEntriesDelay((long) 5);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 86400000L + "'", long1 == 86400000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 86400000L + "'", long2 == 86400000L);
    }

    @Test
    public void test00490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00490");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties1.entrySet();
        java.util.Properties properties11 = new java.util.Properties(properties1);
        boolean boolean12 = properties11.isEmpty();
        java.io.Reader reader13 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties11.load(reader13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(objEntrySet10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test00491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00491");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean3 = properties1.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.getConsoleFileName();
        atomikosProperties8.setOutputDir("hi!");
        int int12 = atomikosProperties8.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties8.getConsoleLogLevel();
        java.lang.Object obj14 = properties1.putIfAbsent((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosLoggingLevel13);
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.Object obj17 = properties15.get((java.lang.Object) (byte) -1);
        java.util.Properties properties18 = new java.util.Properties(properties15);
        boolean boolean19 = properties1.equals((java.lang.Object) properties15);
        java.util.Properties properties20 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.getConsoleFileName();
        java.lang.Object obj24 = properties20.put((java.lang.Object) atomikosProperties21, (java.lang.Object) 0L);
        java.util.Properties properties25 = new java.util.Properties(properties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setConsoleFileCount((-1));
        atomikosProperties26.setTransactionManagerUniqueName("tm.out");
        java.lang.Object obj31 = properties20.remove((java.lang.Object) atomikosProperties26);
        boolean boolean32 = atomikosProperties26.isForceShutdownOnVmExit();
        java.util.Properties properties33 = atomikosProperties26.asProperties();
        java.util.Properties properties34 = null;
        java.util.Properties properties35 = new java.util.Properties(properties34);
        boolean boolean37 = properties35.containsValue((java.lang.Object) 10L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str39 = atomikosProperties38.getTransactionManagerUniqueName();
        atomikosProperties38.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str43 = atomikosProperties42.getConsoleFileName();
        atomikosProperties42.setOutputDir("hi!");
        int int46 = atomikosProperties42.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel47 = atomikosProperties42.getConsoleLogLevel();
        java.lang.Object obj48 = properties35.putIfAbsent((java.lang.Object) atomikosProperties38, (java.lang.Object) atomikosLoggingLevel47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str50 = atomikosProperties49.getConsoleFileName();
        atomikosProperties49.setOutputDir("hi!");
        int int53 = atomikosProperties49.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel54 = atomikosProperties49.getConsoleLogLevel();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery55 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long56 = recovery55.getForgetOrphanedLogEntriesDelay();
        java.util.Properties properties57 = new java.util.Properties();
        java.util.Properties properties58 = new java.util.Properties(properties57);
        properties58.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str62 = atomikosProperties61.getConsoleFileName();
        atomikosProperties61.setOutputDir("hi!");
        int int65 = atomikosProperties61.getConsoleFileLimit();
        java.lang.Object obj66 = properties58.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties61);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel67 = atomikosProperties61.getConsoleLogLevel();
        java.lang.String str68 = atomikosProperties61.getTransactionManagerUniqueName();
        atomikosProperties61.setThreadedTwoPhaseCommit(false);
        boolean boolean71 = properties35.replace((java.lang.Object) atomikosProperties49, (java.lang.Object) recovery55, (java.lang.Object) false);
        java.lang.Object obj72 = properties15.replace((java.lang.Object) atomikosProperties26, (java.lang.Object) properties35);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass73 = obj72.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tm.out" + "'", str22, "tm.out");
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tm.out" + "'", str43, "tm.out");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel47 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel47.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tm.out" + "'", str50, "tm.out");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel54 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel54.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 86400000L + "'", long56 == 86400000L);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tm.out" + "'", str62, "tm.out");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel67 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel67.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(obj72);
    }

    @Test
    public void test00492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00492");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.getConsoleFileName();
        atomikosProperties1.setOutputDir("hi!");
        int int5 = atomikosProperties1.getConsoleFileLimit();
        java.util.Properties properties6 = atomikosProperties1.asProperties();
        java.lang.String str7 = atomikosProperties1.getService();
        atomikosProperties1.setService("hi!");
        java.lang.Object obj11 = properties0.putIfAbsent((java.lang.Object) "hi!", (java.lang.Object) 10L);
        java.util.Enumeration<java.lang.Object> objEnumeration12 = properties0.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str14 = atomikosProperties13.getConsoleFileName();
        atomikosProperties13.setOutputDir("hi!");
        int int17 = atomikosProperties13.getConsoleFileLimit();
        java.util.Properties properties18 = atomikosProperties13.asProperties();
        java.util.Properties properties19 = new java.util.Properties();
        java.util.Properties properties20 = new java.util.Properties(properties19);
        properties20.clear();
        properties18.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties20);
        java.util.Enumeration<?> wildcardEnumeration23 = properties20.propertyNames();
        java.lang.Object obj24 = properties20.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str26 = atomikosProperties25.getConsoleFileName();
        atomikosProperties25.setOutputDir("hi!");
        int int29 = atomikosProperties25.getConsoleFileLimit();
        java.util.Properties properties30 = atomikosProperties25.asProperties();
        java.util.Properties properties31 = null;
        java.util.Properties properties32 = new java.util.Properties(properties31);
        java.util.Properties properties33 = new java.util.Properties();
        java.util.Properties properties34 = new java.util.Properties(properties33);
        properties34.clear();
        properties32.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties34);
        java.lang.Object obj39 = properties34.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        boolean boolean40 = properties30.equals(obj39);
        java.util.Collection<java.lang.Object> objCollection41 = properties30.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str43 = atomikosProperties42.getConsoleFileName();
        atomikosProperties42.setOutputDir("hi!");
        int int46 = atomikosProperties42.getConsoleFileLimit();
        java.util.Properties properties47 = atomikosProperties42.asProperties();
        java.util.Properties properties48 = new java.util.Properties();
        java.util.Properties properties49 = new java.util.Properties(properties48);
        properties49.clear();
        properties47.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties49);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties52.setConsoleFileCount((-1));
        java.lang.String str55 = atomikosProperties52.getOutputDir();
        atomikosProperties52.setLogBaseName("tm.out");
        int int58 = atomikosProperties52.getMaxActives();
        boolean boolean59 = properties30.remove((java.lang.Object) properties47, (java.lang.Object) int58);
        properties20.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties47);
        boolean boolean61 = properties47.isEmpty();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties47);
        java.io.PrintStream printStream63 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.list(printStream63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tm.out" + "'", str2, "tm.out");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(objEnumeration12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tm.out" + "'", str14, "tm.out");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertNotNull(wildcardEnumeration23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "{}");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "tm.out" + "'", str26, "tm.out");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objCollection41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tm.out" + "'", str43, "tm.out");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(properties47);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 50 + "'", int58 == 50);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test00493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00493");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties3.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        properties10.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str14 = atomikosProperties13.getConsoleFileName();
        atomikosProperties13.setOutputDir("hi!");
        int int17 = atomikosProperties13.getConsoleFileLimit();
        java.lang.Object obj18 = properties10.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties13);
        atomikosProperties13.setLogBaseName("tm.out");
        boolean boolean21 = properties3.containsKey((java.lang.Object) "tm.out");
        java.util.Properties properties22 = null;
        java.util.Properties properties23 = new java.util.Properties(properties22);
        java.util.Properties properties24 = new java.util.Properties();
        java.util.Properties properties25 = new java.util.Properties(properties24);
        properties25.clear();
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties25);
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties23);
        java.lang.Class<?> wildcardClass29 = properties23.getClass();
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tm.out" + "'", str14, "tm.out");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test00494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00494");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setOutputDir("hi!");
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet6 = properties5.stringPropertyNames();
        java.util.Set<java.lang.String> strSet7 = properties5.stringPropertyNames();
        properties5.clear();
        java.lang.Class<?> wildcardClass9 = properties5.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tm.out" + "'", str1, "tm.out");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test00495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00495");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        int int2 = properties1.size();
        boolean boolean3 = properties1.isEmpty();
        java.util.Set<java.lang.Object> objSet4 = properties1.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.getConsoleFileName();
        atomikosProperties5.setOutputDir("hi!");
        int int9 = atomikosProperties5.getConsoleFileLimit();
        java.util.Properties properties10 = atomikosProperties5.asProperties();
        java.lang.String str11 = atomikosProperties5.getService();
        int int12 = atomikosProperties5.getMaxActives();
        boolean boolean13 = properties1.equals((java.lang.Object) atomikosProperties5);
        java.util.Properties properties14 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection15 = properties14.values();
        java.util.Properties properties16 = new java.util.Properties(properties14);
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties16.elements();
        boolean boolean18 = properties16.isEmpty();
        java.util.Properties properties19 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection20 = properties19.values();
        java.util.Properties properties21 = null;
        java.util.Properties properties22 = new java.util.Properties(properties21);
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Properties properties24 = new java.util.Properties(properties23);
        properties24.clear();
        properties22.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        java.lang.Object obj29 = properties22.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties19.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties22);
        java.util.Properties properties31 = null;
        java.util.Properties properties32 = new java.util.Properties(properties31);
        boolean boolean34 = properties32.containsValue((java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration35 = properties32.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet36 = properties32.entrySet();
        java.util.Properties properties37 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection38 = properties37.values();
        java.util.Properties properties39 = null;
        java.util.Properties properties40 = new java.util.Properties(properties39);
        java.util.Properties properties41 = new java.util.Properties();
        java.util.Properties properties42 = new java.util.Properties(properties41);
        properties42.clear();
        properties40.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties42);
        java.lang.Object obj47 = properties40.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties37.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties40);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties49.setConsoleFileCount((-1));
        java.lang.String str52 = atomikosProperties49.getOutputDir();
        atomikosProperties49.setLogBaseName("tm.out");
        boolean boolean55 = properties40.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties56.setConsoleFileCount(100);
        atomikosProperties56.setAllowSubTransactions(true);
        java.lang.Object obj61 = properties40.remove((java.lang.Object) atomikosProperties56);
        java.util.Set<java.lang.Object> objSet62 = properties40.keySet();
        boolean boolean63 = properties16.replace((java.lang.Object) properties22, (java.lang.Object) objEntrySet36, (java.lang.Object) properties40);
        int int64 = properties16.size();
        boolean boolean65 = properties1.equals((java.lang.Object) int64);
        java.util.Properties properties66 = new java.util.Properties(properties1);
        java.io.InputStream inputStream67 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(inputStream67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objSet4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tm.out" + "'", str6, "tm.out");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objCollection15);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objCollection20);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objEnumeration35);
        org.junit.Assert.assertNotNull(objEntrySet36);
        org.junit.Assert.assertNotNull(objCollection38);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNotNull(objSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test00496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00496");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.getConsoleFileName();
        atomikosProperties4.setOutputDir("hi!");
        int int8 = atomikosProperties4.getConsoleFileLimit();
        java.lang.Object obj9 = properties1.put((java.lang.Object) 1, (java.lang.Object) atomikosProperties4);
        boolean boolean10 = atomikosProperties4.isForceShutdownOnVmExit();
        atomikosProperties4.setConsoleFileName("");
        java.lang.String str13 = atomikosProperties4.getService();
        atomikosProperties4.setTransactionManagerUniqueName("");
        atomikosProperties4.setOutputDir("hi!");
        atomikosProperties4.setConsoleFileLimit((int) '#');
        atomikosProperties4.setEnableLogging(true);
        atomikosProperties4.setLogBaseDir("{}");
        atomikosProperties4.setLogBaseDir("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test00497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00497");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties3.clear();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.lang.Object obj8 = properties3.replace((java.lang.Object) (-1), (java.lang.Object) (short) -1);
        java.util.Properties properties9 = new java.util.Properties(properties3);
        java.lang.Object obj10 = null;
        java.util.Properties properties11 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection12 = properties11.values();
        java.util.Properties properties13 = null;
        java.util.Properties properties14 = new java.util.Properties(properties13);
        java.util.Properties properties15 = new java.util.Properties();
        java.util.Properties properties16 = new java.util.Properties(properties15);
        properties16.clear();
        properties14.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties16);
        java.lang.Object obj21 = properties14.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties11.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties14);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties23.setConsoleFileCount((-1));
        java.lang.String str26 = atomikosProperties23.getOutputDir();
        atomikosProperties23.setLogBaseName("tm.out");
        boolean boolean29 = properties14.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties30.setConsoleFileCount(100);
        atomikosProperties30.setAllowSubTransactions(true);
        java.lang.Object obj35 = properties14.remove((java.lang.Object) atomikosProperties30);
        java.util.Properties properties36 = new java.util.Properties(properties14);
        java.lang.String str38 = properties36.getProperty("");
        java.util.Set<java.lang.Object> objSet39 = properties36.keySet();
        java.util.Properties properties40 = null;
        java.util.Properties properties41 = new java.util.Properties(properties40);
        java.util.Collection<java.lang.Object> objCollection42 = properties41.values();
        java.util.Properties properties43 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection44 = properties43.values();
        java.util.Properties properties45 = null;
        java.util.Properties properties46 = new java.util.Properties(properties45);
        java.util.Properties properties47 = new java.util.Properties();
        java.util.Properties properties48 = new java.util.Properties(properties47);
        properties48.clear();
        properties46.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties48);
        java.lang.Object obj53 = properties46.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties43.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties46);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties55.setConsoleFileCount((-1));
        java.lang.String str58 = atomikosProperties55.getOutputDir();
        atomikosProperties55.setLogBaseName("tm.out");
        boolean boolean61 = properties46.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties62 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties62.setConsoleFileCount(100);
        atomikosProperties62.setAllowSubTransactions(true);
        java.lang.Object obj67 = properties46.remove((java.lang.Object) atomikosProperties62);
        java.util.Set<java.lang.Object> objSet68 = properties46.keySet();
        int int69 = properties46.size();
        boolean boolean71 = properties36.replace((java.lang.Object) properties41, (java.lang.Object) properties46, (java.lang.Object) 86400000L);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj72 = properties3.put(obj10, (java.lang.Object) properties41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection12);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(objSet39);
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertNotNull(objCollection44);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNotNull(objSet68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test00498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00498");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        int int1 = recovery0.getMaxRetries();
        recovery0.setForgetOrphanedLogEntriesDelay((long) (short) -1);
        recovery0.setMaxRetries(10);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 5 + "'", int1 == 5);
    }

    @Test
    public void test00499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00499");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        java.util.Set<java.lang.Object> objSet25 = properties3.keySet();
        java.util.Properties properties26 = new java.util.Properties(properties3);
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.io.OutputStream outputStream28 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties26.save(outputStream28, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=-1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tm.out, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=100}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
    }

    @Test
    public void test00500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00500");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Collection<java.lang.Object> objCollection1 = properties0.values();
        java.util.Properties properties2 = null;
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        properties5.clear();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        java.lang.Object obj10 = properties3.putIfAbsent((java.lang.Object) (short) 10, (java.lang.Object) 10.0d);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setConsoleFileCount((-1));
        java.lang.String str15 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setLogBaseName("tm.out");
        boolean boolean18 = properties3.containsKey((java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setConsoleFileCount(100);
        atomikosProperties19.setAllowSubTransactions(true);
        java.lang.Object obj24 = properties3.remove((java.lang.Object) atomikosProperties19);
        atomikosProperties19.setAllowSubTransactions(false);
        int int27 = atomikosProperties19.getConsoleFileCount();
        atomikosProperties19.setThreadedTwoPhaseCommit(false);
        java.util.Properties properties30 = atomikosProperties19.asProperties();
        java.io.PrintStream printStream31 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties30.list(printStream31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(properties30);
    }
}
