import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest21 {

    public static boolean debug = false;

    @Test
    public void test10501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10501");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        java.lang.String str8 = atomikosProperties0.logBaseName;
        atomikosProperties0.setCheckpointInterval((long) 18);
        long long11 = atomikosProperties0.defaultJtaTimeout;
        java.util.Properties properties12 = atomikosProperties0.asProperties();
        atomikosProperties0.setAllowSubTransactions(false);
        atomikosProperties0.setConsoleFileCount(1);
        atomikosProperties0.logBaseDir = "{100=100}";
        atomikosProperties0.setEnableLogging(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{-1.0=100}" + "'", str8, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
        org.junit.Assert.assertNotNull(properties12);
    }

    @Test
    public void test10502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10502");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxActives((int) ' ');
        atomikosProperties0.maxActives = (short) -1;
        atomikosProperties0.setService("hi!");
        atomikosProperties0.consoleFileLimit = (byte) 0;
        int int15 = atomikosProperties0.maxActives;
        boolean boolean16 = atomikosProperties0.isForceShutdownOnVmExit();
        long long17 = atomikosProperties0.maxTimeout;
        int int18 = atomikosProperties0.getConsoleFileCount();
        boolean boolean19 = atomikosProperties0.forceShutdownOnVmExit;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery20 = atomikosProperties0.getRecovery();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 300000L + "'", long17 == 300000L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(recovery20);
    }

    @Test
    public void test10503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10503");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Enumeration<java.lang.Object> objEnumeration9 = properties8.elements();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.lang.Object obj13 = properties10.remove((java.lang.Object) (short) 100);
        java.lang.Object obj16 = properties10.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean18 = properties10.containsKey((java.lang.Object) 0L);
        java.lang.Object obj21 = properties10.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj24 = properties10.setProperty("", "{-1.0=100}");
        boolean boolean25 = properties10.isEmpty();
        java.util.Properties properties26 = new java.util.Properties();
        java.lang.String str27 = properties26.toString();
        java.util.Properties properties28 = new java.util.Properties(properties26);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet29 = properties28.entrySet();
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.Object obj33 = properties31.remove((java.lang.Object) (-1.0d));
        int int34 = properties31.size();
        boolean boolean35 = properties10.replace((java.lang.Object) properties28, (java.lang.Object) 100L, (java.lang.Object) properties31);
        boolean boolean36 = properties10.isEmpty();
        java.util.Set<java.lang.Object> objSet37 = properties10.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties39 = atomikosProperties38.asProperties();
        atomikosProperties38.service = "{-1.0=100}";
        long long42 = atomikosProperties38.getDefaultJtaTimeout();
        long long43 = atomikosProperties38.getMaxTimeout();
        int int44 = atomikosProperties38.consoleFileCount;
        java.lang.String str45 = atomikosProperties38.getOutputDir();
        boolean boolean46 = properties8.remove((java.lang.Object) properties10, (java.lang.Object) atomikosProperties38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties48 = atomikosProperties47.asProperties();
        atomikosProperties47.service = "{-1.0=100}";
        long long51 = atomikosProperties47.getDefaultJtaTimeout();
        long long52 = atomikosProperties47.getMaxTimeout();
        int int53 = atomikosProperties47.consoleFileCount;
        atomikosProperties47.setConsoleFileCount(0);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel56 = atomikosProperties47.getConsoleLogLevel();
        boolean boolean57 = properties10.equals((java.lang.Object) atomikosLoggingLevel56);
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel56);
        atomikosProperties0.threadedTwoPhaseCommit = false;
        int int61 = atomikosProperties0.getConsoleFileCount();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNotNull(objEnumeration9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{}" + "'", str27, "{}");
        org.junit.Assert.assertNotNull(objEntrySet29);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objSet37);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 10000L + "'", long42 == 10000L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 300000L + "'", long43 == 300000L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(properties48);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10000L + "'", long51 == 10000L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 300000L + "'", long52 == 300000L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel56 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel56.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
    }

    @Test
    public void test10504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10504");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxTimeout((long) (byte) 0);
        atomikosProperties0.setAllowSubTransactions(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties12 = atomikosProperties11.asProperties();
        atomikosProperties11.service = "{-1.0=100}";
        java.lang.String str15 = atomikosProperties11.getTransactionManagerUniqueName();
        boolean boolean16 = atomikosProperties11.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel17 = atomikosProperties11.getConsoleLogLevel();
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel17;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setAllowSubTransactions(true);
        boolean boolean22 = atomikosProperties19.enableLogging;
        boolean boolean23 = atomikosProperties19.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel24 = atomikosProperties19.consoleLogLevel;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel24;
        atomikosProperties0.setConsoleFileName("{1.0=-1, -1.0=100}");
        java.lang.String str28 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setConsoleFileCount(0);
        int int31 = atomikosProperties0.getConsoleFileLimit();
        atomikosProperties0.setConsoleFileCount((int) 'a');
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel17 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel17.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel24 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel24.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
    }

    @Test
    public void test10505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10505");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = (byte) 10;
        long long7 = atomikosProperties0.getMaxTimeout();
        boolean boolean8 = atomikosProperties0.allowSubTransactions;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        java.util.Properties properties11 = new java.util.Properties();
        java.util.Properties properties12 = new java.util.Properties();
        java.lang.String str13 = properties12.toString();
        boolean boolean14 = properties12.isEmpty();
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.String str16 = properties15.toString();
        java.lang.Object obj18 = properties15.remove((java.lang.Object) (short) 100);
        java.lang.Object obj21 = properties15.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean23 = properties15.containsKey((java.lang.Object) 0L);
        boolean boolean24 = properties12.containsValue((java.lang.Object) 0L);
        boolean boolean27 = properties11.replace((java.lang.Object) 0L, (java.lang.Object) 0.0f, (java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties11.elements();
        java.lang.String str29 = properties11.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean32 = atomikosProperties31.isSerialJtaTransactions();
        atomikosProperties31.logBaseName = "{-1.0=100}";
        int int35 = atomikosProperties31.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery36 = atomikosProperties31.getRecovery();
        atomikosProperties31.setConsoleFileCount((int) (byte) 100);
        atomikosProperties31.maxTimeout = 50;
        java.lang.String str41 = atomikosProperties31.getConsoleFileName();
        atomikosProperties31.setDefaultJtaTimeout((long) 'a');
        int int44 = atomikosProperties31.maxActives;
        atomikosProperties0.set(properties11, "tm.out", (java.lang.Object) atomikosProperties31);
        java.util.Collection<java.lang.Object> objCollection46 = properties11.values();
        java.util.Enumeration<java.lang.Object> objEnumeration47 = properties11.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties49 = atomikosProperties48.asProperties();
        atomikosProperties48.service = "{-1.0=100}";
        long long52 = atomikosProperties48.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel53 = null;
        atomikosProperties48.setConsoleLogLevel(atomikosLoggingLevel53);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel55 = null;
        atomikosProperties48.setConsoleLogLevel(atomikosLoggingLevel55);
        atomikosProperties48.setLogBaseName("{={-1.0=100}, -1.0=100}");
        boolean boolean59 = atomikosProperties48.enableLogging;
        atomikosProperties48.setOutputDir("");
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel62 = atomikosProperties48.consoleLogLevel;
        atomikosProperties48.checkpointInterval = 0L;
        atomikosProperties48.checkpointInterval = 18L;
        java.lang.String str67 = atomikosProperties48.logBaseDir;
        boolean boolean68 = properties11.equals((java.lang.Object) atomikosProperties48);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{}" + "'", str13, "{}");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{}" + "'", str29, "{}");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 50 + "'", int35 == 50);
        org.junit.Assert.assertNotNull(recovery36);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "tm.out" + "'", str41, "tm.out");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 50 + "'", int44 == 50);
        org.junit.Assert.assertNotNull(objCollection46);
        org.junit.Assert.assertNotNull(objEnumeration47);
        org.junit.Assert.assertNotNull(properties49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 10000L + "'", long52 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNull(atomikosLoggingLevel62);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test10506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10506");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Set<java.lang.String> strSet8 = properties0.stringPropertyNames();
        java.util.Properties properties9 = new java.util.Properties(properties0);
        java.lang.String str11 = properties9.getProperty("hi!");
        java.lang.String str13 = properties9.getProperty("{1.0=-1}");
        java.util.Properties properties14 = new java.util.Properties(properties9);
        properties14.clear();
        java.util.Set<java.lang.Object> objSet16 = properties14.keySet();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(objSet16);
    }

    @Test
    public void test10507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10507");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.lang.Object obj5 = properties0.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.lang.Object obj9 = properties6.remove((java.lang.Object) (short) 100);
        java.lang.Object obj12 = properties6.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean14 = properties6.containsKey((java.lang.Object) 0L);
        java.lang.Object obj17 = properties6.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties18 = new java.util.Properties(properties6);
        boolean boolean19 = properties0.containsValue((java.lang.Object) properties6);
        java.lang.String str21 = properties0.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties23 = atomikosProperties22.asProperties();
        atomikosProperties22.service = "{-1.0=100}";
        long long26 = atomikosProperties22.getDefaultJtaTimeout();
        atomikosProperties22.enableLogging = false;
        atomikosProperties22.setMaxTimeout((long) (byte) 0);
        atomikosProperties22.setAllowSubTransactions(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties34 = atomikosProperties33.asProperties();
        atomikosProperties33.service = "{-1.0=100}";
        java.lang.String str37 = atomikosProperties33.getTransactionManagerUniqueName();
        boolean boolean38 = atomikosProperties33.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel39 = atomikosProperties33.getConsoleLogLevel();
        atomikosProperties22.consoleLogLevel = atomikosLoggingLevel39;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties41.setAllowSubTransactions(true);
        boolean boolean44 = atomikosProperties41.enableLogging;
        boolean boolean45 = atomikosProperties41.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel46 = atomikosProperties41.consoleLogLevel;
        atomikosProperties22.consoleLogLevel = atomikosLoggingLevel46;
        atomikosProperties22.setConsoleFileName("{1.0=-1, -1.0=100}");
        java.util.Properties properties50 = new java.util.Properties();
        java.lang.String str51 = properties50.toString();
        java.util.Properties properties52 = new java.util.Properties(properties50);
        boolean boolean53 = properties52.isEmpty();
        java.lang.Object obj56 = properties52.setProperty("tmlog", "{}");
        java.lang.Object obj57 = properties52.clone();
        java.lang.Object obj58 = properties0.putIfAbsent((java.lang.Object) atomikosProperties22, obj57);
        java.util.Enumeration<java.lang.Object> objEnumeration59 = properties0.keys();
        java.lang.String str60 = properties0.toString();
        boolean boolean61 = properties0.isEmpty();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10000L + "'", long26 == 10000L);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel39 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel39.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel46 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel46.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "{}" + "'", str51, "{}");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "{tmlog={}}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "{tmlog={}}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "{tmlog={}}");
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNotNull(objEnumeration59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test10508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10508");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setTransactionManagerUniqueName("{}");
        atomikosProperties0.enableLogging = true;
        java.lang.String str9 = atomikosProperties0.getService();
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        boolean boolean12 = atomikosProperties0.isThreadedTwoPhaseCommit();
        int int13 = atomikosProperties0.maxActives;
        java.lang.String str14 = atomikosProperties0.getConsoleFileName();
        long long15 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.transactionManagerUniqueName = "{1.0=-1, 10000=0}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{-1.0=100}" + "'", str9, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tm.out" + "'", str14, "tm.out");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
    }

    @Test
    public void test10509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10509");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        java.lang.String str3 = atomikosProperties0.logBaseDir;
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int11 = properties4.size();
        java.util.Properties properties14 = new java.util.Properties();
        java.lang.Object obj16 = properties14.remove((java.lang.Object) (-1.0d));
        boolean boolean17 = properties14.isEmpty();
        java.lang.Object obj20 = properties14.setProperty("hi!", "{}");
        boolean boolean21 = properties4.replace((java.lang.Object) 1, (java.lang.Object) 1, (java.lang.Object) "{}");
        java.util.Properties properties22 = new java.util.Properties(properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean25 = atomikosProperties24.isSerialJtaTransactions();
        atomikosProperties24.logBaseName = "{-1.0=100}";
        int int28 = atomikosProperties24.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery29 = atomikosProperties24.getRecovery();
        recovery29.setMaxRetries((int) (byte) 100);
        long long32 = recovery29.forgetOrphanedLogEntriesDelay;
        long long33 = recovery29.forgetOrphanedLogEntriesDelay;
        atomikosProperties0.set(properties4, "{1.0=-1, -1.0=100}", (java.lang.Object) long33);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet35 = properties4.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties37 = atomikosProperties36.asProperties();
        atomikosProperties36.service = "{-1.0=100}";
        long long40 = atomikosProperties36.getDefaultJtaTimeout();
        long long41 = atomikosProperties36.getMaxTimeout();
        int int42 = atomikosProperties36.consoleFileCount;
        long long43 = atomikosProperties36.getCheckpointInterval();
        atomikosProperties36.serialJtaTransactions = true;
        java.lang.String str46 = atomikosProperties36.logBaseName;
        boolean boolean47 = atomikosProperties36.allowSubTransactions;
        boolean boolean48 = atomikosProperties36.isForceShutdownOnVmExit();
        java.lang.Object obj49 = properties4.remove((java.lang.Object) boolean48);
        java.util.Properties properties50 = new java.util.Properties();
        java.util.Properties properties51 = new java.util.Properties();
        java.lang.String str52 = properties51.toString();
        boolean boolean53 = properties51.isEmpty();
        java.util.Properties properties54 = new java.util.Properties();
        java.lang.String str55 = properties54.toString();
        java.lang.Object obj57 = properties54.remove((java.lang.Object) (short) 100);
        java.lang.Object obj60 = properties54.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean62 = properties54.containsKey((java.lang.Object) 0L);
        boolean boolean63 = properties51.containsValue((java.lang.Object) 0L);
        boolean boolean66 = properties50.replace((java.lang.Object) 0L, (java.lang.Object) 0.0f, (java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration67 = properties50.elements();
        java.lang.String str68 = properties50.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration69 = properties50.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties70 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties71 = atomikosProperties70.asProperties();
        atomikosProperties70.service = "{-1.0=100}";
        long long74 = atomikosProperties70.getDefaultJtaTimeout();
        atomikosProperties70.setThreadedTwoPhaseCommit(true);
        boolean boolean77 = atomikosProperties70.isAllowSubTransactions();
        boolean boolean78 = atomikosProperties70.isEnableLogging();
        atomikosProperties70.service = "tm.out";
        boolean boolean81 = atomikosProperties70.forceShutdownOnVmExit;
        atomikosProperties70.setCheckpointInterval((long) 32);
        atomikosProperties70.defaultJtaTimeout = 0;
        atomikosProperties70.consoleFileLimit = 0;
        java.lang.Object obj88 = properties4.getOrDefault((java.lang.Object) objEnumeration69, (java.lang.Object) atomikosProperties70);
        atomikosProperties70.serialJtaTransactions = true;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 50 + "'", int28 == 50);
        org.junit.Assert.assertNotNull(recovery29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 86400000L + "'", long32 == 86400000L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 86400000L + "'", long33 == 86400000L);
        org.junit.Assert.assertNotNull(objEntrySet35);
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10000L + "'", long40 == 10000L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 300000L + "'", long41 == 300000L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 500L + "'", long43 == 500L);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "tmlog" + "'", str46, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "{}" + "'", str52, "{}");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{}" + "'", str55, "{}");
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(objEnumeration67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "{}" + "'", str68, "{}");
        org.junit.Assert.assertNotNull(objEnumeration69);
        org.junit.Assert.assertNotNull(properties71);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 10000L + "'", long74 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(obj88);
    }

    @Test
    public void test10510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10510");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        int int4 = properties0.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery5.retryInterval = (short) 100;
        recovery5.forgetOrphanedLogEntriesDelay = 'a';
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.Object obj12 = properties10.remove((java.lang.Object) (-1.0d));
        boolean boolean13 = properties10.isEmpty();
        int int14 = properties10.size();
        java.lang.String str16 = properties10.getProperty("{}");
        boolean boolean17 = properties0.remove((java.lang.Object) recovery5, (java.lang.Object) properties10);
        long long18 = recovery5.delay;
        long long19 = recovery5.retryInterval;
        long long20 = recovery5.getRetryInterval();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10000L + "'", long18 == 10000L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L + "'", long19 == 100L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 100L + "'", long20 == 100L);
    }

    @Test
    public void test10511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10511");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.enableLogging;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setMaxActives((-1));
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = atomikosProperties0.getConsoleLogLevel();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel5 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel5.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test10512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10512");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.setService("tm.out");
        boolean boolean12 = atomikosProperties0.isForceShutdownOnVmExit();
        boolean boolean13 = atomikosProperties0.isAllowSubTransactions();
        atomikosProperties0.setLogBaseName("");
        atomikosProperties0.forceShutdownOnVmExit = true;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel18 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel18;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test10513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10513");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        java.lang.Object obj14 = properties3.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj17 = properties3.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties3.keys();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        boolean boolean21 = properties19.isEmpty();
        java.lang.Object obj24 = properties19.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties19.elements();
        java.lang.Object obj26 = properties2.replace((java.lang.Object) objEnumeration18, (java.lang.Object) properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties19.elements();
        java.util.Properties properties28 = new java.util.Properties(properties19);
        java.util.Properties properties29 = new java.util.Properties();
        java.lang.String str30 = properties29.toString();
        java.lang.Object obj32 = properties29.remove((java.lang.Object) (short) 100);
        java.lang.Object obj35 = properties29.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean37 = properties29.containsKey((java.lang.Object) 0L);
        java.lang.Object obj40 = properties29.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties41 = new java.util.Properties();
        java.lang.String str42 = properties41.toString();
        java.lang.Object obj44 = properties41.remove((java.lang.Object) (short) 100);
        java.lang.Object obj47 = properties41.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj48 = properties41.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration49 = properties41.elements();
        properties29.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties41);
        java.lang.Object obj51 = properties41.clone();
        properties41.clear();
        java.util.Enumeration<?> wildcardEnumeration53 = properties41.propertyNames();
        boolean boolean54 = properties19.contains((java.lang.Object) wildcardEnumeration53);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties56 = atomikosProperties55.asProperties();
        atomikosProperties55.service = "{-1.0=100}";
        long long59 = atomikosProperties55.getDefaultJtaTimeout();
        atomikosProperties55.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties55.setMaxActives(100);
        java.lang.String str64 = atomikosProperties55.logBaseDir;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean66 = atomikosProperties65.isSerialJtaTransactions();
        boolean boolean67 = atomikosProperties65.allowSubTransactions;
        java.lang.Object obj68 = properties19.getOrDefault((java.lang.Object) atomikosProperties55, (java.lang.Object) atomikosProperties65);
        boolean boolean69 = properties19.isEmpty();
        java.lang.String str72 = properties19.getProperty("{={-1.0=100}, -1.0=100}", "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{}" + "'", str30, "{}");
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{}" + "'", str42, "{}");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration49);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "{1.0=-1}");
        org.junit.Assert.assertNotNull(wildcardEnumeration53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(properties56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 10000L + "'", long59 == 10000L);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
    }

    @Test
    public void test10514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10514");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.threadedTwoPhaseCommit = true;
        long long8 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.logBaseDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties0.setLogBaseName("{1.0=-1, -1.0=100}");
        long long13 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setLogBaseName("{{1.0=-1}=hi!}");
        java.lang.String str16 = atomikosProperties0.service;
        atomikosProperties0.setConsoleFileCount((int) ' ');
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{-1.0=100}" + "'", str16, "{-1.0=100}");
    }

    @Test
    public void test10515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10515");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setLogBaseDir("{-1.0=100}");
        int int10 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties14 = atomikosProperties13.asProperties();
        atomikosProperties13.service = "{-1.0=100}";
        long long17 = atomikosProperties13.getDefaultJtaTimeout();
        atomikosProperties13.setTransactionManagerUniqueName("{}");
        atomikosProperties13.consoleFileName = "hi!";
        int int22 = atomikosProperties13.getConsoleFileCount();
        boolean boolean23 = atomikosProperties13.isThreadedTwoPhaseCommit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel24 = atomikosProperties13.consoleLogLevel;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel24;
        int int26 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setLogBaseDir("{1.0=-1, -1.0=100}");
        atomikosProperties0.setConsoleFileName("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        boolean boolean31 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setSerialJtaTransactions(true);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10000L + "'", long17 == 10000L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel24 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel24.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 50 + "'", int26 == 50);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test10516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10516");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isThreadedTwoPhaseCommit();
        java.lang.String str2 = atomikosProperties0.logBaseDir;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = atomikosProperties0.recovery;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel4 = atomikosProperties0.getConsoleLogLevel();
        atomikosProperties0.allowSubTransactions = true;
        atomikosProperties0.enableLogging = true;
        atomikosProperties0.setForceShutdownOnVmExit(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(recovery3);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel4 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel4.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test10517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10517");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        java.lang.String str10 = atomikosProperties0.logBaseDir;
        java.lang.String str11 = atomikosProperties0.consoleFileName;
        int int12 = atomikosProperties0.getConsoleFileCount();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.setAllowSubTransactions(true);
        boolean boolean16 = atomikosProperties13.enableLogging;
        boolean boolean17 = atomikosProperties13.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel18 = atomikosProperties13.consoleLogLevel;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel18);
        java.lang.String str20 = atomikosProperties0.getService();
        atomikosProperties0.consoleFileCount = 0;
        atomikosProperties0.logBaseName = "{1.0=-1}";
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.setConsoleFileName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=10, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={1.0=-1}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        boolean boolean29 = atomikosProperties0.threadedTwoPhaseCommit;
        java.lang.String str30 = atomikosProperties0.getLogBaseName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tm.out" + "'", str11, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel18 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel18.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{1.0=-1}" + "'", str30, "{1.0=-1}");
    }

    @Test
    public void test10518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10518");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.forgetOrphanedLogEntriesDelay = 'a';
        long long5 = recovery0.retryInterval;
        recovery0.forgetOrphanedLogEntriesDelay = 0L;
        long long8 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long9 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.retryInterval = 0L;
        long long12 = recovery0.retryInterval;
        int int13 = recovery0.maxRetries;
        recovery0.setMaxRetries((int) 'a');
        long long16 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long17 = recovery0.forgetOrphanedLogEntriesDelay;
        int int18 = recovery0.getMaxRetries();
        recovery0.setForgetOrphanedLogEntriesDelay(52L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
    }

    @Test
    public void test10519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10519");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.outputDir = "tm.out";
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        java.lang.String str12 = properties11.toString();
        java.io.OutputStream outputStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties11.storeToXML(outputStream13, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(properties11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{com.atomikos.icatch.console_file_name=hi!, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=tm.out, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str12, "{com.atomikos.icatch.console_file_name=hi!, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=tm.out, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
    }

    @Test
    public void test10520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10520");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        java.lang.Object obj14 = properties3.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj17 = properties3.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties3.keys();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        boolean boolean21 = properties19.isEmpty();
        java.lang.Object obj24 = properties19.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties19.elements();
        java.lang.Object obj26 = properties2.replace((java.lang.Object) objEnumeration18, (java.lang.Object) properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties19.elements();
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties19.keys();
        java.util.Properties properties29 = new java.util.Properties(properties19);
        java.util.Properties properties30 = new java.util.Properties();
        java.lang.String str31 = properties30.toString();
        java.lang.Object obj33 = properties30.remove((java.lang.Object) (short) 100);
        java.lang.Object obj36 = properties30.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean38 = properties30.containsKey((java.lang.Object) 0L);
        java.lang.Object obj41 = properties30.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj44 = properties30.setProperty("", "{-1.0=100}");
        boolean boolean45 = properties30.isEmpty();
        java.util.Properties properties46 = new java.util.Properties();
        java.lang.String str47 = properties46.toString();
        java.util.Properties properties48 = new java.util.Properties(properties46);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet49 = properties48.entrySet();
        java.util.Properties properties51 = new java.util.Properties();
        java.lang.Object obj53 = properties51.remove((java.lang.Object) (-1.0d));
        int int54 = properties51.size();
        boolean boolean55 = properties30.replace((java.lang.Object) properties48, (java.lang.Object) 100L, (java.lang.Object) properties51);
        java.util.Enumeration<java.lang.Object> objEnumeration56 = properties48.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean58 = atomikosProperties57.isSerialJtaTransactions();
        atomikosProperties57.logBaseName = "{-1.0=100}";
        int int61 = atomikosProperties57.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery62 = atomikosProperties57.getRecovery();
        atomikosProperties57.setConsoleFileCount((int) (byte) 100);
        atomikosProperties57.maxTimeout = 50;
        java.lang.String str67 = atomikosProperties57.getConsoleFileName();
        boolean boolean68 = properties48.containsValue((java.lang.Object) atomikosProperties57);
        boolean boolean69 = properties19.containsKey((java.lang.Object) atomikosProperties57);
        java.util.Enumeration<java.lang.Object> objEnumeration70 = properties19.elements();
        java.util.Collection<java.lang.Object> objCollection71 = properties19.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties72 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties73 = atomikosProperties72.asProperties();
        atomikosProperties72.service = "{-1.0=100}";
        long long76 = atomikosProperties72.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel77 = null;
        atomikosProperties72.setConsoleLogLevel(atomikosLoggingLevel77);
        int int79 = atomikosProperties72.maxActives;
        atomikosProperties72.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery82 = atomikosProperties72.getRecovery();
        int int83 = atomikosProperties72.getConsoleFileCount();
        long long84 = atomikosProperties72.maxTimeout;
        atomikosProperties72.logBaseName = "{1.0=-1, -1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery87 = atomikosProperties72.recovery;
        boolean boolean88 = properties19.containsValue((java.lang.Object) atomikosProperties72);
        java.util.Properties properties89 = new java.util.Properties();
        java.lang.String str90 = properties89.toString();
        java.util.Properties properties91 = new java.util.Properties(properties89);
        java.lang.Object obj94 = properties89.setProperty("", "{={-1.0=100}, -1.0=100}");
        java.util.Set<java.lang.String> strSet95 = properties89.stringPropertyNames();
        properties19.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties89);
        java.util.Properties properties97 = new java.util.Properties(properties89);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{}" + "'", str31, "{}");
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "{}" + "'", str47, "{}");
        org.junit.Assert.assertNotNull(objEntrySet49);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objEnumeration56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 50 + "'", int61 == 50);
        org.junit.Assert.assertNotNull(recovery62);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "tm.out" + "'", str67, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objEnumeration70);
        org.junit.Assert.assertNotNull(objCollection71);
        org.junit.Assert.assertNotNull(properties73);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 10000L + "'", long76 == 10000L);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 50 + "'", int79 == 50);
        org.junit.Assert.assertNotNull(recovery82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 300000L + "'", long84 == 300000L);
        org.junit.Assert.assertNotNull(recovery87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "{}" + "'", str90, "{}");
        org.junit.Assert.assertNull(obj94);
        org.junit.Assert.assertNotNull(strSet95);
    }

    @Test
    public void test10521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10521");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties0.elements();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.String str10 = properties9.toString();
        java.lang.Object obj12 = properties9.remove((java.lang.Object) (short) 100);
        java.lang.Object obj15 = properties9.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj16 = properties9.clone();
        java.util.Set<java.lang.String> strSet17 = properties9.stringPropertyNames();
        java.util.Properties properties18 = new java.util.Properties(properties9);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties20 = atomikosProperties19.asProperties();
        atomikosProperties19.service = "{-1.0=100}";
        java.lang.String str23 = atomikosProperties19.getTransactionManagerUniqueName();
        boolean boolean24 = atomikosProperties19.isSerialJtaTransactions();
        int int25 = atomikosProperties19.getConsoleFileLimit();
        java.util.Properties properties26 = new java.util.Properties();
        java.lang.String str27 = properties26.toString();
        java.lang.Object obj29 = properties26.remove((java.lang.Object) (short) 100);
        java.lang.Object obj32 = properties26.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean34 = properties26.containsKey((java.lang.Object) 0L);
        java.lang.Object obj37 = properties26.replace((java.lang.Object) false, (java.lang.Object) ' ');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties38.setEnableLogging(true);
        atomikosProperties38.setConsoleFileLimit((int) (short) 0);
        boolean boolean43 = properties26.contains((java.lang.Object) atomikosProperties38);
        java.lang.Object obj44 = properties18.putIfAbsent((java.lang.Object) int25, (java.lang.Object) atomikosProperties38);
        java.util.Properties properties45 = new java.util.Properties(properties18);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties18);
        java.lang.String str48 = properties18.getProperty("tmlog");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties50 = atomikosProperties49.asProperties();
        atomikosProperties49.service = "{-1.0=100}";
        java.lang.String str53 = atomikosProperties49.getTransactionManagerUniqueName();
        atomikosProperties49.consoleFileLimit = (byte) 10;
        long long56 = atomikosProperties49.getMaxTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel57 = null;
        atomikosProperties49.consoleLogLevel = atomikosLoggingLevel57;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery59 = atomikosProperties49.getRecovery();
        boolean boolean60 = atomikosProperties49.isForceShutdownOnVmExit();
        atomikosProperties49.setForceShutdownOnVmExit(false);
        boolean boolean63 = properties18.equals((java.lang.Object) false);
        java.util.Set<java.lang.Object> objSet64 = properties18.keySet();
        java.util.Enumeration<java.lang.Object> objEnumeration65 = properties18.keys();
        java.util.Collection<java.lang.Object> objCollection66 = properties18.values();
        java.lang.String str67 = properties18.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{}" + "'", str27, "{}");
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 300000L + "'", long56 == 300000L);
        org.junit.Assert.assertNotNull(recovery59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objSet64);
        org.junit.Assert.assertNotNull(objEnumeration65);
        org.junit.Assert.assertNotNull(objCollection66);
    }

    @Test
    public void test10522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10522");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Set<java.lang.String> strSet8 = properties0.stringPropertyNames();
        java.util.Properties properties9 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        atomikosProperties10.service = "{-1.0=100}";
        java.lang.String str14 = atomikosProperties10.getTransactionManagerUniqueName();
        boolean boolean15 = atomikosProperties10.isSerialJtaTransactions();
        int int16 = atomikosProperties10.getConsoleFileLimit();
        java.util.Properties properties17 = new java.util.Properties();
        java.lang.String str18 = properties17.toString();
        java.lang.Object obj20 = properties17.remove((java.lang.Object) (short) 100);
        java.lang.Object obj23 = properties17.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean25 = properties17.containsKey((java.lang.Object) 0L);
        java.lang.Object obj28 = properties17.replace((java.lang.Object) false, (java.lang.Object) ' ');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setEnableLogging(true);
        atomikosProperties29.setConsoleFileLimit((int) (short) 0);
        boolean boolean34 = properties17.contains((java.lang.Object) atomikosProperties29);
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) int16, (java.lang.Object) atomikosProperties29);
        java.util.Properties properties36 = new java.util.Properties(properties9);
        java.lang.Object obj39 = properties9.setProperty("{{1.0=-1, -1.0=100}={1.0=-1}, 1.0=-1}", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        java.util.Properties properties40 = new java.util.Properties();
        java.lang.Object obj43 = properties40.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration44 = properties40.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration45 = properties40.elements();
        java.util.Properties properties46 = new java.util.Properties(properties40);
        java.lang.String str48 = properties40.getProperty("");
        java.util.Set<java.lang.String> strSet49 = properties40.stringPropertyNames();
        java.lang.Object obj50 = properties40.clone();
        boolean boolean51 = properties9.equals((java.lang.Object) properties40);
        java.io.OutputStream outputStream52 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties40.store(outputStream52, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir={={-1.0=100}, -1.0=100}, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir={1.0=-1, -1.0=100}, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=true, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{}" + "'", str18, "{}");
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(objEnumeration44);
        org.junit.Assert.assertNotNull(objEnumeration45);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "{{}={}}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "{{}={}}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "{{}={}}");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test10523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10523");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.consoleFileName = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel13);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel15 = atomikosProperties0.getConsoleLogLevel();
        int int16 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.setDefaultJtaTimeout((long) 'a');
        java.lang.String str19 = atomikosProperties0.getConsoleFileName();
        boolean boolean20 = atomikosProperties0.isAllowSubTransactions();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertNull(atomikosLoggingLevel15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{-1.0=100}" + "'", str19, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test10524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10524");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.setCheckpointInterval((long) 5);
        atomikosProperties0.setService("");
        java.lang.String str11 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.enableLogging = true;
        atomikosProperties0.logBaseName = "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}";
        java.lang.String str16 = atomikosProperties0.getService();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test10525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10525");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        boolean boolean10 = atomikosProperties2.forceShutdownOnVmExit;
        atomikosProperties2.setOutputDir("");
        long long13 = atomikosProperties2.defaultJtaTimeout;
        java.lang.String str14 = atomikosProperties2.getLogBaseName();
        atomikosProperties2.setEnableLogging(false);
        int int17 = atomikosProperties2.consoleFileCount;
        atomikosProperties2.outputDir = "tmlog";
        java.util.Properties properties20 = new java.util.Properties();
        java.lang.String str21 = properties20.toString();
        java.lang.Object obj23 = properties20.remove((java.lang.Object) (short) 100);
        java.lang.Object obj26 = properties20.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj27 = properties20.clone();
        java.util.Set<java.lang.String> strSet28 = properties20.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties31 = atomikosProperties30.asProperties();
        atomikosProperties30.service = "{-1.0=100}";
        long long34 = atomikosProperties30.getDefaultJtaTimeout();
        long long35 = atomikosProperties30.getMaxTimeout();
        java.lang.String str36 = atomikosProperties30.outputDir;
        atomikosProperties30.consoleFileName = "tm.out";
        long long39 = atomikosProperties30.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel40 = atomikosProperties30.consoleLogLevel;
        atomikosProperties2.set(properties20, "{1.0=-1, -1.0=100}", (java.lang.Object) atomikosProperties30);
        boolean boolean42 = atomikosProperties2.enableLogging;
        atomikosProperties2.checkpointInterval = 'a';
        atomikosProperties2.consoleFileName = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, false={100=100}, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tmlog" + "'", str14, "tmlog");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{}" + "'", str21, "{}");
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10000L + "'", long34 == 10000L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 300000L + "'", long35 == 300000L);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 500L + "'", long39 == 500L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel40 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel40.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test10526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10526");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties7 = new java.util.Properties();
        java.lang.String str8 = properties7.toString();
        properties7.clear();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties7.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties12 = atomikosProperties11.asProperties();
        atomikosProperties11.service = "{-1.0=100}";
        long long15 = atomikosProperties11.getDefaultJtaTimeout();
        atomikosProperties11.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties11.setMaxActives(100);
        java.lang.String str20 = atomikosProperties11.logBaseDir;
        atomikosProperties11.consoleFileCount = (short) 0;
        atomikosProperties11.defaultJtaTimeout = 10000L;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel25 = atomikosProperties11.consoleLogLevel;
        java.lang.Object obj26 = properties0.putIfAbsent((java.lang.Object) properties7, (java.lang.Object) atomikosLoggingLevel25);
        java.lang.String str27 = properties7.toString();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet28 = properties7.entrySet();
        java.util.Properties properties29 = new java.util.Properties();
        properties29.clear();
        java.lang.String str31 = properties29.toString();
        java.lang.Object obj32 = properties29.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties34 = atomikosProperties33.asProperties();
        atomikosProperties33.service = "{-1.0=100}";
        long long37 = atomikosProperties33.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel38 = null;
        atomikosProperties33.setConsoleLogLevel(atomikosLoggingLevel38);
        atomikosProperties33.setTransactionManagerUniqueName("{-1.0=100}");
        atomikosProperties33.consoleFileCount = 0;
        atomikosProperties33.enableLogging = false;
        java.lang.Object obj46 = properties7.replace((java.lang.Object) properties29, (java.lang.Object) false);
        boolean boolean47 = properties29.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration48 = properties29.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties49.setAllowSubTransactions(true);
        java.lang.String str52 = atomikosProperties49.transactionManagerUniqueName;
        int int53 = atomikosProperties49.getConsoleFileLimit();
        java.lang.String str54 = atomikosProperties49.outputDir;
        atomikosProperties49.defaultJtaTimeout = '#';
        boolean boolean57 = atomikosProperties49.isEnableLogging();
        long long58 = atomikosProperties49.getDefaultJtaTimeout();
        int int59 = atomikosProperties49.consoleFileCount;
        boolean boolean60 = properties29.containsKey((java.lang.Object) atomikosProperties49);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNotNull(objEntrySet10);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel25 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel25.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{}" + "'", str27, "{}");
        org.junit.Assert.assertNotNull(objEntrySet28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{}" + "'", str31, "{}");
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "{}");
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 10000L + "'", long37 == 10000L);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objEnumeration48);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 35L + "'", long58 == 35L);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test10527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10527");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties0.logBaseName = "hi!";
        java.lang.String str9 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setLogBaseDir("tm.out");
        atomikosProperties0.setDefaultJtaTimeout((long) 2);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test10528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10528");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        properties0.clear();
        java.util.Set<java.lang.Object> objSet4 = properties0.keySet();
        java.util.Properties properties5 = new java.util.Properties();
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties5.elements();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        int int8 = properties5.size();
        java.util.Enumeration<java.lang.Object> objEnumeration9 = properties5.elements();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objSet4);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(objEnumeration9);
    }

    @Test
    public void test10529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10529");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.String str9 = properties8.toString();
        java.lang.Object obj11 = properties8.remove((java.lang.Object) (short) 100);
        java.lang.Object obj14 = properties8.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj15 = properties8.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties8.elements();
        java.lang.Object obj17 = properties0.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration16);
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration19 = properties18.propertyNames();
        java.lang.Object obj20 = properties18.clone();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        boolean boolean23 = properties21.isEmpty();
        java.lang.Object obj26 = properties21.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties21.elements();
        java.lang.Object obj28 = properties0.put(obj20, (java.lang.Object) objEnumeration27);
        properties0.clear();
        java.util.Properties properties30 = new java.util.Properties();
        java.lang.Object obj32 = properties30.remove((java.lang.Object) (-1.0d));
        boolean boolean33 = properties30.isEmpty();
        int int34 = properties30.size();
        java.lang.String str36 = properties30.getProperty("{}");
        java.util.Properties properties37 = new java.util.Properties();
        java.lang.String str38 = properties37.toString();
        java.lang.Object obj40 = properties37.remove((java.lang.Object) (short) 100);
        java.lang.Object obj43 = properties37.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean45 = properties37.containsKey((java.lang.Object) 0L);
        java.lang.Object obj48 = properties37.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties49 = new java.util.Properties(properties37);
        java.util.Enumeration<java.lang.Object> objEnumeration50 = properties37.keys();
        java.lang.Object obj51 = properties0.replace((java.lang.Object) properties30, (java.lang.Object) properties37);
        boolean boolean52 = properties30.isEmpty();
        java.util.Properties properties53 = new java.util.Properties();
        java.lang.String str54 = properties53.toString();
        boolean boolean55 = properties53.isEmpty();
        java.util.Properties properties56 = new java.util.Properties();
        java.lang.String str57 = properties56.toString();
        java.lang.Object obj59 = properties56.remove((java.lang.Object) (short) 100);
        java.lang.Object obj62 = properties56.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean64 = properties56.containsKey((java.lang.Object) 0L);
        boolean boolean65 = properties53.containsValue((java.lang.Object) 0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery66 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        boolean boolean67 = properties53.contains((java.lang.Object) recovery66);
        java.util.Properties properties68 = new java.util.Properties();
        java.lang.String str69 = properties68.toString();
        java.lang.Object obj71 = properties68.remove((java.lang.Object) (short) 100);
        java.lang.Object obj74 = properties68.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj75 = properties68.clone();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet76 = properties68.entrySet();
        java.lang.Object obj77 = properties30.replace((java.lang.Object) properties53, (java.lang.Object) properties68);
        java.lang.Object obj80 = properties30.setProperty("{100=100}", "{com.atomikos.icatch.tm.out={}}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(wildcardEnumeration19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{}" + "'", str38, "{}");
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(objEnumeration50);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "{}" + "'", str54, "{}");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "{}" + "'", str57, "{}");
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "{}" + "'", str69, "{}");
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEntrySet76);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertNull(obj80);
    }

    @Test
    public void test10530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10530");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.String str9 = properties8.toString();
        java.lang.Object obj11 = properties8.remove((java.lang.Object) (short) 100);
        java.lang.Object obj14 = properties8.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj15 = properties8.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties8.elements();
        java.lang.Object obj17 = properties0.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration16);
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration19 = properties18.propertyNames();
        java.lang.Object obj20 = properties18.clone();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        boolean boolean23 = properties21.isEmpty();
        java.lang.Object obj26 = properties21.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties21.elements();
        java.lang.Object obj28 = properties0.put(obj20, (java.lang.Object) objEnumeration27);
        properties0.clear();
        java.lang.String str30 = properties0.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties32 = atomikosProperties31.asProperties();
        atomikosProperties31.service = "{-1.0=100}";
        long long35 = atomikosProperties31.getDefaultJtaTimeout();
        atomikosProperties31.serialJtaTransactions = true;
        atomikosProperties31.maxActives = ' ';
        int int40 = atomikosProperties31.getConsoleFileCount();
        boolean boolean41 = properties0.equals((java.lang.Object) atomikosProperties31);
        java.lang.Object obj42 = properties0.clone();
        java.util.Enumeration<?> wildcardEnumeration43 = properties0.propertyNames();
        java.lang.Object obj44 = properties0.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties46 = atomikosProperties45.asProperties();
        atomikosProperties45.service = "{-1.0=100}";
        java.lang.String str49 = atomikosProperties45.getLogBaseName();
        java.lang.String str50 = atomikosProperties45.transactionManagerUniqueName;
        java.lang.Object obj51 = properties0.get((java.lang.Object) atomikosProperties45);
        java.util.Properties properties52 = new java.util.Properties();
        java.lang.String str53 = properties52.toString();
        java.lang.Object obj55 = properties52.remove((java.lang.Object) (short) 100);
        java.util.Properties properties56 = new java.util.Properties();
        java.lang.String str57 = properties56.toString();
        boolean boolean58 = properties56.isEmpty();
        java.lang.Object obj61 = properties56.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration62 = properties56.elements();
        boolean boolean63 = properties52.containsKey((java.lang.Object) properties56);
        java.util.Enumeration<?> wildcardEnumeration64 = properties52.propertyNames();
        java.util.Properties properties65 = new java.util.Properties(properties52);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties67 = atomikosProperties66.asProperties();
        atomikosProperties66.service = "{-1.0=100}";
        long long70 = atomikosProperties66.getDefaultJtaTimeout();
        long long71 = atomikosProperties66.getMaxTimeout();
        java.lang.String str72 = atomikosProperties66.outputDir;
        atomikosProperties66.consoleFileName = "tm.out";
        long long75 = atomikosProperties66.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel76 = atomikosProperties66.consoleLogLevel;
        boolean boolean77 = properties52.equals((java.lang.Object) atomikosLoggingLevel76);
        boolean boolean78 = properties0.containsKey((java.lang.Object) atomikosLoggingLevel76);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties79 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties80 = atomikosProperties79.asProperties();
        atomikosProperties79.service = "{-1.0=100}";
        long long83 = atomikosProperties79.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel84 = null;
        atomikosProperties79.setConsoleLogLevel(atomikosLoggingLevel84);
        atomikosProperties79.setTransactionManagerUniqueName("{-1.0=100}");
        boolean boolean88 = atomikosProperties79.enableLogging;
        atomikosProperties79.setAllowSubTransactions(true);
        atomikosProperties79.maxActives = 100;
        int int93 = atomikosProperties79.consoleFileCount;
        long long94 = atomikosProperties79.maxTimeout;
        atomikosProperties79.defaultJtaTimeout = 10000L;
        boolean boolean97 = properties0.contains((java.lang.Object) atomikosProperties79);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(wildcardEnumeration19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{}" + "'", str30, "{}");
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10000L + "'", long35 == 10000L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "{}");
        org.junit.Assert.assertNotNull(wildcardEnumeration43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "{}");
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "{}" + "'", str53, "{}");
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "{}" + "'", str57, "{}");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNotNull(objEnumeration62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration64);
        org.junit.Assert.assertNotNull(properties67);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 10000L + "'", long70 == 10000L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 300000L + "'", long71 == 300000L);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 500L + "'", long75 == 500L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel76 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel76.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(properties80);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 10000L + "'", long83 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 300000L + "'", long94 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test10531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10531");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet2 = properties1.entrySet();
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.Object obj6 = properties3.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration7 = properties3.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet8 = properties3.entrySet();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        atomikosProperties10.service = "{-1.0=100}";
        java.lang.String str14 = atomikosProperties10.getLogBaseName();
        long long15 = atomikosProperties10.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel16 = null;
        atomikosProperties10.setConsoleLogLevel(atomikosLoggingLevel16);
        atomikosProperties10.setLogBaseDir("");
        java.util.Properties properties20 = atomikosProperties10.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties22 = atomikosProperties21.asProperties();
        atomikosProperties21.service = "{-1.0=100}";
        long long25 = atomikosProperties21.getDefaultJtaTimeout();
        long long26 = atomikosProperties21.getMaxTimeout();
        int int27 = atomikosProperties21.consoleFileCount;
        int int28 = atomikosProperties21.getMaxActives();
        atomikosProperties21.setAllowSubTransactions(true);
        boolean boolean31 = atomikosProperties21.serialJtaTransactions;
        java.lang.Object obj32 = properties20.remove((java.lang.Object) boolean31);
        boolean boolean33 = properties1.containsKey((java.lang.Object) boolean31);
        java.lang.Object obj34 = properties1.clone();
        java.util.Collection<java.lang.Object> objCollection35 = properties1.values();
        java.util.Set<java.lang.Object> objSet36 = properties1.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties38 = atomikosProperties37.asProperties();
        atomikosProperties37.service = "{-1.0=100}";
        long long41 = atomikosProperties37.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel42 = null;
        atomikosProperties37.setConsoleLogLevel(atomikosLoggingLevel42);
        int int44 = atomikosProperties37.maxActives;
        atomikosProperties37.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery47 = atomikosProperties37.getRecovery();
        atomikosProperties37.consoleFileName = "{-1.0=100}";
        atomikosProperties37.setSerialJtaTransactions(false);
        atomikosProperties37.consoleFileName = "{={-1.0=100}, -1.0=100}";
        atomikosProperties37.defaultJtaTimeout = 50;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel56 = atomikosProperties37.getConsoleLogLevel();
        atomikosProperties37.enableLogging = true;
        atomikosProperties37.checkpointInterval = (-1L);
        int int61 = atomikosProperties37.maxActives;
        boolean boolean62 = properties1.contains((java.lang.Object) atomikosProperties37);
        java.lang.String str63 = atomikosProperties37.transactionManagerUniqueName;
        long long64 = atomikosProperties37.checkpointInterval;
        long long65 = atomikosProperties37.getMaxTimeout();
        org.junit.Assert.assertNotNull(objEntrySet2);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(objEnumeration7);
        org.junit.Assert.assertNotNull(objEntrySet8);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tmlog" + "'", str14, "tmlog");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10000L + "'", long25 == 10000L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 300000L + "'", long26 == 300000L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 50 + "'", int28 == 50);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "{{}={}}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "{{}={}}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "{{}={}}");
        org.junit.Assert.assertNotNull(objCollection35);
        org.junit.Assert.assertNotNull(objSet36);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10000L + "'", long41 == 10000L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 50 + "'", int44 == 50);
        org.junit.Assert.assertNotNull(recovery47);
        org.junit.Assert.assertNull(atomikosLoggingLevel56);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 50 + "'", int61 == 50);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-1L) + "'", long64 == (-1L));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 300000L + "'", long65 == 300000L);
    }

    @Test
    public void test10532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10532");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        java.lang.String str3 = atomikosProperties0.transactionManagerUniqueName;
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.lang.String str5 = atomikosProperties0.logBaseDir;
        int int6 = atomikosProperties0.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery7 = atomikosProperties0.recovery;
        long long8 = recovery7.getRetryInterval();
        recovery7.delay = 50L;
        recovery7.setForgetOrphanedLogEntriesDelay((long) 1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(recovery7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10000L + "'", long8 == 10000L);
    }

    @Test
    public void test10533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10533");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.lang.String str9 = properties0.getProperty("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        atomikosProperties10.service = "{-1.0=100}";
        long long14 = atomikosProperties10.getDefaultJtaTimeout();
        atomikosProperties10.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties10.setMaxActives(100);
        boolean boolean19 = atomikosProperties10.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery20 = atomikosProperties10.recovery;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties22 = atomikosProperties21.asProperties();
        atomikosProperties21.service = "{-1.0=100}";
        long long25 = atomikosProperties21.getDefaultJtaTimeout();
        atomikosProperties21.setMaxActives(0);
        boolean boolean28 = atomikosProperties21.threadedTwoPhaseCommit;
        boolean boolean29 = atomikosProperties21.allowSubTransactions;
        atomikosProperties21.logBaseDir = "{}";
        atomikosProperties21.service = "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}";
        java.lang.Object obj34 = properties0.put((java.lang.Object) recovery20, (java.lang.Object) atomikosProperties21);
        atomikosProperties21.serialJtaTransactions = true;
        boolean boolean37 = atomikosProperties21.isSerialJtaTransactions();
        java.lang.Class<?> wildcardClass38 = atomikosProperties21.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(recovery20);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10000L + "'", long25 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test10534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10534");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        int int11 = atomikosProperties0.getConsoleFileCount();
        long long12 = atomikosProperties0.maxTimeout;
        atomikosProperties0.logBaseName = "{1.0=-1, -1.0=100}";
        java.lang.String str15 = atomikosProperties0.outputDir;
        java.lang.String str16 = atomikosProperties0.logBaseName;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 300000L + "'", long12 == 300000L);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{1.0=-1, -1.0=100}" + "'", str16, "{1.0=-1, -1.0=100}");
    }

    @Test
    public void test10535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10535");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.maxActives = ' ';
        int int9 = atomikosProperties0.getConsoleFileCount();
        int int10 = atomikosProperties0.consoleFileLimit;
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean13 = atomikosProperties12.isSerialJtaTransactions();
        atomikosProperties12.logBaseName = "{-1.0=100}";
        int int16 = atomikosProperties12.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery17 = atomikosProperties12.getRecovery();
        atomikosProperties12.setConsoleFileCount((int) (byte) 100);
        atomikosProperties12.setAllowSubTransactions(true);
        atomikosProperties12.setService("tm.out");
        boolean boolean24 = atomikosProperties12.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel25 = atomikosProperties12.getConsoleLogLevel();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setAllowSubTransactions(true);
        boolean boolean29 = atomikosProperties26.enableLogging;
        atomikosProperties26.consoleFileLimit = (byte) 100;
        java.util.Properties properties32 = new java.util.Properties();
        java.lang.String str33 = properties32.toString();
        java.util.Properties properties34 = new java.util.Properties(properties32);
        java.util.Properties properties36 = new java.util.Properties();
        java.lang.String str37 = properties36.toString();
        java.lang.Object obj39 = properties36.remove((java.lang.Object) (short) 100);
        java.lang.Object obj42 = properties36.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean44 = properties36.containsKey((java.lang.Object) 0L);
        java.lang.Object obj47 = properties36.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties48 = new java.util.Properties(properties36);
        java.util.Enumeration<java.lang.Object> objEnumeration49 = properties48.elements();
        atomikosProperties26.set(properties34, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties48);
        atomikosProperties26.allowSubTransactions = false;
        java.lang.Object obj53 = properties11.put((java.lang.Object) atomikosProperties12, (java.lang.Object) false);
        java.util.Properties properties54 = new java.util.Properties();
        java.lang.String str55 = properties54.toString();
        java.lang.Object obj57 = properties54.remove((java.lang.Object) (short) 100);
        java.lang.Object obj60 = properties54.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean62 = properties54.containsKey((java.lang.Object) 0L);
        java.lang.Object obj65 = properties54.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj68 = properties54.setProperty("", "{-1.0=100}");
        boolean boolean69 = properties54.isEmpty();
        java.util.Properties properties70 = new java.util.Properties();
        java.lang.String str71 = properties70.toString();
        java.util.Properties properties72 = new java.util.Properties(properties70);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet73 = properties72.entrySet();
        java.util.Properties properties75 = new java.util.Properties();
        java.lang.Object obj77 = properties75.remove((java.lang.Object) (-1.0d));
        int int78 = properties75.size();
        boolean boolean79 = properties54.replace((java.lang.Object) properties72, (java.lang.Object) 100L, (java.lang.Object) properties75);
        java.util.Properties properties80 = new java.util.Properties();
        java.lang.Object obj83 = properties80.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration84 = properties80.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration85 = properties80.elements();
        java.util.Properties properties86 = new java.util.Properties(properties80);
        boolean boolean87 = properties54.containsValue((java.lang.Object) properties86);
        java.lang.Object obj88 = properties11.get((java.lang.Object) boolean87);
        java.io.InputStream inputStream89 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties11.load(inputStream89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 50 + "'", int16 == 50);
        org.junit.Assert.assertNotNull(recovery17);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel25 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel25.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "{}" + "'", str33, "{}");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{}" + "'", str37, "{}");
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(objEnumeration49);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{}" + "'", str55, "{}");
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "{}" + "'", str71, "{}");
        org.junit.Assert.assertNotNull(objEntrySet73);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(obj83);
        org.junit.Assert.assertNotNull(objEnumeration84);
        org.junit.Assert.assertNotNull(objEnumeration85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(obj88);
    }

    @Test
    public void test10536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10536");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties8 = atomikosProperties7.asProperties();
        java.lang.Object obj9 = properties0.remove((java.lang.Object) properties8);
        java.util.Properties properties10 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties12 = atomikosProperties11.asProperties();
        atomikosProperties11.service = "{-1.0=100}";
        long long15 = atomikosProperties11.getDefaultJtaTimeout();
        atomikosProperties11.setThreadedTwoPhaseCommit(true);
        boolean boolean18 = atomikosProperties11.isAllowSubTransactions();
        boolean boolean19 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.allowSubTransactions = false;
        atomikosProperties11.threadedTwoPhaseCommit = true;
        atomikosProperties11.setLogBaseName("tm.out");
        long long26 = atomikosProperties11.defaultJtaTimeout;
        int int27 = atomikosProperties11.consoleFileLimit;
        java.lang.String str28 = atomikosProperties11.getTransactionManagerUniqueName();
        atomikosProperties11.service = "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties32 = atomikosProperties31.asProperties();
        atomikosProperties31.service = "{-1.0=100}";
        java.lang.String str35 = atomikosProperties31.getLogBaseName();
        java.lang.String str36 = atomikosProperties31.transactionManagerUniqueName;
        atomikosProperties31.consoleFileName = "";
        java.lang.Object obj39 = properties8.putIfAbsent((java.lang.Object) atomikosProperties11, (java.lang.Object) "");
        long long40 = atomikosProperties11.getDefaultJtaTimeout();
        int int41 = atomikosProperties11.maxActives;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10000L + "'", long26 == 10000L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tmlog" + "'", str35, "tmlog");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10000L + "'", long40 == 10000L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 50 + "'", int41 == 50);
    }

    @Test
    public void test10537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10537");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setMaxActives(0);
        atomikosProperties0.maxActives = 'a';
        atomikosProperties0.serialJtaTransactions = false;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties12 = atomikosProperties11.asProperties();
        atomikosProperties11.service = "{-1.0=100}";
        long long15 = atomikosProperties11.getDefaultJtaTimeout();
        atomikosProperties11.serialJtaTransactions = true;
        long long18 = atomikosProperties11.getDefaultJtaTimeout();
        long long19 = atomikosProperties11.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery20 = atomikosProperties11.getRecovery();
        java.lang.String str21 = atomikosProperties11.outputDir;
        atomikosProperties11.consoleFileCount = 32;
        atomikosProperties11.consoleFileLimit = (short) -1;
        boolean boolean26 = atomikosProperties11.threadedTwoPhaseCommit;
        java.lang.String str27 = atomikosProperties11.getService();
        atomikosProperties11.consoleFileName = "{1.0=-1}";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties31 = atomikosProperties30.asProperties();
        atomikosProperties30.service = "{-1.0=100}";
        long long34 = atomikosProperties30.getDefaultJtaTimeout();
        atomikosProperties30.serialJtaTransactions = true;
        long long37 = atomikosProperties30.maxTimeout;
        atomikosProperties30.setLogBaseDir("{-1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties40.setAllowSubTransactions(true);
        atomikosProperties40.maxActives = (short) -1;
        atomikosProperties40.setService("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties47.setAllowSubTransactions(true);
        boolean boolean50 = atomikosProperties47.enableLogging;
        boolean boolean51 = atomikosProperties47.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel52 = atomikosProperties47.consoleLogLevel;
        atomikosProperties40.setConsoleLogLevel(atomikosLoggingLevel52);
        atomikosProperties30.consoleLogLevel = atomikosLoggingLevel52;
        atomikosProperties11.setConsoleLogLevel(atomikosLoggingLevel52);
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel52;
        java.lang.String str57 = atomikosProperties0.logBaseName;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10000L + "'", long18 == 10000L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 500L + "'", long19 == 500L);
        org.junit.Assert.assertNotNull(recovery20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{-1.0=100}" + "'", str27, "{-1.0=100}");
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10000L + "'", long34 == 10000L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 300000L + "'", long37 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel52 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel52.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "tmlog" + "'", str57, "tmlog");
    }

    @Test
    public void test10538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10538");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.consoleFileName = "";
        atomikosProperties0.forceShutdownOnVmExit = false;
        boolean boolean10 = atomikosProperties0.isAllowSubTransactions();
        atomikosProperties0.setDefaultJtaTimeout(86400000L);
        int int13 = atomikosProperties0.maxActives;
        java.util.Properties properties14 = atomikosProperties0.asProperties();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet15 = properties14.entrySet();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(objEntrySet15);
    }

    @Test
    public void test10539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10539");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties4 = atomikosProperties3.asProperties();
        atomikosProperties3.service = "{-1.0=100}";
        long long7 = atomikosProperties3.getDefaultJtaTimeout();
        atomikosProperties3.setThreadedTwoPhaseCommit(true);
        boolean boolean10 = atomikosProperties3.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = atomikosProperties3.recovery;
        atomikosProperties3.setLogBaseDir("");
        long long14 = atomikosProperties3.maxTimeout;
        atomikosProperties3.setService("{={-1.0=100}, -1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean18 = atomikosProperties17.isSerialJtaTransactions();
        atomikosProperties17.logBaseName = "{-1.0=100}";
        int int21 = atomikosProperties17.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery22 = atomikosProperties17.getRecovery();
        java.lang.String str23 = atomikosProperties17.getOutputDir();
        boolean boolean24 = atomikosProperties17.isForceShutdownOnVmExit();
        boolean boolean25 = atomikosProperties17.enableLogging;
        java.lang.Class<?> wildcardClass26 = atomikosProperties17.getClass();
        java.lang.Object obj27 = properties0.replace((java.lang.Object) atomikosProperties3, (java.lang.Object) wildcardClass26);
        java.util.Set<java.lang.String> strSet28 = properties0.stringPropertyNames();
        java.lang.String str31 = properties0.getProperty("", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name={}, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(recovery11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 300000L + "'", long14 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 50 + "'", int21 == 50);
        org.junit.Assert.assertNotNull(recovery22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name={}, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str31, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name={}, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
    }

    @Test
    public void test10540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10540");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        atomikosProperties0.setTransactionManagerUniqueName("{-1.0=100}");
        boolean boolean9 = atomikosProperties0.enableLogging;
        java.lang.String str10 = atomikosProperties0.logBaseDir;
        long long11 = atomikosProperties0.maxTimeout;
        java.lang.String str12 = atomikosProperties0.outputDir;
        java.util.Properties properties13 = atomikosProperties0.asProperties();
        boolean boolean14 = properties13.isEmpty();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test10541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10541");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.lang.Object obj5 = properties0.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.Object obj8 = properties6.remove((java.lang.Object) (-1.0d));
        boolean boolean9 = properties6.isEmpty();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.lang.Object obj13 = properties10.remove((java.lang.Object) (short) 100);
        java.lang.Object obj16 = properties10.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean18 = properties10.containsKey((java.lang.Object) 0L);
        java.lang.Object obj21 = properties10.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj24 = properties10.setProperty("", "{-1.0=100}");
        java.lang.Object obj25 = properties10.clone();
        java.lang.Object obj26 = properties6.get((java.lang.Object) properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.setEnableLogging(true);
        atomikosProperties27.consoleFileCount = 0;
        int int32 = atomikosProperties27.getMaxActives();
        java.lang.String str33 = atomikosProperties27.getLogBaseDir();
        java.lang.String str34 = atomikosProperties27.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery35 = atomikosProperties27.getRecovery();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties37 = atomikosProperties36.asProperties();
        atomikosProperties36.service = "{-1.0=100}";
        long long40 = atomikosProperties36.getDefaultJtaTimeout();
        atomikosProperties36.setThreadedTwoPhaseCommit(true);
        boolean boolean43 = atomikosProperties36.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery44 = atomikosProperties36.recovery;
        atomikosProperties36.setLogBaseDir("");
        java.lang.Object obj47 = properties10.replace((java.lang.Object) recovery35, (java.lang.Object) "");
        java.util.Properties properties48 = new java.util.Properties();
        java.lang.Object obj50 = properties48.remove((java.lang.Object) (-1.0d));
        boolean boolean52 = properties48.contains((java.lang.Object) "{-1.0=100}");
        boolean boolean53 = properties10.equals((java.lang.Object) "{-1.0=100}");
        properties10.clear();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Enumeration<java.lang.Object> objEnumeration56 = properties0.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties58 = atomikosProperties57.asProperties();
        atomikosProperties57.service = "{-1.0=100}";
        long long61 = atomikosProperties57.getDefaultJtaTimeout();
        atomikosProperties57.serialJtaTransactions = true;
        long long64 = atomikosProperties57.maxTimeout;
        boolean boolean65 = atomikosProperties57.isThreadedTwoPhaseCommit();
        atomikosProperties57.setCheckpointInterval(1L);
        atomikosProperties57.setConsoleFileName("hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties70 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties71 = atomikosProperties70.asProperties();
        atomikosProperties70.service = "{-1.0=100}";
        long long74 = atomikosProperties70.getDefaultJtaTimeout();
        atomikosProperties70.setThreadedTwoPhaseCommit(true);
        boolean boolean77 = atomikosProperties70.isAllowSubTransactions();
        int int78 = atomikosProperties70.getConsoleFileLimit();
        boolean boolean79 = atomikosProperties70.forceShutdownOnVmExit;
        atomikosProperties70.setMaxTimeout(300000L);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery82 = atomikosProperties70.getRecovery();
        java.lang.String str83 = atomikosProperties70.consoleFileName;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery84 = atomikosProperties70.getRecovery();
        atomikosProperties70.setLogBaseDir("{}");
        atomikosProperties70.consoleFileName = "{1.0=-1, -1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel89 = atomikosProperties70.consoleLogLevel;
        java.lang.String str90 = atomikosProperties70.logBaseName;
        java.lang.Object obj91 = properties0.putIfAbsent((java.lang.Object) atomikosProperties57, (java.lang.Object) str90);
        java.io.InputStream inputStream92 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.load(inputStream92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(obj25);
// flaky:         org.junit.Assert.assertEquals(obj25.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(recovery35);
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10000L + "'", long40 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(recovery44);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objEnumeration56);
        org.junit.Assert.assertNotNull(properties58);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 10000L + "'", long61 == 10000L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 300000L + "'", long64 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(properties71);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 10000L + "'", long74 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(recovery82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "tm.out" + "'", str83, "tm.out");
        org.junit.Assert.assertNotNull(recovery84);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel89 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel89.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "tmlog" + "'", str90, "tmlog");
        org.junit.Assert.assertNull(obj91);
    }

    @Test
    public void test10542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10542");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.forgetOrphanedLogEntriesDelay = 'a';
        long long5 = recovery0.retryInterval;
        recovery0.forgetOrphanedLogEntriesDelay = 0L;
        long long8 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long9 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.retryInterval = 0L;
        long long12 = recovery0.retryInterval;
        int int13 = recovery0.maxRetries;
        long long14 = recovery0.getDelay();
        recovery0.setRetryInterval((long) ' ');
        recovery0.delay = (short) 1;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
    }

    @Test
    public void test10543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10543");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxTimeout((long) (byte) 0);
        atomikosProperties0.setAllowSubTransactions(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties12 = atomikosProperties11.asProperties();
        atomikosProperties11.service = "{-1.0=100}";
        java.lang.String str15 = atomikosProperties11.getTransactionManagerUniqueName();
        boolean boolean16 = atomikosProperties11.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel17 = atomikosProperties11.getConsoleLogLevel();
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel17;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setAllowSubTransactions(true);
        boolean boolean22 = atomikosProperties19.enableLogging;
        boolean boolean23 = atomikosProperties19.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel24 = atomikosProperties19.consoleLogLevel;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel24;
        atomikosProperties0.setConsoleFileName("{1.0=-1, -1.0=100}");
        java.lang.String str28 = atomikosProperties0.logBaseDir;
        java.util.Properties properties29 = new java.util.Properties();
        java.lang.String str30 = properties29.toString();
        java.lang.Object obj32 = properties29.remove((java.lang.Object) (short) 100);
        java.lang.Object obj35 = properties29.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj36 = properties29.clone();
        java.util.Set<java.lang.String> strSet37 = properties29.stringPropertyNames();
        java.util.Properties properties38 = new java.util.Properties(properties29);
        java.lang.String str40 = properties38.getProperty("hi!");
        java.lang.String str42 = properties38.getProperty("{1.0=-1}");
        java.util.Properties properties43 = new java.util.Properties(properties38);
        properties43.clear();
        int int45 = properties43.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean47 = atomikosProperties46.isSerialJtaTransactions();
        atomikosProperties46.logBaseName = "{-1.0=100}";
        int int50 = atomikosProperties46.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery51 = atomikosProperties46.getRecovery();
        atomikosProperties46.setConsoleFileCount((int) (byte) 100);
        atomikosProperties46.setAllowSubTransactions(true);
        atomikosProperties46.setService("tm.out");
        int int58 = atomikosProperties46.consoleFileLimit;
        atomikosProperties46.setDefaultJtaTimeout((long) 'a');
        boolean boolean61 = atomikosProperties46.enableLogging;
        java.lang.String str62 = atomikosProperties46.consoleFileName;
        java.lang.String str63 = atomikosProperties46.transactionManagerUniqueName;
        boolean boolean64 = atomikosProperties46.isSerialJtaTransactions();
        atomikosProperties46.serialJtaTransactions = true;
        java.lang.String str67 = atomikosProperties46.consoleFileName;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel68 = atomikosProperties46.consoleLogLevel;
        java.lang.Object obj69 = properties43.remove((java.lang.Object) atomikosLoggingLevel68);
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel68);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel17 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel17.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel24 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel24.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{}" + "'", str30, "{}");
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 50 + "'", int50 == 50);
        org.junit.Assert.assertNotNull(recovery51);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tm.out" + "'", str62, "tm.out");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "tm.out" + "'", str67, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel68 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel68.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj69);
    }

    @Test
    public void test10544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10544");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties0.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.elements();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration7 = properties6.propertyNames();
        java.lang.Object obj8 = properties0.remove((java.lang.Object) wildcardEnumeration7);
        java.util.Properties properties9 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        atomikosProperties10.service = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery14 = atomikosProperties10.recovery;
        atomikosProperties10.enableLogging = true;
        int int17 = atomikosProperties10.getConsoleFileCount();
        boolean boolean18 = properties9.containsKey((java.lang.Object) int17);
        java.lang.String str19 = properties9.toString();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(wildcardEnumeration7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(recovery14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{}" + "'", str19, "{}");
    }

    @Test
    public void test10545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10545");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        int int6 = atomikosProperties0.consoleFileCount;
        atomikosProperties0.setConsoleFileName("{{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}=, ={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test10546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10546");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties();
        java.lang.String str2 = properties1.toString();
        java.lang.Object obj4 = properties1.remove((java.lang.Object) (short) 100);
        java.lang.Object obj7 = properties1.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int8 = properties1.size();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.Object obj11 = properties9.remove((java.lang.Object) (-1.0d));
        boolean boolean12 = properties9.isEmpty();
        java.lang.Object obj15 = properties9.setProperty("hi!", "{}");
        boolean boolean16 = properties0.remove((java.lang.Object) int8, (java.lang.Object) properties9);
        java.util.Properties properties17 = new java.util.Properties();
        java.lang.String str18 = properties17.toString();
        java.lang.Object obj20 = properties17.remove((java.lang.Object) (short) 100);
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        boolean boolean23 = properties21.isEmpty();
        java.lang.Object obj26 = properties21.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties21.elements();
        boolean boolean28 = properties17.containsKey((java.lang.Object) properties21);
        boolean boolean29 = properties9.contains((java.lang.Object) boolean28);
        java.util.Set<java.lang.String> strSet30 = properties9.stringPropertyNames();
        int int31 = properties9.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties33 = atomikosProperties32.asProperties();
        atomikosProperties32.service = "{-1.0=100}";
        long long36 = atomikosProperties32.getDefaultJtaTimeout();
        atomikosProperties32.serialJtaTransactions = true;
        atomikosProperties32.maxActives = ' ';
        int int41 = atomikosProperties32.getConsoleFileCount();
        int int42 = atomikosProperties32.consoleFileLimit;
        java.util.Properties properties43 = atomikosProperties32.asProperties();
        java.lang.Object obj44 = properties9.get((java.lang.Object) atomikosProperties32);
        atomikosProperties32.setDefaultJtaTimeout((long) (byte) 1);
        atomikosProperties32.setAllowSubTransactions(true);
        int int49 = atomikosProperties32.getMaxActives();
        boolean boolean50 = atomikosProperties32.isAllowSubTransactions();
        atomikosProperties32.forceShutdownOnVmExit = false;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{}" + "'", str18, "{}");
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10000L + "'", long36 == 10000L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 32 + "'", int49 == 32);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test10547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10547");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        boolean boolean10 = atomikosProperties2.forceShutdownOnVmExit;
        atomikosProperties2.setOutputDir("");
        long long13 = atomikosProperties2.defaultJtaTimeout;
        java.lang.String str14 = atomikosProperties2.getLogBaseName();
        atomikosProperties2.serialJtaTransactions = true;
        atomikosProperties2.service = "{{}={}}";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel19 = atomikosProperties2.getConsoleLogLevel();
        java.util.Properties properties20 = new java.util.Properties();
        java.lang.String str21 = properties20.toString();
        boolean boolean23 = properties20.containsValue((java.lang.Object) (-1L));
        java.lang.Object obj25 = properties20.get((java.lang.Object) 97L);
        properties20.clear();
        java.lang.String str28 = properties20.getProperty("{1.0=-1}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties30.setAllowSubTransactions(true);
        boolean boolean33 = atomikosProperties30.isSerialJtaTransactions();
        atomikosProperties30.setLogBaseDir("hi!");
        atomikosProperties30.setSerialJtaTransactions(false);
        atomikosProperties2.set(properties20, "{-1.0=100}", (java.lang.Object) atomikosProperties30);
        java.lang.String str39 = properties20.toString();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tmlog" + "'", str14, "tmlog");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel19 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel19.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{}" + "'", str21, "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test10548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10548");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.lang.Object obj5 = properties0.setProperty("", "{={-1.0=100}, -1.0=100}");
        java.lang.String str6 = properties0.toString();
        java.util.Properties properties7 = new java.util.Properties();
        java.lang.String str8 = properties7.toString();
        java.lang.Object obj10 = properties7.remove((java.lang.Object) (short) 100);
        java.lang.Object obj13 = properties7.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj14 = properties7.clone();
        java.lang.String str16 = properties7.getProperty("{}");
        java.lang.Object obj19 = properties7.put((java.lang.Object) 86400000L, (java.lang.Object) "{-1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties21 = atomikosProperties20.asProperties();
        atomikosProperties20.service = "{-1.0=100}";
        java.lang.String str24 = atomikosProperties20.getTransactionManagerUniqueName();
        boolean boolean25 = atomikosProperties20.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel26 = atomikosProperties20.getConsoleLogLevel();
        java.lang.Object obj27 = properties7.remove((java.lang.Object) atomikosProperties20);
        int int28 = atomikosProperties20.getConsoleFileCount();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel29 = atomikosProperties20.consoleLogLevel;
        boolean boolean30 = properties0.containsValue((java.lang.Object) atomikosLoggingLevel29);
        java.util.Set<java.lang.Object> objSet31 = properties0.keySet();
        java.util.Properties properties32 = new java.util.Properties();
        java.lang.String str33 = properties32.toString();
        boolean boolean34 = properties32.isEmpty();
        java.util.Properties properties35 = new java.util.Properties();
        java.lang.String str36 = properties35.toString();
        java.lang.Object obj38 = properties35.remove((java.lang.Object) (short) 100);
        java.lang.Object obj41 = properties35.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean43 = properties35.containsKey((java.lang.Object) 0L);
        boolean boolean44 = properties32.containsValue((java.lang.Object) 0L);
        java.util.Set<java.lang.String> strSet45 = properties32.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties47 = atomikosProperties46.asProperties();
        atomikosProperties46.service = "{-1.0=100}";
        long long50 = atomikosProperties46.getDefaultJtaTimeout();
        atomikosProperties46.setThreadedTwoPhaseCommit(true);
        boolean boolean53 = atomikosProperties46.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery54 = atomikosProperties46.recovery;
        java.util.Properties properties55 = new java.util.Properties();
        java.lang.String str56 = properties55.toString();
        boolean boolean57 = properties55.isEmpty();
        java.lang.Object obj60 = properties55.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        boolean boolean61 = properties32.remove((java.lang.Object) atomikosProperties46, (java.lang.Object) (short) 100);
        java.lang.String str62 = atomikosProperties46.logBaseName;
        long long63 = atomikosProperties46.getMaxTimeout();
        java.lang.String str64 = atomikosProperties46.consoleFileName;
        java.lang.String str65 = atomikosProperties46.getConsoleFileName();
        java.lang.String str66 = atomikosProperties46.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties67 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean68 = atomikosProperties67.isSerialJtaTransactions();
        atomikosProperties67.logBaseName = "{-1.0=100}";
        int int71 = atomikosProperties67.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery72 = atomikosProperties67.getRecovery();
        atomikosProperties67.setConsoleFileCount((int) (byte) 100);
        atomikosProperties67.setAllowSubTransactions(true);
        atomikosProperties67.setService("tm.out");
        boolean boolean79 = atomikosProperties67.isForceShutdownOnVmExit();
        boolean boolean80 = atomikosProperties67.isAllowSubTransactions();
        atomikosProperties67.setLogBaseName("");
        java.lang.String str83 = atomikosProperties67.getTransactionManagerUniqueName();
        boolean boolean84 = properties0.remove((java.lang.Object) atomikosProperties46, (java.lang.Object) atomikosProperties67);
        boolean boolean85 = atomikosProperties67.enableLogging;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "{={={-1.0=100}, -1.0=100}}" + "'", str6, "{={={-1.0=100}, -1.0=100}}");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "{1.0=-1}");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel26 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel26.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel29 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel29.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objSet31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "{}" + "'", str33, "{}");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "{}" + "'", str36, "{}");
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNotNull(properties47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10000L + "'", long50 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(recovery54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "{}" + "'", str56, "{}");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tmlog" + "'", str62, "tmlog");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 300000L + "'", long63 == 300000L);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "tm.out" + "'", str64, "tm.out");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "tm.out" + "'", str65, "tm.out");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "{-1.0=100}" + "'", str66, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 50 + "'", int71 == 50);
        org.junit.Assert.assertNotNull(recovery72);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test10549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10549");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        long long8 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = atomikosProperties0.getRecovery();
        long long10 = recovery9.delay;
        int int11 = recovery9.maxRetries;
        recovery9.setMaxRetries((int) '#');
        long long14 = recovery9.forgetOrphanedLogEntriesDelay;
        long long15 = recovery9.getRetryInterval();
        int int16 = recovery9.maxRetries;
        recovery9.setRetryInterval((long) (short) 0);
        long long19 = recovery9.forgetOrphanedLogEntriesDelay;
        int int20 = recovery9.getMaxRetries();
        recovery9.setForgetOrphanedLogEntriesDelay((long) 100);
        long long23 = recovery9.getDelay();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(recovery9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 86400000L + "'", long14 == 86400000L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 86400000L + "'", long19 == 86400000L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 10000L + "'", long23 == 10000L);
    }

    @Test
    public void test10550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10550");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery4 = atomikosProperties0.recovery;
        atomikosProperties0.enableLogging = true;
        java.lang.String str7 = atomikosProperties0.logBaseName;
        atomikosProperties0.setConsoleFileCount(19);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(recovery4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
    }

    @Test
    public void test10551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10551");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = (byte) 10;
        java.lang.String str7 = atomikosProperties0.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.recovery;
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        java.io.Writer writer10 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties9.store(writer10, "{hi!={}}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertNotNull(properties9);
    }

    @Test
    public void test10552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10552");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        int int6 = atomikosProperties0.consoleFileCount;
        long long7 = atomikosProperties0.getCheckpointInterval();
        java.lang.String str8 = atomikosProperties0.outputDir;
        atomikosProperties0.setEnableLogging(false);
        boolean boolean11 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.serialJtaTransactions = true;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test10553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10553");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setTransactionManagerUniqueName("{}");
        atomikosProperties0.consoleFileName = "hi!";
        int int9 = atomikosProperties0.getConsoleFileCount();
        boolean boolean10 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.maxTimeout = 0;
        atomikosProperties0.setLogBaseName("hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties15.setAllowSubTransactions(true);
        boolean boolean18 = atomikosProperties15.enableLogging;
        boolean boolean19 = atomikosProperties15.isForceShutdownOnVmExit();
        java.lang.String str20 = atomikosProperties15.getService();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.setAllowSubTransactions(true);
        boolean boolean24 = atomikosProperties21.enableLogging;
        boolean boolean25 = atomikosProperties21.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel26 = atomikosProperties21.consoleLogLevel;
        atomikosProperties15.consoleLogLevel = atomikosLoggingLevel26;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel26);
        atomikosProperties0.checkpointInterval = 50;
        int int31 = atomikosProperties0.maxActives;
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        java.lang.String str34 = atomikosProperties0.logBaseName;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel26 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel26.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 50 + "'", int31 == 50);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
    }

    @Test
    public void test10554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10554");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.delay = (-1L);
        long long5 = recovery0.delay;
        recovery0.delay = (short) 1;
        long long8 = recovery0.getRetryInterval();
        long long9 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.setMaxRetries(10);
        int int12 = recovery0.maxRetries;
        recovery0.setForgetOrphanedLogEntriesDelay((long) 32);
        recovery0.retryInterval = (-1L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86400000L + "'", long9 == 86400000L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
    }

    @Test
    public void test10555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10555");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        java.lang.String str10 = atomikosProperties0.logBaseDir;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties12 = atomikosProperties11.asProperties();
        atomikosProperties11.service = "{-1.0=100}";
        long long15 = atomikosProperties11.getDefaultJtaTimeout();
        boolean boolean16 = atomikosProperties11.enableLogging;
        boolean boolean17 = atomikosProperties11.isForceShutdownOnVmExit();
        atomikosProperties11.consoleFileLimit = (byte) -1;
        java.lang.String str20 = atomikosProperties11.getService();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel21 = atomikosProperties11.consoleLogLevel;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties23 = atomikosProperties22.asProperties();
        atomikosProperties22.service = "{-1.0=100}";
        long long26 = atomikosProperties22.getDefaultJtaTimeout();
        atomikosProperties22.serialJtaTransactions = true;
        long long29 = atomikosProperties22.maxTimeout;
        atomikosProperties22.setLogBaseDir("{-1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties32.setAllowSubTransactions(true);
        atomikosProperties32.maxActives = (short) -1;
        atomikosProperties32.setService("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties39.setAllowSubTransactions(true);
        boolean boolean42 = atomikosProperties39.enableLogging;
        boolean boolean43 = atomikosProperties39.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel44 = atomikosProperties39.consoleLogLevel;
        atomikosProperties32.setConsoleLogLevel(atomikosLoggingLevel44);
        atomikosProperties22.consoleLogLevel = atomikosLoggingLevel44;
        atomikosProperties11.consoleLogLevel = atomikosLoggingLevel44;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel44);
        boolean boolean49 = atomikosProperties0.allowSubTransactions;
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.{}=5}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{-1.0=100}" + "'", str20, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel21 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel21.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10000L + "'", long26 == 10000L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 300000L + "'", long29 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel44 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel44.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test10556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10556");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        boolean boolean6 = properties4.isEmpty();
        java.lang.Object obj9 = properties4.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties4.elements();
        boolean boolean11 = properties0.containsKey((java.lang.Object) properties4);
        java.util.Set<java.lang.String> strSet12 = properties0.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean14 = atomikosProperties13.isSerialJtaTransactions();
        atomikosProperties13.logBaseName = "{-1.0=100}";
        int int17 = atomikosProperties13.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = atomikosProperties13.getRecovery();
        atomikosProperties13.outputDir = "tm.out";
        java.lang.Object obj21 = properties0.get((java.lang.Object) atomikosProperties13);
        atomikosProperties13.setOutputDir("{{}={}}");
        boolean boolean24 = atomikosProperties13.forceShutdownOnVmExit;
        java.lang.String str25 = atomikosProperties13.outputDir;
        atomikosProperties13.setThreadedTwoPhaseCommit(false);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
        org.junit.Assert.assertNotNull(recovery18);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{{}={}}" + "'", str25, "{{}={}}");
    }

    @Test
    public void test10557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10557");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties8 = atomikosProperties7.asProperties();
        java.lang.Object obj9 = properties0.remove((java.lang.Object) properties8);
        java.util.Properties properties10 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties12 = atomikosProperties11.asProperties();
        atomikosProperties11.service = "{-1.0=100}";
        long long15 = atomikosProperties11.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel16 = null;
        atomikosProperties11.setConsoleLogLevel(atomikosLoggingLevel16);
        int int18 = atomikosProperties11.maxActives;
        atomikosProperties11.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery21 = atomikosProperties11.getRecovery();
        atomikosProperties11.outputDir = "hi!";
        atomikosProperties11.setDefaultJtaTimeout((long) 10);
        java.lang.String str26 = atomikosProperties11.getTransactionManagerUniqueName();
        java.lang.String str27 = atomikosProperties11.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties29 = atomikosProperties28.asProperties();
        atomikosProperties28.service = "{-1.0=100}";
        long long32 = atomikosProperties28.getDefaultJtaTimeout();
        long long33 = atomikosProperties28.getMaxTimeout();
        int int34 = atomikosProperties28.consoleFileCount;
        long long35 = atomikosProperties28.getCheckpointInterval();
        java.lang.String str36 = atomikosProperties28.outputDir;
        long long37 = atomikosProperties28.getCheckpointInterval();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel38 = atomikosProperties28.getConsoleLogLevel();
        atomikosProperties11.setConsoleLogLevel(atomikosLoggingLevel38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties41 = atomikosProperties40.asProperties();
        atomikosProperties40.service = "{-1.0=100}";
        long long44 = atomikosProperties40.getDefaultJtaTimeout();
        atomikosProperties40.setTransactionManagerUniqueName("{}");
        atomikosProperties40.enableLogging = true;
        java.lang.String str49 = atomikosProperties40.getService();
        atomikosProperties40.setTransactionManagerUniqueName("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        atomikosProperties40.setTransactionManagerUniqueName("{}");
        atomikosProperties40.setEnableLogging(true);
        java.lang.Object obj56 = properties8.putIfAbsent((java.lang.Object) atomikosLoggingLevel38, (java.lang.Object) true);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 50 + "'", int18 == 50);
        org.junit.Assert.assertNotNull(recovery21);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10000L + "'", long32 == 10000L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 300000L + "'", long33 == 300000L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 500L + "'", long35 == 500L);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 500L + "'", long37 == 500L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel38 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel38.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10000L + "'", long44 == 10000L);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "{-1.0=100}" + "'", str49, "{-1.0=100}");
        org.junit.Assert.assertNull(obj56);
    }

    @Test
    public void test10558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10558");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties0.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.elements();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration7 = properties6.propertyNames();
        java.lang.Object obj8 = properties0.remove((java.lang.Object) wildcardEnumeration7);
        java.util.Properties properties9 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        atomikosProperties10.service = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery14 = atomikosProperties10.recovery;
        atomikosProperties10.enableLogging = true;
        int int17 = atomikosProperties10.getConsoleFileCount();
        boolean boolean18 = properties9.containsKey((java.lang.Object) int17);
        java.util.Set<java.lang.String> strSet19 = properties9.stringPropertyNames();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(wildcardEnumeration7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(recovery14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSet19);
    }

    @Test
    public void test10559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10559");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.recovery;
        boolean boolean9 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.service = "{-1.0=100}";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setEnableLogging(false);
        long long16 = atomikosProperties0.defaultJtaTimeout;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10000L + "'", long16 == 10000L);
    }

    @Test
    public void test10560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10560");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        int int6 = atomikosProperties0.consoleFileCount;
        long long7 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.serialJtaTransactions = true;
        java.lang.String str10 = atomikosProperties0.logBaseName;
        long long11 = atomikosProperties0.checkpointInterval;
        boolean boolean12 = atomikosProperties0.enableLogging;
        atomikosProperties0.setLogBaseName("{{}={}}");
        int int15 = atomikosProperties0.consoleFileLimit;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test10561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10561");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxTimeout((long) (byte) 0);
        atomikosProperties0.setService("tm.out");
        atomikosProperties0.setMaxActives((-1));
        atomikosProperties0.outputDir = "tmlog";
        atomikosProperties0.enableLogging = true;
        boolean boolean17 = atomikosProperties0.allowSubTransactions;
        java.util.Properties properties18 = atomikosProperties0.asProperties();
        atomikosProperties0.logBaseDir = "{}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(properties18);
    }

    @Test
    public void test10562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10562");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        long long7 = atomikosProperties0.getCheckpointInterval();
        boolean boolean8 = atomikosProperties0.isThreadedTwoPhaseCommit();
        java.lang.String str9 = atomikosProperties0.service;
        int int10 = atomikosProperties0.consoleFileCount;
        atomikosProperties0.logBaseName = "tm.out";
        java.lang.String str13 = atomikosProperties0.getService();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = atomikosProperties0.consoleLogLevel;
        boolean boolean15 = atomikosProperties0.enableLogging;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{-1.0=100}" + "'", str9, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{-1.0=100}" + "'", str13, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel14 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel14.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test10563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10563");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.consoleFileLimit = '#';
        int int7 = atomikosProperties0.getConsoleFileCount();
        int int8 = atomikosProperties0.maxActives;
        atomikosProperties0.setEnableLogging(true);
        boolean boolean11 = atomikosProperties0.isEnableLogging();
        boolean boolean12 = atomikosProperties0.serialJtaTransactions;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test10564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10564");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.defaultJtaTimeout = (byte) 10;
        int int10 = atomikosProperties0.getMaxActives();
        int int11 = atomikosProperties0.consoleFileCount;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel12 = atomikosProperties0.getConsoleLogLevel();
        int int13 = atomikosProperties0.getMaxActives();
        java.lang.String str14 = atomikosProperties0.getService();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel12 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel12.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{-1.0=100}" + "'", str14, "{-1.0=100}");
    }

    @Test
    public void test10565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10565");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties12 = new java.util.Properties(properties0);
        int int13 = properties0.size();
        java.lang.String str14 = properties0.toString();
        properties0.clear();
        properties0.clear();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{-1.0=100}" + "'", str14, "{-1.0=100}");
    }

    @Test
    public void test10566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10566");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        int int10 = atomikosProperties0.getMaxActives();
        boolean boolean11 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.setOutputDir("");
        long long14 = atomikosProperties0.getMaxTimeout();
        boolean boolean15 = atomikosProperties0.threadedTwoPhaseCommit;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 300000L + "'", long14 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test10567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10567");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.threadedTwoPhaseCommit = true;
        atomikosProperties0.setSerialJtaTransactions(true);
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties0.logBaseDir = "{1.0=-1, -1.0=100}";
        java.lang.String str14 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setTransactionManagerUniqueName("{}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{1.0=-1, -1.0=100}" + "'", str14, "{1.0=-1, -1.0=100}");
    }

    @Test
    public void test10568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10568");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean5 = atomikosProperties4.isSerialJtaTransactions();
        atomikosProperties4.logBaseName = "{-1.0=100}";
        int int8 = atomikosProperties4.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = atomikosProperties4.getRecovery();
        atomikosProperties4.setConsoleFileCount((int) (byte) 100);
        java.lang.String str12 = atomikosProperties4.logBaseName;
        atomikosProperties4.setCheckpointInterval((long) 18);
        long long15 = atomikosProperties4.defaultJtaTimeout;
        java.util.Properties properties16 = atomikosProperties4.asProperties();
        boolean boolean17 = properties0.contains((java.lang.Object) atomikosProperties4);
        atomikosProperties4.setCheckpointInterval((long) 100);
        long long20 = atomikosProperties4.getDefaultJtaTimeout();
        atomikosProperties4.setSerialJtaTransactions(false);
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertNotNull(recovery9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{-1.0=100}" + "'", str12, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10000L + "'", long20 == 10000L);
    }

    @Test
    public void test10569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10569");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setLogBaseDir("{-1.0=100}");
        int int10 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties14 = atomikosProperties13.asProperties();
        atomikosProperties13.service = "{-1.0=100}";
        long long17 = atomikosProperties13.getDefaultJtaTimeout();
        atomikosProperties13.setTransactionManagerUniqueName("{}");
        atomikosProperties13.consoleFileName = "hi!";
        int int22 = atomikosProperties13.getConsoleFileCount();
        boolean boolean23 = atomikosProperties13.isThreadedTwoPhaseCommit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel24 = atomikosProperties13.consoleLogLevel;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel24;
        java.lang.String str26 = atomikosProperties0.consoleFileName;
        atomikosProperties0.setLogBaseDir("{1.0=-1, -1.0=100}");
        atomikosProperties0.logBaseName = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10000L + "'", long17 == 10000L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel24 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel24.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "tm.out" + "'", str26, "tm.out");
    }

    @Test
    public void test10570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10570");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties7 = new java.util.Properties();
        java.lang.String str8 = properties7.toString();
        java.lang.Object obj10 = properties7.remove((java.lang.Object) (short) 100);
        java.lang.Object obj13 = properties7.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj14 = properties7.clone();
        java.lang.String str16 = properties7.getProperty("{}");
        java.lang.Object obj19 = properties7.put((java.lang.Object) 86400000L, (java.lang.Object) "{-1.0=100}");
        boolean boolean20 = properties0.containsKey((java.lang.Object) properties7);
        properties0.clear();
        java.io.PrintStream printStream22 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.list(printStream22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "{1.0=-1}");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test10571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10571");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        int int11 = atomikosProperties0.getConsoleFileCount();
        long long12 = atomikosProperties0.maxTimeout;
        atomikosProperties0.logBaseName = "{1.0=-1, -1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery15 = atomikosProperties0.recovery;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel16 = atomikosProperties0.consoleLogLevel;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 300000L + "'", long12 == 300000L);
        org.junit.Assert.assertNotNull(recovery15);
        org.junit.Assert.assertNull(atomikosLoggingLevel16);
    }

    @Test
    public void test10572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10572");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        atomikosProperties0.setTransactionManagerUniqueName("{-1.0=100}");
        boolean boolean9 = atomikosProperties0.enableLogging;
        java.lang.String str10 = atomikosProperties0.logBaseDir;
        long long11 = atomikosProperties0.maxTimeout;
        java.lang.String str12 = atomikosProperties0.outputDir;
        java.util.Properties properties13 = atomikosProperties0.asProperties();
        atomikosProperties0.setService("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=10, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={1.0=-1}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(properties13);
    }

    @Test
    public void test10573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10573");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = (byte) 10;
        long long7 = atomikosProperties0.maxTimeout;
        boolean boolean8 = atomikosProperties0.isAllowSubTransactions();
        atomikosProperties0.setConsoleFileCount((int) (short) 100);
        boolean boolean11 = atomikosProperties0.enableLogging;
        long long12 = atomikosProperties0.maxTimeout;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 300000L + "'", long12 == 300000L);
    }

    @Test
    public void test10574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10574");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties0.setMaxActives(100);
        boolean boolean9 = atomikosProperties0.enableLogging;
        atomikosProperties0.forceShutdownOnVmExit = true;
        atomikosProperties0.setLogBaseDir("{{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}=hi!}");
        atomikosProperties0.allowSubTransactions = true;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test10575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10575");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.delay = (-1L);
        long long5 = recovery0.delay;
        recovery0.delay = (short) 1;
        long long8 = recovery0.getRetryInterval();
        int int9 = recovery0.maxRetries;
        long long10 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.setRetryInterval((long) 10);
        recovery0.delay = '4';
        long long15 = recovery0.retryInterval;
        int int16 = recovery0.getMaxRetries();
        long long17 = recovery0.getDelay();
        long long18 = recovery0.getDelay();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 86400000L + "'", long10 == 86400000L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 52L + "'", long18 == 52L);
    }

    @Test
    public void test10576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10576");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.enableLogging = true;
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.consoleFileCount = (byte) 100;
        atomikosProperties0.serialJtaTransactions = false;
        atomikosProperties0.maxActives = 0;
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test10577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10577");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        long long8 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.Object obj11 = properties9.remove((java.lang.Object) (-1.0d));
        boolean boolean12 = properties9.isEmpty();
        java.lang.Object obj15 = properties9.setProperty("hi!", "{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties18 = atomikosProperties17.asProperties();
        atomikosProperties17.service = "{-1.0=100}";
        long long21 = atomikosProperties17.getDefaultJtaTimeout();
        atomikosProperties17.serialJtaTransactions = true;
        atomikosProperties17.maxActives = ' ';
        atomikosProperties0.set(properties9, "", (java.lang.Object) ' ');
        long long27 = atomikosProperties0.maxTimeout;
        atomikosProperties0.defaultJtaTimeout = 500L;
        boolean boolean30 = atomikosProperties0.enableLogging;
        java.lang.String str31 = atomikosProperties0.logBaseName;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 300000L + "'", long27 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
    }

    @Test
    public void test10578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10578");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties();
        java.lang.String str2 = properties1.toString();
        boolean boolean3 = properties1.isEmpty();
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean12 = properties4.containsKey((java.lang.Object) 0L);
        boolean boolean13 = properties1.containsValue((java.lang.Object) 0L);
        boolean boolean16 = properties0.replace((java.lang.Object) 0L, (java.lang.Object) 0.0f, (java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties0.elements();
        java.util.Set<java.lang.String> strSet18 = properties0.stringPropertyNames();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        java.lang.Object obj22 = properties19.remove((java.lang.Object) (short) 100);
        java.lang.Object obj25 = properties19.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.util.Properties properties26 = new java.util.Properties();
        java.lang.String str27 = properties26.toString();
        java.lang.Object obj29 = properties26.remove((java.lang.Object) (short) 100);
        java.lang.Object obj32 = properties26.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int33 = properties26.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery34 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery34.retryInterval = (short) 100;
        recovery34.forgetOrphanedLogEntriesDelay = 'a';
        long long39 = recovery34.retryInterval;
        recovery34.setForgetOrphanedLogEntriesDelay((long) 0);
        java.lang.Object obj42 = properties19.replace((java.lang.Object) int33, (java.lang.Object) recovery34);
        boolean boolean43 = properties0.containsValue((java.lang.Object) properties19);
        java.util.Properties properties44 = new java.util.Properties();
        java.lang.String str45 = properties44.toString();
        java.lang.Object obj47 = properties44.remove((java.lang.Object) (short) 100);
        java.lang.Object obj50 = properties44.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties51.setEnableLogging(true);
        atomikosProperties51.consoleFileCount = 0;
        atomikosProperties51.setSerialJtaTransactions(false);
        java.lang.String str58 = atomikosProperties51.getOutputDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties60 = atomikosProperties59.asProperties();
        atomikosProperties59.service = "{-1.0=100}";
        long long63 = atomikosProperties59.getDefaultJtaTimeout();
        atomikosProperties59.serialJtaTransactions = true;
        long long66 = atomikosProperties59.getDefaultJtaTimeout();
        long long67 = atomikosProperties59.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery68 = atomikosProperties59.getRecovery();
        recovery68.setRetryInterval((long) (byte) 0);
        java.lang.Object obj71 = properties44.replace((java.lang.Object) atomikosProperties51, (java.lang.Object) (byte) 0);
        int int72 = properties44.size();
        boolean boolean73 = properties19.equals((java.lang.Object) properties44);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties74 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties75 = atomikosProperties74.asProperties();
        java.util.Properties properties76 = new java.util.Properties();
        java.lang.Object obj78 = properties76.remove((java.lang.Object) (-1.0d));
        boolean boolean79 = properties76.isEmpty();
        int int80 = properties76.size();
        java.lang.String str82 = properties76.getProperty("{}");
        java.lang.Object obj83 = properties75.remove((java.lang.Object) properties76);
        java.util.Properties properties84 = new java.util.Properties();
        java.lang.String str85 = properties84.toString();
        java.util.Properties properties86 = new java.util.Properties(properties84);
        properties75.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties84);
        java.lang.Object obj90 = properties84.setProperty("tmlog", "tmlog");
        properties19.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties84);
        boolean boolean92 = properties19.isEmpty();
        java.util.Set<java.lang.Object> objSet93 = properties19.keySet();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{}" + "'", str27, "{}");
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 100L + "'", long39 == 100L);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "{}" + "'", str45, "{}");
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(properties60);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 10000L + "'", long63 == 10000L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 10000L + "'", long66 == 10000L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 500L + "'", long67 == 500L);
        org.junit.Assert.assertNotNull(recovery68);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(properties75);
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(obj83);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "{}" + "'", str85, "{}");
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(objSet93);
    }

    @Test
    public void test10579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10579");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isThreadedTwoPhaseCommit();
        long long2 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setCheckpointInterval((long) 5);
        atomikosProperties0.setEnableLogging(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 500L + "'", long2 == 500L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test10580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10580");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean3 = atomikosProperties0.enableLogging;
        atomikosProperties0.consoleFileLimit = (byte) 100;
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.util.Properties properties8 = new java.util.Properties(properties6);
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.lang.Object obj13 = properties10.remove((java.lang.Object) (short) 100);
        java.lang.Object obj16 = properties10.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean18 = properties10.containsKey((java.lang.Object) 0L);
        java.lang.Object obj21 = properties10.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties22 = new java.util.Properties(properties10);
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties22.elements();
        atomikosProperties0.set(properties8, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties22);
        atomikosProperties0.setOutputDir("hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery27 = atomikosProperties0.getRecovery();
        atomikosProperties0.setOutputDir("{={-1.0=100}, -1.0=100}");
        boolean boolean30 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setOutputDir("hi!");
        atomikosProperties0.serialJtaTransactions = false;
        java.lang.String str35 = atomikosProperties0.getLogBaseDir();
        int int36 = atomikosProperties0.maxActives;
        atomikosProperties0.setOutputDir("");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertNotNull(recovery27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 50 + "'", int36 == 50);
    }

    @Test
    public void test10581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10581");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        java.lang.Object obj15 = properties0.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery16 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery16.retryInterval = (short) 100;
        recovery16.forgetOrphanedLogEntriesDelay = 'a';
        boolean boolean21 = properties0.equals((java.lang.Object) 'a');
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery22 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long23 = recovery22.getRetryInterval();
        long long24 = recovery22.getDelay();
        long long25 = recovery22.getDelay();
        recovery22.retryInterval = 100L;
        boolean boolean28 = properties0.contains((java.lang.Object) recovery22);
        boolean boolean29 = properties0.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery30 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery30.retryInterval = (short) 100;
        recovery30.delay = (-1L);
        long long35 = recovery30.delay;
        recovery30.delay = (short) 1;
        long long38 = recovery30.getRetryInterval();
        long long39 = recovery30.getForgetOrphanedLogEntriesDelay();
        recovery30.setMaxRetries(10);
        int int42 = recovery30.maxRetries;
        long long43 = recovery30.getDelay();
        long long44 = recovery30.getDelay();
        recovery30.setForgetOrphanedLogEntriesDelay((long) (byte) 100);
        boolean boolean47 = properties0.contains((java.lang.Object) recovery30);
        java.io.Reader reader48 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.load(reader48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 10000L + "'", long23 == 10000L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10000L + "'", long24 == 10000L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10000L + "'", long25 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 100L + "'", long38 == 100L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 86400000L + "'", long39 == 86400000L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test10582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10582");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.delay = (-1L);
        long long5 = recovery0.delay;
        recovery0.delay = (short) 1;
        long long8 = recovery0.getRetryInterval();
        long long9 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.setMaxRetries(10);
        int int12 = recovery0.maxRetries;
        recovery0.setForgetOrphanedLogEntriesDelay((long) 32);
        long long15 = recovery0.delay;
        int int16 = recovery0.getMaxRetries();
        recovery0.maxRetries = 32;
        int int19 = recovery0.maxRetries;
        long long20 = recovery0.forgetOrphanedLogEntriesDelay;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86400000L + "'", long9 == 86400000L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 32L + "'", long20 == 32L);
    }

    @Test
    public void test10583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10583");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        atomikosProperties0.setAllowSubTransactions(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery7 = atomikosProperties0.getRecovery();
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}";
        atomikosProperties0.setMaxTimeout((long) 50);
        atomikosProperties0.consoleFileLimit = 'a';
        int int14 = atomikosProperties0.consoleFileLimit;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery7);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
    }

    @Test
    public void test10584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10584");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getRetryInterval();
        long long2 = recovery0.retryInterval;
        recovery0.forgetOrphanedLogEntriesDelay = (byte) -1;
        recovery0.setMaxRetries(10);
        recovery0.forgetOrphanedLogEntriesDelay = 1L;
        int int9 = recovery0.getMaxRetries();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
    }

    @Test
    public void test10585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10585");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        long long5 = atomikosProperties0.defaultJtaTimeout;
        long long6 = atomikosProperties0.getMaxTimeout();
        boolean boolean7 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setService("{-1.0=100}");
        atomikosProperties0.setOutputDir("{}");
        atomikosProperties0.setConsoleFileLimit((int) (byte) 1);
        atomikosProperties0.threadedTwoPhaseCommit = true;
        atomikosProperties0.forceShutdownOnVmExit = true;
        atomikosProperties0.setMaxActives((int) (byte) -1);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 300000L + "'", long6 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test10586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10586");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        boolean boolean10 = atomikosProperties2.isForceShutdownOnVmExit();
        atomikosProperties2.consoleFileName = "";
        java.lang.String str13 = atomikosProperties2.getService();
        atomikosProperties2.setOutputDir("{com.atomikos.icatch.{}=5}");
        boolean boolean16 = atomikosProperties2.serialJtaTransactions;
        atomikosProperties2.setForceShutdownOnVmExit(true);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{-1.0=100}" + "'", str13, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test10587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10587");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.maxTimeout;
        boolean boolean8 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.setCheckpointInterval(1L);
        atomikosProperties0.consoleFileName = "{1.0=-1, -1.0=100}";
        atomikosProperties0.enableLogging = true;
        int int15 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setTransactionManagerUniqueName("{{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}=, ={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 50 + "'", int15 == 50);
    }

    @Test
    public void test10588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10588");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties8 = atomikosProperties7.asProperties();
        java.lang.Object obj9 = properties0.remove((java.lang.Object) properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        atomikosProperties10.service = "{-1.0=100}";
        long long14 = atomikosProperties10.getDefaultJtaTimeout();
        atomikosProperties10.setThreadedTwoPhaseCommit(true);
        boolean boolean17 = atomikosProperties10.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = atomikosProperties10.recovery;
        atomikosProperties10.setLogBaseDir("");
        long long21 = atomikosProperties10.maxTimeout;
        boolean boolean22 = atomikosProperties10.forceShutdownOnVmExit;
        boolean boolean23 = properties8.containsValue((java.lang.Object) atomikosProperties10);
        int int24 = atomikosProperties10.getMaxActives();
        atomikosProperties10.threadedTwoPhaseCommit = false;
        boolean boolean27 = atomikosProperties10.serialJtaTransactions;
        boolean boolean28 = atomikosProperties10.isSerialJtaTransactions();
        atomikosProperties10.setLogBaseName("{-1.0=100}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(recovery18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 300000L + "'", long21 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 50 + "'", int24 == 50);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test10589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10589");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getRetryInterval();
        long long2 = recovery0.retryInterval;
        recovery0.forgetOrphanedLogEntriesDelay = (byte) -1;
        recovery0.setMaxRetries(10);
        recovery0.setRetryInterval(50L);
        int int9 = recovery0.maxRetries;
        int int10 = recovery0.getMaxRetries();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
    }

    @Test
    public void test10590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10590");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        int int6 = atomikosProperties0.consoleFileCount;
        long long7 = atomikosProperties0.getCheckpointInterval();
        java.lang.String str8 = atomikosProperties0.outputDir;
        atomikosProperties0.setEnableLogging(false);
        long long11 = atomikosProperties0.checkpointInterval;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
    }

    @Test
    public void test10591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10591");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean12 = properties4.containsKey((java.lang.Object) 0L);
        java.lang.Object obj15 = properties4.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties16 = new java.util.Properties();
        java.lang.String str17 = properties16.toString();
        java.lang.Object obj19 = properties16.remove((java.lang.Object) (short) 100);
        java.lang.Object obj22 = properties16.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj23 = properties16.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties16.elements();
        properties4.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties16);
        java.lang.Object obj26 = properties16.clone();
        properties16.clear();
        int int28 = properties16.size();
        java.util.Properties properties29 = new java.util.Properties();
        java.lang.String str30 = properties29.toString();
        java.lang.Object obj32 = properties29.remove((java.lang.Object) (short) 100);
        java.lang.Object obj35 = properties29.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj36 = properties29.clone();
        java.util.Set<java.lang.String> strSet37 = properties29.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery38 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery38.retryInterval = (short) 100;
        recovery38.delay = (-1L);
        long long43 = recovery38.delay;
        recovery38.delay = (short) 1;
        long long46 = recovery38.getRetryInterval();
        int int47 = recovery38.maxRetries;
        int int48 = recovery38.maxRetries;
        long long49 = recovery38.forgetOrphanedLogEntriesDelay;
        java.util.Properties properties50 = new java.util.Properties();
        java.lang.Object obj52 = properties50.remove((java.lang.Object) (-1.0d));
        boolean boolean53 = properties50.isEmpty();
        int int54 = properties50.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery55 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery55.retryInterval = (short) 100;
        recovery55.forgetOrphanedLogEntriesDelay = 'a';
        java.util.Properties properties60 = new java.util.Properties();
        java.lang.Object obj62 = properties60.remove((java.lang.Object) (-1.0d));
        boolean boolean63 = properties60.isEmpty();
        int int64 = properties60.size();
        java.lang.String str66 = properties60.getProperty("{}");
        boolean boolean67 = properties50.remove((java.lang.Object) recovery55, (java.lang.Object) properties60);
        java.lang.Object obj68 = properties29.putIfAbsent((java.lang.Object) long49, (java.lang.Object) properties50);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties69 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties69.setAllowSubTransactions(true);
        atomikosProperties69.maxActives = (short) -1;
        atomikosProperties69.setLogBaseDir("{-1.0=100}");
        boolean boolean76 = properties0.replace((java.lang.Object) properties16, (java.lang.Object) long49, (java.lang.Object) "{-1.0=100}");
        java.lang.String str78 = properties16.getProperty("{-1.0=100}");
        java.util.Properties properties79 = new java.util.Properties(properties16);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties80 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties81 = atomikosProperties80.asProperties();
        atomikosProperties80.service = "{-1.0=100}";
        long long84 = atomikosProperties80.getDefaultJtaTimeout();
        atomikosProperties80.serialJtaTransactions = true;
        long long87 = atomikosProperties80.getDefaultJtaTimeout();
        long long88 = atomikosProperties80.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery89 = atomikosProperties80.getRecovery();
        java.lang.String str90 = atomikosProperties80.outputDir;
        atomikosProperties80.consoleFileCount = 32;
        atomikosProperties80.consoleFileLimit = (short) -1;
        int int95 = atomikosProperties80.maxActives;
        boolean boolean96 = properties16.containsKey((java.lang.Object) atomikosProperties80);
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "{1.0=-1}");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{}" + "'", str30, "{}");
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 100L + "'", long46 == 100L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 86400000L + "'", long49 == 86400000L);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(properties81);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 10000L + "'", long84 == 10000L);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 10000L + "'", long87 == 10000L);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 500L + "'", long88 == 500L);
        org.junit.Assert.assertNotNull(recovery89);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 50 + "'", int95 == 50);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test10592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10592");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.util.Properties properties7 = new java.util.Properties();
        java.lang.String str8 = properties7.toString();
        java.lang.Object obj10 = properties7.remove((java.lang.Object) (short) 100);
        java.lang.Object obj13 = properties7.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int14 = properties7.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery15 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery15.retryInterval = (short) 100;
        recovery15.forgetOrphanedLogEntriesDelay = 'a';
        long long20 = recovery15.retryInterval;
        recovery15.setForgetOrphanedLogEntriesDelay((long) 0);
        java.lang.Object obj23 = properties0.replace((java.lang.Object) int14, (java.lang.Object) recovery15);
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties0.elements();
        java.util.Set<java.lang.Object> objSet25 = properties0.keySet();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 100L + "'", long20 == 100L);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertNotNull(objSet25);
    }

    @Test
    public void test10593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10593");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.forceShutdownOnVmExit = false;
        java.lang.String str13 = atomikosProperties0.service;
        atomikosProperties0.allowSubTransactions = false;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.logBaseName = "";
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{-1.0=100}" + "'", str13, "{-1.0=100}");
    }

    @Test
    public void test10594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10594");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setTransactionManagerUniqueName("{}");
        atomikosProperties0.consoleFileName = "hi!";
        int int9 = atomikosProperties0.getConsoleFileCount();
        boolean boolean10 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.maxTimeout = 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean14 = atomikosProperties13.isSerialJtaTransactions();
        atomikosProperties13.logBaseName = "{-1.0=100}";
        int int17 = atomikosProperties13.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = atomikosProperties13.getRecovery();
        atomikosProperties13.setConsoleFileCount((int) (byte) 100);
        atomikosProperties13.setAllowSubTransactions(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean24 = atomikosProperties23.isThreadedTwoPhaseCommit();
        long long25 = atomikosProperties23.getCheckpointInterval();
        atomikosProperties23.setCheckpointInterval((long) 5);
        java.util.Properties properties28 = new java.util.Properties();
        java.lang.String str29 = properties28.toString();
        java.lang.Object obj31 = properties28.remove((java.lang.Object) (short) 100);
        java.lang.Object obj34 = properties28.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean36 = properties28.containsKey((java.lang.Object) 0L);
        java.lang.String str37 = properties28.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties39 = atomikosProperties38.asProperties();
        atomikosProperties38.service = "{-1.0=100}";
        long long42 = atomikosProperties38.getDefaultJtaTimeout();
        atomikosProperties38.setMaxActives(0);
        atomikosProperties38.maxActives = 'a';
        boolean boolean47 = atomikosProperties38.isThreadedTwoPhaseCommit();
        boolean boolean48 = atomikosProperties38.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel49 = atomikosProperties38.consoleLogLevel;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties51 = atomikosProperties50.asProperties();
        atomikosProperties50.service = "{-1.0=100}";
        long long54 = atomikosProperties50.getDefaultJtaTimeout();
        atomikosProperties50.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties50.setMaxActives(100);
        java.lang.String str59 = atomikosProperties50.logBaseDir;
        java.lang.String str60 = atomikosProperties50.outputDir;
        java.lang.Object obj61 = properties28.replace((java.lang.Object) atomikosLoggingLevel49, (java.lang.Object) atomikosProperties50);
        atomikosProperties23.consoleLogLevel = atomikosLoggingLevel49;
        atomikosProperties13.setConsoleLogLevel(atomikosLoggingLevel49);
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel49;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery65 = atomikosProperties0.recovery;
        atomikosProperties0.setMaxActives(0);
        java.lang.String str68 = atomikosProperties0.getTransactionManagerUniqueName();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
        org.junit.Assert.assertNotNull(recovery18);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{}" + "'", str29, "{}");
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{-1.0=100}" + "'", str37, "{-1.0=100}");
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 10000L + "'", long42 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel49 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel49.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 10000L + "'", long54 == 10000L);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str60, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNotNull(recovery65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "{}" + "'", str68, "{}");
    }

    @Test
    public void test10595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10595");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties7.setEnableLogging(true);
        atomikosProperties7.consoleFileCount = 0;
        atomikosProperties7.setSerialJtaTransactions(false);
        java.lang.String str14 = atomikosProperties7.getOutputDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties16 = atomikosProperties15.asProperties();
        atomikosProperties15.service = "{-1.0=100}";
        long long19 = atomikosProperties15.getDefaultJtaTimeout();
        atomikosProperties15.serialJtaTransactions = true;
        long long22 = atomikosProperties15.getDefaultJtaTimeout();
        long long23 = atomikosProperties15.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery24 = atomikosProperties15.getRecovery();
        recovery24.setRetryInterval((long) (byte) 0);
        java.lang.Object obj27 = properties0.replace((java.lang.Object) atomikosProperties7, (java.lang.Object) (byte) 0);
        java.lang.String str28 = atomikosProperties7.getLogBaseDir();
        long long29 = atomikosProperties7.getCheckpointInterval();
        java.lang.String str30 = atomikosProperties7.getTransactionManagerUniqueName();
        atomikosProperties7.setForceShutdownOnVmExit(false);
        boolean boolean33 = atomikosProperties7.isAllowSubTransactions();
        java.lang.String str34 = atomikosProperties7.getService();
        int int35 = atomikosProperties7.getMaxActives();
        atomikosProperties7.logBaseDir = "{1.0=-1, 10000=0}";
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10000L + "'", long19 == 10000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10000L + "'", long22 == 10000L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
        org.junit.Assert.assertNotNull(recovery24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 500L + "'", long29 == 500L);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 50 + "'", int35 == 50);
    }

    @Test
    public void test10596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10596");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties();
        java.lang.String str2 = properties1.toString();
        java.lang.Object obj4 = properties1.remove((java.lang.Object) (short) 100);
        java.lang.Object obj7 = properties1.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int8 = properties1.size();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.Object obj11 = properties9.remove((java.lang.Object) (-1.0d));
        boolean boolean12 = properties9.isEmpty();
        java.lang.Object obj15 = properties9.setProperty("hi!", "{}");
        boolean boolean16 = properties0.remove((java.lang.Object) int8, (java.lang.Object) properties9);
        java.util.Properties properties17 = new java.util.Properties();
        java.lang.String str18 = properties17.toString();
        java.lang.Object obj20 = properties17.remove((java.lang.Object) (short) 100);
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        boolean boolean23 = properties21.isEmpty();
        java.lang.Object obj26 = properties21.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties21.elements();
        boolean boolean28 = properties17.containsKey((java.lang.Object) properties21);
        boolean boolean29 = properties9.contains((java.lang.Object) boolean28);
        java.util.Set<java.lang.String> strSet30 = properties9.stringPropertyNames();
        java.util.Properties properties31 = new java.util.Properties(properties9);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = properties9.entrySet();
        java.util.Properties properties33 = new java.util.Properties();
        java.lang.Object obj36 = properties33.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration37 = properties33.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration38 = properties33.elements();
        java.util.Properties properties39 = new java.util.Properties(properties33);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties41 = atomikosProperties40.asProperties();
        atomikosProperties40.service = "{-1.0=100}";
        long long44 = atomikosProperties40.getDefaultJtaTimeout();
        atomikosProperties40.setTransactionManagerUniqueName("{}");
        atomikosProperties40.consoleFileName = "hi!";
        int int49 = atomikosProperties40.getConsoleFileLimit();
        boolean boolean50 = atomikosProperties40.isThreadedTwoPhaseCommit();
        boolean boolean51 = atomikosProperties40.allowSubTransactions;
        java.util.Properties properties52 = new java.util.Properties();
        java.util.Properties properties53 = new java.util.Properties(properties52);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties55 = atomikosProperties54.asProperties();
        atomikosProperties54.service = "{-1.0=100}";
        long long58 = atomikosProperties54.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel59 = null;
        atomikosProperties54.setConsoleLogLevel(atomikosLoggingLevel59);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel61 = null;
        atomikosProperties54.setConsoleLogLevel(atomikosLoggingLevel61);
        atomikosProperties54.setLogBaseName("{={-1.0=100}, -1.0=100}");
        boolean boolean65 = atomikosProperties54.enableLogging;
        atomikosProperties54.setOutputDir("");
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel68 = atomikosProperties54.consoleLogLevel;
        atomikosProperties54.checkpointInterval = 0L;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties71.setAllowSubTransactions(true);
        atomikosProperties71.logBaseName = "{={-1.0=100}, -1.0=100}";
        atomikosProperties71.setTransactionManagerUniqueName("");
        java.lang.Object obj78 = properties53.putIfAbsent((java.lang.Object) atomikosProperties54, (java.lang.Object) atomikosProperties71);
        java.lang.Object obj79 = properties39.getOrDefault((java.lang.Object) boolean51, (java.lang.Object) properties53);
        boolean boolean80 = properties9.containsValue((java.lang.Object) properties39);
        java.io.PrintWriter printWriter81 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties9.list(printWriter81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{}" + "'", str18, "{}");
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(objEnumeration37);
        org.junit.Assert.assertNotNull(objEnumeration38);
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10000L + "'", long44 == 10000L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(properties55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 10000L + "'", long58 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNull(atomikosLoggingLevel68);
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertNotNull(obj79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test10597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10597");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.recovery;
        boolean boolean9 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.setOutputDir("tmlog");
        boolean boolean12 = atomikosProperties0.isAllowSubTransactions();
        atomikosProperties0.defaultJtaTimeout = 1L;
        atomikosProperties0.setLogBaseDir("");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery17 = atomikosProperties0.recovery;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(recovery17);
    }

    @Test
    public void test10598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10598");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        java.lang.Object obj14 = properties3.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.String str16 = properties15.toString();
        java.lang.Object obj18 = properties15.remove((java.lang.Object) (short) 100);
        java.lang.Object obj21 = properties15.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj22 = properties15.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties15.elements();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.lang.Object obj25 = properties15.clone();
        properties15.clear();
        int int27 = properties15.size();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.util.Enumeration<?> wildcardEnumeration29 = properties0.propertyNames();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet30 = properties0.entrySet();
        int int31 = properties0.size();
        java.util.Set<java.lang.String> strSet32 = properties0.stringPropertyNames();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{1.0=-1}");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(wildcardEnumeration29);
        org.junit.Assert.assertNotNull(objEntrySet30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(strSet32);
    }

    @Test
    public void test10599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10599");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        atomikosProperties0.consoleFileCount = 100;
        atomikosProperties0.setMaxTimeout((long) (byte) -1);
        java.lang.String str9 = atomikosProperties0.outputDir;
        atomikosProperties0.setOutputDir("{{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}=hi!}");
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test10600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10600");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties0.keys();
        java.util.Enumeration<?> wildcardEnumeration5 = properties0.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties7 = atomikosProperties6.asProperties();
        atomikosProperties6.service = "{-1.0=100}";
        long long10 = atomikosProperties6.getDefaultJtaTimeout();
        long long11 = atomikosProperties6.getMaxTimeout();
        atomikosProperties6.threadedTwoPhaseCommit = true;
        long long14 = atomikosProperties6.checkpointInterval;
        boolean boolean15 = atomikosProperties6.allowSubTransactions;
        boolean boolean16 = properties0.equals((java.lang.Object) boolean15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties18 = atomikosProperties17.asProperties();
        atomikosProperties17.service = "{-1.0=100}";
        java.lang.String str21 = atomikosProperties17.getTransactionManagerUniqueName();
        atomikosProperties17.consoleFileName = "hi!";
        atomikosProperties17.service = "tm.out";
        atomikosProperties17.logBaseName = "tm.out";
        atomikosProperties17.setThreadedTwoPhaseCommit(true);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel30 = atomikosProperties17.consoleLogLevel;
        atomikosProperties17.service = "tm.out";
        boolean boolean33 = atomikosProperties17.enableLogging;
        boolean boolean34 = properties0.contains((java.lang.Object) atomikosProperties17);
        int int35 = properties0.size();
        java.lang.Object obj36 = properties0.clone();
        java.util.Properties properties37 = new java.util.Properties();
        java.lang.String str38 = properties37.toString();
        java.lang.Object obj40 = properties37.remove((java.lang.Object) (short) 100);
        java.util.Set<java.lang.String> strSet41 = properties37.stringPropertyNames();
        boolean boolean42 = properties0.containsValue((java.lang.Object) strSet41);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(wildcardEnumeration5);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel30 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel30.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "{{}={}}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{{}={}}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{{}={}}");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{}" + "'", str38, "{}");
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test10601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10601");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties0.setMaxActives(100);
        boolean boolean9 = atomikosProperties0.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.recovery;
        atomikosProperties0.setConsoleFileLimit(100);
        java.lang.String str13 = atomikosProperties0.getService();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery14 = atomikosProperties0.getRecovery();
        long long15 = recovery14.getForgetOrphanedLogEntriesDelay();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{-1.0=100}" + "'", str13, "{-1.0=100}");
        org.junit.Assert.assertNotNull(recovery14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 86400000L + "'", long15 == 86400000L);
    }

    @Test
    public void test10602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10602");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.maxActives = ' ';
        int int9 = atomikosProperties0.getConsoleFileCount();
        int int10 = atomikosProperties0.consoleFileLimit;
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        atomikosProperties0.threadedTwoPhaseCommit = true;
        atomikosProperties0.setCheckpointInterval((long) 97);
        atomikosProperties0.consoleFileCount = 18;
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(properties11);
    }

    @Test
    public void test10603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10603");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        int int5 = atomikosProperties0.getConsoleFileLimit();
        atomikosProperties0.forceShutdownOnVmExit = false;
        boolean boolean8 = atomikosProperties0.forceShutdownOnVmExit;
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.String str10 = properties9.toString();
        java.lang.Object obj12 = properties9.remove((java.lang.Object) (short) 100);
        java.lang.Object obj15 = properties9.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setEnableLogging(true);
        atomikosProperties16.consoleFileCount = 0;
        atomikosProperties16.setSerialJtaTransactions(false);
        java.lang.String str23 = atomikosProperties16.getOutputDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties25 = atomikosProperties24.asProperties();
        atomikosProperties24.service = "{-1.0=100}";
        long long28 = atomikosProperties24.getDefaultJtaTimeout();
        atomikosProperties24.serialJtaTransactions = true;
        long long31 = atomikosProperties24.getDefaultJtaTimeout();
        long long32 = atomikosProperties24.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery33 = atomikosProperties24.getRecovery();
        recovery33.setRetryInterval((long) (byte) 0);
        java.lang.Object obj36 = properties9.replace((java.lang.Object) atomikosProperties16, (java.lang.Object) (byte) 0);
        int int37 = atomikosProperties16.getConsoleFileLimit();
        java.lang.String str38 = atomikosProperties16.getLogBaseName();
        atomikosProperties16.setMaxTimeout((long) 10);
        boolean boolean41 = atomikosProperties16.isThreadedTwoPhaseCommit();
        int int42 = atomikosProperties16.consoleFileLimit;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel43 = atomikosProperties16.consoleLogLevel;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel43;
        java.lang.String str45 = atomikosProperties0.outputDir;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10000L + "'", long28 == 10000L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10000L + "'", long31 == 10000L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertNotNull(recovery33);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel43 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel43.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test10604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10604");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Set<java.lang.String> strSet8 = properties0.stringPropertyNames();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.String str10 = properties9.toString();
        java.lang.Object obj12 = properties9.remove((java.lang.Object) (short) 100);
        java.lang.Object obj15 = properties9.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean17 = properties9.containsKey((java.lang.Object) 0L);
        java.lang.Object obj20 = properties9.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        java.lang.Object obj24 = properties21.remove((java.lang.Object) (short) 100);
        java.lang.Object obj27 = properties21.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj28 = properties21.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties21.elements();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.String str32 = properties31.toString();
        java.lang.Object obj34 = properties31.remove((java.lang.Object) (short) 100);
        java.lang.Object obj37 = properties31.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean39 = properties31.containsKey((java.lang.Object) 0L);
        java.lang.Object obj42 = properties31.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties43 = new java.util.Properties();
        java.lang.String str44 = properties43.toString();
        java.lang.Object obj46 = properties43.remove((java.lang.Object) (short) 100);
        java.lang.Object obj49 = properties43.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj50 = properties43.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration51 = properties43.elements();
        properties31.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties43);
        java.lang.Object obj53 = properties0.putIfAbsent((java.lang.Object) properties9, (java.lang.Object) properties43);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean55 = atomikosProperties54.isThreadedTwoPhaseCommit();
        long long56 = atomikosProperties54.getCheckpointInterval();
        atomikosProperties54.setCheckpointInterval((long) 5);
        java.lang.Object obj59 = properties0.get((java.lang.Object) 5);
        java.util.Properties properties60 = new java.util.Properties(properties0);
        int int61 = properties60.size();
        java.io.OutputStream outputStream62 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties60.storeToXML(outputStream62, "{1.0=-1, ={1.0=-1}, -1.0=100}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{}" + "'", str32, "{}");
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{}" + "'", str44, "{}");
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration51);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 500L + "'", long56 == 500L);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test10605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10605");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties8 = atomikosProperties7.asProperties();
        java.lang.Object obj9 = properties0.remove((java.lang.Object) properties8);
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        java.util.Properties properties13 = new java.util.Properties();
        java.lang.String str14 = properties13.toString();
        java.lang.Object obj16 = properties13.remove((java.lang.Object) (short) 100);
        java.lang.Object obj19 = properties13.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean21 = properties13.containsKey((java.lang.Object) 0L);
        java.lang.Object obj24 = properties13.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj27 = properties13.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties13.keys();
        java.util.Properties properties29 = new java.util.Properties();
        java.lang.String str30 = properties29.toString();
        boolean boolean31 = properties29.isEmpty();
        java.lang.Object obj34 = properties29.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration35 = properties29.elements();
        java.lang.Object obj36 = properties12.replace((java.lang.Object) objEnumeration28, (java.lang.Object) properties29);
        java.util.Enumeration<java.lang.Object> objEnumeration37 = properties29.elements();
        java.util.Properties properties38 = new java.util.Properties(properties29);
        boolean boolean39 = properties8.containsKey((java.lang.Object) properties38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean41 = atomikosProperties40.isSerialJtaTransactions();
        atomikosProperties40.logBaseName = "{-1.0=100}";
        int int44 = atomikosProperties40.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery45 = atomikosProperties40.getRecovery();
        atomikosProperties40.setConsoleFileCount((int) (byte) 100);
        atomikosProperties40.maxTimeout = 50;
        java.lang.String str50 = atomikosProperties40.getConsoleFileName();
        atomikosProperties40.setDefaultJtaTimeout((long) 'a');
        int int53 = atomikosProperties40.maxActives;
        boolean boolean54 = properties8.containsValue((java.lang.Object) atomikosProperties40);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{}" + "'", str14, "{}");
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{}" + "'", str30, "{}");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(objEnumeration35);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(objEnumeration37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 50 + "'", int44 == 50);
        org.junit.Assert.assertNotNull(recovery45);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tm.out" + "'", str50, "tm.out");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 50 + "'", int53 == 50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test10606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10606");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setLogBaseDir("{-1.0=100}");
        atomikosProperties0.setEnableLogging(true);
        boolean boolean12 = atomikosProperties0.forceShutdownOnVmExit;
        java.lang.String str13 = atomikosProperties0.service;
        java.lang.String str14 = atomikosProperties0.getService();
        atomikosProperties0.service = "{{-1.0=100}=}";
        java.util.Properties properties17 = new java.util.Properties();
        java.lang.String str18 = properties17.toString();
        java.lang.Object obj20 = properties17.remove((java.lang.Object) (short) 100);
        java.lang.Object obj23 = properties17.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.setEnableLogging(true);
        atomikosProperties24.consoleFileCount = 0;
        atomikosProperties24.setSerialJtaTransactions(false);
        java.lang.String str31 = atomikosProperties24.getOutputDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties33 = atomikosProperties32.asProperties();
        atomikosProperties32.service = "{-1.0=100}";
        long long36 = atomikosProperties32.getDefaultJtaTimeout();
        atomikosProperties32.serialJtaTransactions = true;
        long long39 = atomikosProperties32.getDefaultJtaTimeout();
        long long40 = atomikosProperties32.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery41 = atomikosProperties32.getRecovery();
        recovery41.setRetryInterval((long) (byte) 0);
        java.lang.Object obj44 = properties17.replace((java.lang.Object) atomikosProperties24, (java.lang.Object) (byte) 0);
        int int45 = properties17.size();
        java.util.Set<java.lang.String> strSet46 = properties17.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean49 = atomikosProperties48.isSerialJtaTransactions();
        atomikosProperties48.logBaseName = "{-1.0=100}";
        int int52 = atomikosProperties48.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery53 = atomikosProperties48.getRecovery();
        java.lang.String str54 = atomikosProperties48.getOutputDir();
        int int55 = atomikosProperties48.getMaxActives();
        boolean boolean56 = atomikosProperties48.allowSubTransactions;
        int int57 = atomikosProperties48.consoleFileLimit;
        int int58 = atomikosProperties48.consoleFileLimit;
        atomikosProperties48.setCheckpointInterval((long) (byte) 0);
        java.lang.Class<?> wildcardClass61 = atomikosProperties48.getClass();
        atomikosProperties0.set(properties17, "{com.atomikos.icatch.tm.out=hi!}", (java.lang.Object) wildcardClass61);
        java.util.Properties properties63 = new java.util.Properties(properties17);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{-1.0=100}" + "'", str13, "{-1.0=100}");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{-1.0=100}" + "'", str14, "{-1.0=100}");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{}" + "'", str18, "{}");
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10000L + "'", long36 == 10000L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10000L + "'", long39 == 10000L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 500L + "'", long40 == 500L);
        org.junit.Assert.assertNotNull(recovery41);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 50 + "'", int52 == 50);
        org.junit.Assert.assertNotNull(recovery53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 50 + "'", int55 == 50);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test10607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10607");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Set<java.lang.String> strSet8 = properties0.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery9.retryInterval = (short) 100;
        recovery9.delay = (-1L);
        long long14 = recovery9.delay;
        recovery9.delay = (short) 1;
        long long17 = recovery9.getRetryInterval();
        int int18 = recovery9.maxRetries;
        int int19 = recovery9.maxRetries;
        long long20 = recovery9.forgetOrphanedLogEntriesDelay;
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.Object obj23 = properties21.remove((java.lang.Object) (-1.0d));
        boolean boolean24 = properties21.isEmpty();
        int int25 = properties21.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery26 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery26.retryInterval = (short) 100;
        recovery26.forgetOrphanedLogEntriesDelay = 'a';
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.Object obj33 = properties31.remove((java.lang.Object) (-1.0d));
        boolean boolean34 = properties31.isEmpty();
        int int35 = properties31.size();
        java.lang.String str37 = properties31.getProperty("{}");
        boolean boolean38 = properties21.remove((java.lang.Object) recovery26, (java.lang.Object) properties31);
        java.lang.Object obj39 = properties0.putIfAbsent((java.lang.Object) long20, (java.lang.Object) properties21);
        java.util.Enumeration<java.lang.Object> objEnumeration40 = properties0.keys();
        java.util.Properties properties41 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties42.setEnableLogging(true);
        atomikosProperties42.consoleFileCount = 0;
        java.util.Properties properties47 = atomikosProperties42.asProperties();
        properties47.clear();
        java.util.Properties properties49 = new java.util.Properties();
        java.lang.String str50 = properties49.toString();
        boolean boolean51 = properties49.isEmpty();
        java.util.Properties properties52 = new java.util.Properties();
        java.lang.String str53 = properties52.toString();
        java.lang.Object obj55 = properties52.remove((java.lang.Object) (short) 100);
        java.lang.Object obj58 = properties52.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean60 = properties52.containsKey((java.lang.Object) 0L);
        boolean boolean61 = properties49.containsValue((java.lang.Object) 0L);
        java.util.Set<java.lang.String> strSet62 = properties49.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties64 = atomikosProperties63.asProperties();
        atomikosProperties63.service = "{-1.0=100}";
        java.lang.String str67 = atomikosProperties63.getLogBaseName();
        java.lang.String str68 = atomikosProperties63.transactionManagerUniqueName;
        atomikosProperties63.consoleFileName = "";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties71.setAllowSubTransactions(true);
        atomikosProperties71.logBaseName = "{={-1.0=100}, -1.0=100}";
        int int76 = atomikosProperties71.getConsoleFileLimit();
        java.lang.Object obj77 = properties49.putIfAbsent((java.lang.Object) atomikosProperties63, (java.lang.Object) atomikosProperties71);
        atomikosProperties71.setLogBaseName("");
        boolean boolean80 = properties0.remove((java.lang.Object) properties47, (java.lang.Object) "");
        java.util.Enumeration<java.lang.Object> objEnumeration81 = properties47.keys();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 86400000L + "'", long20 == 86400000L);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(objEnumeration40);
        org.junit.Assert.assertNotNull(properties47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "{}" + "'", str50, "{}");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "{}" + "'", str53, "{}");
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNotNull(properties64);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "tmlog" + "'", str67, "tmlog");
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(objEnumeration81);
    }

    @Test
    public void test10608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10608");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        atomikosProperties0.setTransactionManagerUniqueName("{-1.0=100}");
        boolean boolean9 = atomikosProperties0.enableLogging;
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.maxActives = 100;
        int int14 = atomikosProperties0.consoleFileCount;
        long long15 = atomikosProperties0.maxTimeout;
        atomikosProperties0.defaultJtaTimeout = 0L;
        java.util.Properties properties18 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setAllowSubTransactions(true);
        boolean boolean22 = atomikosProperties19.enableLogging;
        atomikosProperties19.consoleFileLimit = (byte) 100;
        java.util.Properties properties25 = new java.util.Properties();
        java.lang.String str26 = properties25.toString();
        java.util.Properties properties27 = new java.util.Properties(properties25);
        java.util.Properties properties29 = new java.util.Properties();
        java.lang.String str30 = properties29.toString();
        java.lang.Object obj32 = properties29.remove((java.lang.Object) (short) 100);
        java.lang.Object obj35 = properties29.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean37 = properties29.containsKey((java.lang.Object) 0L);
        java.lang.Object obj40 = properties29.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties41 = new java.util.Properties(properties29);
        java.util.Enumeration<java.lang.Object> objEnumeration42 = properties41.elements();
        atomikosProperties19.set(properties27, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties41);
        atomikosProperties19.setOutputDir("hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery46 = atomikosProperties19.getRecovery();
        atomikosProperties19.setOutputDir("{={-1.0=100}, -1.0=100}");
        boolean boolean49 = atomikosProperties19.isForceShutdownOnVmExit();
        atomikosProperties19.setOutputDir("hi!");
        java.lang.String str52 = atomikosProperties19.logBaseDir;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery53 = atomikosProperties19.recovery;
        java.lang.String str54 = atomikosProperties19.logBaseName;
        java.lang.Object obj55 = properties18.remove((java.lang.Object) atomikosProperties19);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 300000L + "'", long15 == 300000L);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{}" + "'", str26, "{}");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{}" + "'", str30, "{}");
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNotNull(objEnumeration42);
        org.junit.Assert.assertNotNull(recovery46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(recovery53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "tmlog" + "'", str54, "tmlog");
        org.junit.Assert.assertNull(obj55);
    }

    @Test
    public void test10609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10609");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        int int4 = properties0.size();
        java.util.Properties properties5 = new java.util.Properties();
        properties5.clear();
        java.lang.String str7 = properties5.toString();
        java.lang.Object obj8 = properties5.clone();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.Object obj11 = properties9.remove((java.lang.Object) (-1.0d));
        boolean boolean12 = properties9.isEmpty();
        int int13 = properties9.size();
        java.lang.String str15 = properties9.getProperty("{}");
        java.util.Set<java.lang.Object> objSet16 = properties9.keySet();
        boolean boolean18 = properties9.containsKey((java.lang.Object) (short) 1);
        int int19 = properties9.size();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties23 = atomikosProperties22.asProperties();
        atomikosProperties22.service = "{-1.0=100}";
        long long26 = atomikosProperties22.getDefaultJtaTimeout();
        atomikosProperties22.setThreadedTwoPhaseCommit(true);
        boolean boolean29 = atomikosProperties22.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery30 = atomikosProperties22.recovery;
        atomikosProperties22.setLogBaseDir("");
        long long33 = atomikosProperties22.maxTimeout;
        atomikosProperties22.setConsoleFileLimit(0);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel36 = atomikosProperties22.getConsoleLogLevel();
        java.lang.Object obj37 = properties5.remove((java.lang.Object) atomikosProperties22);
        boolean boolean38 = atomikosProperties22.isForceShutdownOnVmExit();
        long long39 = atomikosProperties22.getMaxTimeout();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery40 = atomikosProperties22.recovery;
        recovery40.setForgetOrphanedLogEntriesDelay(35L);
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "{}");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(objSet16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10000L + "'", long26 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(recovery30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 300000L + "'", long33 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel36 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel36.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 300000L + "'", long39 == 300000L);
        org.junit.Assert.assertNotNull(recovery40);
    }

    @Test
    public void test10610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10610");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        int int6 = atomikosProperties0.consoleFileCount;
        long long7 = atomikosProperties0.getCheckpointInterval();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = atomikosProperties0.consoleLogLevel;
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        atomikosProperties0.setLogBaseName("{hi!={{={-1.0=100}, -1.0=100}=}}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel8 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel8.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test10611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10611");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setTransactionManagerUniqueName("{}");
        atomikosProperties0.consoleFileName = "hi!";
        int int9 = atomikosProperties0.getConsoleFileCount();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.lang.Object obj13 = properties10.remove((java.lang.Object) (short) 100);
        java.lang.Object obj16 = properties10.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj17 = properties10.clone();
        java.util.Set<java.lang.String> strSet18 = properties10.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery19 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery19.retryInterval = (short) 100;
        recovery19.delay = (-1L);
        long long24 = recovery19.delay;
        recovery19.delay = (short) 1;
        long long27 = recovery19.getRetryInterval();
        int int28 = recovery19.maxRetries;
        int int29 = recovery19.maxRetries;
        long long30 = recovery19.forgetOrphanedLogEntriesDelay;
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.Object obj33 = properties31.remove((java.lang.Object) (-1.0d));
        boolean boolean34 = properties31.isEmpty();
        int int35 = properties31.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery36 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery36.retryInterval = (short) 100;
        recovery36.forgetOrphanedLogEntriesDelay = 'a';
        java.util.Properties properties41 = new java.util.Properties();
        java.lang.Object obj43 = properties41.remove((java.lang.Object) (-1.0d));
        boolean boolean44 = properties41.isEmpty();
        int int45 = properties41.size();
        java.lang.String str47 = properties41.getProperty("{}");
        boolean boolean48 = properties31.remove((java.lang.Object) recovery36, (java.lang.Object) properties41);
        java.lang.Object obj49 = properties10.putIfAbsent((java.lang.Object) long30, (java.lang.Object) properties31);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties52 = atomikosProperties51.asProperties();
        atomikosProperties51.service = "{-1.0=100}";
        long long55 = atomikosProperties51.getDefaultJtaTimeout();
        long long56 = atomikosProperties51.getMaxTimeout();
        int int57 = atomikosProperties51.consoleFileCount;
        int int58 = atomikosProperties51.getMaxActives();
        java.lang.Class<?> wildcardClass59 = atomikosProperties51.getClass();
        atomikosProperties0.set(properties10, "{-1.0=100}", (java.lang.Object) wildcardClass59);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery61 = atomikosProperties0.getRecovery();
        long long62 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties64 = atomikosProperties63.asProperties();
        atomikosProperties63.service = "{-1.0=100}";
        long long67 = atomikosProperties63.getDefaultJtaTimeout();
        atomikosProperties63.serialJtaTransactions = true;
        atomikosProperties63.maxActives = ' ';
        int int72 = atomikosProperties63.getConsoleFileCount();
        long long73 = atomikosProperties63.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties74 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties75 = atomikosProperties74.asProperties();
        atomikosProperties74.service = "{-1.0=100}";
        java.lang.String str78 = atomikosProperties74.getTransactionManagerUniqueName();
        boolean boolean79 = atomikosProperties74.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel80 = atomikosProperties74.getConsoleLogLevel();
        atomikosProperties63.setConsoleLogLevel(atomikosLoggingLevel80);
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel80;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 100L + "'", long27 == 100L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 86400000L + "'", long30 == 86400000L);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(properties52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 10000L + "'", long55 == 10000L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 300000L + "'", long56 == 300000L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 50 + "'", int58 == 50);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(recovery61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 10000L + "'", long62 == 10000L);
        org.junit.Assert.assertNotNull(properties64);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 10000L + "'", long67 == 10000L);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 10000L + "'", long73 == 10000L);
        org.junit.Assert.assertNotNull(properties75);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel80 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel80.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test10612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10612");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isEnableLogging();
        long long8 = atomikosProperties0.defaultJtaTimeout;
        boolean boolean9 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.maxActives = ' ';
        boolean boolean12 = atomikosProperties0.enableLogging;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10000L + "'", long8 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test10613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10613");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxActives((int) ' ');
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.Object> objSet10 = properties9.keySet();
        java.lang.String str11 = properties9.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration12 = properties9.elements();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet13 = properties9.entrySet();
        java.util.Enumeration<java.lang.Object> objEnumeration14 = properties9.elements();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(objSet10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str11, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertNotNull(objEnumeration12);
        org.junit.Assert.assertNotNull(objEntrySet13);
        org.junit.Assert.assertNotNull(objEnumeration14);
    }

    @Test
    public void test10614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10614");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Enumeration<java.lang.Object> objEnumeration9 = properties8.elements();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.lang.Object obj13 = properties10.remove((java.lang.Object) (short) 100);
        java.lang.Object obj16 = properties10.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean18 = properties10.containsKey((java.lang.Object) 0L);
        java.lang.Object obj21 = properties10.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj24 = properties10.setProperty("", "{-1.0=100}");
        boolean boolean25 = properties10.isEmpty();
        java.util.Properties properties26 = new java.util.Properties();
        java.lang.String str27 = properties26.toString();
        java.util.Properties properties28 = new java.util.Properties(properties26);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet29 = properties28.entrySet();
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.Object obj33 = properties31.remove((java.lang.Object) (-1.0d));
        int int34 = properties31.size();
        boolean boolean35 = properties10.replace((java.lang.Object) properties28, (java.lang.Object) 100L, (java.lang.Object) properties31);
        boolean boolean36 = properties10.isEmpty();
        java.util.Set<java.lang.Object> objSet37 = properties10.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties39 = atomikosProperties38.asProperties();
        atomikosProperties38.service = "{-1.0=100}";
        long long42 = atomikosProperties38.getDefaultJtaTimeout();
        long long43 = atomikosProperties38.getMaxTimeout();
        int int44 = atomikosProperties38.consoleFileCount;
        java.lang.String str45 = atomikosProperties38.getOutputDir();
        boolean boolean46 = properties8.remove((java.lang.Object) properties10, (java.lang.Object) atomikosProperties38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties48 = atomikosProperties47.asProperties();
        atomikosProperties47.service = "{-1.0=100}";
        long long51 = atomikosProperties47.getDefaultJtaTimeout();
        long long52 = atomikosProperties47.getMaxTimeout();
        int int53 = atomikosProperties47.consoleFileCount;
        atomikosProperties47.setConsoleFileCount(0);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel56 = atomikosProperties47.getConsoleLogLevel();
        boolean boolean57 = properties10.equals((java.lang.Object) atomikosLoggingLevel56);
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel56);
        int int59 = atomikosProperties0.consoleFileLimit;
        java.util.Properties properties60 = new java.util.Properties();
        java.lang.String str61 = properties60.toString();
        java.util.Properties properties62 = new java.util.Properties(properties60);
        java.util.Set<java.lang.String> strSet63 = properties62.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties65.setEnableLogging(true);
        atomikosProperties65.consoleFileCount = 0;
        int int70 = atomikosProperties65.getMaxActives();
        java.lang.String str71 = atomikosProperties65.getLogBaseDir();
        java.lang.String str72 = atomikosProperties65.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery73 = atomikosProperties65.getRecovery();
        boolean boolean74 = atomikosProperties65.serialJtaTransactions;
        atomikosProperties65.setCheckpointInterval(10000L);
        boolean boolean77 = atomikosProperties65.threadedTwoPhaseCommit;
        atomikosProperties0.set(properties62, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", (java.lang.Object) atomikosProperties65);
        java.lang.String str79 = atomikosProperties0.getConsoleFileName();
        boolean boolean80 = atomikosProperties0.isForceShutdownOnVmExit();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNotNull(objEnumeration9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{}" + "'", str27, "{}");
        org.junit.Assert.assertNotNull(objEntrySet29);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objSet37);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 10000L + "'", long42 == 10000L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 300000L + "'", long43 == 300000L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(properties48);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10000L + "'", long51 == 10000L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 300000L + "'", long52 == 300000L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel56 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel56.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "{}" + "'", str61, "{}");
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 50 + "'", int70 == 50);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(recovery73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "tm.out" + "'", str79, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test10615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10615");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.recovery;
        boolean boolean9 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.setOutputDir("tmlog");
        boolean boolean12 = atomikosProperties0.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties14 = atomikosProperties13.asProperties();
        atomikosProperties13.service = "{-1.0=100}";
        long long17 = atomikosProperties13.getDefaultJtaTimeout();
        long long18 = atomikosProperties13.getMaxTimeout();
        int int19 = atomikosProperties13.consoleFileCount;
        long long20 = atomikosProperties13.getCheckpointInterval();
        java.lang.String str21 = atomikosProperties13.outputDir;
        long long22 = atomikosProperties13.getCheckpointInterval();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel23 = atomikosProperties13.getConsoleLogLevel();
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel23;
        java.lang.String str25 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.defaultJtaTimeout = 20;
        long long28 = atomikosProperties0.getCheckpointInterval();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10000L + "'", long17 == 10000L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 300000L + "'", long18 == 300000L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 500L + "'", long20 == 500L);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel23 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel23.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 500L + "'", long28 == 500L);
    }

    @Test
    public void test10616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10616");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        java.lang.String str6 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setCheckpointInterval((long) 32);
        boolean boolean9 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setConsoleFileName("{={-1.0=100}, -1.0=100}");
        atomikosProperties0.setTransactionManagerUniqueName("{{1.0=-1}=hi!}");
        java.util.Properties properties14 = new java.util.Properties();
        java.lang.String str15 = properties14.toString();
        java.lang.Object obj17 = properties14.remove((java.lang.Object) (short) 100);
        java.lang.Object obj18 = properties14.clone();
        java.lang.Object obj21 = properties14.setProperty("{100=100}", "");
        java.util.Properties properties22 = new java.util.Properties();
        java.lang.String str23 = properties22.toString();
        java.lang.Object obj25 = properties22.remove((java.lang.Object) (short) 100);
        java.util.Properties properties26 = new java.util.Properties();
        java.lang.String str27 = properties26.toString();
        boolean boolean28 = properties26.isEmpty();
        java.lang.Object obj31 = properties26.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties26.elements();
        boolean boolean33 = properties22.containsKey((java.lang.Object) properties26);
        java.util.Enumeration<?> wildcardEnumeration34 = properties22.propertyNames();
        java.util.Properties properties35 = new java.util.Properties();
        java.lang.Object obj37 = properties35.remove((java.lang.Object) (-1.0d));
        boolean boolean38 = properties35.isEmpty();
        java.lang.Object obj41 = properties35.setProperty("hi!", "{}");
        java.util.Set<java.lang.String> strSet42 = properties35.stringPropertyNames();
        java.lang.Object obj43 = properties22.get((java.lang.Object) properties35);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties45 = atomikosProperties44.asProperties();
        atomikosProperties44.service = "{-1.0=100}";
        long long48 = atomikosProperties44.getDefaultJtaTimeout();
        atomikosProperties44.serialJtaTransactions = true;
        long long51 = atomikosProperties44.getDefaultJtaTimeout();
        long long52 = atomikosProperties44.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery53 = atomikosProperties44.getRecovery();
        long long54 = recovery53.delay;
        recovery53.maxRetries = (-1);
        java.lang.Object obj57 = properties14.put((java.lang.Object) properties22, (java.lang.Object) (-1));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties60 = atomikosProperties59.asProperties();
        atomikosProperties59.service = "{-1.0=100}";
        long long63 = atomikosProperties59.getDefaultJtaTimeout();
        atomikosProperties59.setThreadedTwoPhaseCommit(true);
        boolean boolean66 = atomikosProperties59.isAllowSubTransactions();
        int int67 = atomikosProperties59.getConsoleFileLimit();
        boolean boolean68 = atomikosProperties59.serialJtaTransactions;
        atomikosProperties59.setForceShutdownOnVmExit(false);
        atomikosProperties59.threadedTwoPhaseCommit = true;
        int int73 = atomikosProperties59.getConsoleFileCount();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery74 = atomikosProperties59.recovery;
        atomikosProperties0.set(properties14, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=true, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=35, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=10, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", (java.lang.Object) recovery74);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "{-1.0=100}" + "'", str6, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{}" + "'", str15, "{}");
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{}");
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{}" + "'", str23, "{}");
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{}" + "'", str27, "{}");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(objEnumeration32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration34);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10000L + "'", long48 == 10000L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10000L + "'", long51 == 10000L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 500L + "'", long52 == 500L);
        org.junit.Assert.assertNotNull(recovery53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 10000L + "'", long54 == 10000L);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNotNull(properties60);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 10000L + "'", long63 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(recovery74);
    }

    @Test
    public void test10617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10617");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setTransactionManagerUniqueName("{}");
        atomikosProperties0.enableLogging = true;
        java.lang.String str9 = atomikosProperties0.getService();
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        boolean boolean12 = atomikosProperties0.isThreadedTwoPhaseCommit();
        int int13 = atomikosProperties0.maxActives;
        java.lang.String str14 = atomikosProperties0.getConsoleFileName();
        long long15 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.consoleFileLimit = 52;
        atomikosProperties0.serialJtaTransactions = false;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{-1.0=100}" + "'", str9, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tm.out" + "'", str14, "tm.out");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
    }

    @Test
    public void test10618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10618");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties0.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.elements();
        java.util.Properties properties6 = new java.util.Properties(properties0);
        java.util.Set<java.lang.Object> objSet7 = properties0.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean9 = atomikosProperties8.isSerialJtaTransactions();
        atomikosProperties8.logBaseName = "{-1.0=100}";
        int int12 = atomikosProperties8.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery13 = atomikosProperties8.getRecovery();
        atomikosProperties8.setConsoleFileCount((int) (byte) 100);
        long long16 = atomikosProperties8.getDefaultJtaTimeout();
        atomikosProperties8.consoleFileName = "{1.0=-1}";
        java.lang.Object obj19 = null;
        java.lang.Object obj20 = properties0.getOrDefault((java.lang.Object) "{1.0=-1}", obj19);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties0.keys();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertNotNull(recovery13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10000L + "'", long16 == 10000L);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(objEnumeration21);
    }

    @Test
    public void test10619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10619");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties12 = new java.util.Properties();
        java.lang.String str13 = properties12.toString();
        java.lang.Object obj15 = properties12.remove((java.lang.Object) (short) 100);
        java.lang.Object obj18 = properties12.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj19 = properties12.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties12.elements();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties12);
        boolean boolean23 = properties0.equals((java.lang.Object) 1.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties25 = atomikosProperties24.asProperties();
        atomikosProperties24.service = "{-1.0=100}";
        long long28 = atomikosProperties24.getDefaultJtaTimeout();
        long long29 = atomikosProperties24.getMaxTimeout();
        int int30 = atomikosProperties24.consoleFileCount;
        int int31 = atomikosProperties24.getMaxActives();
        boolean boolean32 = atomikosProperties24.forceShutdownOnVmExit;
        java.lang.String str33 = atomikosProperties24.getTransactionManagerUniqueName();
        boolean boolean34 = properties0.containsValue((java.lang.Object) atomikosProperties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setAllowSubTransactions(true);
        boolean boolean38 = atomikosProperties35.enableLogging;
        boolean boolean39 = atomikosProperties35.isForceShutdownOnVmExit();
        java.lang.String str40 = atomikosProperties35.getService();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties41.setAllowSubTransactions(true);
        boolean boolean44 = atomikosProperties41.enableLogging;
        boolean boolean45 = atomikosProperties41.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel46 = atomikosProperties41.consoleLogLevel;
        atomikosProperties35.consoleLogLevel = atomikosLoggingLevel46;
        atomikosProperties24.setConsoleLogLevel(atomikosLoggingLevel46);
        atomikosProperties24.setMaxTimeout((long) 3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties52 = atomikosProperties51.asProperties();
        atomikosProperties51.service = "{-1.0=100}";
        long long55 = atomikosProperties51.getDefaultJtaTimeout();
        long long56 = atomikosProperties51.getMaxTimeout();
        java.lang.String str57 = atomikosProperties51.outputDir;
        atomikosProperties51.consoleFileName = "tm.out";
        long long60 = atomikosProperties51.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel61 = atomikosProperties51.consoleLogLevel;
        atomikosProperties24.setConsoleLogLevel(atomikosLoggingLevel61);
        boolean boolean63 = atomikosProperties24.isAllowSubTransactions();
        atomikosProperties24.maxTimeout = 21;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{}" + "'", str13, "{}");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10000L + "'", long28 == 10000L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 300000L + "'", long29 == 300000L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 50 + "'", int31 == 50);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel46 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel46.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 10000L + "'", long55 == 10000L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 300000L + "'", long56 == 300000L);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 500L + "'", long60 == 500L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel61 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel61.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test10620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10620");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.setService("tm.out");
        int int12 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.setDefaultJtaTimeout((long) ' ');
        java.lang.String str15 = atomikosProperties0.logBaseDir;
        atomikosProperties0.enableLogging = true;
        atomikosProperties0.consoleFileName = "hi!";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test10621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10621");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.maxActives = (short) -1;
        atomikosProperties0.setService("tm.out");
        java.lang.String str7 = atomikosProperties0.getService();
        long long8 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.setLogBaseDir("{1.0=-1, 10000=0}");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tm.out" + "'", str7, "tm.out");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 300000L + "'", long8 == 300000L);
    }

    @Test
    public void test10622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10622");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.forgetOrphanedLogEntriesDelay = 'a';
        long long5 = recovery0.getDelay();
        int int6 = recovery0.maxRetries;
        long long7 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long8 = recovery0.retryInterval;
        long long9 = recovery0.delay;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
    }

    @Test
    public void test10623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10623");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        int int5 = atomikosProperties0.getMaxActives();
        java.lang.String str6 = atomikosProperties0.getLogBaseDir();
        java.lang.String str7 = atomikosProperties0.service;
        long long8 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = atomikosProperties0.recovery;
        long long10 = recovery9.getRetryInterval();
        recovery9.setRetryInterval((long) 97);
        recovery9.setRetryInterval((long) 'a');
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(recovery9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
    }

    @Test
    public void test10624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10624");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.service = "tm.out";
        atomikosProperties0.logBaseName = "tm.out";
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties0.consoleLogLevel;
        atomikosProperties0.service = "tm.out";
        boolean boolean16 = atomikosProperties0.enableLogging;
        long long17 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.consoleFileName = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 300000L + "'", long17 == 300000L);
    }

    @Test
    public void test10625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10625");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.setCheckpointInterval((long) 5);
        atomikosProperties0.setConsoleFileCount(0);
        atomikosProperties0.setService("{-1.0=100}");
        atomikosProperties0.setLogBaseDir("{-1.0=100}");
        long long15 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.maxTimeout = 10;
        long long18 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setTransactionManagerUniqueName("{{1.0=-1}=hi!}");
        java.lang.String str21 = atomikosProperties0.getLogBaseName();
        boolean boolean22 = atomikosProperties0.isEnableLogging();
        java.lang.String str23 = atomikosProperties0.getLogBaseDir();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 5L + "'", long18 == 5L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{-1.0=100}" + "'", str23, "{-1.0=100}");
    }

    @Test
    public void test10626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10626");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        long long5 = atomikosProperties0.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel6 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel6);
        atomikosProperties0.service = "";
        atomikosProperties0.serialJtaTransactions = true;
        java.lang.String str12 = atomikosProperties0.getLogBaseName();
        boolean boolean13 = atomikosProperties0.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery14 = atomikosProperties0.recovery;
        recovery14.delay = 21;
        recovery14.delay = 50L;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(recovery14);
    }

    @Test
    public void test10627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10627");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery4 = atomikosProperties0.recovery;
        java.lang.String str5 = atomikosProperties0.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery6 = atomikosProperties0.recovery;
        java.util.Properties properties7 = new java.util.Properties();
        java.lang.String str8 = properties7.toString();
        java.lang.Object obj10 = properties7.remove((java.lang.Object) (short) 100);
        java.lang.Object obj13 = properties7.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.String str16 = properties15.toString();
        java.lang.Object obj18 = properties15.remove((java.lang.Object) (short) 100);
        java.lang.Object obj21 = properties15.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj22 = properties15.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties15.elements();
        java.lang.Object obj24 = properties7.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration23);
        java.util.Properties properties25 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration26 = properties25.propertyNames();
        java.lang.Object obj27 = properties25.clone();
        java.util.Properties properties28 = new java.util.Properties();
        java.lang.String str29 = properties28.toString();
        boolean boolean30 = properties28.isEmpty();
        java.lang.Object obj33 = properties28.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration34 = properties28.elements();
        java.lang.Object obj35 = properties7.put(obj27, (java.lang.Object) objEnumeration34);
        properties7.clear();
        java.util.Properties properties37 = new java.util.Properties();
        java.util.Properties properties38 = new java.util.Properties();
        java.lang.Object obj40 = properties38.remove((java.lang.Object) (-1.0d));
        int int41 = properties38.size();
        java.util.Enumeration<java.lang.Object> objEnumeration42 = properties38.elements();
        java.util.Properties properties43 = new java.util.Properties();
        properties43.clear();
        java.lang.String str45 = properties43.toString();
        boolean boolean46 = properties7.replace((java.lang.Object) properties37, (java.lang.Object) properties38, (java.lang.Object) str45);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet47 = properties38.entrySet();
        java.util.Properties properties48 = new java.util.Properties(properties38);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery50 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery50.retryInterval = (short) 100;
        recovery50.forgetOrphanedLogEntriesDelay = 'a';
        long long55 = recovery50.retryInterval;
        recovery50.forgetOrphanedLogEntriesDelay = 0L;
        long long58 = recovery50.getForgetOrphanedLogEntriesDelay();
        long long59 = recovery50.getForgetOrphanedLogEntriesDelay();
        long long60 = recovery50.retryInterval;
        recovery50.retryInterval = 0;
        recovery50.setRetryInterval((long) (byte) -1);
        recovery50.setDelay((long) 'a');
        atomikosProperties0.set(properties48, "{{={-1.0=100}, -1.0=100}=}", (java.lang.Object) 'a');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties69 = atomikosProperties68.asProperties();
        atomikosProperties68.service = "{-1.0=100}";
        java.lang.String str72 = atomikosProperties68.getTransactionManagerUniqueName();
        atomikosProperties68.consoleFileName = "hi!";
        atomikosProperties68.service = "tm.out";
        atomikosProperties68.logBaseName = "tm.out";
        atomikosProperties68.setThreadedTwoPhaseCommit(true);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel81 = atomikosProperties68.consoleLogLevel;
        long long82 = atomikosProperties68.getDefaultJtaTimeout();
        atomikosProperties68.setCheckpointInterval(300000L);
        java.lang.String str85 = atomikosProperties68.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties86 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties87 = atomikosProperties86.asProperties();
        atomikosProperties86.service = "{-1.0=100}";
        long long90 = atomikosProperties86.getDefaultJtaTimeout();
        atomikosProperties86.setThreadedTwoPhaseCommit(true);
        java.lang.String str93 = atomikosProperties86.getLogBaseName();
        java.util.Properties properties94 = atomikosProperties86.asProperties();
        java.util.Set<java.lang.Object> objSet95 = properties94.keySet();
        java.lang.Object obj96 = properties48.put((java.lang.Object) atomikosProperties68, (java.lang.Object) properties94);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet97 = properties48.entrySet();
        java.util.Properties properties98 = new java.util.Properties(properties48);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(recovery4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(recovery6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(wildcardEnumeration26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "{}");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{}" + "'", str29, "{}");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(objEnumeration34);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(objEnumeration42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "{}" + "'", str45, "{}");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(objEntrySet47);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 100L + "'", long55 == 100L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L + "'", long60 == 100L);
        org.junit.Assert.assertNotNull(properties69);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel81 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel81.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 10000L + "'", long82 == 10000L);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "tm.out" + "'", str85, "tm.out");
        org.junit.Assert.assertNotNull(properties87);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 10000L + "'", long90 == 10000L);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "tmlog" + "'", str93, "tmlog");
        org.junit.Assert.assertNotNull(properties94);
        org.junit.Assert.assertNotNull(objSet95);
        org.junit.Assert.assertNull(obj96);
        org.junit.Assert.assertNotNull(objEntrySet97);
    }

    @Test
    public void test10628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10628");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        int int4 = properties0.size();
        java.util.Properties properties5 = new java.util.Properties();
        properties5.clear();
        java.lang.String str7 = properties5.toString();
        java.lang.Object obj8 = properties5.clone();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.Object obj11 = properties9.remove((java.lang.Object) (-1.0d));
        boolean boolean12 = properties9.isEmpty();
        int int13 = properties9.size();
        java.lang.String str15 = properties9.getProperty("{}");
        java.util.Set<java.lang.Object> objSet16 = properties9.keySet();
        boolean boolean18 = properties9.containsKey((java.lang.Object) (short) 1);
        int int19 = properties9.size();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties23 = atomikosProperties22.asProperties();
        atomikosProperties22.service = "{-1.0=100}";
        long long26 = atomikosProperties22.getDefaultJtaTimeout();
        atomikosProperties22.setThreadedTwoPhaseCommit(true);
        boolean boolean29 = atomikosProperties22.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery30 = atomikosProperties22.recovery;
        atomikosProperties22.setLogBaseDir("");
        long long33 = atomikosProperties22.maxTimeout;
        atomikosProperties22.setConsoleFileLimit(0);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel36 = atomikosProperties22.getConsoleLogLevel();
        java.lang.Object obj37 = properties5.remove((java.lang.Object) atomikosProperties22);
        boolean boolean38 = atomikosProperties22.isForceShutdownOnVmExit();
        long long39 = atomikosProperties22.defaultJtaTimeout;
        atomikosProperties22.setEnableLogging(true);
        int int42 = atomikosProperties22.getMaxActives();
        atomikosProperties22.checkpointInterval = (byte) -1;
        boolean boolean45 = atomikosProperties22.isEnableLogging();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "{}");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(objSet16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10000L + "'", long26 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(recovery30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 300000L + "'", long33 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel36 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel36.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10000L + "'", long39 == 10000L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 50 + "'", int42 == 50);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test10629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10629");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean12 = properties4.containsKey((java.lang.Object) 0L);
        java.lang.Object obj15 = properties4.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj18 = properties4.setProperty("", "{-1.0=100}");
        java.lang.Object obj19 = properties4.clone();
        java.lang.Object obj20 = properties0.get((java.lang.Object) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.setEnableLogging(true);
        atomikosProperties21.consoleFileCount = 0;
        int int26 = atomikosProperties21.getMaxActives();
        java.lang.String str27 = atomikosProperties21.getLogBaseDir();
        java.lang.String str28 = atomikosProperties21.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery29 = atomikosProperties21.getRecovery();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties31 = atomikosProperties30.asProperties();
        atomikosProperties30.service = "{-1.0=100}";
        long long34 = atomikosProperties30.getDefaultJtaTimeout();
        atomikosProperties30.setThreadedTwoPhaseCommit(true);
        boolean boolean37 = atomikosProperties30.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery38 = atomikosProperties30.recovery;
        atomikosProperties30.setLogBaseDir("");
        java.lang.Object obj41 = properties4.replace((java.lang.Object) recovery29, (java.lang.Object) "");
        java.util.Properties properties42 = new java.util.Properties();
        java.lang.Object obj44 = properties42.remove((java.lang.Object) (-1.0d));
        boolean boolean46 = properties42.contains((java.lang.Object) "{-1.0=100}");
        boolean boolean47 = properties4.equals((java.lang.Object) "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration48 = properties4.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery49 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long50 = recovery49.getRetryInterval();
        long long51 = recovery49.getDelay();
        long long52 = recovery49.getDelay();
        recovery49.setForgetOrphanedLogEntriesDelay(10000L);
        recovery49.retryInterval = '4';
        recovery49.setRetryInterval((long) (short) 0);
        boolean boolean59 = properties4.containsKey((java.lang.Object) recovery49);
        long long60 = recovery49.getDelay();
        recovery49.setMaxRetries(0);
        recovery49.retryInterval = (short) 1;
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 50 + "'", int26 == 50);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(recovery29);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10000L + "'", long34 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(recovery38);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objEnumeration48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10000L + "'", long50 == 10000L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10000L + "'", long51 == 10000L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 10000L + "'", long52 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 10000L + "'", long60 == 10000L);
    }

    @Test
    public void test10630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10630");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties8 = atomikosProperties7.asProperties();
        java.lang.Object obj9 = properties0.remove((java.lang.Object) properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        atomikosProperties10.service = "{-1.0=100}";
        long long14 = atomikosProperties10.getDefaultJtaTimeout();
        atomikosProperties10.setThreadedTwoPhaseCommit(true);
        boolean boolean17 = atomikosProperties10.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = atomikosProperties10.recovery;
        atomikosProperties10.setLogBaseDir("");
        long long21 = atomikosProperties10.maxTimeout;
        boolean boolean22 = atomikosProperties10.forceShutdownOnVmExit;
        boolean boolean23 = properties8.containsValue((java.lang.Object) atomikosProperties10);
        java.lang.String str24 = atomikosProperties10.service;
        long long25 = atomikosProperties10.defaultJtaTimeout;
        atomikosProperties10.consoleFileLimit = 52;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(recovery18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 300000L + "'", long21 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{-1.0=100}" + "'", str24, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10000L + "'", long25 == 10000L);
    }

    @Test
    public void test10631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10631");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getRetryInterval();
        long long2 = recovery0.retryInterval;
        recovery0.forgetOrphanedLogEntriesDelay = (byte) -1;
        recovery0.setMaxRetries(10);
        recovery0.setRetryInterval(50L);
        int int9 = recovery0.maxRetries;
        long long10 = recovery0.getDelay();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
    }

    @Test
    public void test10632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10632");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.threadedTwoPhaseCommit = true;
        long long8 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setConsoleFileCount((int) (byte) -1);
        atomikosProperties0.service = "hi!";
        java.lang.String str13 = atomikosProperties0.getService();
        atomikosProperties0.setLogBaseName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        atomikosProperties0.setTransactionManagerUniqueName("{}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test10633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10633");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setLogBaseDir("{-1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setAllowSubTransactions(true);
        atomikosProperties10.maxActives = (short) -1;
        atomikosProperties10.setService("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setAllowSubTransactions(true);
        boolean boolean20 = atomikosProperties17.enableLogging;
        boolean boolean21 = atomikosProperties17.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel22 = atomikosProperties17.consoleLogLevel;
        atomikosProperties10.setConsoleLogLevel(atomikosLoggingLevel22);
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel22;
        atomikosProperties0.setConsoleFileCount((int) (byte) 0);
        java.util.Properties properties27 = atomikosProperties0.asProperties();
        boolean boolean28 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.setConsoleFileLimit(35);
        java.lang.String str31 = atomikosProperties0.getConsoleFileName();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel22 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel22.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tm.out" + "'", str31, "tm.out");
    }

    @Test
    public void test10634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10634");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.service = "{com.atomikos.icatch.tm.out=hi!}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = atomikosProperties0.getRecovery();
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=10, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={1.0=-1}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertNotNull(recovery3);
    }

    @Test
    public void test10635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10635");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        int int6 = atomikosProperties0.consoleFileCount;
        long long7 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setOutputDir("{100=100}");
        atomikosProperties0.logBaseName = "{{}={}}";
        long long12 = atomikosProperties0.defaultJtaTimeout;
        boolean boolean13 = atomikosProperties0.isEnableLogging();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test10636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10636");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.forgetOrphanedLogEntriesDelay = 'a';
        long long5 = recovery0.retryInterval;
        recovery0.forgetOrphanedLogEntriesDelay = 0L;
        long long8 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long9 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long10 = recovery0.retryInterval;
        long long11 = recovery0.getDelay();
        recovery0.forgetOrphanedLogEntriesDelay = 21;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L + "'", long10 == 100L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
    }

    @Test
    public void test10637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10637");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        java.lang.String str10 = atomikosProperties0.logBaseDir;
        atomikosProperties0.logBaseDir = "hi!";
        java.lang.String str13 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setEnableLogging(false);
        java.lang.String str16 = atomikosProperties0.consoleFileName;
        boolean boolean17 = atomikosProperties0.enableLogging;
        atomikosProperties0.consoleFileName = "";
        int int20 = atomikosProperties0.getConsoleFileLimit();
        int int21 = atomikosProperties0.consoleFileCount;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tm.out" + "'", str13, "tm.out");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tm.out" + "'", str16, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test10638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10638");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.setCheckpointInterval((long) 5);
        atomikosProperties0.setConsoleFileCount(0);
        boolean boolean11 = atomikosProperties0.isThreadedTwoPhaseCommit();
        int int12 = atomikosProperties0.maxActives;
        atomikosProperties0.setConsoleFileName("{={-1.0=100}, -1.0=100}");
        atomikosProperties0.setConsoleFileCount(50);
        java.lang.String str17 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.logBaseName = "{}";
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=10, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={1.0=-1}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test10639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10639");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties0.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet5 = properties0.entrySet();
        java.util.Properties properties6 = new java.util.Properties(properties0);
        int int7 = properties6.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties9 = atomikosProperties8.asProperties();
        atomikosProperties8.service = "{-1.0=100}";
        java.lang.String str12 = atomikosProperties8.getTransactionManagerUniqueName();
        atomikosProperties8.consoleFileName = "hi!";
        atomikosProperties8.setCheckpointInterval((long) 5);
        atomikosProperties8.setConsoleFileCount(0);
        atomikosProperties8.setService("{-1.0=100}");
        atomikosProperties8.setDefaultJtaTimeout((long) 100);
        atomikosProperties8.setLogBaseDir("tmlog");
        atomikosProperties8.setEnableLogging(false);
        java.lang.Class<?> wildcardClass27 = atomikosProperties8.getClass();
        boolean boolean28 = properties6.equals((java.lang.Object) atomikosProperties8);
        java.io.PrintStream printStream29 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties6.list(printStream29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objEntrySet5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test10640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10640");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.setForgetOrphanedLogEntriesDelay((long) 5);
        recovery0.setRetryInterval((long) (-1));
        recovery0.setForgetOrphanedLogEntriesDelay(0L);
        long long9 = recovery0.retryInterval;
        recovery0.setRetryInterval((long) (short) 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    }

    @Test
    public void test10641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10641");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxTimeout((long) (byte) 0);
        atomikosProperties0.setAllowSubTransactions(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties12 = atomikosProperties11.asProperties();
        atomikosProperties11.service = "{-1.0=100}";
        java.lang.String str15 = atomikosProperties11.getTransactionManagerUniqueName();
        boolean boolean16 = atomikosProperties11.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel17 = atomikosProperties11.getConsoleLogLevel();
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel17;
        java.lang.String str19 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives(5);
        atomikosProperties0.setDefaultJtaTimeout(10000L);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery24 = atomikosProperties0.getRecovery();
        recovery24.setDelay(10000L);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel17 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel17.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(recovery24);
    }

    @Test
    public void test10642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10642");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties12 = new java.util.Properties();
        java.lang.String str13 = properties12.toString();
        java.lang.Object obj15 = properties12.remove((java.lang.Object) (short) 100);
        java.lang.Object obj18 = properties12.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj19 = properties12.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties12.elements();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties12);
        boolean boolean23 = properties0.equals((java.lang.Object) 1.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean25 = atomikosProperties24.isThreadedTwoPhaseCommit();
        long long26 = atomikosProperties24.getCheckpointInterval();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean28 = atomikosProperties27.isSerialJtaTransactions();
        atomikosProperties27.logBaseName = "{-1.0=100}";
        int int31 = atomikosProperties27.maxActives;
        int int32 = atomikosProperties27.getConsoleFileCount();
        boolean boolean33 = properties0.remove((java.lang.Object) atomikosProperties24, (java.lang.Object) atomikosProperties27);
        atomikosProperties27.setThreadedTwoPhaseCommit(false);
        java.lang.String str36 = atomikosProperties27.transactionManagerUniqueName;
        int int37 = atomikosProperties27.consoleFileCount;
        java.util.Properties properties38 = atomikosProperties27.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery39 = atomikosProperties27.recovery;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{}" + "'", str13, "{}");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 500L + "'", long26 == 500L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 50 + "'", int31 == 50);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertNotNull(recovery39);
    }

    @Test
    public void test10643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10643");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties7 = new java.util.Properties();
        java.lang.String str8 = properties7.toString();
        java.lang.Object obj10 = properties7.remove((java.lang.Object) (short) 100);
        java.lang.Object obj13 = properties7.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj14 = properties7.clone();
        java.lang.String str16 = properties7.getProperty("{}");
        java.lang.Object obj19 = properties7.put((java.lang.Object) 86400000L, (java.lang.Object) "{-1.0=100}");
        boolean boolean20 = properties0.containsKey((java.lang.Object) properties7);
        java.util.Properties properties21 = new java.util.Properties(properties7);
        java.util.Properties properties22 = new java.util.Properties(properties7);
        java.lang.String str24 = properties7.getProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "{1.0=-1}");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test10644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10644");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        java.lang.Object obj14 = properties3.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj17 = properties3.setProperty("", "{-1.0=100}");
        boolean boolean18 = properties3.isEmpty();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        java.util.Properties properties21 = new java.util.Properties(properties19);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet22 = properties21.entrySet();
        java.util.Properties properties24 = new java.util.Properties();
        java.lang.Object obj26 = properties24.remove((java.lang.Object) (-1.0d));
        int int27 = properties24.size();
        boolean boolean28 = properties3.replace((java.lang.Object) properties21, (java.lang.Object) 100L, (java.lang.Object) properties24);
        boolean boolean29 = properties3.isEmpty();
        java.util.Set<java.lang.Object> objSet30 = properties3.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties32 = atomikosProperties31.asProperties();
        atomikosProperties31.service = "{-1.0=100}";
        long long35 = atomikosProperties31.getDefaultJtaTimeout();
        long long36 = atomikosProperties31.getMaxTimeout();
        int int37 = atomikosProperties31.consoleFileCount;
        java.lang.String str38 = atomikosProperties31.getOutputDir();
        boolean boolean39 = properties1.remove((java.lang.Object) properties3, (java.lang.Object) atomikosProperties31);
        boolean boolean40 = atomikosProperties31.enableLogging;
        long long41 = atomikosProperties31.getCheckpointInterval();
        boolean boolean42 = atomikosProperties31.forceShutdownOnVmExit;
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertNotNull(objEntrySet22);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objSet30);
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10000L + "'", long35 == 10000L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 300000L + "'", long36 == 300000L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 500L + "'", long41 == 500L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test10645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10645");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties12 = new java.util.Properties();
        java.lang.String str13 = properties12.toString();
        java.lang.Object obj15 = properties12.remove((java.lang.Object) (short) 100);
        java.lang.Object obj18 = properties12.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj19 = properties12.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties12.elements();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties12);
        java.lang.Object obj24 = properties12.setProperty("{={-1.0=100}, -1.0=100}", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties26 = atomikosProperties25.asProperties();
        atomikosProperties25.service = "{-1.0=100}";
        long long29 = atomikosProperties25.getDefaultJtaTimeout();
        atomikosProperties25.enableLogging = false;
        java.lang.String str32 = atomikosProperties25.getTransactionManagerUniqueName();
        boolean boolean33 = properties12.contains((java.lang.Object) atomikosProperties25);
        java.lang.Object obj34 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj35 = properties12.remove(obj34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{}" + "'", str13, "{}");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10000L + "'", long29 == 10000L);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test10646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10646");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        int int5 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setTransactionManagerUniqueName("tmlog");
        atomikosProperties0.setEnableLogging(true);
        boolean boolean10 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.serialJtaTransactions = true;
        java.lang.String str13 = atomikosProperties0.logBaseName;
        java.lang.String str14 = atomikosProperties0.getLogBaseName();
        long long15 = atomikosProperties0.maxTimeout;
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tmlog" + "'", str14, "tmlog");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 300000L + "'", long15 == 300000L);
    }

    @Test
    public void test10647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10647");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        long long7 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setConsoleFileCount((int) (byte) 1);
        java.lang.String str10 = atomikosProperties0.logBaseDir;
        atomikosProperties0.defaultJtaTimeout = 1;
        atomikosProperties0.enableLogging = false;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test10648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10648");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = (byte) 10;
        long long7 = atomikosProperties0.getMaxTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.recovery;
        java.lang.String str11 = atomikosProperties0.getOutputDir();
        atomikosProperties0.serialJtaTransactions = true;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery14 = atomikosProperties0.getRecovery();
        recovery14.setDelay(500L);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(recovery14);
    }

    @Test
    public void test10649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10649");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        int int6 = atomikosProperties0.consoleFileCount;
        long long7 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.serialJtaTransactions = true;
        java.lang.String str10 = atomikosProperties0.logBaseName;
        long long11 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery12 = atomikosProperties0.recovery;
        atomikosProperties0.setMaxTimeout(500L);
        java.lang.String str15 = atomikosProperties0.getOutputDir();
        atomikosProperties0.enableLogging = false;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertNotNull(recovery12);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test10650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10650");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        boolean boolean10 = atomikosProperties2.forceShutdownOnVmExit;
        java.util.Properties properties11 = new java.util.Properties();
        java.lang.String str12 = properties11.toString();
        java.lang.Object obj14 = properties11.remove((java.lang.Object) (short) 100);
        java.lang.Object obj17 = properties11.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj18 = properties11.clone();
        java.lang.String str20 = properties11.getProperty("{}");
        java.lang.Object obj23 = properties11.put((java.lang.Object) 86400000L, (java.lang.Object) "{-1.0=100}");
        atomikosProperties2.set(properties11, "tmlog", (java.lang.Object) 5L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties28 = atomikosProperties27.asProperties();
        atomikosProperties27.service = "{-1.0=100}";
        long long31 = atomikosProperties27.getDefaultJtaTimeout();
        atomikosProperties27.setThreadedTwoPhaseCommit(true);
        java.lang.String str34 = atomikosProperties27.getLogBaseName();
        java.lang.String str35 = atomikosProperties27.consoleFileName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean37 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.logBaseName = "{-1.0=100}";
        int int40 = atomikosProperties36.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery41 = atomikosProperties36.getRecovery();
        atomikosProperties36.setConsoleFileCount((int) (byte) 100);
        atomikosProperties36.setAllowSubTransactions(true);
        atomikosProperties36.setService("tm.out");
        int int48 = atomikosProperties36.consoleFileLimit;
        atomikosProperties36.setLogBaseName("");
        java.util.Properties properties51 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration52 = properties51.propertyNames();
        java.lang.Object obj53 = properties51.clone();
        java.util.Collection<java.lang.Object> objCollection54 = properties51.values();
        boolean boolean55 = properties11.replace((java.lang.Object) str35, (java.lang.Object) atomikosProperties36, (java.lang.Object) objCollection54);
        boolean boolean56 = properties11.isEmpty();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{}" + "'", str12, "{}");
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{1.0=-1}");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10000L + "'", long31 == 10000L);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tmlog" + "'", str34, "tmlog");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tm.out" + "'", str35, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 50 + "'", int40 == 50);
        org.junit.Assert.assertNotNull(recovery41);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(wildcardEnumeration52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "{}");
        org.junit.Assert.assertNotNull(objCollection54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test10651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10651");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        atomikosProperties0.setAllowSubTransactions(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery7 = atomikosProperties0.getRecovery();
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        long long11 = recovery10.forgetOrphanedLogEntriesDelay;
        recovery10.setMaxRetries((int) (short) 0);
        int int14 = recovery10.maxRetries;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery7);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 86400000L + "'", long11 == 86400000L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test10652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10652");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setMaxActives(0);
        boolean boolean7 = atomikosProperties0.threadedTwoPhaseCommit;
        boolean boolean8 = atomikosProperties0.allowSubTransactions;
        atomikosProperties0.logBaseDir = "{}";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel11 = atomikosProperties0.getConsoleLogLevel();
        atomikosProperties0.setService("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=true, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=35, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=10, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel11 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel11.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test10653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10653");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        atomikosProperties0.setTransactionManagerUniqueName("{-1.0=100}");
        atomikosProperties0.consoleFileCount = 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = atomikosProperties0.getRecovery();
        atomikosProperties0.setMaxActives((int) (byte) 0);
        long long14 = atomikosProperties0.getMaxTimeout();
        long long15 = atomikosProperties0.checkpointInterval;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNotNull(recovery11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 300000L + "'", long14 == 300000L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
    }

    @Test
    public void test10654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10654");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        long long5 = atomikosProperties0.defaultJtaTimeout;
        long long6 = atomikosProperties0.getMaxTimeout();
        boolean boolean7 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setService("{-1.0=100}");
        atomikosProperties0.setOutputDir("{}");
        atomikosProperties0.setSerialJtaTransactions(true);
        java.lang.String str14 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.maxTimeout = 3;
        atomikosProperties0.consoleFileLimit = 50;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 300000L + "'", long6 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test10655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10655");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setLogBaseDir("{-1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setAllowSubTransactions(true);
        atomikosProperties10.maxActives = (short) -1;
        atomikosProperties10.setService("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setAllowSubTransactions(true);
        boolean boolean20 = atomikosProperties17.enableLogging;
        boolean boolean21 = atomikosProperties17.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel22 = atomikosProperties17.consoleLogLevel;
        atomikosProperties10.setConsoleLogLevel(atomikosLoggingLevel22);
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel22;
        atomikosProperties0.setConsoleFileCount((int) (byte) 0);
        long long27 = atomikosProperties0.maxTimeout;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel22 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel22.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 300000L + "'", long27 == 300000L);
    }

    @Test
    public void test10656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10656");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        atomikosProperties0.consoleFileLimit = 32;
        java.lang.String str7 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setEnableLogging(false);
        int int10 = atomikosProperties0.getMaxActives();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
    }

    @Test
    public void test10657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10657");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        java.util.Properties properties2 = new java.util.Properties();
        java.lang.Object obj4 = properties2.remove((java.lang.Object) (-1.0d));
        boolean boolean5 = properties2.isEmpty();
        int int6 = properties2.size();
        java.lang.String str8 = properties2.getProperty("{}");
        java.lang.Object obj9 = properties1.remove((java.lang.Object) properties2);
        java.lang.String str11 = properties2.getProperty("tmlog");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setEnableLogging(true);
        atomikosProperties12.consoleFileCount = 0;
        int int17 = atomikosProperties12.getMaxActives();
        java.lang.String str18 = atomikosProperties12.getLogBaseDir();
        java.lang.String str19 = atomikosProperties12.service;
        atomikosProperties12.setConsoleFileCount((int) (byte) 1);
        java.lang.Object obj22 = properties2.get((java.lang.Object) atomikosProperties12);
        atomikosProperties12.checkpointInterval = (byte) 100;
        java.util.Properties properties25 = new java.util.Properties();
        java.lang.String str26 = properties25.toString();
        java.lang.Object obj28 = properties25.remove((java.lang.Object) (short) 100);
        java.lang.Object obj31 = properties25.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean33 = properties25.containsKey((java.lang.Object) 0L);
        java.lang.Object obj36 = properties25.replace((java.lang.Object) false, (java.lang.Object) ' ');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties38 = atomikosProperties37.asProperties();
        atomikosProperties37.service = "{-1.0=100}";
        long long41 = atomikosProperties37.getDefaultJtaTimeout();
        atomikosProperties37.serialJtaTransactions = true;
        long long44 = atomikosProperties37.maxTimeout;
        atomikosProperties37.setLogBaseDir("{-1.0=100}");
        int int47 = atomikosProperties37.getConsoleFileCount();
        atomikosProperties37.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties51 = atomikosProperties50.asProperties();
        atomikosProperties50.service = "{-1.0=100}";
        long long54 = atomikosProperties50.getDefaultJtaTimeout();
        atomikosProperties50.setTransactionManagerUniqueName("{}");
        atomikosProperties50.consoleFileName = "hi!";
        int int59 = atomikosProperties50.getConsoleFileCount();
        boolean boolean60 = atomikosProperties50.isThreadedTwoPhaseCommit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel61 = atomikosProperties50.consoleLogLevel;
        atomikosProperties37.consoleLogLevel = atomikosLoggingLevel61;
        atomikosProperties37.setMaxTimeout(500L);
        atomikosProperties37.consoleFileLimit = 18;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties67 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties67.setAllowSubTransactions(true);
        java.lang.String str70 = atomikosProperties67.transactionManagerUniqueName;
        java.lang.String str71 = atomikosProperties67.consoleFileName;
        long long72 = atomikosProperties67.getDefaultJtaTimeout();
        java.lang.String str73 = atomikosProperties67.getConsoleFileName();
        atomikosProperties67.serialJtaTransactions = true;
        boolean boolean76 = properties25.remove((java.lang.Object) atomikosProperties37, (java.lang.Object) atomikosProperties67);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties78 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean79 = atomikosProperties78.isSerialJtaTransactions();
        atomikosProperties78.logBaseName = "{-1.0=100}";
        int int82 = atomikosProperties78.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery83 = atomikosProperties78.getRecovery();
        atomikosProperties78.setConsoleFileCount((int) (byte) 100);
        atomikosProperties78.maxTimeout = 50;
        java.lang.String str88 = atomikosProperties78.getConsoleFileName();
        java.lang.String str89 = atomikosProperties78.logBaseDir;
        java.lang.String str90 = atomikosProperties78.consoleFileName;
        boolean boolean91 = atomikosProperties78.isForceShutdownOnVmExit();
        atomikosProperties12.set(properties25, "{{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}=hi!}", (java.lang.Object) boolean91);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{}" + "'", str26, "{}");
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10000L + "'", long41 == 10000L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 300000L + "'", long44 == 300000L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 10000L + "'", long54 == 10000L);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel61 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel61.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "tm.out" + "'", str71, "tm.out");
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 10000L + "'", long72 == 10000L);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "tm.out" + "'", str73, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 50 + "'", int82 == 50);
        org.junit.Assert.assertNotNull(recovery83);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "tm.out" + "'", str88, "tm.out");
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "tm.out" + "'", str90, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test10658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10658");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        java.lang.Object obj14 = properties3.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj17 = properties3.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties3.keys();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        boolean boolean21 = properties19.isEmpty();
        java.lang.Object obj24 = properties19.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties19.elements();
        java.lang.Object obj26 = properties2.replace((java.lang.Object) objEnumeration18, (java.lang.Object) properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties19.elements();
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties19.keys();
        java.util.Properties properties29 = new java.util.Properties(properties19);
        java.util.Properties properties30 = new java.util.Properties();
        java.lang.String str31 = properties30.toString();
        java.lang.Object obj33 = properties30.remove((java.lang.Object) (short) 100);
        java.lang.Object obj36 = properties30.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean38 = properties30.containsKey((java.lang.Object) 0L);
        java.lang.Object obj41 = properties30.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj44 = properties30.setProperty("", "{-1.0=100}");
        java.lang.Object obj45 = properties30.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery46 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery46.retryInterval = (short) 100;
        recovery46.forgetOrphanedLogEntriesDelay = 'a';
        boolean boolean51 = properties30.equals((java.lang.Object) 'a');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties53 = atomikosProperties52.asProperties();
        atomikosProperties52.service = "{-1.0=100}";
        java.lang.String str56 = atomikosProperties52.getTransactionManagerUniqueName();
        atomikosProperties52.consoleFileName = "hi!";
        atomikosProperties52.setCheckpointInterval((long) 5);
        atomikosProperties52.setConsoleFileCount(0);
        atomikosProperties52.setService("{-1.0=100}");
        atomikosProperties52.setDefaultJtaTimeout((long) 100);
        atomikosProperties52.defaultJtaTimeout = 32;
        atomikosProperties52.setService("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        long long71 = atomikosProperties52.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel72 = atomikosProperties52.getConsoleLogLevel();
        boolean boolean73 = properties30.contains((java.lang.Object) atomikosProperties52);
        long long74 = atomikosProperties52.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties75 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean76 = atomikosProperties75.isSerialJtaTransactions();
        atomikosProperties75.logBaseName = "{-1.0=100}";
        int int79 = atomikosProperties75.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery80 = atomikosProperties75.getRecovery();
        atomikosProperties75.setConsoleFileCount((int) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel83 = null;
        atomikosProperties75.consoleLogLevel = atomikosLoggingLevel83;
        java.lang.String str85 = atomikosProperties75.logBaseDir;
        atomikosProperties75.checkpointInterval = (byte) 0;
        java.lang.String str88 = atomikosProperties75.getTransactionManagerUniqueName();
        atomikosProperties75.allowSubTransactions = false;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery91 = atomikosProperties75.getRecovery();
        java.lang.Object obj92 = properties19.put((java.lang.Object) atomikosProperties52, (java.lang.Object) recovery91);
        java.util.Properties properties93 = atomikosProperties52.asProperties();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{}" + "'", str31, "{}");
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(obj45);
// flaky:         org.junit.Assert.assertEquals(obj45.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(properties53);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 32L + "'", long71 == 32L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel72 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel72.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 5L + "'", long74 == 5L);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 50 + "'", int79 == 50);
        org.junit.Assert.assertNotNull(recovery80);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNotNull(recovery91);
        org.junit.Assert.assertNull(obj92);
        org.junit.Assert.assertNotNull(properties93);
    }

    @Test
    public void test10659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10659");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxTimeout((long) (byte) 0);
        atomikosProperties0.setAllowSubTransactions(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties12 = atomikosProperties11.asProperties();
        atomikosProperties11.service = "{-1.0=100}";
        java.lang.String str15 = atomikosProperties11.getTransactionManagerUniqueName();
        boolean boolean16 = atomikosProperties11.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel17 = atomikosProperties11.getConsoleLogLevel();
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel17;
        long long19 = atomikosProperties0.checkpointInterval;
        int int20 = atomikosProperties0.getMaxActives();
        int int21 = atomikosProperties0.getConsoleFileLimit();
        java.lang.Class<?> wildcardClass22 = atomikosProperties0.getClass();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel17 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel17.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 500L + "'", long19 == 500L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 50 + "'", int20 == 50);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test10660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10660");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setTransactionManagerUniqueName("{}");
        atomikosProperties0.consoleFileName = "hi!";
        int int9 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.consoleFileCount = (byte) 1;
        java.lang.String str12 = atomikosProperties0.transactionManagerUniqueName;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{}" + "'", str12, "{}");
    }

    @Test
    public void test10661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10661");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        int int5 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setDefaultJtaTimeout((long) ' ');
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        boolean boolean10 = atomikosProperties0.isEnableLogging();
        boolean boolean11 = atomikosProperties0.serialJtaTransactions;
        java.lang.String str12 = atomikosProperties0.outputDir;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test10662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10662");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setLogBaseDir("{-1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setAllowSubTransactions(true);
        atomikosProperties10.maxActives = (short) -1;
        atomikosProperties10.setService("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setAllowSubTransactions(true);
        boolean boolean20 = atomikosProperties17.enableLogging;
        boolean boolean21 = atomikosProperties17.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel22 = atomikosProperties17.consoleLogLevel;
        atomikosProperties10.setConsoleLogLevel(atomikosLoggingLevel22);
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel22;
        atomikosProperties0.setConsoleFileCount((int) (byte) 0);
        java.util.Properties properties27 = atomikosProperties0.asProperties();
        atomikosProperties0.setLogBaseDir("{{}={}}");
        atomikosProperties0.setTransactionManagerUniqueName("hi!");
        int int32 = atomikosProperties0.consoleFileCount;
        java.lang.String str33 = atomikosProperties0.getService();
        java.lang.String str34 = atomikosProperties0.getLogBaseName();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel22 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel22.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "{-1.0=100}" + "'", str33, "{-1.0=100}");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tmlog" + "'", str34, "tmlog");
    }

    @Test
    public void test10663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10663");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        boolean boolean12 = properties0.containsValue((java.lang.Object) 0L);
        java.util.Set<java.lang.String> strSet13 = properties0.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties15 = atomikosProperties14.asProperties();
        atomikosProperties14.service = "{-1.0=100}";
        java.lang.String str18 = atomikosProperties14.getLogBaseName();
        java.lang.String str19 = atomikosProperties14.transactionManagerUniqueName;
        atomikosProperties14.consoleFileName = "";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.setAllowSubTransactions(true);
        atomikosProperties22.logBaseName = "{={-1.0=100}, -1.0=100}";
        int int27 = atomikosProperties22.getConsoleFileLimit();
        java.lang.Object obj28 = properties0.putIfAbsent((java.lang.Object) atomikosProperties14, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery29 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long30 = recovery29.getRetryInterval();
        long long31 = recovery29.getDelay();
        long long32 = recovery29.getDelay();
        recovery29.setForgetOrphanedLogEntriesDelay(10000L);
        recovery29.retryInterval = '4';
        recovery29.setRetryInterval((long) (short) 0);
        recovery29.setMaxRetries(0);
        recovery29.setDelay((long) 2);
        java.lang.Object obj43 = properties0.get((java.lang.Object) recovery29);
        boolean boolean44 = properties0.isEmpty();
        java.io.PrintWriter printWriter45 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.list(printWriter45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10000L + "'", long30 == 10000L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10000L + "'", long31 == 10000L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10000L + "'", long32 == 10000L);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test10664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10664");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.lang.Object obj5 = properties0.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.Object obj8 = properties6.remove((java.lang.Object) (-1.0d));
        boolean boolean9 = properties6.isEmpty();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.lang.Object obj13 = properties10.remove((java.lang.Object) (short) 100);
        java.lang.Object obj16 = properties10.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean18 = properties10.containsKey((java.lang.Object) 0L);
        java.lang.Object obj21 = properties10.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj24 = properties10.setProperty("", "{-1.0=100}");
        java.lang.Object obj25 = properties10.clone();
        java.lang.Object obj26 = properties6.get((java.lang.Object) properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.setEnableLogging(true);
        atomikosProperties27.consoleFileCount = 0;
        int int32 = atomikosProperties27.getMaxActives();
        java.lang.String str33 = atomikosProperties27.getLogBaseDir();
        java.lang.String str34 = atomikosProperties27.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery35 = atomikosProperties27.getRecovery();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties37 = atomikosProperties36.asProperties();
        atomikosProperties36.service = "{-1.0=100}";
        long long40 = atomikosProperties36.getDefaultJtaTimeout();
        atomikosProperties36.setThreadedTwoPhaseCommit(true);
        boolean boolean43 = atomikosProperties36.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery44 = atomikosProperties36.recovery;
        atomikosProperties36.setLogBaseDir("");
        java.lang.Object obj47 = properties10.replace((java.lang.Object) recovery35, (java.lang.Object) "");
        java.util.Properties properties48 = new java.util.Properties();
        java.lang.Object obj50 = properties48.remove((java.lang.Object) (-1.0d));
        boolean boolean52 = properties48.contains((java.lang.Object) "{-1.0=100}");
        boolean boolean53 = properties10.equals((java.lang.Object) "{-1.0=100}");
        properties10.clear();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties56 = new java.util.Properties();
        java.lang.Object obj59 = properties56.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration60 = properties56.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration61 = properties56.elements();
        java.util.Properties properties62 = new java.util.Properties(properties56);
        java.util.Set<java.lang.Object> objSet63 = properties56.keySet();
        java.util.Set<java.lang.String> strSet64 = properties56.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery65 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery65.retryInterval = (short) 100;
        recovery65.forgetOrphanedLogEntriesDelay = 'a';
        long long70 = recovery65.getDelay();
        long long71 = recovery65.getRetryInterval();
        recovery65.setRetryInterval((long) 'a');
        long long74 = recovery65.getRetryInterval();
        int int75 = recovery65.maxRetries;
        java.lang.Object obj76 = properties0.put((java.lang.Object) properties56, (java.lang.Object) recovery65);
        java.lang.Object obj79 = properties0.setProperty("{-1.0=100}", "hi!");
        java.util.Properties properties80 = new java.util.Properties();
        java.lang.Object obj82 = properties80.remove((java.lang.Object) (-1.0d));
        boolean boolean84 = properties80.contains((java.lang.Object) "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration85 = properties80.keys();
        java.util.Enumeration<?> wildcardEnumeration86 = properties80.propertyNames();
        java.lang.String str87 = properties80.toString();
        java.lang.Object obj88 = properties0.remove((java.lang.Object) str87);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(obj25);
// flaky:         org.junit.Assert.assertEquals(obj25.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(recovery35);
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10000L + "'", long40 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(recovery44);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNotNull(objEnumeration60);
        org.junit.Assert.assertNotNull(objEnumeration61);
        org.junit.Assert.assertNotNull(objSet63);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 10000L + "'", long70 == 10000L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 100L + "'", long71 == 100L);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 97L + "'", long74 == 97L);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 5 + "'", int75 == 5);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertNull(obj82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(objEnumeration85);
        org.junit.Assert.assertNotNull(wildcardEnumeration86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "{}" + "'", str87, "{}");
        org.junit.Assert.assertNull(obj88);
    }

    @Test
    public void test10665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10665");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.String str9 = properties8.toString();
        java.lang.Object obj11 = properties8.remove((java.lang.Object) (short) 100);
        java.lang.Object obj14 = properties8.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj15 = properties8.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties8.elements();
        java.lang.Object obj17 = properties0.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration16);
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration19 = properties18.propertyNames();
        java.lang.Object obj20 = properties18.clone();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        boolean boolean23 = properties21.isEmpty();
        java.lang.Object obj26 = properties21.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties21.elements();
        java.lang.Object obj28 = properties0.put(obj20, (java.lang.Object) objEnumeration27);
        properties0.clear();
        java.util.Properties properties30 = new java.util.Properties();
        java.lang.Object obj32 = properties30.remove((java.lang.Object) (-1.0d));
        boolean boolean33 = properties30.isEmpty();
        int int34 = properties30.size();
        java.lang.String str36 = properties30.getProperty("{}");
        java.util.Properties properties37 = new java.util.Properties();
        java.lang.String str38 = properties37.toString();
        java.lang.Object obj40 = properties37.remove((java.lang.Object) (short) 100);
        java.lang.Object obj43 = properties37.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean45 = properties37.containsKey((java.lang.Object) 0L);
        java.lang.Object obj48 = properties37.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties49 = new java.util.Properties(properties37);
        java.util.Enumeration<java.lang.Object> objEnumeration50 = properties37.keys();
        java.lang.Object obj51 = properties0.replace((java.lang.Object) properties30, (java.lang.Object) properties37);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties53 = atomikosProperties52.asProperties();
        atomikosProperties52.service = "{-1.0=100}";
        java.lang.String str56 = atomikosProperties52.getTransactionManagerUniqueName();
        boolean boolean57 = atomikosProperties52.isSerialJtaTransactions();
        int int58 = atomikosProperties52.getConsoleFileLimit();
        boolean boolean59 = atomikosProperties52.allowSubTransactions;
        java.lang.Object obj60 = properties0.remove((java.lang.Object) boolean59);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(wildcardEnumeration19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{}" + "'", str38, "{}");
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(objEnumeration50);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(properties53);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNull(obj60);
    }

    @Test
    public void test10666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10666");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties0.setMaxActives(100);
        java.lang.String str9 = atomikosProperties0.logBaseDir;
        atomikosProperties0.consoleFileCount = (short) 0;
        java.lang.String str12 = atomikosProperties0.logBaseName;
        boolean boolean13 = atomikosProperties0.serialJtaTransactions;
        boolean boolean14 = atomikosProperties0.isEnableLogging();
        java.lang.String str15 = atomikosProperties0.service;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{-1.0=100}" + "'", str15, "{-1.0=100}");
    }

    @Test
    public void test10667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10667");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties0.setMaxActives(100);
        java.lang.String str9 = atomikosProperties0.logBaseDir;
        atomikosProperties0.consoleFileCount = (short) 0;
        atomikosProperties0.defaultJtaTimeout = 10000L;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = atomikosProperties0.consoleLogLevel;
        long long15 = atomikosProperties0.defaultJtaTimeout;
        java.lang.String str16 = atomikosProperties0.logBaseDir;
        java.lang.String str17 = atomikosProperties0.logBaseName;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel14 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel14.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
    }

    @Test
    public void test10668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10668");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        java.lang.String str6 = atomikosProperties0.getOutputDir();
        java.lang.String str7 = atomikosProperties0.service;
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test10669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10669");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties12 = new java.util.Properties();
        java.lang.String str13 = properties12.toString();
        java.lang.Object obj15 = properties12.remove((java.lang.Object) (short) 100);
        java.lang.Object obj18 = properties12.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj19 = properties12.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties12.elements();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties12);
        java.lang.Object obj24 = properties12.setProperty("{={-1.0=100}, -1.0=100}", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery25 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery25.retryInterval = (short) 100;
        recovery25.forgetOrphanedLogEntriesDelay = 'a';
        long long30 = recovery25.getDelay();
        int int31 = recovery25.maxRetries;
        recovery25.delay = 1L;
        boolean boolean34 = properties12.contains((java.lang.Object) recovery25);
        java.util.Enumeration<java.lang.Object> objEnumeration35 = properties12.keys();
        java.util.Properties properties36 = new java.util.Properties(properties12);
        int int37 = properties12.size();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration<?> wildcardEnumeration38 = properties12.propertyNames();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Float cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{}" + "'", str13, "{}");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10000L + "'", long30 == 10000L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objEnumeration35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
    }

    @Test
    public void test10670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10670");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties0.setService("tm.out");
        int int5 = atomikosProperties0.consoleFileLimit;
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet7 = properties6.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long9 = recovery8.forgetOrphanedLogEntriesDelay;
        long long10 = recovery8.getForgetOrphanedLogEntriesDelay();
        long long11 = recovery8.getForgetOrphanedLogEntriesDelay();
        boolean boolean12 = properties6.contains((java.lang.Object) long11);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86400000L + "'", long9 == 86400000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 86400000L + "'", long10 == 86400000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 86400000L + "'", long11 == 86400000L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test10671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10671");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.forgetOrphanedLogEntriesDelay = 'a';
        long long5 = recovery0.retryInterval;
        int int6 = recovery0.maxRetries;
        int int7 = recovery0.maxRetries;
        long long8 = recovery0.delay;
        recovery0.retryInterval = 19;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10000L + "'", long8 == 10000L);
    }

    @Test
    public void test10672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10672");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.String str9 = properties8.toString();
        java.lang.Object obj11 = properties8.remove((java.lang.Object) (short) 100);
        java.lang.Object obj14 = properties8.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj15 = properties8.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties8.elements();
        java.lang.Object obj17 = properties0.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration16);
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration19 = properties18.propertyNames();
        java.lang.Object obj20 = properties18.clone();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        boolean boolean23 = properties21.isEmpty();
        java.lang.Object obj26 = properties21.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties21.elements();
        java.lang.Object obj28 = properties0.put(obj20, (java.lang.Object) objEnumeration27);
        properties0.clear();
        java.util.Properties properties30 = new java.util.Properties();
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.Object obj33 = properties31.remove((java.lang.Object) (-1.0d));
        int int34 = properties31.size();
        java.util.Enumeration<java.lang.Object> objEnumeration35 = properties31.elements();
        java.util.Properties properties36 = new java.util.Properties();
        properties36.clear();
        java.lang.String str38 = properties36.toString();
        boolean boolean39 = properties0.replace((java.lang.Object) properties30, (java.lang.Object) properties31, (java.lang.Object) str38);
        java.lang.String str41 = properties0.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties43 = atomikosProperties42.asProperties();
        atomikosProperties42.service = "{-1.0=100}";
        long long46 = atomikosProperties42.getDefaultJtaTimeout();
        atomikosProperties42.serialJtaTransactions = true;
        long long49 = atomikosProperties42.getDefaultJtaTimeout();
        long long50 = atomikosProperties42.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery51 = atomikosProperties42.getRecovery();
        long long52 = atomikosProperties42.getCheckpointInterval();
        boolean boolean53 = atomikosProperties42.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean55 = atomikosProperties54.isSerialJtaTransactions();
        atomikosProperties54.logBaseName = "{-1.0=100}";
        int int58 = atomikosProperties54.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery59 = atomikosProperties54.getRecovery();
        atomikosProperties54.setConsoleFileCount((int) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel62 = null;
        atomikosProperties54.consoleLogLevel = atomikosLoggingLevel62;
        java.lang.String str64 = atomikosProperties54.logBaseDir;
        java.lang.String str65 = atomikosProperties54.consoleFileName;
        int int66 = atomikosProperties54.getConsoleFileCount();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties67 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties67.setAllowSubTransactions(true);
        boolean boolean70 = atomikosProperties67.enableLogging;
        boolean boolean71 = atomikosProperties67.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel72 = atomikosProperties67.consoleLogLevel;
        atomikosProperties54.setConsoleLogLevel(atomikosLoggingLevel72);
        java.lang.String str74 = atomikosProperties54.getService();
        atomikosProperties54.consoleFileCount = 0;
        int int77 = atomikosProperties54.getMaxActives();
        java.lang.String str78 = atomikosProperties54.outputDir;
        boolean boolean79 = properties0.remove((java.lang.Object) boolean53, (java.lang.Object) atomikosProperties54);
        java.lang.Object obj82 = properties0.setProperty("{1.0=-1, -1.0=100}", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        int int83 = properties0.size();
        java.util.Set<java.lang.Object> objSet84 = properties0.keySet();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(wildcardEnumeration19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(objEnumeration35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{}" + "'", str38, "{}");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10000L + "'", long46 == 10000L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10000L + "'", long49 == 10000L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 500L + "'", long50 == 500L);
        org.junit.Assert.assertNotNull(recovery51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 500L + "'", long52 == 500L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 50 + "'", int58 == 50);
        org.junit.Assert.assertNotNull(recovery59);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "tm.out" + "'", str65, "tm.out");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 100 + "'", int66 == 100);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel72 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel72.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 50 + "'", int77 == 50);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(obj82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(objSet84);
    }

    @Test
    public void test10673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10673");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.lang.Object obj5 = properties0.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties0.elements();
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Properties properties8 = new java.util.Properties(properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery9.retryInterval = (short) 100;
        recovery9.forgetOrphanedLogEntriesDelay = 'a';
        long long14 = recovery9.retryInterval;
        recovery9.forgetOrphanedLogEntriesDelay = 0L;
        long long17 = recovery9.getForgetOrphanedLogEntriesDelay();
        recovery9.setRetryInterval((long) 0);
        boolean boolean20 = properties0.remove((java.lang.Object) properties8, (java.lang.Object) 0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties22 = atomikosProperties21.asProperties();
        atomikosProperties21.service = "{-1.0=100}";
        long long25 = atomikosProperties21.getDefaultJtaTimeout();
        atomikosProperties21.enableLogging = false;
        atomikosProperties21.setMaxTimeout((long) (byte) 0);
        java.lang.Object obj30 = properties0.get((java.lang.Object) (byte) 0);
        java.util.Set<java.lang.String> strSet31 = properties0.stringPropertyNames();
        java.util.Properties properties32 = new java.util.Properties();
        java.lang.String str33 = properties32.toString();
        java.lang.Object obj35 = properties32.remove((java.lang.Object) (short) 100);
        java.lang.Object obj38 = properties32.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean40 = properties32.containsKey((java.lang.Object) 0L);
        java.lang.Object obj43 = properties32.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj46 = properties32.setProperty("", "{-1.0=100}");
        boolean boolean47 = properties32.isEmpty();
        java.util.Properties properties48 = new java.util.Properties();
        java.lang.String str49 = properties48.toString();
        java.util.Properties properties50 = new java.util.Properties(properties48);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet51 = properties50.entrySet();
        java.util.Properties properties53 = new java.util.Properties();
        java.lang.Object obj55 = properties53.remove((java.lang.Object) (-1.0d));
        int int56 = properties53.size();
        boolean boolean57 = properties32.replace((java.lang.Object) properties50, (java.lang.Object) 100L, (java.lang.Object) properties53);
        java.util.Collection<java.lang.Object> objCollection58 = properties32.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties60 = atomikosProperties59.asProperties();
        atomikosProperties59.service = "{-1.0=100}";
        java.lang.String str63 = atomikosProperties59.getTransactionManagerUniqueName();
        atomikosProperties59.consoleFileName = "hi!";
        atomikosProperties59.service = "tm.out";
        atomikosProperties59.logBaseName = "tm.out";
        atomikosProperties59.setThreadedTwoPhaseCommit(true);
        atomikosProperties59.setThreadedTwoPhaseCommit(false);
        boolean boolean74 = atomikosProperties59.isSerialJtaTransactions();
        atomikosProperties59.setService("{100=100}");
        java.lang.Object obj77 = properties0.replace((java.lang.Object) objCollection58, (java.lang.Object) atomikosProperties59);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L + "'", long14 == 100L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10000L + "'", long25 == 10000L);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "{}" + "'", str33, "{}");
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "{}" + "'", str49, "{}");
        org.junit.Assert.assertNotNull(objEntrySet51);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(objCollection58);
        org.junit.Assert.assertNotNull(properties60);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNull(obj77);
    }

    @Test
    public void test10674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10674");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        boolean boolean3 = properties2.isEmpty();
        java.lang.Object obj6 = properties2.setProperty("tmlog", "{}");
        java.lang.Object obj7 = properties2.clone();
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.String str9 = properties8.toString();
        java.lang.Object obj11 = properties8.remove((java.lang.Object) (short) 100);
        java.lang.Object obj14 = properties8.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean16 = properties8.containsKey((java.lang.Object) 0L);
        java.lang.Object obj19 = properties8.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties20 = new java.util.Properties();
        java.lang.String str21 = properties20.toString();
        java.lang.Object obj23 = properties20.remove((java.lang.Object) (short) 100);
        java.lang.Object obj26 = properties20.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj27 = properties20.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties20.elements();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties20);
        boolean boolean30 = properties2.containsValue((java.lang.Object) properties8);
        java.io.InputStream inputStream31 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.load(inputStream31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{tmlog={}}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{tmlog={}}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{tmlog={}}");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{}" + "'", str21, "{}");
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test10675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10675");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.maxTimeout;
        boolean boolean8 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.setCheckpointInterval(1L);
        atomikosProperties0.setOutputDir("{}");
        atomikosProperties0.consoleFileLimit = (-1);
        boolean boolean15 = atomikosProperties0.isAllowSubTransactions();
        java.lang.String str16 = atomikosProperties0.getService();
        atomikosProperties0.logBaseName = "tm.out";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{-1.0=100}" + "'", str16, "{-1.0=100}");
    }

    @Test
    public void test10676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10676");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.delay = (-1L);
        long long5 = recovery0.delay;
        recovery0.delay = (short) 1;
        long long8 = recovery0.getRetryInterval();
        int int9 = recovery0.maxRetries;
        int int10 = recovery0.getMaxRetries();
        recovery0.setMaxRetries((-1));
        long long13 = recovery0.forgetOrphanedLogEntriesDelay;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 86400000L + "'", long13 == 86400000L);
    }

    @Test
    public void test10677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10677");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        int int10 = atomikosProperties0.getMaxActives();
        boolean boolean11 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.setOutputDir("");
        java.lang.String str14 = atomikosProperties0.getTransactionManagerUniqueName();
        java.lang.String str15 = atomikosProperties0.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel16 = atomikosProperties0.consoleLogLevel;
        java.util.Properties properties17 = atomikosProperties0.asProperties();
        atomikosProperties0.setDefaultJtaTimeout((long) (byte) 1);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery20 = atomikosProperties0.recovery;
        recovery20.retryInterval = 5;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel16 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel16.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertNotNull(recovery20);
    }

    @Test
    public void test10678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10678");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        java.lang.String str15 = properties0.toString();
        java.util.Set<java.lang.String> strSet16 = properties0.stringPropertyNames();
        java.util.Properties properties17 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties19 = atomikosProperties18.asProperties();
        atomikosProperties18.service = "{-1.0=100}";
        long long22 = atomikosProperties18.getDefaultJtaTimeout();
        atomikosProperties18.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties18.logBaseName = "hi!";
        java.lang.String str27 = atomikosProperties18.transactionManagerUniqueName;
        atomikosProperties18.setLogBaseDir("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel30 = atomikosProperties18.getConsoleLogLevel();
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.Object obj33 = properties31.remove((java.lang.Object) (-1.0d));
        boolean boolean34 = properties31.isEmpty();
        java.util.Properties properties35 = new java.util.Properties();
        java.lang.String str36 = properties35.toString();
        java.lang.Object obj38 = properties35.remove((java.lang.Object) (short) 100);
        java.lang.Object obj41 = properties35.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean43 = properties35.containsKey((java.lang.Object) 0L);
        java.lang.Object obj46 = properties35.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj49 = properties35.setProperty("", "{-1.0=100}");
        java.lang.Object obj50 = properties35.clone();
        java.lang.Object obj51 = properties31.get((java.lang.Object) properties35);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties52.setEnableLogging(true);
        atomikosProperties52.consoleFileCount = 0;
        int int57 = atomikosProperties52.getMaxActives();
        java.lang.String str58 = atomikosProperties52.getLogBaseDir();
        java.lang.String str59 = atomikosProperties52.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery60 = atomikosProperties52.getRecovery();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties62 = atomikosProperties61.asProperties();
        atomikosProperties61.service = "{-1.0=100}";
        long long65 = atomikosProperties61.getDefaultJtaTimeout();
        atomikosProperties61.setThreadedTwoPhaseCommit(true);
        boolean boolean68 = atomikosProperties61.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery69 = atomikosProperties61.recovery;
        atomikosProperties61.setLogBaseDir("");
        java.lang.Object obj72 = properties35.replace((java.lang.Object) recovery60, (java.lang.Object) "");
        java.util.Properties properties73 = new java.util.Properties();
        java.lang.Object obj75 = properties73.remove((java.lang.Object) (-1.0d));
        boolean boolean77 = properties73.contains((java.lang.Object) "{-1.0=100}");
        boolean boolean78 = properties35.equals((java.lang.Object) "{-1.0=100}");
        properties35.clear();
        java.lang.Object obj80 = properties0.getOrDefault((java.lang.Object) atomikosProperties18, (java.lang.Object) properties35);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties81 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties82 = atomikosProperties81.asProperties();
        atomikosProperties81.service = "{-1.0=100}";
        long long85 = atomikosProperties81.getDefaultJtaTimeout();
        atomikosProperties81.serialJtaTransactions = true;
        long long88 = atomikosProperties81.maxTimeout;
        atomikosProperties81.setLogBaseDir("{-1.0=100}");
        int int91 = atomikosProperties81.getMaxActives();
        atomikosProperties81.forceShutdownOnVmExit = false;
        java.lang.String str94 = atomikosProperties81.getLogBaseDir();
        atomikosProperties81.defaultJtaTimeout = 18L;
        boolean boolean97 = properties35.equals((java.lang.Object) atomikosProperties81);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str15, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10000L + "'", long22 == 10000L);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel30 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel30.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "{}" + "'", str36, "{}");
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(obj50);
// flaky:         org.junit.Assert.assertEquals(obj50.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 50 + "'", int57 == 50);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(recovery60);
        org.junit.Assert.assertNotNull(properties62);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 10000L + "'", long65 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(recovery69);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertEquals(obj80.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj80), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj80), "{}");
        org.junit.Assert.assertNotNull(properties82);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 10000L + "'", long85 == 10000L);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 300000L + "'", long88 == 300000L);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 50 + "'", int91 == 50);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "{-1.0=100}" + "'", str94, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test10679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10679");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        java.lang.Object obj14 = properties3.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.String str16 = properties15.toString();
        java.lang.Object obj18 = properties15.remove((java.lang.Object) (short) 100);
        java.lang.Object obj21 = properties15.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj22 = properties15.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties15.elements();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.lang.Object obj25 = properties15.clone();
        properties15.clear();
        int int27 = properties15.size();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties30 = atomikosProperties29.asProperties();
        atomikosProperties29.service = "{-1.0=100}";
        long long33 = atomikosProperties29.getDefaultJtaTimeout();
        atomikosProperties29.serialJtaTransactions = true;
        atomikosProperties29.maxActives = ' ';
        int int38 = atomikosProperties29.getConsoleFileCount();
        long long39 = atomikosProperties29.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties41 = atomikosProperties40.asProperties();
        atomikosProperties40.service = "{-1.0=100}";
        java.lang.String str44 = atomikosProperties40.getTransactionManagerUniqueName();
        boolean boolean45 = atomikosProperties40.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel46 = atomikosProperties40.getConsoleLogLevel();
        atomikosProperties29.setConsoleLogLevel(atomikosLoggingLevel46);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties48.setAllowSubTransactions(true);
        boolean boolean51 = atomikosProperties48.enableLogging;
        atomikosProperties48.consoleFileLimit = (byte) 100;
        java.util.Properties properties54 = new java.util.Properties();
        java.lang.String str55 = properties54.toString();
        java.util.Properties properties56 = new java.util.Properties(properties54);
        java.util.Properties properties58 = new java.util.Properties();
        java.lang.String str59 = properties58.toString();
        java.lang.Object obj61 = properties58.remove((java.lang.Object) (short) 100);
        java.lang.Object obj64 = properties58.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean66 = properties58.containsKey((java.lang.Object) 0L);
        java.lang.Object obj69 = properties58.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties70 = new java.util.Properties(properties58);
        java.util.Enumeration<java.lang.Object> objEnumeration71 = properties70.elements();
        atomikosProperties48.set(properties56, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties70);
        atomikosProperties48.setOutputDir("hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery75 = atomikosProperties48.getRecovery();
        long long76 = recovery75.getRetryInterval();
        java.lang.Object obj77 = properties0.replace((java.lang.Object) atomikosProperties29, (java.lang.Object) recovery75);
        long long78 = atomikosProperties29.checkpointInterval;
        atomikosProperties29.serialJtaTransactions = true;
        atomikosProperties29.setOutputDir("{{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}=hi!}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{1.0=-1}");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10000L + "'", long33 == 10000L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10000L + "'", long39 == 10000L);
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel46 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel46.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{}" + "'", str55, "{}");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "{}" + "'", str59, "{}");
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertNotNull(objEnumeration71);
        org.junit.Assert.assertNotNull(recovery75);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 10000L + "'", long76 == 10000L);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 500L + "'", long78 == 500L);
    }

    @Test
    public void test10680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10680");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        java.lang.String str6 = atomikosProperties0.outputDir;
        atomikosProperties0.consoleFileName = "tm.out";
        long long9 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel10 = atomikosProperties0.consoleLogLevel;
        atomikosProperties0.maxTimeout = 0;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties0.getConsoleLogLevel();
        long long14 = atomikosProperties0.defaultJtaTimeout;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel10 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel10.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
    }

    @Test
    public void test10681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10681");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.consoleFileName = "";
        atomikosProperties0.forceShutdownOnVmExit = false;
        boolean boolean10 = atomikosProperties0.isAllowSubTransactions();
        atomikosProperties0.setDefaultJtaTimeout(86400000L);
        int int13 = atomikosProperties0.maxActives;
        java.util.Properties properties14 = atomikosProperties0.asProperties();
        java.lang.String str15 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.logBaseDir = "{1.0=-1}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test10682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10682");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.setForgetOrphanedLogEntriesDelay((long) 5);
        long long5 = recovery0.forgetOrphanedLogEntriesDelay;
        recovery0.setDelay((long) '4');
        recovery0.setDelay((long) 97);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 5L + "'", long5 == 5L);
    }

    @Test
    public void test10683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10683");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.consoleFileName = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel13);
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        int int17 = atomikosProperties0.getConsoleFileCount();
        java.lang.String str18 = atomikosProperties0.service;
        atomikosProperties0.setOutputDir("{com.atomikos.icatch.console_file_name=hi!, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=tm.out, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        java.lang.String str23 = atomikosProperties0.service;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{-1.0=100}" + "'", str18, "{-1.0=100}");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{-1.0=100}" + "'", str23, "{-1.0=100}");
    }

    @Test
    public void test10684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10684");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet8 = properties0.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties10 = atomikosProperties9.asProperties();
        atomikosProperties9.service = "{-1.0=100}";
        java.lang.String str13 = atomikosProperties9.getTransactionManagerUniqueName();
        atomikosProperties9.consoleFileLimit = (byte) 10;
        long long16 = atomikosProperties9.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel17 = atomikosProperties9.consoleLogLevel;
        atomikosProperties9.enableLogging = false;
        java.util.Properties properties20 = new java.util.Properties();
        java.lang.String str21 = properties20.toString();
        java.lang.Object obj23 = properties20.remove((java.lang.Object) (short) 100);
        java.lang.Object obj26 = properties20.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean28 = properties20.containsKey((java.lang.Object) 0L);
        java.lang.Object obj31 = properties20.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj34 = properties20.setProperty("", "{-1.0=100}");
        java.lang.Object obj35 = properties20.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery36 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery36.retryInterval = (short) 100;
        recovery36.forgetOrphanedLogEntriesDelay = 'a';
        boolean boolean41 = properties20.equals((java.lang.Object) 'a');
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery42 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long43 = recovery42.getRetryInterval();
        long long44 = recovery42.getDelay();
        long long45 = recovery42.getDelay();
        recovery42.retryInterval = 100L;
        boolean boolean48 = properties20.contains((java.lang.Object) recovery42);
        java.lang.String str49 = properties20.toString();
        java.util.Set<java.lang.String> strSet50 = properties20.stringPropertyNames();
        boolean boolean51 = properties0.remove((java.lang.Object) atomikosProperties9, (java.lang.Object) properties20);
        java.util.Properties properties52 = atomikosProperties9.asProperties();
        atomikosProperties9.setSerialJtaTransactions(true);
        java.lang.String str55 = atomikosProperties9.service;
        atomikosProperties9.setConsoleFileCount((int) (short) -1);
        java.lang.String str58 = atomikosProperties9.getLogBaseName();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEntrySet8);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 300000L + "'", long16 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel17 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel17.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{}" + "'", str21, "{}");
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(obj35);
// flaky:         org.junit.Assert.assertEquals(obj35.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 10000L + "'", long43 == 10000L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10000L + "'", long44 == 10000L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 10000L + "'", long45 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str49, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(properties52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{-1.0=100}" + "'", str55, "{-1.0=100}");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "tmlog" + "'", str58, "tmlog");
    }

    @Test
    public void test10685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10685");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        boolean boolean10 = atomikosProperties2.forceShutdownOnVmExit;
        atomikosProperties2.setOutputDir("");
        long long13 = atomikosProperties2.defaultJtaTimeout;
        java.lang.String str14 = atomikosProperties2.getLogBaseName();
        atomikosProperties2.serialJtaTransactions = true;
        java.lang.String str17 = atomikosProperties2.transactionManagerUniqueName;
        atomikosProperties2.setMaxActives(10);
        atomikosProperties2.service = "{-1.0=100}";
        java.lang.String str22 = atomikosProperties2.getService();
        atomikosProperties2.outputDir = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        int int25 = atomikosProperties2.consoleFileLimit;
        atomikosProperties2.enableLogging = true;
        atomikosProperties2.setForceShutdownOnVmExit(false);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tmlog" + "'", str14, "tmlog");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{-1.0=100}" + "'", str22, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
    }

    @Test
    public void test10686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10686");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.lang.Object obj5 = properties0.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.Object obj8 = properties6.remove((java.lang.Object) (-1.0d));
        boolean boolean9 = properties6.isEmpty();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.lang.Object obj13 = properties10.remove((java.lang.Object) (short) 100);
        java.lang.Object obj16 = properties10.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean18 = properties10.containsKey((java.lang.Object) 0L);
        java.lang.Object obj21 = properties10.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj24 = properties10.setProperty("", "{-1.0=100}");
        java.lang.Object obj25 = properties10.clone();
        java.lang.Object obj26 = properties6.get((java.lang.Object) properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.setEnableLogging(true);
        atomikosProperties27.consoleFileCount = 0;
        int int32 = atomikosProperties27.getMaxActives();
        java.lang.String str33 = atomikosProperties27.getLogBaseDir();
        java.lang.String str34 = atomikosProperties27.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery35 = atomikosProperties27.getRecovery();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties37 = atomikosProperties36.asProperties();
        atomikosProperties36.service = "{-1.0=100}";
        long long40 = atomikosProperties36.getDefaultJtaTimeout();
        atomikosProperties36.setThreadedTwoPhaseCommit(true);
        boolean boolean43 = atomikosProperties36.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery44 = atomikosProperties36.recovery;
        atomikosProperties36.setLogBaseDir("");
        java.lang.Object obj47 = properties10.replace((java.lang.Object) recovery35, (java.lang.Object) "");
        java.util.Properties properties48 = new java.util.Properties();
        java.lang.Object obj50 = properties48.remove((java.lang.Object) (-1.0d));
        boolean boolean52 = properties48.contains((java.lang.Object) "{-1.0=100}");
        boolean boolean53 = properties10.equals((java.lang.Object) "{-1.0=100}");
        properties10.clear();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties56 = new java.util.Properties();
        java.lang.Object obj59 = properties56.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration60 = properties56.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration61 = properties56.elements();
        java.util.Properties properties62 = new java.util.Properties(properties56);
        java.util.Set<java.lang.Object> objSet63 = properties56.keySet();
        java.util.Set<java.lang.String> strSet64 = properties56.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery65 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery65.retryInterval = (short) 100;
        recovery65.forgetOrphanedLogEntriesDelay = 'a';
        long long70 = recovery65.getDelay();
        long long71 = recovery65.getRetryInterval();
        recovery65.setRetryInterval((long) 'a');
        long long74 = recovery65.getRetryInterval();
        int int75 = recovery65.maxRetries;
        java.lang.Object obj76 = properties0.put((java.lang.Object) properties56, (java.lang.Object) recovery65);
        long long77 = recovery65.getForgetOrphanedLogEntriesDelay();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(obj25);
// flaky:         org.junit.Assert.assertEquals(obj25.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(recovery35);
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10000L + "'", long40 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(recovery44);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNotNull(objEnumeration60);
        org.junit.Assert.assertNotNull(objEnumeration61);
        org.junit.Assert.assertNotNull(objSet63);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 10000L + "'", long70 == 10000L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 100L + "'", long71 == 100L);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 97L + "'", long74 == 97L);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 5 + "'", int75 == 5);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 97L + "'", long77 == 97L);
    }

    @Test
    public void test10687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10687");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        int int6 = atomikosProperties0.consoleFileCount;
        int int7 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.setLogBaseName("{={-1.0=100}, -1.0=100}");
        atomikosProperties0.checkpointInterval = 97L;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
    }

    @Test
    public void test10688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10688");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        long long5 = atomikosProperties0.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel6 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel6);
        atomikosProperties0.setLogBaseDir("");
        atomikosProperties0.setLogBaseDir("{={-1.0=100}, -1.0=100}");
        atomikosProperties0.setForceShutdownOnVmExit(true);
        atomikosProperties0.setOutputDir("{1.0=-1, -1.0=100}");
        long long16 = atomikosProperties0.checkpointInterval;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
    }

    @Test
    public void test10689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10689");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        int int8 = atomikosProperties0.getConsoleFileLimit();
        boolean boolean9 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setMaxTimeout(300000L);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery12 = atomikosProperties0.getRecovery();
        java.lang.String str13 = atomikosProperties0.consoleFileName;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery14 = atomikosProperties0.getRecovery();
        atomikosProperties0.setLogBaseDir("{}");
        atomikosProperties0.consoleFileName = "{1.0=-1, -1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel19 = atomikosProperties0.consoleLogLevel;
        atomikosProperties0.consoleFileCount = 32;
        java.lang.String str22 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.maxActives = (short) -1;
        boolean boolean25 = atomikosProperties0.serialJtaTransactions;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(recovery12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tm.out" + "'", str13, "tm.out");
        org.junit.Assert.assertNotNull(recovery14);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel19 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel19.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test10690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10690");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isEnableLogging();
        boolean boolean8 = atomikosProperties0.threadedTwoPhaseCommit;
        int int9 = atomikosProperties0.maxActives;
        java.lang.String str10 = atomikosProperties0.logBaseDir;
        atomikosProperties0.consoleFileCount = 35;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test10691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10691");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        boolean boolean10 = atomikosProperties2.forceShutdownOnVmExit;
        atomikosProperties2.setOutputDir("");
        boolean boolean13 = atomikosProperties2.forceShutdownOnVmExit;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = atomikosProperties2.consoleLogLevel;
        java.lang.String str15 = atomikosProperties2.getLogBaseDir();
        long long16 = atomikosProperties2.getDefaultJtaTimeout();
        boolean boolean17 = atomikosProperties2.isThreadedTwoPhaseCommit();
        atomikosProperties2.setConsoleFileCount((int) '#');
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel14 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel14.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10000L + "'", long16 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test10692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10692");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        java.lang.Object obj14 = properties3.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj17 = properties3.setProperty("", "{-1.0=100}");
        boolean boolean18 = properties3.isEmpty();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        java.util.Properties properties21 = new java.util.Properties(properties19);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet22 = properties21.entrySet();
        java.util.Properties properties24 = new java.util.Properties();
        java.lang.Object obj26 = properties24.remove((java.lang.Object) (-1.0d));
        int int27 = properties24.size();
        boolean boolean28 = properties3.replace((java.lang.Object) properties21, (java.lang.Object) 100L, (java.lang.Object) properties24);
        boolean boolean29 = properties3.isEmpty();
        java.util.Set<java.lang.Object> objSet30 = properties3.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties32 = atomikosProperties31.asProperties();
        atomikosProperties31.service = "{-1.0=100}";
        long long35 = atomikosProperties31.getDefaultJtaTimeout();
        long long36 = atomikosProperties31.getMaxTimeout();
        int int37 = atomikosProperties31.consoleFileCount;
        java.lang.String str38 = atomikosProperties31.getOutputDir();
        boolean boolean39 = properties1.remove((java.lang.Object) properties3, (java.lang.Object) atomikosProperties31);
        java.util.Enumeration<java.lang.Object> objEnumeration40 = properties3.elements();
        java.util.Enumeration<java.lang.Object> objEnumeration41 = properties3.elements();
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertNotNull(objEntrySet22);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objSet30);
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10000L + "'", long35 == 10000L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 300000L + "'", long36 == 300000L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objEnumeration40);
        org.junit.Assert.assertNotNull(objEnumeration41);
    }

    @Test
    public void test10693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10693");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setMaxActives(0);
        atomikosProperties0.maxActives = 'a';
        boolean boolean9 = atomikosProperties0.isThreadedTwoPhaseCommit();
        boolean boolean10 = atomikosProperties0.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel11 = atomikosProperties0.consoleLogLevel;
        atomikosProperties0.outputDir = "hi!";
        atomikosProperties0.maxActives = (short) 0;
        int int16 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.allowSubTransactions = true;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel11 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel11.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test10694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10694");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        int int4 = properties0.size();
        java.util.Properties properties5 = new java.util.Properties();
        properties5.clear();
        java.lang.String str7 = properties5.toString();
        java.lang.Object obj8 = properties5.clone();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.Object obj11 = properties9.remove((java.lang.Object) (-1.0d));
        boolean boolean12 = properties9.isEmpty();
        int int13 = properties9.size();
        java.lang.String str15 = properties9.getProperty("{}");
        java.util.Set<java.lang.Object> objSet16 = properties9.keySet();
        boolean boolean18 = properties9.containsKey((java.lang.Object) (short) 1);
        int int19 = properties9.size();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties23 = atomikosProperties22.asProperties();
        atomikosProperties22.service = "{-1.0=100}";
        long long26 = atomikosProperties22.getDefaultJtaTimeout();
        atomikosProperties22.setThreadedTwoPhaseCommit(true);
        boolean boolean29 = atomikosProperties22.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery30 = atomikosProperties22.recovery;
        atomikosProperties22.setLogBaseDir("");
        long long33 = atomikosProperties22.maxTimeout;
        atomikosProperties22.setConsoleFileLimit(0);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel36 = atomikosProperties22.getConsoleLogLevel();
        java.lang.Object obj37 = properties5.remove((java.lang.Object) atomikosProperties22);
        boolean boolean38 = atomikosProperties22.isForceShutdownOnVmExit();
        long long39 = atomikosProperties22.defaultJtaTimeout;
        atomikosProperties22.setEnableLogging(true);
        int int42 = atomikosProperties22.getMaxActives();
        java.lang.String str43 = atomikosProperties22.transactionManagerUniqueName;
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "{}");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(objSet16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10000L + "'", long26 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(recovery30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 300000L + "'", long33 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel36 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel36.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10000L + "'", long39 == 10000L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 50 + "'", int42 == 50);
        org.junit.Assert.assertNull(str43);
    }

    @Test
    public void test10695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10695");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        long long5 = atomikosProperties0.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel6 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel6);
        atomikosProperties0.service = "";
        atomikosProperties0.serialJtaTransactions = true;
        java.lang.String str12 = atomikosProperties0.getLogBaseName();
        boolean boolean13 = atomikosProperties0.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery14 = atomikosProperties0.recovery;
        java.lang.String str15 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setForceShutdownOnVmExit(true);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(recovery14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tm.out" + "'", str15, "tm.out");
    }

    @Test
    public void test10696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10696");
        java.util.Properties properties0 = new java.util.Properties();
        properties0.clear();
        java.lang.String str2 = properties0.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery3.retryInterval = (short) 100;
        recovery3.setForgetOrphanedLogEntriesDelay((long) 5);
        recovery3.setRetryInterval((long) (-1));
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery10.retryInterval = (short) 100;
        recovery10.forgetOrphanedLogEntriesDelay = 'a';
        long long15 = recovery10.retryInterval;
        recovery10.forgetOrphanedLogEntriesDelay = 0L;
        java.lang.Object obj18 = properties0.put((java.lang.Object) (-1), (java.lang.Object) recovery10);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery19 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery19.retryInterval = (short) 100;
        recovery19.forgetOrphanedLogEntriesDelay = 'a';
        long long24 = recovery19.retryInterval;
        long long25 = recovery19.forgetOrphanedLogEntriesDelay;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties27 = atomikosProperties26.asProperties();
        java.util.Properties properties28 = new java.util.Properties();
        java.lang.Object obj30 = properties28.remove((java.lang.Object) (-1.0d));
        boolean boolean31 = properties28.isEmpty();
        int int32 = properties28.size();
        java.lang.String str34 = properties28.getProperty("{}");
        java.lang.Object obj35 = properties27.remove((java.lang.Object) properties28);
        java.util.Properties properties36 = new java.util.Properties();
        java.util.Properties properties37 = new java.util.Properties();
        java.lang.String str38 = properties37.toString();
        boolean boolean39 = properties37.isEmpty();
        java.util.Properties properties40 = new java.util.Properties();
        java.lang.String str41 = properties40.toString();
        java.lang.Object obj43 = properties40.remove((java.lang.Object) (short) 100);
        java.lang.Object obj46 = properties40.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean48 = properties40.containsKey((java.lang.Object) 0L);
        boolean boolean49 = properties37.containsValue((java.lang.Object) 0L);
        boolean boolean52 = properties36.replace((java.lang.Object) 0L, (java.lang.Object) 0.0f, (java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration53 = properties36.elements();
        java.lang.String str54 = properties36.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration55 = properties36.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties57 = atomikosProperties56.asProperties();
        boolean boolean58 = properties27.remove((java.lang.Object) properties36, (java.lang.Object) properties57);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties60 = atomikosProperties59.asProperties();
        atomikosProperties59.service = "{-1.0=100}";
        long long63 = atomikosProperties59.getDefaultJtaTimeout();
        long long64 = atomikosProperties59.getMaxTimeout();
        java.lang.String str65 = atomikosProperties59.outputDir;
        atomikosProperties59.consoleFileName = "tm.out";
        long long68 = atomikosProperties59.checkpointInterval;
        atomikosProperties59.setService("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery71 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery71.retryInterval = (short) 100;
        recovery71.forgetOrphanedLogEntriesDelay = 'a';
        long long76 = recovery71.retryInterval;
        recovery71.forgetOrphanedLogEntriesDelay = 0L;
        long long79 = recovery71.getForgetOrphanedLogEntriesDelay();
        long long80 = recovery71.getForgetOrphanedLogEntriesDelay();
        recovery71.retryInterval = 0L;
        long long83 = recovery71.retryInterval;
        int int84 = recovery71.getMaxRetries();
        long long85 = recovery71.delay;
        boolean boolean86 = properties36.remove((java.lang.Object) "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}", (java.lang.Object) recovery71);
        int int87 = recovery71.getMaxRetries();
        java.lang.Object obj88 = properties0.getOrDefault((java.lang.Object) recovery19, (java.lang.Object) recovery71);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet89 = properties0.entrySet();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L + "'", long24 == 100L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 97L + "'", long25 == 97L);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{}" + "'", str38, "{}");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "{}" + "'", str41, "{}");
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objEnumeration53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "{}" + "'", str54, "{}");
        org.junit.Assert.assertNotNull(objEnumeration55);
        org.junit.Assert.assertNotNull(properties57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(properties60);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 10000L + "'", long63 == 10000L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 300000L + "'", long64 == 300000L);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 500L + "'", long68 == 500L);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 100L + "'", long76 == 100L);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 5 + "'", int84 == 5);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 10000L + "'", long85 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 5 + "'", int87 == 5);
        org.junit.Assert.assertNotNull(obj88);
        org.junit.Assert.assertNotNull(objEntrySet89);
    }

    @Test
    public void test10697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10697");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.lang.String str9 = properties0.getProperty("{}");
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.Object obj12 = properties10.remove((java.lang.Object) (-1.0d));
        boolean boolean13 = properties10.isEmpty();
        java.util.Collection<java.lang.Object> objCollection14 = properties10.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties16 = atomikosProperties15.asProperties();
        atomikosProperties15.service = "{-1.0=100}";
        long long19 = atomikosProperties15.getDefaultJtaTimeout();
        atomikosProperties15.serialJtaTransactions = true;
        long long22 = atomikosProperties15.getDefaultJtaTimeout();
        long long23 = atomikosProperties15.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery24 = atomikosProperties15.getRecovery();
        long long25 = recovery24.delay;
        int int26 = recovery24.maxRetries;
        java.lang.Object obj27 = properties10.get((java.lang.Object) int26);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        properties10.clear();
        java.util.Properties properties30 = new java.util.Properties();
        java.lang.String str31 = properties30.toString();
        java.lang.Object obj33 = properties30.remove((java.lang.Object) (short) 100);
        java.lang.Object obj36 = properties30.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties38 = atomikosProperties37.asProperties();
        java.lang.Object obj39 = properties30.remove((java.lang.Object) properties38);
        java.util.Properties properties40 = new java.util.Properties();
        java.lang.String str41 = properties40.toString();
        java.util.Properties properties42 = new java.util.Properties(properties40);
        java.util.Properties properties43 = new java.util.Properties();
        java.lang.String str44 = properties43.toString();
        java.lang.Object obj46 = properties43.remove((java.lang.Object) (short) 100);
        java.lang.Object obj49 = properties43.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean51 = properties43.containsKey((java.lang.Object) 0L);
        java.lang.Object obj54 = properties43.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj57 = properties43.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration58 = properties43.keys();
        java.util.Properties properties59 = new java.util.Properties();
        java.lang.String str60 = properties59.toString();
        boolean boolean61 = properties59.isEmpty();
        java.lang.Object obj64 = properties59.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration65 = properties59.elements();
        java.lang.Object obj66 = properties42.replace((java.lang.Object) objEnumeration58, (java.lang.Object) properties59);
        java.util.Enumeration<java.lang.Object> objEnumeration67 = properties59.elements();
        java.util.Properties properties68 = new java.util.Properties(properties59);
        boolean boolean69 = properties38.containsKey((java.lang.Object) properties68);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery70 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery70.retryInterval = (short) 100;
        recovery70.forgetOrphanedLogEntriesDelay = 'a';
        long long75 = recovery70.retryInterval;
        recovery70.forgetOrphanedLogEntriesDelay = 0L;
        long long78 = recovery70.getForgetOrphanedLogEntriesDelay();
        recovery70.setRetryInterval((long) 0);
        long long81 = recovery70.getForgetOrphanedLogEntriesDelay();
        int int82 = recovery70.maxRetries;
        recovery70.forgetOrphanedLogEntriesDelay = 50L;
        boolean boolean85 = properties68.equals((java.lang.Object) recovery70);
        long long86 = recovery70.getRetryInterval();
        long long87 = recovery70.getDelay();
        boolean boolean88 = properties10.equals((java.lang.Object) recovery70);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objCollection14);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10000L + "'", long19 == 10000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10000L + "'", long22 == 10000L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
        org.junit.Assert.assertNotNull(recovery24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10000L + "'", long25 == 10000L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{}" + "'", str31, "{}");
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "{}" + "'", str41, "{}");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{}" + "'", str44, "{}");
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNotNull(objEnumeration58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "{}" + "'", str60, "{}");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNotNull(objEnumeration65);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNotNull(objEnumeration67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 100L + "'", long75 == 100L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 5 + "'", int82 == 5);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 10000L + "'", long87 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test10698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10698");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties12 = new java.util.Properties(properties0);
        int int13 = properties0.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties15 = atomikosProperties14.asProperties();
        atomikosProperties14.service = "{-1.0=100}";
        long long18 = atomikosProperties14.getDefaultJtaTimeout();
        atomikosProperties14.serialJtaTransactions = true;
        long long21 = atomikosProperties14.getDefaultJtaTimeout();
        long long22 = atomikosProperties14.checkpointInterval;
        java.util.Properties properties23 = new java.util.Properties();
        java.lang.Object obj25 = properties23.remove((java.lang.Object) (-1.0d));
        boolean boolean26 = properties23.isEmpty();
        java.lang.Object obj29 = properties23.setProperty("hi!", "{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties32 = atomikosProperties31.asProperties();
        atomikosProperties31.service = "{-1.0=100}";
        long long35 = atomikosProperties31.getDefaultJtaTimeout();
        atomikosProperties31.serialJtaTransactions = true;
        atomikosProperties31.maxActives = ' ';
        atomikosProperties14.set(properties23, "", (java.lang.Object) ' ');
        java.util.Properties properties41 = new java.util.Properties();
        java.lang.String str42 = properties41.toString();
        java.lang.Object obj44 = properties41.remove((java.lang.Object) (short) 100);
        java.lang.Object obj47 = properties41.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean49 = properties41.containsKey((java.lang.Object) 0L);
        java.lang.Object obj52 = properties41.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties53 = new java.util.Properties();
        java.lang.String str54 = properties53.toString();
        java.lang.Object obj56 = properties53.remove((java.lang.Object) (short) 100);
        java.lang.Object obj59 = properties53.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj60 = properties53.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration61 = properties53.elements();
        properties41.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties53);
        java.lang.Object obj63 = properties53.clone();
        java.util.Set<java.lang.String> strSet64 = properties53.stringPropertyNames();
        java.lang.Object obj65 = properties0.replace((java.lang.Object) atomikosProperties14, (java.lang.Object) strSet64);
        atomikosProperties14.setSerialJtaTransactions(false);
        long long68 = atomikosProperties14.getCheckpointInterval();
        atomikosProperties14.serialJtaTransactions = true;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10000L + "'", long18 == 10000L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10000L + "'", long35 == 10000L);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{}" + "'", str42, "{}");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "{}" + "'", str54, "{}");
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertEquals(obj60.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration61);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals(obj63.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 500L + "'", long68 == 500L);
    }

    @Test
    public void test10699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10699");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        boolean boolean5 = properties0.containsKey((java.lang.Object) 0L);
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.util.Properties properties8 = new java.util.Properties(properties6);
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.String str10 = properties9.toString();
        java.lang.Object obj12 = properties9.remove((java.lang.Object) (short) 100);
        java.lang.Object obj15 = properties9.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean17 = properties9.containsKey((java.lang.Object) 0L);
        java.lang.Object obj20 = properties9.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj23 = properties9.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties9.keys();
        java.util.Properties properties25 = new java.util.Properties();
        java.lang.String str26 = properties25.toString();
        boolean boolean27 = properties25.isEmpty();
        java.lang.Object obj30 = properties25.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties25.elements();
        java.lang.Object obj32 = properties8.replace((java.lang.Object) objEnumeration24, (java.lang.Object) properties25);
        java.util.Enumeration<java.lang.Object> objEnumeration33 = properties25.elements();
        java.util.Properties properties34 = new java.util.Properties();
        java.lang.String str35 = properties34.toString();
        boolean boolean36 = properties34.isEmpty();
        java.lang.Object obj39 = properties34.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Properties properties40 = new java.util.Properties();
        java.lang.String str41 = properties40.toString();
        java.lang.Object obj43 = properties40.remove((java.lang.Object) (short) 100);
        java.lang.Object obj46 = properties40.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean48 = properties40.containsKey((java.lang.Object) 0L);
        java.lang.Object obj51 = properties40.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties52 = new java.util.Properties(properties40);
        boolean boolean53 = properties34.containsValue((java.lang.Object) properties40);
        java.util.Properties properties54 = new java.util.Properties();
        java.lang.String str55 = properties54.toString();
        java.lang.Object obj57 = properties54.remove((java.lang.Object) (short) 100);
        java.lang.Object obj60 = properties54.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean62 = properties54.containsKey((java.lang.Object) 0L);
        java.lang.Object obj65 = properties54.replace((java.lang.Object) false, (java.lang.Object) ' ');
        boolean boolean66 = properties54.isEmpty();
        boolean boolean67 = properties0.replace((java.lang.Object) properties25, (java.lang.Object) properties34, (java.lang.Object) properties54);
        java.util.Enumeration<java.lang.Object> objEnumeration68 = properties25.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties69 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean70 = atomikosProperties69.isSerialJtaTransactions();
        atomikosProperties69.logBaseName = "{-1.0=100}";
        int int73 = atomikosProperties69.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery74 = atomikosProperties69.getRecovery();
        atomikosProperties69.setConsoleFileCount((int) (byte) 100);
        java.lang.String str77 = atomikosProperties69.logBaseName;
        int int78 = atomikosProperties69.getConsoleFileLimit();
        boolean boolean79 = properties25.contains((java.lang.Object) atomikosProperties69);
        java.util.Set<java.lang.Object> objSet80 = properties25.keySet();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{}" + "'", str26, "{}");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(objEnumeration31);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(objEnumeration33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "{}" + "'", str35, "{}");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "{}" + "'", str41, "{}");
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{}" + "'", str55, "{}");
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objEnumeration68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 50 + "'", int73 == 50);
        org.junit.Assert.assertNotNull(recovery74);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "{-1.0=100}" + "'", str77, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objSet80);
    }

    @Test
    public void test10700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10700");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        java.util.Properties properties2 = new java.util.Properties();
        java.lang.Object obj4 = properties2.remove((java.lang.Object) (-1.0d));
        boolean boolean5 = properties2.isEmpty();
        int int6 = properties2.size();
        java.lang.String str8 = properties2.getProperty("{}");
        java.lang.Object obj9 = properties1.remove((java.lang.Object) properties2);
        java.util.Collection<java.lang.Object> objCollection10 = properties2.values();
        java.util.Properties properties11 = new java.util.Properties();
        java.lang.String str12 = properties11.toString();
        java.lang.Object obj14 = properties11.remove((java.lang.Object) (short) 100);
        java.lang.Object obj17 = properties11.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean19 = properties11.containsKey((java.lang.Object) 0L);
        java.lang.Object obj22 = properties11.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj25 = properties11.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration26 = properties11.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet27 = properties11.entrySet();
        boolean boolean28 = properties2.contains((java.lang.Object) objEntrySet27);
        java.util.Properties properties29 = new java.util.Properties();
        java.lang.Object obj32 = properties29.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration33 = properties29.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration34 = properties29.elements();
        java.util.Properties properties35 = new java.util.Properties(properties29);
        java.util.Set<java.lang.String> strSet36 = properties35.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties37.setEnableLogging(true);
        atomikosProperties37.consoleFileCount = 0;
        int int42 = atomikosProperties37.getMaxActives();
        java.lang.String str43 = atomikosProperties37.getLogBaseDir();
        java.lang.String str44 = atomikosProperties37.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery45 = atomikosProperties37.getRecovery();
        boolean boolean46 = atomikosProperties37.serialJtaTransactions;
        atomikosProperties37.defaultJtaTimeout = 1;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties50 = atomikosProperties49.asProperties();
        atomikosProperties49.service = "{-1.0=100}";
        long long53 = atomikosProperties49.getDefaultJtaTimeout();
        atomikosProperties49.setThreadedTwoPhaseCommit(true);
        boolean boolean56 = atomikosProperties49.isEnableLogging();
        atomikosProperties49.defaultJtaTimeout = (byte) 10;
        java.lang.Object obj59 = properties35.getOrDefault((java.lang.Object) 1, (java.lang.Object) atomikosProperties49);
        java.lang.String str61 = properties35.getProperty("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        java.util.Enumeration<?> wildcardEnumeration62 = properties35.propertyNames();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet63 = properties35.entrySet();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties35);
        java.util.Enumeration<java.lang.Object> objEnumeration65 = properties35.elements();
        java.util.Set<java.lang.String> strSet66 = properties35.stringPropertyNames();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(objCollection10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{}" + "'", str12, "{}");
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(objEnumeration26);
        org.junit.Assert.assertNotNull(objEntrySet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(objEnumeration33);
        org.junit.Assert.assertNotNull(objEnumeration34);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 50 + "'", int42 == 50);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(recovery45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 10000L + "'", long53 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(wildcardEnumeration62);
        org.junit.Assert.assertNotNull(objEntrySet63);
        org.junit.Assert.assertNotNull(objEnumeration65);
        org.junit.Assert.assertNotNull(strSet66);
    }

    @Test
    public void test10701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10701");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        int int5 = atomikosProperties0.getMaxActives();
        java.lang.String str6 = atomikosProperties0.getLogBaseDir();
        java.lang.String str7 = atomikosProperties0.service;
        atomikosProperties0.transactionManagerUniqueName = "tmlog";
        atomikosProperties0.setTransactionManagerUniqueName("tm.out");
        java.lang.String str12 = atomikosProperties0.getConsoleFileName();
        long long13 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setDefaultJtaTimeout((long) 19);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tm.out" + "'", str12, "tm.out");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 300000L + "'", long13 == 300000L);
    }

    @Test
    public void test10702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10702");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.maxActives = (short) -1;
        atomikosProperties0.setService("tm.out");
        atomikosProperties0.transactionManagerUniqueName = "{={-1.0=100}, -1.0=100}";
        boolean boolean9 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.setConsoleFileLimit(21);
        atomikosProperties0.setMaxTimeout((long) (short) 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test10703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10703");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        int int4 = properties0.size();
        java.lang.String str6 = properties0.getProperty("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties7.setEnableLogging(true);
        atomikosProperties7.consoleFileCount = 0;
        int int12 = atomikosProperties7.getMaxActives();
        java.lang.String str13 = atomikosProperties7.getLogBaseDir();
        java.lang.String str14 = atomikosProperties7.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery15 = atomikosProperties7.getRecovery();
        java.lang.String str16 = atomikosProperties7.getTransactionManagerUniqueName();
        boolean boolean17 = properties0.containsValue((java.lang.Object) atomikosProperties7);
        java.util.Set<java.lang.String> strSet18 = properties0.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet19 = properties0.keySet();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(recovery15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(objSet19);
    }

    @Test
    public void test10704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10704");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        long long5 = atomikosProperties0.defaultJtaTimeout;
        long long6 = atomikosProperties0.getMaxTimeout();
        boolean boolean7 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setService("{-1.0=100}");
        atomikosProperties0.setOutputDir("{}");
        atomikosProperties0.setConsoleFileLimit((int) (byte) 1);
        atomikosProperties0.threadedTwoPhaseCommit = true;
        java.lang.String str16 = atomikosProperties0.logBaseName;
        atomikosProperties0.setMaxActives((int) (byte) 100);
        long long19 = atomikosProperties0.getDefaultJtaTimeout();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 300000L + "'", long6 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10000L + "'", long19 == 10000L);
    }

    @Test
    public void test10705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10705");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.String str9 = properties8.toString();
        java.lang.Object obj11 = properties8.remove((java.lang.Object) (short) 100);
        java.lang.Object obj14 = properties8.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj15 = properties8.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties8.elements();
        java.lang.Object obj17 = properties0.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration16);
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration19 = properties18.propertyNames();
        java.lang.Object obj20 = properties18.clone();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        boolean boolean23 = properties21.isEmpty();
        java.lang.Object obj26 = properties21.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties21.elements();
        java.lang.Object obj28 = properties0.put(obj20, (java.lang.Object) objEnumeration27);
        properties0.clear();
        java.util.Properties properties30 = new java.util.Properties();
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.Object obj33 = properties31.remove((java.lang.Object) (-1.0d));
        int int34 = properties31.size();
        java.util.Enumeration<java.lang.Object> objEnumeration35 = properties31.elements();
        java.util.Properties properties36 = new java.util.Properties();
        properties36.clear();
        java.lang.String str38 = properties36.toString();
        boolean boolean39 = properties0.replace((java.lang.Object) properties30, (java.lang.Object) properties31, (java.lang.Object) str38);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet40 = properties31.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties42 = atomikosProperties41.asProperties();
        atomikosProperties41.service = "{-1.0=100}";
        long long45 = atomikosProperties41.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel46 = null;
        atomikosProperties41.setConsoleLogLevel(atomikosLoggingLevel46);
        int int48 = atomikosProperties41.maxActives;
        atomikosProperties41.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery51 = atomikosProperties41.getRecovery();
        atomikosProperties41.setLogBaseName("");
        java.lang.String str54 = atomikosProperties41.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties56 = atomikosProperties55.asProperties();
        atomikosProperties55.service = "{-1.0=100}";
        java.lang.String str59 = atomikosProperties55.getTransactionManagerUniqueName();
        atomikosProperties55.consoleFileLimit = (byte) 10;
        long long62 = atomikosProperties55.maxTimeout;
        boolean boolean63 = atomikosProperties55.isAllowSubTransactions();
        boolean boolean64 = atomikosProperties55.threadedTwoPhaseCommit;
        boolean boolean65 = atomikosProperties55.serialJtaTransactions;
        java.lang.String str66 = atomikosProperties55.consoleFileName;
        atomikosProperties55.forceShutdownOnVmExit = false;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel69 = atomikosProperties55.getConsoleLogLevel();
        java.lang.Object obj70 = properties31.put((java.lang.Object) str54, (java.lang.Object) atomikosProperties55);
        java.util.Collection<java.lang.Object> objCollection71 = properties31.values();
        java.util.Properties properties72 = new java.util.Properties(properties31);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties73 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties74 = atomikosProperties73.asProperties();
        atomikosProperties73.service = "{-1.0=100}";
        java.lang.String str77 = atomikosProperties73.getLogBaseName();
        long long78 = atomikosProperties73.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel79 = null;
        atomikosProperties73.setConsoleLogLevel(atomikosLoggingLevel79);
        atomikosProperties73.threadedTwoPhaseCommit = false;
        atomikosProperties73.allowSubTransactions = false;
        java.lang.String str85 = atomikosProperties73.getConsoleFileName();
        java.util.Properties properties86 = atomikosProperties73.asProperties();
        boolean boolean87 = properties31.equals((java.lang.Object) atomikosProperties73);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(wildcardEnumeration19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(objEnumeration35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{}" + "'", str38, "{}");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objEntrySet40);
        org.junit.Assert.assertNotNull(properties42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 10000L + "'", long45 == 10000L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 50 + "'", int48 == 50);
        org.junit.Assert.assertNotNull(recovery51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(properties56);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 300000L + "'", long62 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "tm.out" + "'", str66, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel69 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel69.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertNotNull(objCollection71);
        org.junit.Assert.assertNotNull(properties74);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "tmlog" + "'", str77, "tmlog");
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 10000L + "'", long78 == 10000L);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "tm.out" + "'", str85, "tm.out");
        org.junit.Assert.assertNotNull(properties86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test10706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10706");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        int int5 = atomikosProperties0.getMaxActives();
        java.lang.String str6 = atomikosProperties0.getLogBaseDir();
        java.lang.String str7 = atomikosProperties0.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.getRecovery();
        boolean boolean9 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.setCheckpointInterval(10000L);
        atomikosProperties0.checkpointInterval = 2L;
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test10707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10707");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setLogBaseDir("{-1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setAllowSubTransactions(true);
        atomikosProperties10.maxActives = (short) -1;
        atomikosProperties10.setService("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setAllowSubTransactions(true);
        boolean boolean20 = atomikosProperties17.enableLogging;
        boolean boolean21 = atomikosProperties17.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel22 = atomikosProperties17.consoleLogLevel;
        atomikosProperties10.setConsoleLogLevel(atomikosLoggingLevel22);
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel22;
        atomikosProperties0.setConsoleFileCount((int) (byte) 0);
        java.util.Properties properties27 = new java.util.Properties();
        java.lang.Object obj29 = properties27.remove((java.lang.Object) (-1.0d));
        boolean boolean30 = properties27.isEmpty();
        int int31 = properties27.size();
        java.util.Properties properties32 = new java.util.Properties();
        properties32.clear();
        java.lang.String str34 = properties32.toString();
        java.lang.Object obj35 = properties32.clone();
        java.util.Properties properties36 = new java.util.Properties();
        java.lang.Object obj38 = properties36.remove((java.lang.Object) (-1.0d));
        boolean boolean39 = properties36.isEmpty();
        int int40 = properties36.size();
        java.lang.String str42 = properties36.getProperty("{}");
        java.util.Set<java.lang.Object> objSet43 = properties36.keySet();
        boolean boolean45 = properties36.containsKey((java.lang.Object) (short) 1);
        int int46 = properties36.size();
        properties32.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties36);
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties32);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties51 = atomikosProperties50.asProperties();
        atomikosProperties50.service = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery54 = atomikosProperties50.recovery;
        atomikosProperties50.enableLogging = true;
        java.lang.String str57 = atomikosProperties50.getService();
        atomikosProperties0.set(properties32, "{1.0=-1}", (java.lang.Object) str57);
        java.lang.String str59 = atomikosProperties0.transactionManagerUniqueName;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel22 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel22.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{}" + "'", str34, "{}");
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "{}");
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(objSet43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertNotNull(recovery54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "{-1.0=100}" + "'", str57, "{-1.0=100}");
        org.junit.Assert.assertNull(str59);
    }

    @Test
    public void test10708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10708");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet8 = properties0.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties10 = atomikosProperties9.asProperties();
        atomikosProperties9.service = "{-1.0=100}";
        java.lang.String str13 = atomikosProperties9.getTransactionManagerUniqueName();
        atomikosProperties9.consoleFileLimit = (byte) 10;
        long long16 = atomikosProperties9.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel17 = atomikosProperties9.consoleLogLevel;
        atomikosProperties9.enableLogging = false;
        java.util.Properties properties20 = new java.util.Properties();
        java.lang.String str21 = properties20.toString();
        java.lang.Object obj23 = properties20.remove((java.lang.Object) (short) 100);
        java.lang.Object obj26 = properties20.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean28 = properties20.containsKey((java.lang.Object) 0L);
        java.lang.Object obj31 = properties20.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj34 = properties20.setProperty("", "{-1.0=100}");
        java.lang.Object obj35 = properties20.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery36 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery36.retryInterval = (short) 100;
        recovery36.forgetOrphanedLogEntriesDelay = 'a';
        boolean boolean41 = properties20.equals((java.lang.Object) 'a');
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery42 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long43 = recovery42.getRetryInterval();
        long long44 = recovery42.getDelay();
        long long45 = recovery42.getDelay();
        recovery42.retryInterval = 100L;
        boolean boolean48 = properties20.contains((java.lang.Object) recovery42);
        java.lang.String str49 = properties20.toString();
        java.util.Set<java.lang.String> strSet50 = properties20.stringPropertyNames();
        boolean boolean51 = properties0.remove((java.lang.Object) atomikosProperties9, (java.lang.Object) properties20);
        java.util.Properties properties52 = atomikosProperties9.asProperties();
        atomikosProperties9.setSerialJtaTransactions(true);
        java.lang.String str55 = atomikosProperties9.service;
        java.util.Properties properties56 = atomikosProperties9.asProperties();
        java.io.PrintWriter printWriter57 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties56.list(printWriter57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEntrySet8);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 300000L + "'", long16 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel17 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel17.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{}" + "'", str21, "{}");
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(obj35);
// flaky:         org.junit.Assert.assertEquals(obj35.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 10000L + "'", long43 == 10000L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10000L + "'", long44 == 10000L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 10000L + "'", long45 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str49, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(properties52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{-1.0=100}" + "'", str55, "{-1.0=100}");
        org.junit.Assert.assertNotNull(properties56);
    }

    @Test
    public void test10709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10709");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Set<java.lang.String> strSet8 = properties0.stringPropertyNames();
        java.util.Properties properties9 = new java.util.Properties(properties0);
        java.lang.String str11 = properties9.getProperty("hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties13 = atomikosProperties12.asProperties();
        atomikosProperties12.service = "{-1.0=100}";
        java.lang.String str16 = atomikosProperties12.getTransactionManagerUniqueName();
        atomikosProperties12.consoleFileName = "hi!";
        atomikosProperties12.service = "tm.out";
        atomikosProperties12.logBaseName = "tm.out";
        atomikosProperties12.setThreadedTwoPhaseCommit(true);
        atomikosProperties12.setThreadedTwoPhaseCommit(false);
        boolean boolean27 = atomikosProperties12.isSerialJtaTransactions();
        atomikosProperties12.setService("{100=100}");
        boolean boolean30 = atomikosProperties12.isForceShutdownOnVmExit();
        atomikosProperties12.enableLogging = true;
        boolean boolean33 = atomikosProperties12.serialJtaTransactions;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery34 = atomikosProperties12.recovery;
        long long35 = atomikosProperties12.getDefaultJtaTimeout();
        boolean boolean36 = properties9.containsValue((java.lang.Object) long35);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(recovery34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10000L + "'", long35 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test10710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10710");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties0.elements();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.String str10 = properties9.toString();
        java.lang.Object obj12 = properties9.remove((java.lang.Object) (short) 100);
        java.lang.Object obj15 = properties9.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj16 = properties9.clone();
        java.util.Set<java.lang.String> strSet17 = properties9.stringPropertyNames();
        java.util.Properties properties18 = new java.util.Properties(properties9);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties20 = atomikosProperties19.asProperties();
        atomikosProperties19.service = "{-1.0=100}";
        java.lang.String str23 = atomikosProperties19.getTransactionManagerUniqueName();
        boolean boolean24 = atomikosProperties19.isSerialJtaTransactions();
        int int25 = atomikosProperties19.getConsoleFileLimit();
        java.util.Properties properties26 = new java.util.Properties();
        java.lang.String str27 = properties26.toString();
        java.lang.Object obj29 = properties26.remove((java.lang.Object) (short) 100);
        java.lang.Object obj32 = properties26.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean34 = properties26.containsKey((java.lang.Object) 0L);
        java.lang.Object obj37 = properties26.replace((java.lang.Object) false, (java.lang.Object) ' ');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties38.setEnableLogging(true);
        atomikosProperties38.setConsoleFileLimit((int) (short) 0);
        boolean boolean43 = properties26.contains((java.lang.Object) atomikosProperties38);
        java.lang.Object obj44 = properties18.putIfAbsent((java.lang.Object) int25, (java.lang.Object) atomikosProperties38);
        java.util.Properties properties45 = new java.util.Properties(properties18);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties18);
        java.lang.String str48 = properties18.getProperty("tmlog");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties50 = atomikosProperties49.asProperties();
        atomikosProperties49.service = "{-1.0=100}";
        long long53 = atomikosProperties49.getDefaultJtaTimeout();
        atomikosProperties49.setThreadedTwoPhaseCommit(true);
        boolean boolean56 = atomikosProperties49.isAllowSubTransactions();
        int int57 = atomikosProperties49.getConsoleFileLimit();
        boolean boolean58 = atomikosProperties49.forceShutdownOnVmExit;
        atomikosProperties49.setMaxTimeout(300000L);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery61 = atomikosProperties49.getRecovery();
        java.lang.String str62 = atomikosProperties49.consoleFileName;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery63 = atomikosProperties49.getRecovery();
        long long64 = atomikosProperties49.getDefaultJtaTimeout();
        java.util.Properties properties65 = new java.util.Properties();
        java.lang.Object obj67 = properties65.remove((java.lang.Object) (-1.0d));
        boolean boolean68 = properties65.isEmpty();
        java.lang.Object obj71 = properties65.setProperty("hi!", "{}");
        java.util.Collection<java.lang.Object> objCollection72 = properties65.values();
        java.lang.Object obj73 = properties18.getOrDefault((java.lang.Object) atomikosProperties49, (java.lang.Object) objCollection72);
        long long74 = atomikosProperties49.defaultJtaTimeout;
        java.lang.String str75 = atomikosProperties49.outputDir;
        boolean boolean76 = atomikosProperties49.allowSubTransactions;
        int int77 = atomikosProperties49.consoleFileLimit;
        atomikosProperties49.service = "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}";
        atomikosProperties49.service = "{hi!={}}";
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{}" + "'", str27, "{}");
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 10000L + "'", long53 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(recovery61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tm.out" + "'", str62, "tm.out");
        org.junit.Assert.assertNotNull(recovery63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 10000L + "'", long64 == 10000L);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNotNull(objCollection72);
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertEquals(obj73.toString(), "[{}]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj73), "[{}]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj73), "[{}]");
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 10000L + "'", long74 == 10000L);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
    }

    @Test
    public void test10711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10711");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        int int8 = atomikosProperties0.getConsoleFileLimit();
        boolean boolean9 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setMaxTimeout(300000L);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery12 = atomikosProperties0.getRecovery();
        java.lang.String str13 = atomikosProperties0.consoleFileName;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery14 = atomikosProperties0.getRecovery();
        atomikosProperties0.setLogBaseDir("{}");
        atomikosProperties0.consoleFileName = "{1.0=-1, -1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel19 = atomikosProperties0.consoleLogLevel;
        atomikosProperties0.consoleFileCount = 32;
        java.lang.String str22 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.maxActives = (short) -1;
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(recovery12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tm.out" + "'", str13, "tm.out");
        org.junit.Assert.assertNotNull(recovery14);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel19 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel19.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test10712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10712");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.consoleFileName = "{-1.0=100}";
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.consoleFileName = "{={-1.0=100}, -1.0=100}";
        boolean boolean17 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.service = "tm.out";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel20 = atomikosProperties0.consoleLogLevel;
        boolean boolean21 = atomikosProperties0.enableLogging;
        atomikosProperties0.threadedTwoPhaseCommit = true;
        atomikosProperties0.setCheckpointInterval((long) (byte) 0);
        boolean boolean26 = atomikosProperties0.threadedTwoPhaseCommit;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(atomikosLoggingLevel20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test10713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10713");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties0.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.elements();
        java.util.Properties properties6 = new java.util.Properties(properties0);
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Properties properties8 = new java.util.Properties(properties6);
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.String str10 = properties9.toString();
        java.lang.Object obj12 = properties9.remove((java.lang.Object) (short) 100);
        java.lang.Object obj15 = properties9.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj16 = properties9.clone();
        java.util.Set<java.lang.String> strSet17 = properties9.stringPropertyNames();
        java.util.Properties properties18 = new java.util.Properties(properties9);
        java.lang.String str20 = properties18.getProperty("hi!");
        java.lang.String str22 = properties18.getProperty("{1.0=-1}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties24 = atomikosProperties23.asProperties();
        atomikosProperties23.service = "{-1.0=100}";
        long long27 = atomikosProperties23.getDefaultJtaTimeout();
        atomikosProperties23.serialJtaTransactions = true;
        long long30 = atomikosProperties23.maxTimeout;
        atomikosProperties23.setLogBaseDir("{-1.0=100}");
        int int33 = atomikosProperties23.getConsoleFileCount();
        atomikosProperties23.maxTimeout = (short) 100;
        boolean boolean36 = properties18.equals((java.lang.Object) atomikosProperties23);
        java.lang.Object obj37 = properties18.clone();
        java.lang.Object obj38 = properties8.get((java.lang.Object) properties18);
        java.io.OutputStream outputStream39 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.storeToXML(outputStream39, "{1.0=-1, -1.0=100}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10000L + "'", long27 == 10000L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 300000L + "'", long30 == 300000L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "{}");
        org.junit.Assert.assertNull(obj38);
    }

    @Test
    public void test10714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10714");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int7 = properties0.size();
        int int8 = properties0.size();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.String str10 = properties9.toString();
        java.lang.Object obj12 = properties9.remove((java.lang.Object) (short) 100);
        java.lang.Object obj15 = properties9.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean17 = properties9.containsKey((java.lang.Object) 0L);
        java.lang.Object obj20 = properties9.replace((java.lang.Object) false, (java.lang.Object) ' ');
        boolean boolean21 = properties9.isEmpty();
        boolean boolean22 = properties9.isEmpty();
        java.lang.Object obj23 = properties0.remove((java.lang.Object) properties9);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties25 = atomikosProperties24.asProperties();
        atomikosProperties24.service = "{-1.0=100}";
        long long28 = atomikosProperties24.getDefaultJtaTimeout();
        atomikosProperties24.enableLogging = false;
        atomikosProperties24.setMaxTimeout((long) (byte) 0);
        atomikosProperties24.setService("tm.out");
        atomikosProperties24.enableLogging = true;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties38 = atomikosProperties37.asProperties();
        atomikosProperties37.service = "{-1.0=100}";
        long long41 = atomikosProperties37.getDefaultJtaTimeout();
        atomikosProperties37.setThreadedTwoPhaseCommit(true);
        boolean boolean44 = atomikosProperties37.isAllowSubTransactions();
        boolean boolean45 = atomikosProperties37.isEnableLogging();
        atomikosProperties37.allowSubTransactions = false;
        atomikosProperties37.threadedTwoPhaseCommit = true;
        atomikosProperties37.setLogBaseName("tm.out");
        java.lang.String str52 = atomikosProperties37.getLogBaseDir();
        java.lang.String str53 = atomikosProperties37.outputDir;
        java.lang.Object obj54 = properties0.putIfAbsent((java.lang.Object) atomikosProperties24, (java.lang.Object) atomikosProperties37);
        java.util.Properties properties55 = new java.util.Properties();
        java.lang.Object obj58 = properties55.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration59 = properties55.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration60 = properties55.elements();
        java.util.Properties properties61 = new java.util.Properties(properties55);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties55);
        java.io.OutputStream outputStream63 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties55.store(outputStream63, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=10, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={1.0=-1}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10000L + "'", long28 == 10000L);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10000L + "'", long41 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNotNull(objEnumeration59);
        org.junit.Assert.assertNotNull(objEnumeration60);
    }

    @Test
    public void test10715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10715");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setMaxActives(0);
        boolean boolean7 = atomikosProperties0.threadedTwoPhaseCommit;
        boolean boolean8 = atomikosProperties0.allowSubTransactions;
        atomikosProperties0.logBaseDir = "{}";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean12 = atomikosProperties11.isSerialJtaTransactions();
        atomikosProperties11.logBaseName = "{-1.0=100}";
        int int15 = atomikosProperties11.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery16 = atomikosProperties11.getRecovery();
        atomikosProperties11.setConsoleFileCount((int) (byte) 100);
        atomikosProperties11.setAllowSubTransactions(true);
        atomikosProperties11.setService("tm.out");
        boolean boolean23 = atomikosProperties11.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel24 = atomikosProperties11.getConsoleLogLevel();
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel24);
        atomikosProperties0.setDefaultJtaTimeout((long) (byte) 100);
        atomikosProperties0.service = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 50 + "'", int15 == 50);
        org.junit.Assert.assertNotNull(recovery16);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel24 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel24.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test10716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10716");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setTransactionManagerUniqueName("{}");
        boolean boolean7 = atomikosProperties0.allowSubTransactions;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test10717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10717");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.setForgetOrphanedLogEntriesDelay((long) 5);
        long long5 = recovery0.getForgetOrphanedLogEntriesDelay();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 5L + "'", long5 == 5L);
    }

    @Test
    public void test10718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10718");
        java.util.Properties properties0 = new java.util.Properties();
        properties0.clear();
        java.lang.String str2 = properties0.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties4 = atomikosProperties3.asProperties();
        atomikosProperties3.service = "{-1.0=100}";
        long long7 = atomikosProperties3.getDefaultJtaTimeout();
        atomikosProperties3.setThreadedTwoPhaseCommit(true);
        boolean boolean10 = atomikosProperties3.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = atomikosProperties3.recovery;
        long long12 = recovery11.getForgetOrphanedLogEntriesDelay();
        boolean boolean13 = properties0.containsValue((java.lang.Object) long12);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean15 = atomikosProperties14.isSerialJtaTransactions();
        atomikosProperties14.logBaseName = "{-1.0=100}";
        int int18 = atomikosProperties14.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery19 = atomikosProperties14.getRecovery();
        atomikosProperties14.setConsoleFileCount((int) (byte) 100);
        atomikosProperties14.setAllowSubTransactions(true);
        int int24 = atomikosProperties14.getMaxActives();
        atomikosProperties14.setForceShutdownOnVmExit(true);
        java.util.Properties properties27 = new java.util.Properties();
        java.lang.String str28 = properties27.toString();
        java.lang.Object obj30 = properties27.remove((java.lang.Object) (short) 100);
        java.lang.Object obj33 = properties27.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties35 = new java.util.Properties();
        java.lang.String str36 = properties35.toString();
        java.lang.Object obj38 = properties35.remove((java.lang.Object) (short) 100);
        java.lang.Object obj41 = properties35.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj42 = properties35.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration43 = properties35.elements();
        java.lang.Object obj44 = properties27.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration43);
        java.util.Properties properties45 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration46 = properties45.propertyNames();
        java.lang.Object obj47 = properties45.clone();
        java.util.Properties properties48 = new java.util.Properties();
        java.lang.String str49 = properties48.toString();
        boolean boolean50 = properties48.isEmpty();
        java.lang.Object obj53 = properties48.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration54 = properties48.elements();
        java.lang.Object obj55 = properties27.put(obj47, (java.lang.Object) objEnumeration54);
        properties27.clear();
        java.util.Properties properties57 = new java.util.Properties();
        java.util.Properties properties58 = new java.util.Properties();
        java.lang.Object obj60 = properties58.remove((java.lang.Object) (-1.0d));
        int int61 = properties58.size();
        java.util.Enumeration<java.lang.Object> objEnumeration62 = properties58.elements();
        java.util.Properties properties63 = new java.util.Properties();
        properties63.clear();
        java.lang.String str65 = properties63.toString();
        boolean boolean66 = properties27.replace((java.lang.Object) properties57, (java.lang.Object) properties58, (java.lang.Object) str65);
        java.util.Enumeration<?> wildcardEnumeration67 = properties58.propertyNames();
        boolean boolean68 = properties0.remove((java.lang.Object) atomikosProperties14, (java.lang.Object) properties58);
        java.lang.Object obj69 = properties58.clone();
        boolean boolean70 = properties58.isEmpty();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(recovery11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 86400000L + "'", long12 == 86400000L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 50 + "'", int18 == 50);
        org.junit.Assert.assertNotNull(recovery19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 50 + "'", int24 == 50);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{}" + "'", str28, "{}");
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "{}" + "'", str36, "{}");
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration43);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(wildcardEnumeration46);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "{}");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "{}" + "'", str49, "{}");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNotNull(objEnumeration54);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(objEnumeration62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "{}" + "'", str65, "{}");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertEquals(obj69.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj69), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj69), "{}");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test10719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10719");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxTimeout((long) (byte) 0);
        atomikosProperties0.setAllowSubTransactions(true);
        java.util.Properties properties11 = new java.util.Properties();
        java.lang.Object obj13 = properties11.remove((java.lang.Object) (-1.0d));
        boolean boolean14 = properties11.isEmpty();
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.String str16 = properties15.toString();
        java.lang.Object obj18 = properties15.remove((java.lang.Object) (short) 100);
        java.lang.Object obj21 = properties15.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean23 = properties15.containsKey((java.lang.Object) 0L);
        java.lang.Object obj26 = properties15.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj29 = properties15.setProperty("", "{-1.0=100}");
        java.lang.Object obj30 = properties15.clone();
        java.lang.Object obj31 = properties11.get((java.lang.Object) properties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery33 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery33.retryInterval = (short) 100;
        recovery33.forgetOrphanedLogEntriesDelay = 'a';
        long long38 = recovery33.getDelay();
        long long39 = recovery33.getRetryInterval();
        recovery33.forgetOrphanedLogEntriesDelay = 10000L;
        atomikosProperties0.set(properties15, "tmlog", (java.lang.Object) recovery33);
        atomikosProperties0.setConsoleFileCount((int) ' ');
        atomikosProperties0.allowSubTransactions = false;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery47 = atomikosProperties0.recovery;
        recovery47.setRetryInterval((long) '#');
        long long50 = recovery47.retryInterval;
        recovery47.setDelay((long) 97);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(obj30);
// flaky:         org.junit.Assert.assertEquals(obj30.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10000L + "'", long38 == 10000L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 100L + "'", long39 == 100L);
        org.junit.Assert.assertNotNull(recovery47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 35L + "'", long50 == 35L);
    }

    @Test
    public void test10720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10720");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.setService("tm.out");
        atomikosProperties0.setSerialJtaTransactions(true);
        atomikosProperties0.logBaseDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties0.defaultJtaTimeout = 32L;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean19 = atomikosProperties18.isSerialJtaTransactions();
        atomikosProperties18.logBaseName = "{-1.0=100}";
        int int22 = atomikosProperties18.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery23 = atomikosProperties18.getRecovery();
        atomikosProperties18.setConsoleFileCount((int) (byte) 100);
        atomikosProperties18.setAllowSubTransactions(true);
        atomikosProperties18.setService("tm.out");
        int int30 = atomikosProperties18.consoleFileLimit;
        atomikosProperties18.setDefaultJtaTimeout((long) ' ');
        atomikosProperties18.setTransactionManagerUniqueName("{-1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel35 = atomikosProperties18.getConsoleLogLevel();
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel35;
        atomikosProperties0.allowSubTransactions = true;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 50 + "'", int22 == 50);
        org.junit.Assert.assertNotNull(recovery23);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel35 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel35.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test10721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10721");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties();
        java.lang.String str2 = properties1.toString();
        boolean boolean3 = properties1.isEmpty();
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean12 = properties4.containsKey((java.lang.Object) 0L);
        boolean boolean13 = properties1.containsValue((java.lang.Object) 0L);
        boolean boolean16 = properties0.replace((java.lang.Object) 0L, (java.lang.Object) 0.0f, (java.lang.Object) 10.0d);
        java.util.Properties properties17 = new java.util.Properties();
        java.lang.String str18 = properties17.toString();
        java.lang.Object obj20 = properties17.remove((java.lang.Object) (short) 100);
        java.lang.Object obj23 = properties17.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj24 = properties17.clone();
        boolean boolean25 = properties0.contains(obj24);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet26 = properties0.entrySet();
        java.io.OutputStream outputStream27 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream27, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{}" + "'", str18, "{}");
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "{1.0=-1}");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objEntrySet26);
    }

    @Test
    public void test10722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10722");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getRetryInterval();
        long long2 = recovery0.getDelay();
        long long3 = recovery0.forgetOrphanedLogEntriesDelay;
        recovery0.delay = 2L;
        recovery0.maxRetries = ' ';
        long long8 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.delay = 32;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 86400000L + "'", long3 == 86400000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 86400000L + "'", long8 == 86400000L);
    }

    @Test
    public void test10723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10723");
        java.util.Properties properties0 = new java.util.Properties();
        properties0.clear();
        java.lang.String str2 = properties0.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery3.retryInterval = (short) 100;
        recovery3.setForgetOrphanedLogEntriesDelay((long) 5);
        recovery3.setRetryInterval((long) (-1));
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery10.retryInterval = (short) 100;
        recovery10.forgetOrphanedLogEntriesDelay = 'a';
        long long15 = recovery10.retryInterval;
        recovery10.forgetOrphanedLogEntriesDelay = 0L;
        java.lang.Object obj18 = properties0.put((java.lang.Object) (-1), (java.lang.Object) recovery10);
        boolean boolean19 = properties0.isEmpty();
        java.util.Properties properties20 = new java.util.Properties();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        boolean boolean23 = properties21.isEmpty();
        java.util.Properties properties24 = new java.util.Properties();
        java.lang.String str25 = properties24.toString();
        java.lang.Object obj27 = properties24.remove((java.lang.Object) (short) 100);
        java.lang.Object obj30 = properties24.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean32 = properties24.containsKey((java.lang.Object) 0L);
        boolean boolean33 = properties21.containsValue((java.lang.Object) 0L);
        boolean boolean36 = properties20.replace((java.lang.Object) 0L, (java.lang.Object) 0.0f, (java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration37 = properties20.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties39 = atomikosProperties38.asProperties();
        atomikosProperties38.service = "{-1.0=100}";
        java.lang.String str42 = atomikosProperties38.getTransactionManagerUniqueName();
        boolean boolean43 = atomikosProperties38.isSerialJtaTransactions();
        java.lang.String str44 = atomikosProperties38.logBaseName;
        boolean boolean45 = properties0.remove((java.lang.Object) properties20, (java.lang.Object) str44);
        int int46 = properties0.size();
        java.io.OutputStream outputStream47 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream47, "{{1.0=-1}=hi!}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{}" + "'", str25, "{}");
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objEnumeration37);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "tmlog" + "'", str44, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
    }

    @Test
    public void test10724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10724");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean3 = properties0.containsValue((java.lang.Object) (-1L));
        java.lang.Object obj5 = properties0.get((java.lang.Object) 97L);
        properties0.clear();
        java.lang.String str8 = properties0.getProperty("{1.0=-1}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery9.retryInterval = (short) 100;
        recovery9.setForgetOrphanedLogEntriesDelay((long) 5);
        recovery9.setForgetOrphanedLogEntriesDelay((long) (short) 0);
        boolean boolean16 = properties0.containsValue((java.lang.Object) recovery9);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery17 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery17.retryInterval = (byte) 0;
        int int20 = recovery17.maxRetries;
        recovery17.setForgetOrphanedLogEntriesDelay(86400000L);
        java.lang.Object obj23 = properties0.get((java.lang.Object) recovery17);
        recovery17.maxRetries = (short) -1;
        int int26 = recovery17.maxRetries;
        recovery17.setMaxRetries((int) '#');
        recovery17.setDelay(5L);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test10725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10725");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("{}", "{}");
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean12 = properties4.containsKey((java.lang.Object) 0L);
        java.lang.Object obj15 = properties4.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties16 = new java.util.Properties();
        java.lang.String str17 = properties16.toString();
        java.lang.Object obj19 = properties16.remove((java.lang.Object) (short) 100);
        java.lang.Object obj22 = properties16.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj23 = properties16.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties16.elements();
        properties4.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties16);
        java.lang.Object obj26 = properties0.get((java.lang.Object) properties4);
        java.util.Set<java.lang.Object> objSet27 = properties4.keySet();
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties4.elements();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objSet27);
        org.junit.Assert.assertNotNull(objEnumeration28);
    }

    @Test
    public void test10726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10726");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        long long7 = atomikosProperties0.getCheckpointInterval();
        boolean boolean8 = atomikosProperties0.isThreadedTwoPhaseCommit();
        java.lang.String str9 = atomikosProperties0.service;
        int int10 = atomikosProperties0.consoleFileCount;
        atomikosProperties0.logBaseName = "tm.out";
        java.util.Properties properties13 = new java.util.Properties();
        java.lang.String str14 = properties13.toString();
        java.lang.Object obj16 = properties13.remove((java.lang.Object) (short) 100);
        java.lang.Object obj19 = properties13.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        java.lang.Object obj24 = properties21.remove((java.lang.Object) (short) 100);
        java.lang.Object obj27 = properties21.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj28 = properties21.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties21.elements();
        java.lang.Object obj30 = properties13.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration29);
        java.util.Properties properties31 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration32 = properties31.propertyNames();
        java.lang.Object obj33 = properties31.clone();
        java.util.Properties properties34 = new java.util.Properties();
        java.lang.String str35 = properties34.toString();
        boolean boolean36 = properties34.isEmpty();
        java.lang.Object obj39 = properties34.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration40 = properties34.elements();
        java.lang.Object obj41 = properties13.put(obj33, (java.lang.Object) objEnumeration40);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties43 = atomikosProperties42.asProperties();
        atomikosProperties42.service = "{-1.0=100}";
        long long46 = atomikosProperties42.getDefaultJtaTimeout();
        atomikosProperties42.setThreadedTwoPhaseCommit(true);
        java.lang.String str49 = atomikosProperties42.getLogBaseName();
        boolean boolean50 = properties13.equals((java.lang.Object) atomikosProperties42);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties53 = atomikosProperties52.asProperties();
        atomikosProperties52.service = "{-1.0=100}";
        long long56 = atomikosProperties52.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel57 = null;
        atomikosProperties52.setConsoleLogLevel(atomikosLoggingLevel57);
        atomikosProperties52.setTransactionManagerUniqueName("{-1.0=100}");
        atomikosProperties0.set(properties13, "tmlog", (java.lang.Object) atomikosProperties52);
        long long62 = atomikosProperties0.maxTimeout;
        atomikosProperties0.consoleFileCount = 100;
        java.lang.String str65 = atomikosProperties0.getConsoleFileName();
        java.lang.String str66 = atomikosProperties0.logBaseDir;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{-1.0=100}" + "'", str9, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{}" + "'", str14, "{}");
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(wildcardEnumeration32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "{}");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "{}" + "'", str35, "{}");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(objEnumeration40);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10000L + "'", long46 == 10000L);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(properties53);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 10000L + "'", long56 == 10000L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 300000L + "'", long62 == 300000L);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "tm.out" + "'", str65, "tm.out");
        org.junit.Assert.assertNull(str66);
    }

    @Test
    public void test10727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10727");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setLogBaseDir("{-1.0=100}");
        int int10 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setLogBaseDir("{}");
        atomikosProperties0.transactionManagerUniqueName = "{={-1.0=100}, -1.0=100}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test10728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10728");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties0.setMaxActives(100);
        boolean boolean9 = atomikosProperties0.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.recovery;
        atomikosProperties0.setConsoleFileLimit(100);
        boolean boolean13 = atomikosProperties0.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery14 = atomikosProperties0.getRecovery();
        recovery14.delay = 0L;
        recovery14.setRetryInterval((long) (short) 1);
        recovery14.delay = (byte) -1;
        recovery14.delay = '#';
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(recovery14);
    }

    @Test
    public void test10729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10729");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.setCheckpointInterval((long) 5);
        atomikosProperties0.setLogBaseDir("{-1.0=100}");
        java.lang.String str11 = atomikosProperties0.getOutputDir();
        boolean boolean12 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.transactionManagerUniqueName = "{{}={}}";
        java.lang.String str15 = atomikosProperties0.transactionManagerUniqueName;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel16 = atomikosProperties0.consoleLogLevel;
        atomikosProperties0.setAllowSubTransactions(false);
        boolean boolean19 = atomikosProperties0.isAllowSubTransactions();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{{}={}}" + "'", str15, "{{}={}}");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel16 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel16.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test10730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10730");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.service = "tm.out";
        java.lang.String str9 = atomikosProperties0.getOutputDir();
        boolean boolean10 = atomikosProperties0.serialJtaTransactions;
        boolean boolean11 = atomikosProperties0.isSerialJtaTransactions();
        java.lang.String str12 = atomikosProperties0.consoleFileName;
        atomikosProperties0.setDefaultJtaTimeout((long) (short) 1);
        atomikosProperties0.checkpointInterval = (byte) 10;
        long long17 = atomikosProperties0.maxTimeout;
        java.lang.String str18 = atomikosProperties0.service;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 300000L + "'", long17 == 300000L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tm.out" + "'", str18, "tm.out");
    }

    @Test
    public void test10731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10731");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        int int6 = atomikosProperties0.consoleFileCount;
        atomikosProperties0.setConsoleFileCount(0);
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.logBaseName = "tmlog";
        java.lang.String str13 = atomikosProperties0.getLogBaseName();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
    }

    @Test
    public void test10732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10732");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel7 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel7);
        atomikosProperties0.setLogBaseName("{={-1.0=100}, -1.0=100}");
        boolean boolean11 = atomikosProperties0.enableLogging;
        atomikosProperties0.setOutputDir("");
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = atomikosProperties0.consoleLogLevel;
        atomikosProperties0.checkpointInterval = 0L;
        boolean boolean17 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.consoleFileLimit = (byte) 100;
        java.lang.String str20 = atomikosProperties0.transactionManagerUniqueName;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel21 = atomikosProperties0.getConsoleLogLevel();
        atomikosProperties0.setDefaultJtaTimeout((long) 2);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(atomikosLoggingLevel14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(atomikosLoggingLevel21);
    }

    @Test
    public void test10733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10733");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setForceShutdownOnVmExit(false);
        boolean boolean7 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.serialJtaTransactions = true;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test10734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10734");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties0.setMaxActives(100);
        java.lang.String str9 = atomikosProperties0.logBaseDir;
        atomikosProperties0.consoleFileCount = (short) 0;
        atomikosProperties0.defaultJtaTimeout = 10000L;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = atomikosProperties0.consoleLogLevel;
        long long15 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.setMaxTimeout((long) 19);
        atomikosProperties0.setLogBaseDir("{hi!={{={-1.0=100}, -1.0=100}=}}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel14 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel14.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
    }

    @Test
    public void test10735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10735");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        long long7 = atomikosProperties0.getCheckpointInterval();
        boolean boolean8 = atomikosProperties0.isThreadedTwoPhaseCommit();
        java.lang.String str9 = atomikosProperties0.service;
        int int10 = atomikosProperties0.consoleFileCount;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = atomikosProperties0.recovery;
        java.util.Properties properties12 = new java.util.Properties();
        java.lang.String str13 = properties12.toString();
        java.lang.Object obj15 = properties12.remove((java.lang.Object) (short) 100);
        java.lang.Object obj18 = properties12.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean20 = properties12.containsKey((java.lang.Object) 0L);
        java.lang.Object obj23 = properties12.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties24 = new java.util.Properties();
        java.lang.String str25 = properties24.toString();
        java.lang.Object obj27 = properties24.remove((java.lang.Object) (short) 100);
        java.lang.Object obj30 = properties24.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj31 = properties24.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties24.elements();
        properties12.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        boolean boolean35 = properties12.equals((java.lang.Object) 1.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties37 = atomikosProperties36.asProperties();
        atomikosProperties36.service = "{-1.0=100}";
        long long40 = atomikosProperties36.getDefaultJtaTimeout();
        long long41 = atomikosProperties36.getMaxTimeout();
        int int42 = atomikosProperties36.consoleFileCount;
        int int43 = atomikosProperties36.getMaxActives();
        boolean boolean44 = atomikosProperties36.forceShutdownOnVmExit;
        java.lang.String str45 = atomikosProperties36.getTransactionManagerUniqueName();
        boolean boolean46 = properties12.containsValue((java.lang.Object) atomikosProperties36);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties47.setAllowSubTransactions(true);
        boolean boolean50 = atomikosProperties47.enableLogging;
        boolean boolean51 = atomikosProperties47.isForceShutdownOnVmExit();
        java.lang.String str52 = atomikosProperties47.getService();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties53.setAllowSubTransactions(true);
        boolean boolean56 = atomikosProperties53.enableLogging;
        boolean boolean57 = atomikosProperties53.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel58 = atomikosProperties53.consoleLogLevel;
        atomikosProperties47.consoleLogLevel = atomikosLoggingLevel58;
        atomikosProperties36.setConsoleLogLevel(atomikosLoggingLevel58);
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel58);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{-1.0=100}" + "'", str9, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(recovery11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{}" + "'", str13, "{}");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{}" + "'", str25, "{}");
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10000L + "'", long40 == 10000L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 300000L + "'", long41 == 300000L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 50 + "'", int43 == 50);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel58 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel58.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test10736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10736");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        long long7 = atomikosProperties0.getCheckpointInterval();
        boolean boolean8 = atomikosProperties0.threadedTwoPhaseCommit;
        java.lang.String str9 = atomikosProperties0.transactionManagerUniqueName;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test10737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10737");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.setLogBaseName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery13 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileLimit((int) (short) 10);
        atomikosProperties0.setEnableLogging(true);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertNotNull(recovery13);
    }

    @Test
    public void test10738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10738");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.setCheckpointInterval((long) 5);
        atomikosProperties0.setLogBaseDir("{-1.0=100}");
        java.lang.String str11 = atomikosProperties0.getOutputDir();
        boolean boolean12 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.transactionManagerUniqueName = "{{}={}}";
        java.lang.String str15 = atomikosProperties0.transactionManagerUniqueName;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel16 = atomikosProperties0.consoleLogLevel;
        atomikosProperties0.setAllowSubTransactions(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties20 = atomikosProperties19.asProperties();
        atomikosProperties19.service = "{-1.0=100}";
        long long23 = atomikosProperties19.getDefaultJtaTimeout();
        atomikosProperties19.setThreadedTwoPhaseCommit(true);
        boolean boolean26 = atomikosProperties19.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery27 = atomikosProperties19.recovery;
        atomikosProperties19.setLogBaseDir("");
        long long30 = atomikosProperties19.maxTimeout;
        atomikosProperties19.setConsoleFileLimit(0);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel33 = atomikosProperties19.getConsoleLogLevel();
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel33;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{{}={}}" + "'", str15, "{{}={}}");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel16 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel16.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 10000L + "'", long23 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(recovery27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 300000L + "'", long30 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel33 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel33.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test10739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10739");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.setCheckpointInterval((long) 5);
        atomikosProperties0.setConsoleFileCount(0);
        boolean boolean11 = atomikosProperties0.isThreadedTwoPhaseCommit();
        int int12 = atomikosProperties0.maxActives;
        atomikosProperties0.setConsoleFileName("{={-1.0=100}, -1.0=100}");
        atomikosProperties0.setConsoleFileCount(50);
        java.lang.String str17 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.setOutputDir("tm.out");
        java.lang.String str20 = atomikosProperties0.getLogBaseDir();
        java.lang.String str21 = atomikosProperties0.getService();
        java.lang.String str22 = atomikosProperties0.getService();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{-1.0=100}" + "'", str21, "{-1.0=100}");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{-1.0=100}" + "'", str22, "{-1.0=100}");
    }

    @Test
    public void test10740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10740");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.setService("tm.out");
        boolean boolean12 = atomikosProperties0.isForceShutdownOnVmExit();
        boolean boolean13 = atomikosProperties0.isAllowSubTransactions();
        atomikosProperties0.setLogBaseName("");
        boolean boolean16 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        java.lang.Object obj22 = properties19.remove((java.lang.Object) (short) 100);
        java.lang.Object obj25 = properties19.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean27 = properties19.containsKey((java.lang.Object) 0L);
        java.lang.Object obj30 = properties19.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj33 = properties19.setProperty("", "{-1.0=100}");
        java.lang.String str34 = properties19.toString();
        java.util.Set<java.lang.String> strSet35 = properties19.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties37 = atomikosProperties36.asProperties();
        atomikosProperties36.service = "{-1.0=100}";
        long long40 = atomikosProperties36.getDefaultJtaTimeout();
        atomikosProperties36.enableLogging = false;
        atomikosProperties36.setMaxTimeout((long) (byte) 0);
        atomikosProperties36.setAllowSubTransactions(true);
        java.util.Properties properties47 = new java.util.Properties();
        java.lang.Object obj49 = properties47.remove((java.lang.Object) (-1.0d));
        boolean boolean50 = properties47.isEmpty();
        java.util.Collection<java.lang.Object> objCollection51 = properties47.values();
        java.lang.Object obj52 = properties19.put((java.lang.Object) true, (java.lang.Object) properties47);
        java.util.Properties properties53 = new java.util.Properties(properties47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean56 = atomikosProperties55.isSerialJtaTransactions();
        atomikosProperties55.logBaseName = "{-1.0=100}";
        int int59 = atomikosProperties55.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery60 = atomikosProperties55.getRecovery();
        atomikosProperties55.setConsoleFileCount((int) (byte) 100);
        java.lang.String str63 = atomikosProperties55.logBaseName;
        atomikosProperties55.setCheckpointInterval((long) 18);
        atomikosProperties0.set(properties47, "hi!", (java.lang.Object) atomikosProperties55);
        java.util.Enumeration<?> wildcardEnumeration67 = properties47.propertyNames();
        java.lang.String str69 = properties47.getProperty("");
        java.lang.Class<?> wildcardClass70 = properties47.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(obj33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str34, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10000L + "'", long40 == 10000L);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objCollection51);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 50 + "'", int59 == 50);
        org.junit.Assert.assertNotNull(recovery60);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "{-1.0=100}" + "'", str63, "{-1.0=100}");
        org.junit.Assert.assertNotNull(wildcardEnumeration67);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test10741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10741");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean3 = atomikosProperties0.enableLogging;
        atomikosProperties0.consoleFileLimit = (byte) 100;
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.util.Properties properties8 = new java.util.Properties(properties6);
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.lang.Object obj13 = properties10.remove((java.lang.Object) (short) 100);
        java.lang.Object obj16 = properties10.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean18 = properties10.containsKey((java.lang.Object) 0L);
        java.lang.Object obj21 = properties10.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties22 = new java.util.Properties(properties10);
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties22.elements();
        atomikosProperties0.set(properties8, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties22);
        int int25 = properties8.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet26 = properties8.entrySet();
        boolean boolean27 = properties8.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties29 = atomikosProperties28.asProperties();
        java.util.Properties properties30 = new java.util.Properties();
        java.lang.Object obj32 = properties30.remove((java.lang.Object) (-1.0d));
        boolean boolean33 = properties30.isEmpty();
        int int34 = properties30.size();
        java.lang.String str36 = properties30.getProperty("{}");
        java.lang.Object obj37 = properties29.remove((java.lang.Object) properties30);
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties30);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties40 = atomikosProperties39.asProperties();
        atomikosProperties39.service = "{-1.0=100}";
        long long43 = atomikosProperties39.getDefaultJtaTimeout();
        atomikosProperties39.serialJtaTransactions = true;
        atomikosProperties39.maxActives = ' ';
        int int48 = atomikosProperties39.getConsoleFileCount();
        int int49 = atomikosProperties39.consoleFileLimit;
        java.util.Properties properties50 = atomikosProperties39.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean52 = atomikosProperties51.isSerialJtaTransactions();
        atomikosProperties51.logBaseName = "{-1.0=100}";
        int int55 = atomikosProperties51.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery56 = atomikosProperties51.getRecovery();
        atomikosProperties51.setConsoleFileCount((int) (byte) 100);
        atomikosProperties51.setAllowSubTransactions(true);
        atomikosProperties51.setService("tm.out");
        boolean boolean63 = atomikosProperties51.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel64 = atomikosProperties51.getConsoleLogLevel();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties65.setAllowSubTransactions(true);
        boolean boolean68 = atomikosProperties65.enableLogging;
        atomikosProperties65.consoleFileLimit = (byte) 100;
        java.util.Properties properties71 = new java.util.Properties();
        java.lang.String str72 = properties71.toString();
        java.util.Properties properties73 = new java.util.Properties(properties71);
        java.util.Properties properties75 = new java.util.Properties();
        java.lang.String str76 = properties75.toString();
        java.lang.Object obj78 = properties75.remove((java.lang.Object) (short) 100);
        java.lang.Object obj81 = properties75.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean83 = properties75.containsKey((java.lang.Object) 0L);
        java.lang.Object obj86 = properties75.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties87 = new java.util.Properties(properties75);
        java.util.Enumeration<java.lang.Object> objEnumeration88 = properties87.elements();
        atomikosProperties65.set(properties73, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties87);
        atomikosProperties65.allowSubTransactions = false;
        java.lang.Object obj92 = properties50.put((java.lang.Object) atomikosProperties51, (java.lang.Object) false);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel93 = atomikosProperties51.consoleLogLevel;
        java.lang.String str94 = atomikosProperties51.getTransactionManagerUniqueName();
        atomikosProperties51.setOutputDir("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        long long97 = atomikosProperties51.getMaxTimeout();
        java.lang.String str98 = atomikosProperties51.logBaseDir;
        boolean boolean99 = properties8.equals((java.lang.Object) atomikosProperties51);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objEntrySet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 10000L + "'", long43 == 10000L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 50 + "'", int55 == 50);
        org.junit.Assert.assertNotNull(recovery56);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel64 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel64.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "{}" + "'", str72, "{}");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "{}" + "'", str76, "{}");
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertNull(obj81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertNotNull(objEnumeration88);
        org.junit.Assert.assertNull(obj92);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel93 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel93.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str94);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 300000L + "'", long97 == 300000L);
        org.junit.Assert.assertNull(str98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test10742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10742");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        int int6 = atomikosProperties0.consoleFileCount;
        long long7 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.serialJtaTransactions = true;
        boolean boolean10 = atomikosProperties0.isForceShutdownOnVmExit();
        boolean boolean11 = atomikosProperties0.isThreadedTwoPhaseCommit();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test10743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10743");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = (byte) 10;
        long long7 = atomikosProperties0.getMaxTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel10 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel10;
        atomikosProperties0.setMaxActives((int) (short) 0);
        atomikosProperties0.setAllowSubTransactions(false);
        atomikosProperties0.setService("{0={100=100}, {}={}}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
    }

    @Test
    public void test10744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10744");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        atomikosProperties0.consoleFileCount = (byte) 0;
        int int7 = atomikosProperties0.maxActives;
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.String str9 = properties8.toString();
        java.lang.Object obj11 = properties8.remove((java.lang.Object) (short) 100);
        java.lang.Object obj14 = properties8.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean16 = properties8.containsKey((java.lang.Object) 0L);
        java.lang.Object obj19 = properties8.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj22 = properties8.setProperty("", "{-1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties25 = atomikosProperties24.asProperties();
        atomikosProperties24.service = "{-1.0=100}";
        long long28 = atomikosProperties24.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel29 = null;
        atomikosProperties24.setConsoleLogLevel(atomikosLoggingLevel29);
        int int31 = atomikosProperties24.maxActives;
        atomikosProperties24.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery34 = atomikosProperties24.getRecovery();
        atomikosProperties24.forceShutdownOnVmExit = false;
        java.lang.String str37 = atomikosProperties24.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties39 = atomikosProperties38.asProperties();
        atomikosProperties38.service = "{-1.0=100}";
        long long42 = atomikosProperties38.getDefaultJtaTimeout();
        atomikosProperties38.enableLogging = false;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties45.setEnableLogging(true);
        atomikosProperties45.consoleFileCount = 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties51 = atomikosProperties50.asProperties();
        atomikosProperties50.service = "{-1.0=100}";
        long long54 = atomikosProperties50.getDefaultJtaTimeout();
        boolean boolean55 = atomikosProperties50.enableLogging;
        boolean boolean56 = atomikosProperties50.isForceShutdownOnVmExit();
        atomikosProperties50.consoleFileLimit = (byte) -1;
        java.lang.String str59 = atomikosProperties50.getService();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel60 = atomikosProperties50.consoleLogLevel;
        atomikosProperties45.consoleLogLevel = atomikosLoggingLevel60;
        atomikosProperties38.setConsoleLogLevel(atomikosLoggingLevel60);
        atomikosProperties24.setConsoleLogLevel(atomikosLoggingLevel60);
        atomikosProperties0.set(properties8, "{100=100}", (java.lang.Object) atomikosProperties24);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel65 = atomikosProperties24.getConsoleLogLevel();
        long long66 = atomikosProperties24.getCheckpointInterval();
        atomikosProperties24.defaultJtaTimeout = 10;
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10000L + "'", long28 == 10000L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 50 + "'", int31 == 50);
        org.junit.Assert.assertNotNull(recovery34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tm.out" + "'", str37, "tm.out");
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 10000L + "'", long42 == 10000L);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 10000L + "'", long54 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "{-1.0=100}" + "'", str59, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel60 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel60.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel65 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel65.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 500L + "'", long66 == 500L);
    }

    @Test
    public void test10745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10745");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.Object> objSet6 = properties5.keySet();
        java.util.Set<java.lang.Object> objSet7 = properties5.keySet();
        java.util.Properties properties8 = new java.util.Properties();
        properties8.clear();
        java.lang.String str10 = properties8.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery11.retryInterval = (short) 100;
        recovery11.setForgetOrphanedLogEntriesDelay((long) 5);
        recovery11.setRetryInterval((long) (-1));
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery18.retryInterval = (short) 100;
        recovery18.forgetOrphanedLogEntriesDelay = 'a';
        long long23 = recovery18.retryInterval;
        recovery18.forgetOrphanedLogEntriesDelay = 0L;
        java.lang.Object obj26 = properties8.put((java.lang.Object) (-1), (java.lang.Object) recovery18);
        int int27 = recovery18.getMaxRetries();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties29 = atomikosProperties28.asProperties();
        atomikosProperties28.service = "{-1.0=100}";
        long long32 = atomikosProperties28.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel33 = null;
        atomikosProperties28.setConsoleLogLevel(atomikosLoggingLevel33);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel35 = null;
        atomikosProperties28.setConsoleLogLevel(atomikosLoggingLevel35);
        java.lang.String str37 = atomikosProperties28.getLogBaseName();
        boolean boolean38 = atomikosProperties28.allowSubTransactions;
        java.lang.Object obj39 = properties5.putIfAbsent((java.lang.Object) recovery18, (java.lang.Object) atomikosProperties28);
        int int40 = atomikosProperties28.consoleFileCount;
        int int41 = atomikosProperties28.maxActives;
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(objSet6);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 100L + "'", long23 == 100L);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5 + "'", int27 == 5);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10000L + "'", long32 == 10000L);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tmlog" + "'", str37, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 50 + "'", int41 == 50);
    }

    @Test
    public void test10746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10746");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.String str9 = properties8.toString();
        java.lang.Object obj11 = properties8.remove((java.lang.Object) (short) 100);
        java.lang.Object obj14 = properties8.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj15 = properties8.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties8.elements();
        java.lang.Object obj17 = properties0.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration16);
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration19 = properties18.propertyNames();
        java.lang.Object obj20 = properties18.clone();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        boolean boolean23 = properties21.isEmpty();
        java.lang.Object obj26 = properties21.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties21.elements();
        java.lang.Object obj28 = properties0.put(obj20, (java.lang.Object) objEnumeration27);
        java.lang.String str29 = properties0.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean31 = atomikosProperties30.isSerialJtaTransactions();
        atomikosProperties30.logBaseName = "{-1.0=100}";
        int int34 = atomikosProperties30.maxActives;
        atomikosProperties30.setAllowSubTransactions(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery37 = atomikosProperties30.getRecovery();
        atomikosProperties30.transactionManagerUniqueName = "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery40 = atomikosProperties30.getRecovery();
        long long41 = recovery40.forgetOrphanedLogEntriesDelay;
        long long42 = recovery40.getDelay();
        java.lang.Object obj43 = properties0.remove((java.lang.Object) recovery40);
        recovery40.maxRetries = 19;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(wildcardEnumeration19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 50 + "'", int34 == 50);
        org.junit.Assert.assertNotNull(recovery37);
        org.junit.Assert.assertNotNull(recovery40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 86400000L + "'", long41 == 86400000L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 10000L + "'", long42 == 10000L);
        org.junit.Assert.assertNull(obj43);
    }

    @Test
    public void test10747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10747");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.setCheckpointInterval((long) 5);
        atomikosProperties0.setConsoleFileCount(0);
        atomikosProperties0.setService("{-1.0=100}");
        long long13 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.consoleFileLimit = 'a';
        java.lang.String str16 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean17 = atomikosProperties0.isThreadedTwoPhaseCommit();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 5L + "'", long13 == 5L);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test10748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10748");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties12 = new java.util.Properties();
        java.lang.String str13 = properties12.toString();
        java.lang.Object obj15 = properties12.remove((java.lang.Object) (short) 100);
        java.lang.Object obj18 = properties12.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj19 = properties12.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties12.elements();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties12);
        boolean boolean23 = properties0.equals((java.lang.Object) 1.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean25 = atomikosProperties24.isThreadedTwoPhaseCommit();
        long long26 = atomikosProperties24.getCheckpointInterval();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean28 = atomikosProperties27.isSerialJtaTransactions();
        atomikosProperties27.logBaseName = "{-1.0=100}";
        int int31 = atomikosProperties27.maxActives;
        int int32 = atomikosProperties27.getConsoleFileCount();
        boolean boolean33 = properties0.remove((java.lang.Object) atomikosProperties24, (java.lang.Object) atomikosProperties27);
        java.io.Writer writer34 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(writer34, "{com.atomikos.icatch.{1.0=-1, -1.0=100}=86400000, -1.0=100}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{}" + "'", str13, "{}");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 500L + "'", long26 == 500L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 50 + "'", int31 == 50);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test10749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10749");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.recovery;
        atomikosProperties0.setLogBaseDir("");
        java.lang.String str11 = atomikosProperties0.logBaseName;
        atomikosProperties0.defaultJtaTimeout = 100;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = atomikosProperties0.consoleLogLevel;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tmlog" + "'", str11, "tmlog");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel14 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel14.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test10750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10750");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.maxActives = (short) -1;
        atomikosProperties0.setLogBaseDir("{-1.0=100}");
        boolean boolean7 = atomikosProperties0.isForceShutdownOnVmExit();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test10751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10751");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.String str9 = properties8.toString();
        java.lang.Object obj11 = properties8.remove((java.lang.Object) (short) 100);
        java.lang.Object obj14 = properties8.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj15 = properties8.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties8.elements();
        java.lang.Object obj17 = properties0.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration16);
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration19 = properties18.propertyNames();
        java.lang.Object obj20 = properties18.clone();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        boolean boolean23 = properties21.isEmpty();
        java.lang.Object obj26 = properties21.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties21.elements();
        java.lang.Object obj28 = properties0.put(obj20, (java.lang.Object) objEnumeration27);
        properties0.clear();
        java.lang.String str30 = properties0.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties32 = atomikosProperties31.asProperties();
        atomikosProperties31.service = "{-1.0=100}";
        long long35 = atomikosProperties31.getDefaultJtaTimeout();
        atomikosProperties31.serialJtaTransactions = true;
        atomikosProperties31.maxActives = ' ';
        int int40 = atomikosProperties31.getConsoleFileCount();
        boolean boolean41 = properties0.equals((java.lang.Object) atomikosProperties31);
        java.lang.Object obj42 = properties0.clone();
        java.util.Enumeration<?> wildcardEnumeration43 = properties0.propertyNames();
        boolean boolean44 = properties0.isEmpty();
        java.util.Properties properties45 = new java.util.Properties();
        java.util.Properties properties46 = new java.util.Properties();
        java.lang.String str47 = properties46.toString();
        boolean boolean48 = properties46.isEmpty();
        java.util.Properties properties49 = new java.util.Properties();
        java.lang.String str50 = properties49.toString();
        java.lang.Object obj52 = properties49.remove((java.lang.Object) (short) 100);
        java.lang.Object obj55 = properties49.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean57 = properties49.containsKey((java.lang.Object) 0L);
        boolean boolean58 = properties46.containsValue((java.lang.Object) 0L);
        boolean boolean61 = properties45.replace((java.lang.Object) 0L, (java.lang.Object) 0.0f, (java.lang.Object) 10.0d);
        java.util.Set<java.lang.String> strSet62 = properties45.stringPropertyNames();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties45);
        java.util.Properties properties64 = new java.util.Properties();
        java.lang.String str65 = properties64.toString();
        java.util.Properties properties66 = new java.util.Properties(properties64);
        boolean boolean67 = properties66.isEmpty();
        java.lang.Object obj70 = properties66.setProperty("{1.0=-1}", "");
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties66);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery72 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery72.retryInterval = (short) 100;
        recovery72.forgetOrphanedLogEntriesDelay = 'a';
        long long77 = recovery72.getDelay();
        int int78 = recovery72.maxRetries;
        int int79 = recovery72.maxRetries;
        long long80 = recovery72.getRetryInterval();
        recovery72.retryInterval = 10L;
        long long83 = recovery72.getForgetOrphanedLogEntriesDelay();
        int int84 = recovery72.maxRetries;
        long long85 = recovery72.getRetryInterval();
        long long86 = recovery72.retryInterval;
        recovery72.delay = 52L;
        java.lang.Object obj89 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean90 = properties66.remove((java.lang.Object) recovery72, obj89);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(wildcardEnumeration19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{}" + "'", str30, "{}");
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10000L + "'", long35 == 10000L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "{}");
        org.junit.Assert.assertNotNull(wildcardEnumeration43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "{}" + "'", str47, "{}");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "{}" + "'", str50, "{}");
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "{}" + "'", str65, "{}");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 10000L + "'", long77 == 10000L);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 5 + "'", int78 == 5);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 5 + "'", int79 == 5);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 100L + "'", long80 == 100L);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 97L + "'", long83 == 97L);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 5 + "'", int84 == 5);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 10L + "'", long85 == 10L);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 10L + "'", long86 == 10L);
    }

    @Test
    public void test10752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10752");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.maxActives = ' ';
        int int9 = atomikosProperties0.getConsoleFileCount();
        int int10 = atomikosProperties0.consoleFileLimit;
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        atomikosProperties0.threadedTwoPhaseCommit = true;
        atomikosProperties0.setCheckpointInterval((long) 97);
        java.lang.String str16 = atomikosProperties0.getService();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{-1.0=100}" + "'", str16, "{-1.0=100}");
    }

    @Test
    public void test10753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10753");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties0.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.elements();
        java.util.Properties properties6 = new java.util.Properties(properties0);
        java.util.Set<java.lang.String> strSet7 = properties6.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties8.setEnableLogging(true);
        atomikosProperties8.consoleFileCount = 0;
        int int13 = atomikosProperties8.getMaxActives();
        java.lang.String str14 = atomikosProperties8.getLogBaseDir();
        java.lang.String str15 = atomikosProperties8.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery16 = atomikosProperties8.getRecovery();
        boolean boolean17 = atomikosProperties8.serialJtaTransactions;
        atomikosProperties8.defaultJtaTimeout = 1;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties21 = atomikosProperties20.asProperties();
        atomikosProperties20.service = "{-1.0=100}";
        long long24 = atomikosProperties20.getDefaultJtaTimeout();
        atomikosProperties20.setThreadedTwoPhaseCommit(true);
        boolean boolean27 = atomikosProperties20.isEnableLogging();
        atomikosProperties20.defaultJtaTimeout = (byte) 10;
        java.lang.Object obj30 = properties6.getOrDefault((java.lang.Object) 1, (java.lang.Object) atomikosProperties20);
        java.lang.String str32 = properties6.getProperty("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        java.util.Enumeration<?> wildcardEnumeration33 = properties6.propertyNames();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet34 = properties6.entrySet();
        java.io.InputStream inputStream35 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties6.loadFromXML(inputStream35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(recovery16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10000L + "'", long24 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(wildcardEnumeration33);
        org.junit.Assert.assertNotNull(objEntrySet34);
    }

    @Test
    public void test10754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10754");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.maxTimeout = 50;
        java.lang.String str10 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setDefaultJtaTimeout((long) 'a');
        int int13 = atomikosProperties0.maxActives;
        atomikosProperties0.maxTimeout = (short) 0;
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=10, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={1.0=-1}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tm.out" + "'", str10, "tm.out");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
    }

    @Test
    public void test10755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10755");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties0.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.elements();
        java.util.Properties properties6 = new java.util.Properties(properties0);
        boolean boolean7 = properties6.isEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test10756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10756");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.util.Properties properties7 = new java.util.Properties();
        java.lang.String str8 = properties7.toString();
        java.lang.Object obj10 = properties7.remove((java.lang.Object) (short) 100);
        java.lang.Object obj13 = properties7.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int14 = properties7.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery15 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery15.retryInterval = (short) 100;
        recovery15.forgetOrphanedLogEntriesDelay = 'a';
        long long20 = recovery15.retryInterval;
        recovery15.setForgetOrphanedLogEntriesDelay((long) 0);
        java.lang.Object obj23 = properties0.replace((java.lang.Object) int14, (java.lang.Object) recovery15);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet24 = properties0.entrySet();
        java.lang.Object obj25 = null;
        java.util.Properties properties26 = new java.util.Properties();
        java.lang.String str27 = properties26.toString();
        java.util.Properties properties28 = new java.util.Properties(properties26);
        java.util.Properties properties29 = new java.util.Properties();
        java.lang.String str30 = properties29.toString();
        java.lang.Object obj32 = properties29.remove((java.lang.Object) (short) 100);
        java.lang.Object obj35 = properties29.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean37 = properties29.containsKey((java.lang.Object) 0L);
        java.lang.Object obj40 = properties29.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj43 = properties29.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration44 = properties29.keys();
        java.util.Properties properties45 = new java.util.Properties();
        java.lang.String str46 = properties45.toString();
        boolean boolean47 = properties45.isEmpty();
        java.lang.Object obj50 = properties45.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration51 = properties45.elements();
        java.lang.Object obj52 = properties28.replace((java.lang.Object) objEnumeration44, (java.lang.Object) properties45);
        java.util.Enumeration<java.lang.Object> objEnumeration53 = properties45.elements();
        java.util.Enumeration<java.lang.Object> objEnumeration54 = properties45.keys();
        java.lang.Object obj55 = properties45.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties57 = atomikosProperties56.asProperties();
        atomikosProperties56.service = "{-1.0=100}";
        long long60 = atomikosProperties56.getDefaultJtaTimeout();
        atomikosProperties56.setThreadedTwoPhaseCommit(true);
        boolean boolean63 = atomikosProperties56.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery64 = atomikosProperties56.recovery;
        atomikosProperties56.setLogBaseDir("");
        atomikosProperties56.setConsoleFileName("");
        atomikosProperties56.setTransactionManagerUniqueName("{100=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties71.setEnableLogging(true);
        atomikosProperties71.consoleFileCount = 0;
        atomikosProperties71.consoleFileCount = (byte) 0;
        atomikosProperties71.setDefaultJtaTimeout(0L);
        java.lang.Object obj80 = properties45.replace((java.lang.Object) atomikosProperties56, (java.lang.Object) 0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties81 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties82 = atomikosProperties81.asProperties();
        atomikosProperties81.service = "{-1.0=100}";
        long long85 = atomikosProperties81.getDefaultJtaTimeout();
        long long86 = atomikosProperties81.getMaxTimeout();
        int int87 = atomikosProperties81.consoleFileCount;
        long long88 = atomikosProperties81.getCheckpointInterval();
        java.lang.String str89 = atomikosProperties81.outputDir;
        long long90 = atomikosProperties81.getCheckpointInterval();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel91 = atomikosProperties81.getConsoleLogLevel();
        atomikosProperties56.setConsoleLogLevel(atomikosLoggingLevel91);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean93 = properties0.remove(obj25, (java.lang.Object) atomikosLoggingLevel91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 100L + "'", long20 == 100L);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(objEntrySet24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{}" + "'", str27, "{}");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{}" + "'", str30, "{}");
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(objEnumeration44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "{}" + "'", str46, "{}");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNotNull(objEnumeration51);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNotNull(objEnumeration53);
        org.junit.Assert.assertNotNull(objEnumeration54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "{100=100}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "{100=100}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "{100=100}");
        org.junit.Assert.assertNotNull(properties57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 10000L + "'", long60 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(recovery64);
        org.junit.Assert.assertNull(obj80);
        org.junit.Assert.assertNotNull(properties82);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 10000L + "'", long85 == 10000L);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 300000L + "'", long86 == 300000L);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 500L + "'", long88 == 500L);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 500L + "'", long90 == 500L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel91 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel91.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test10757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10757");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        java.lang.String str15 = properties0.toString();
        java.io.InputStream inputStream16 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.loadFromXML(inputStream16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str15, "{={-1.0=100}, -1.0=100}");
    }

    @Test
    public void test10758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10758");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setTransactionManagerUniqueName("{}");
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.logBaseDir = "tm.out";
        int int11 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setMaxActives((int) (byte) 1);
        java.lang.String str14 = atomikosProperties0.consoleFileName;
        atomikosProperties0.setForceShutdownOnVmExit(false);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test10759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10759");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxActives((int) ' ');
        atomikosProperties0.maxActives = (short) -1;
        atomikosProperties0.setService("hi!");
        atomikosProperties0.consoleFileLimit = (byte) 0;
        int int15 = atomikosProperties0.maxActives;
        boolean boolean16 = atomikosProperties0.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery17 = atomikosProperties0.recovery;
        int int18 = atomikosProperties0.consoleFileCount;
        atomikosProperties0.allowSubTransactions = false;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(recovery17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test10760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10760");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties12 = new java.util.Properties();
        java.lang.String str13 = properties12.toString();
        java.lang.Object obj15 = properties12.remove((java.lang.Object) (short) 100);
        java.lang.Object obj18 = properties12.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj19 = properties12.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties12.elements();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties12);
        boolean boolean23 = properties0.equals((java.lang.Object) 1.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties25 = atomikosProperties24.asProperties();
        atomikosProperties24.service = "{-1.0=100}";
        long long28 = atomikosProperties24.getDefaultJtaTimeout();
        long long29 = atomikosProperties24.getMaxTimeout();
        int int30 = atomikosProperties24.consoleFileCount;
        int int31 = atomikosProperties24.getMaxActives();
        boolean boolean32 = atomikosProperties24.forceShutdownOnVmExit;
        java.lang.String str33 = atomikosProperties24.getTransactionManagerUniqueName();
        boolean boolean34 = properties0.containsValue((java.lang.Object) atomikosProperties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setAllowSubTransactions(true);
        boolean boolean38 = atomikosProperties35.enableLogging;
        boolean boolean39 = atomikosProperties35.isForceShutdownOnVmExit();
        java.lang.String str40 = atomikosProperties35.getService();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties41.setAllowSubTransactions(true);
        boolean boolean44 = atomikosProperties41.enableLogging;
        boolean boolean45 = atomikosProperties41.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel46 = atomikosProperties41.consoleLogLevel;
        atomikosProperties35.consoleLogLevel = atomikosLoggingLevel46;
        atomikosProperties24.setConsoleLogLevel(atomikosLoggingLevel46);
        atomikosProperties24.setMaxTimeout((long) 3);
        atomikosProperties24.logBaseDir = "{{1.0=-1}=hi!}";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel53 = atomikosProperties24.consoleLogLevel;
        atomikosProperties24.checkpointInterval = 35;
        atomikosProperties24.setMaxTimeout(32L);
        atomikosProperties24.consoleFileLimit = 32;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{}" + "'", str13, "{}");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10000L + "'", long28 == 10000L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 300000L + "'", long29 == 300000L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 50 + "'", int31 == 50);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel46 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel46.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel53 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel53.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test10761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10761");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        java.lang.String str3 = atomikosProperties0.transactionManagerUniqueName;
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.lang.String str5 = atomikosProperties0.outputDir;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery6 = atomikosProperties0.getRecovery();
        int int7 = recovery6.maxRetries;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(recovery6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
    }

    @Test
    public void test10762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10762");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.transactionManagerUniqueName = "hi!";
        atomikosProperties0.logBaseName = "hi!";
        boolean boolean7 = atomikosProperties0.serialJtaTransactions;
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        atomikosProperties0.logBaseName = "{1.0=-1}";
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test10763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10763");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        int int8 = atomikosProperties0.getConsoleFileLimit();
        boolean boolean9 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.setForceShutdownOnVmExit(false);
        atomikosProperties0.threadedTwoPhaseCommit = true;
        int int14 = atomikosProperties0.getConsoleFileCount();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery15 = atomikosProperties0.recovery;
        recovery15.delay = 100L;
        long long18 = recovery15.getDelay();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(recovery15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L + "'", long18 == 100L);
    }

    @Test
    public void test10764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10764");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.lang.Object obj5 = properties0.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.Object obj8 = properties6.remove((java.lang.Object) (-1.0d));
        boolean boolean9 = properties6.isEmpty();
        java.lang.Object obj12 = properties6.setProperty("hi!", "{}");
        java.lang.Object obj14 = properties0.getOrDefault((java.lang.Object) "hi!", (java.lang.Object) 100.0d);
        properties0.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery16 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery16.retryInterval = (short) 100;
        recovery16.setForgetOrphanedLogEntriesDelay((long) 5);
        recovery16.setRetryInterval((long) (-1));
        recovery16.retryInterval = (byte) 100;
        long long25 = recovery16.getDelay();
        long long26 = recovery16.forgetOrphanedLogEntriesDelay;
        boolean boolean27 = properties0.equals((java.lang.Object) long26);
        java.lang.Object obj30 = properties0.setProperty("{1.0=-1}", "hi!");
        java.io.Reader reader31 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.load(reader31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + 100.0d + "'", obj14, 100.0d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10000L + "'", long25 == 10000L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 5L + "'", long26 == 5L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj30);
    }

    @Test
    public void test10765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10765");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties12 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties12.elements();
        java.util.Enumeration<java.lang.Object> objEnumeration14 = properties12.keys();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNotNull(objEnumeration14);
    }

    @Test
    public void test10766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10766");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.maxActives = ' ';
        boolean boolean9 = atomikosProperties0.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.logBaseDir = "{1.0=-1, -1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties0.getConsoleLogLevel();
        boolean boolean14 = atomikosProperties0.isForceShutdownOnVmExit();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test10767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10767");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean5 = atomikosProperties4.isThreadedTwoPhaseCommit();
        long long6 = atomikosProperties4.getCheckpointInterval();
        boolean boolean7 = atomikosProperties4.serialJtaTransactions;
        boolean boolean8 = properties0.contains((java.lang.Object) boolean7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties9.setAllowSubTransactions(true);
        atomikosProperties9.logBaseName = "{={-1.0=100}, -1.0=100}";
        java.lang.String str14 = atomikosProperties9.logBaseDir;
        atomikosProperties9.setTransactionManagerUniqueName("");
        java.util.Properties properties17 = new java.util.Properties();
        java.lang.String str18 = properties17.toString();
        java.lang.Object obj20 = properties17.remove((java.lang.Object) (short) 100);
        java.lang.Object obj23 = properties17.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean25 = properties17.containsKey((java.lang.Object) 0L);
        java.lang.Object obj28 = properties17.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj31 = properties17.setProperty("", "{-1.0=100}");
        java.lang.Object obj32 = properties17.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery33 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery33.retryInterval = (short) 100;
        recovery33.forgetOrphanedLogEntriesDelay = 'a';
        boolean boolean38 = properties17.equals((java.lang.Object) 'a');
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery39 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery39.retryInterval = (short) 100;
        recovery39.forgetOrphanedLogEntriesDelay = 'a';
        long long44 = recovery39.getDelay();
        int int45 = recovery39.maxRetries;
        int int46 = recovery39.maxRetries;
        long long47 = recovery39.getRetryInterval();
        java.util.Properties properties48 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration49 = properties48.propertyNames();
        java.lang.Object obj50 = properties17.put((java.lang.Object) long47, (java.lang.Object) wildcardEnumeration49);
        java.lang.String str52 = properties17.getProperty("hi!");
        java.lang.Object obj53 = properties0.putIfAbsent((java.lang.Object) atomikosProperties9, (java.lang.Object) "hi!");
        int int54 = atomikosProperties9.maxActives;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{}" + "'", str18, "{}");
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(obj32);
// flaky:         org.junit.Assert.assertEquals(obj32.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10000L + "'", long44 == 10000L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 5 + "'", int45 == 5);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 100L + "'", long47 == 100L);
        org.junit.Assert.assertNotNull(wildcardEnumeration49);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 50 + "'", int54 == 50);
    }

    @Test
    public void test10768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10768");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        int int10 = atomikosProperties0.getMaxActives();
        boolean boolean11 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.setOutputDir("");
        int int14 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.allowSubTransactions = true;
        atomikosProperties0.setSerialJtaTransactions(false);
        boolean boolean19 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.logBaseName = "tmlog";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test10769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10769");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.setService("tm.out");
        int int12 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.setLogBaseName("");
        atomikosProperties0.setOutputDir("{1.0=-1}");
        atomikosProperties0.enableLogging = false;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test10770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10770");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setEnableLogging(true);
        atomikosProperties12.setConsoleFileLimit((int) (short) 0);
        boolean boolean17 = properties0.contains((java.lang.Object) atomikosProperties12);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = atomikosProperties12.getRecovery();
        int int19 = recovery18.getMaxRetries();
        long long20 = recovery18.getForgetOrphanedLogEntriesDelay();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(recovery18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 86400000L + "'", long20 == 86400000L);
    }

    @Test
    public void test10771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10771");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj4 = properties0.clone();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet5 = properties0.entrySet();
        java.io.PrintStream printStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.list(printStream6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "{}");
        org.junit.Assert.assertNotNull(objEntrySet5);
    }

    @Test
    public void test10772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10772");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        java.lang.String str6 = atomikosProperties0.getOutputDir();
        boolean boolean7 = atomikosProperties0.isForceShutdownOnVmExit();
        boolean boolean8 = atomikosProperties0.enableLogging;
        java.lang.String str9 = atomikosProperties0.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        atomikosProperties10.service = "{-1.0=100}";
        long long14 = atomikosProperties10.getDefaultJtaTimeout();
        atomikosProperties10.enableLogging = false;
        atomikosProperties10.setMaxTimeout((long) (byte) 0);
        atomikosProperties10.setAllowSubTransactions(true);
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.Object obj23 = properties21.remove((java.lang.Object) (-1.0d));
        boolean boolean24 = properties21.isEmpty();
        java.util.Properties properties25 = new java.util.Properties();
        java.lang.String str26 = properties25.toString();
        java.lang.Object obj28 = properties25.remove((java.lang.Object) (short) 100);
        java.lang.Object obj31 = properties25.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean33 = properties25.containsKey((java.lang.Object) 0L);
        java.lang.Object obj36 = properties25.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj39 = properties25.setProperty("", "{-1.0=100}");
        java.lang.Object obj40 = properties25.clone();
        java.lang.Object obj41 = properties21.get((java.lang.Object) properties25);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery43 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery43.retryInterval = (short) 100;
        recovery43.forgetOrphanedLogEntriesDelay = 'a';
        long long48 = recovery43.getDelay();
        long long49 = recovery43.getRetryInterval();
        recovery43.forgetOrphanedLogEntriesDelay = 10000L;
        atomikosProperties10.set(properties25, "tmlog", (java.lang.Object) recovery43);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel53 = atomikosProperties10.consoleLogLevel;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel53);
        atomikosProperties0.setMaxActives(100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties58 = atomikosProperties57.asProperties();
        atomikosProperties57.service = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery61 = atomikosProperties57.recovery;
        atomikosProperties57.enableLogging = true;
        java.lang.String str64 = atomikosProperties57.logBaseName;
        atomikosProperties57.setTransactionManagerUniqueName("tmlog");
        atomikosProperties57.setLogBaseDir("{{1.0=-1}=hi!}");
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel69 = atomikosProperties57.consoleLogLevel;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel69);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{}" + "'", str26, "{}");
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(obj40);
// flaky:         org.junit.Assert.assertEquals(obj40.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10000L + "'", long48 == 10000L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 100L + "'", long49 == 100L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel53 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel53.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties58);
        org.junit.Assert.assertNotNull(recovery61);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "tmlog" + "'", str64, "tmlog");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel69 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel69.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test10773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10773");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Set<java.lang.String> strSet3 = properties2.stringPropertyNames();
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties12 = new java.util.Properties();
        java.lang.String str13 = properties12.toString();
        java.lang.Object obj15 = properties12.remove((java.lang.Object) (short) 100);
        java.lang.Object obj18 = properties12.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj19 = properties12.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties12.elements();
        java.lang.Object obj21 = properties4.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration20);
        java.util.Properties properties22 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration23 = properties22.propertyNames();
        java.lang.Object obj24 = properties22.clone();
        java.util.Properties properties25 = new java.util.Properties();
        java.lang.String str26 = properties25.toString();
        boolean boolean27 = properties25.isEmpty();
        java.lang.Object obj30 = properties25.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties25.elements();
        java.lang.Object obj32 = properties4.put(obj24, (java.lang.Object) objEnumeration31);
        properties4.clear();
        java.lang.String str34 = properties4.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties36 = atomikosProperties35.asProperties();
        atomikosProperties35.service = "{-1.0=100}";
        long long39 = atomikosProperties35.getDefaultJtaTimeout();
        atomikosProperties35.serialJtaTransactions = true;
        atomikosProperties35.maxActives = ' ';
        int int44 = atomikosProperties35.getConsoleFileCount();
        boolean boolean45 = properties4.equals((java.lang.Object) atomikosProperties35);
        java.lang.Object obj46 = properties4.clone();
        java.util.Enumeration<?> wildcardEnumeration47 = properties4.propertyNames();
        java.lang.Object obj48 = properties4.clone();
        java.util.Enumeration<?> wildcardEnumeration49 = properties4.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties50.setEnableLogging(true);
        atomikosProperties50.consoleFileCount = 0;
        int int55 = atomikosProperties50.getMaxActives();
        java.lang.String str56 = atomikosProperties50.getLogBaseDir();
        java.lang.String str57 = atomikosProperties50.service;
        atomikosProperties50.transactionManagerUniqueName = "tmlog";
        atomikosProperties50.setTransactionManagerUniqueName("tm.out");
        java.lang.String str62 = atomikosProperties50.getConsoleFileName();
        java.lang.String str63 = atomikosProperties50.outputDir;
        boolean boolean64 = properties4.equals((java.lang.Object) str63);
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.lang.Object obj68 = properties2.setProperty("{{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}=hi!}", "{tmlog=hi!, com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{}" + "'", str13, "{}");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(wildcardEnumeration23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "{}");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{}" + "'", str26, "{}");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(objEnumeration31);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{}" + "'", str34, "{}");
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10000L + "'", long39 == 10000L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "{}");
        org.junit.Assert.assertNotNull(wildcardEnumeration47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "{}");
        org.junit.Assert.assertNotNull(wildcardEnumeration49);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 50 + "'", int55 == 50);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tm.out" + "'", str62, "tm.out");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(obj68);
    }

    @Test
    public void test10774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10774");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean4 = properties0.contains((java.lang.Object) "{-1.0=100}");
        java.lang.String str5 = properties0.toString();
        boolean boolean6 = properties0.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties7.setAllowSubTransactions(true);
        boolean boolean10 = atomikosProperties7.enableLogging;
        atomikosProperties7.consoleFileLimit = (byte) 100;
        java.util.Properties properties13 = new java.util.Properties();
        java.lang.String str14 = properties13.toString();
        java.util.Properties properties15 = new java.util.Properties(properties13);
        java.util.Properties properties17 = new java.util.Properties();
        java.lang.String str18 = properties17.toString();
        java.lang.Object obj20 = properties17.remove((java.lang.Object) (short) 100);
        java.lang.Object obj23 = properties17.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean25 = properties17.containsKey((java.lang.Object) 0L);
        java.lang.Object obj28 = properties17.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties29 = new java.util.Properties(properties17);
        java.util.Enumeration<java.lang.Object> objEnumeration30 = properties29.elements();
        atomikosProperties7.set(properties15, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties29);
        int int32 = properties15.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet33 = properties15.entrySet();
        boolean boolean34 = properties15.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties36 = atomikosProperties35.asProperties();
        java.util.Properties properties37 = new java.util.Properties();
        java.lang.Object obj39 = properties37.remove((java.lang.Object) (-1.0d));
        boolean boolean40 = properties37.isEmpty();
        int int41 = properties37.size();
        java.lang.String str43 = properties37.getProperty("{}");
        java.lang.Object obj44 = properties36.remove((java.lang.Object) properties37);
        properties15.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties37);
        java.lang.Object obj46 = properties15.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties48 = atomikosProperties47.asProperties();
        atomikosProperties47.service = "{-1.0=100}";
        java.lang.String str51 = atomikosProperties47.getTransactionManagerUniqueName();
        atomikosProperties47.consoleFileName = "hi!";
        atomikosProperties47.setCheckpointInterval((long) 5);
        atomikosProperties47.setConsoleFileCount(0);
        atomikosProperties47.setService("{-1.0=100}");
        atomikosProperties47.setDefaultJtaTimeout((long) 100);
        java.lang.String str62 = atomikosProperties47.getOutputDir();
        boolean boolean63 = atomikosProperties47.isForceShutdownOnVmExit();
        boolean boolean64 = properties0.remove((java.lang.Object) properties15, (java.lang.Object) boolean63);
        java.util.Properties properties65 = new java.util.Properties();
        java.lang.Object obj67 = properties65.remove((java.lang.Object) (-1.0d));
        boolean boolean68 = properties65.isEmpty();
        int int69 = properties65.size();
        java.lang.String str71 = properties65.getProperty("{}");
        java.util.Set<java.lang.Object> objSet72 = properties65.keySet();
        java.util.Enumeration<java.lang.Object> objEnumeration73 = properties65.keys();
        java.lang.Object obj74 = properties65.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties75 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.Object obj76 = properties15.putIfAbsent((java.lang.Object) properties65, (java.lang.Object) atomikosProperties75);
        properties65.clear();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{}" + "'", str14, "{}");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{}" + "'", str18, "{}");
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(objEnumeration30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(objEntrySet33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        org.junit.Assert.assertNotNull(properties48);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(objSet72);
        org.junit.Assert.assertNotNull(objEnumeration73);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertEquals(obj74.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj74), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj74), "{}");
        org.junit.Assert.assertNull(obj76);
    }

    @Test
    public void test10775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10775");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties12 = new java.util.Properties(properties0);
        int int13 = properties0.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties15 = atomikosProperties14.asProperties();
        atomikosProperties14.service = "{-1.0=100}";
        long long18 = atomikosProperties14.getDefaultJtaTimeout();
        atomikosProperties14.serialJtaTransactions = true;
        long long21 = atomikosProperties14.getDefaultJtaTimeout();
        long long22 = atomikosProperties14.checkpointInterval;
        java.util.Properties properties23 = new java.util.Properties();
        java.lang.Object obj25 = properties23.remove((java.lang.Object) (-1.0d));
        boolean boolean26 = properties23.isEmpty();
        java.lang.Object obj29 = properties23.setProperty("hi!", "{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties32 = atomikosProperties31.asProperties();
        atomikosProperties31.service = "{-1.0=100}";
        long long35 = atomikosProperties31.getDefaultJtaTimeout();
        atomikosProperties31.serialJtaTransactions = true;
        atomikosProperties31.maxActives = ' ';
        atomikosProperties14.set(properties23, "", (java.lang.Object) ' ');
        java.util.Properties properties41 = new java.util.Properties();
        java.lang.String str42 = properties41.toString();
        java.lang.Object obj44 = properties41.remove((java.lang.Object) (short) 100);
        java.lang.Object obj47 = properties41.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean49 = properties41.containsKey((java.lang.Object) 0L);
        java.lang.Object obj52 = properties41.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties53 = new java.util.Properties();
        java.lang.String str54 = properties53.toString();
        java.lang.Object obj56 = properties53.remove((java.lang.Object) (short) 100);
        java.lang.Object obj59 = properties53.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj60 = properties53.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration61 = properties53.elements();
        properties41.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties53);
        java.lang.Object obj63 = properties53.clone();
        java.util.Set<java.lang.String> strSet64 = properties53.stringPropertyNames();
        java.lang.Object obj65 = properties0.replace((java.lang.Object) atomikosProperties14, (java.lang.Object) strSet64);
        atomikosProperties14.allowSubTransactions = false;
        atomikosProperties14.allowSubTransactions = true;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10000L + "'", long18 == 10000L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10000L + "'", long35 == 10000L);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{}" + "'", str42, "{}");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "{}" + "'", str54, "{}");
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertEquals(obj60.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration61);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals(obj63.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNull(obj65);
    }

    @Test
    public void test10776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10776");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        atomikosProperties10.service = "{-1.0=100}";
        long long14 = atomikosProperties10.getDefaultJtaTimeout();
        atomikosProperties10.consoleFileLimit = '#';
        atomikosProperties10.setLogBaseName("{={-1.0=100}, -1.0=100}");
        java.lang.String str19 = atomikosProperties10.outputDir;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties21 = atomikosProperties20.asProperties();
        atomikosProperties20.service = "{-1.0=100}";
        long long24 = atomikosProperties20.getDefaultJtaTimeout();
        atomikosProperties20.setThreadedTwoPhaseCommit(true);
        boolean boolean27 = atomikosProperties20.isEnableLogging();
        atomikosProperties20.defaultJtaTimeout = (byte) 10;
        int int30 = atomikosProperties20.getMaxActives();
        int int31 = atomikosProperties20.consoleFileCount;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel32 = atomikosProperties20.getConsoleLogLevel();
        atomikosProperties10.setConsoleLogLevel(atomikosLoggingLevel32);
        atomikosProperties2.setConsoleLogLevel(atomikosLoggingLevel32);
        atomikosProperties2.forceShutdownOnVmExit = true;
        boolean boolean37 = atomikosProperties2.serialJtaTransactions;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10000L + "'", long24 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 50 + "'", int30 == 50);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel32 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel32.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test10777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10777");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.lang.Object obj5 = properties0.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.lang.Object obj9 = properties6.remove((java.lang.Object) (short) 100);
        java.lang.Object obj12 = properties6.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean14 = properties6.containsKey((java.lang.Object) 0L);
        java.lang.Object obj17 = properties6.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties18 = new java.util.Properties(properties6);
        boolean boolean19 = properties0.containsValue((java.lang.Object) properties6);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet20 = properties0.entrySet();
        java.io.PrintWriter printWriter21 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.list(printWriter21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objEntrySet20);
    }

    @Test
    public void test10778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10778");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getRetryInterval();
        long long2 = recovery0.retryInterval;
        long long3 = recovery0.forgetOrphanedLogEntriesDelay;
        recovery0.forgetOrphanedLogEntriesDelay = 32L;
        long long6 = recovery0.getForgetOrphanedLogEntriesDelay();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 86400000L + "'", long3 == 86400000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
    }

    @Test
    public void test10779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10779");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.service = "tm.out";
        atomikosProperties0.logBaseName = "tm.out";
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        boolean boolean15 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setService("{100=100}");
        boolean boolean18 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{{1.0=-1}=hi!}";
        java.lang.String str21 = atomikosProperties0.logBaseName;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tm.out" + "'", str21, "tm.out");
    }

    @Test
    public void test10780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10780");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean3 = atomikosProperties0.enableLogging;
        atomikosProperties0.consoleFileLimit = (byte) 100;
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.util.Properties properties8 = new java.util.Properties(properties6);
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.lang.Object obj13 = properties10.remove((java.lang.Object) (short) 100);
        java.lang.Object obj16 = properties10.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean18 = properties10.containsKey((java.lang.Object) 0L);
        java.lang.Object obj21 = properties10.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties22 = new java.util.Properties(properties10);
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties22.elements();
        atomikosProperties0.set(properties8, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties22);
        int int25 = properties8.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet26 = properties8.entrySet();
        java.util.Properties properties27 = new java.util.Properties(properties8);
        java.lang.Object obj28 = properties27.clone();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objEntrySet26);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "{}");
    }

    @Test
    public void test10781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10781");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.String str9 = properties8.toString();
        java.lang.Object obj11 = properties8.remove((java.lang.Object) (short) 100);
        java.lang.Object obj14 = properties8.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj15 = properties8.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties8.elements();
        java.lang.Object obj17 = properties0.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration16);
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration19 = properties18.propertyNames();
        java.lang.Object obj20 = properties18.clone();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        boolean boolean23 = properties21.isEmpty();
        java.lang.Object obj26 = properties21.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties21.elements();
        java.lang.Object obj28 = properties0.put(obj20, (java.lang.Object) objEnumeration27);
        properties0.clear();
        java.util.Properties properties30 = new java.util.Properties();
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.Object obj33 = properties31.remove((java.lang.Object) (-1.0d));
        int int34 = properties31.size();
        java.util.Enumeration<java.lang.Object> objEnumeration35 = properties31.elements();
        java.util.Properties properties36 = new java.util.Properties();
        properties36.clear();
        java.lang.String str38 = properties36.toString();
        boolean boolean39 = properties0.replace((java.lang.Object) properties30, (java.lang.Object) properties31, (java.lang.Object) str38);
        java.lang.String str41 = properties0.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties43 = atomikosProperties42.asProperties();
        atomikosProperties42.service = "{-1.0=100}";
        long long46 = atomikosProperties42.getDefaultJtaTimeout();
        atomikosProperties42.serialJtaTransactions = true;
        long long49 = atomikosProperties42.getDefaultJtaTimeout();
        long long50 = atomikosProperties42.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery51 = atomikosProperties42.getRecovery();
        long long52 = atomikosProperties42.getCheckpointInterval();
        boolean boolean53 = atomikosProperties42.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean55 = atomikosProperties54.isSerialJtaTransactions();
        atomikosProperties54.logBaseName = "{-1.0=100}";
        int int58 = atomikosProperties54.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery59 = atomikosProperties54.getRecovery();
        atomikosProperties54.setConsoleFileCount((int) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel62 = null;
        atomikosProperties54.consoleLogLevel = atomikosLoggingLevel62;
        java.lang.String str64 = atomikosProperties54.logBaseDir;
        java.lang.String str65 = atomikosProperties54.consoleFileName;
        int int66 = atomikosProperties54.getConsoleFileCount();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties67 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties67.setAllowSubTransactions(true);
        boolean boolean70 = atomikosProperties67.enableLogging;
        boolean boolean71 = atomikosProperties67.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel72 = atomikosProperties67.consoleLogLevel;
        atomikosProperties54.setConsoleLogLevel(atomikosLoggingLevel72);
        java.lang.String str74 = atomikosProperties54.getService();
        atomikosProperties54.consoleFileCount = 0;
        int int77 = atomikosProperties54.getMaxActives();
        java.lang.String str78 = atomikosProperties54.outputDir;
        boolean boolean79 = properties0.remove((java.lang.Object) boolean53, (java.lang.Object) atomikosProperties54);
        long long80 = atomikosProperties54.maxTimeout;
        atomikosProperties54.setForceShutdownOnVmExit(false);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(wildcardEnumeration19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(objEnumeration35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{}" + "'", str38, "{}");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10000L + "'", long46 == 10000L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10000L + "'", long49 == 10000L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 500L + "'", long50 == 500L);
        org.junit.Assert.assertNotNull(recovery51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 500L + "'", long52 == 500L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 50 + "'", int58 == 50);
        org.junit.Assert.assertNotNull(recovery59);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "tm.out" + "'", str65, "tm.out");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 100 + "'", int66 == 100);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel72 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel72.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 50 + "'", int77 == 50);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 300000L + "'", long80 == 300000L);
    }

    @Test
    public void test10782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10782");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.String str9 = properties8.toString();
        java.lang.Object obj11 = properties8.remove((java.lang.Object) (short) 100);
        java.lang.Object obj14 = properties8.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj15 = properties8.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties8.elements();
        java.lang.Object obj17 = properties0.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration16);
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration19 = properties18.propertyNames();
        java.lang.Object obj20 = properties18.clone();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        boolean boolean23 = properties21.isEmpty();
        java.lang.Object obj26 = properties21.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties21.elements();
        java.lang.Object obj28 = properties0.put(obj20, (java.lang.Object) objEnumeration27);
        properties0.clear();
        java.util.Properties properties30 = new java.util.Properties();
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.Object obj33 = properties31.remove((java.lang.Object) (-1.0d));
        int int34 = properties31.size();
        java.util.Enumeration<java.lang.Object> objEnumeration35 = properties31.elements();
        java.util.Properties properties36 = new java.util.Properties();
        properties36.clear();
        java.lang.String str38 = properties36.toString();
        boolean boolean39 = properties0.replace((java.lang.Object) properties30, (java.lang.Object) properties31, (java.lang.Object) str38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean41 = atomikosProperties40.isSerialJtaTransactions();
        atomikosProperties40.logBaseName = "{-1.0=100}";
        int int44 = atomikosProperties40.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery45 = atomikosProperties40.getRecovery();
        atomikosProperties40.setConsoleFileCount((int) (byte) 100);
        java.lang.String str48 = atomikosProperties40.logBaseName;
        atomikosProperties40.setCheckpointInterval((long) 18);
        long long51 = atomikosProperties40.defaultJtaTimeout;
        boolean boolean52 = properties30.containsValue((java.lang.Object) atomikosProperties40);
        java.util.Properties properties53 = atomikosProperties40.asProperties();
        java.io.OutputStream outputStream54 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties53.storeToXML(outputStream54, "{1.0=-1}", "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(wildcardEnumeration19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(objEnumeration35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{}" + "'", str38, "{}");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 50 + "'", int44 == 50);
        org.junit.Assert.assertNotNull(recovery45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "{-1.0=100}" + "'", str48, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10000L + "'", long51 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(properties53);
    }

    @Test
    public void test10783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10783");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        long long7 = atomikosProperties0.getCheckpointInterval();
        boolean boolean8 = atomikosProperties0.isForceShutdownOnVmExit();
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        java.lang.String str10 = atomikosProperties0.outputDir;
        atomikosProperties0.maxTimeout = 32;
        int int13 = atomikosProperties0.consoleFileCount;
        long long14 = atomikosProperties0.maxTimeout;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str10, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 32L + "'", long14 == 32L);
    }

    @Test
    public void test10784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10784");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        long long5 = atomikosProperties0.defaultJtaTimeout;
        long long6 = atomikosProperties0.getMaxTimeout();
        long long7 = atomikosProperties0.getCheckpointInterval();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = atomikosProperties0.getConsoleLogLevel();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 300000L + "'", long6 == 300000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel8 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel8.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test10785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10785");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery4 = atomikosProperties0.recovery;
        recovery4.setDelay((long) (short) 0);
        int int7 = recovery4.maxRetries;
        long long8 = recovery4.getDelay();
        long long9 = recovery4.delay;
        long long10 = recovery4.getForgetOrphanedLogEntriesDelay();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(recovery4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 86400000L + "'", long10 == 86400000L);
    }

    @Test
    public void test10786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10786");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties0.setService("tm.out");
        int int5 = atomikosProperties0.consoleFileLimit;
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        int int7 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setTransactionManagerUniqueName("hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.recovery;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties12 = atomikosProperties11.asProperties();
        atomikosProperties11.service = "{-1.0=100}";
        long long15 = atomikosProperties11.getDefaultJtaTimeout();
        atomikosProperties11.serialJtaTransactions = true;
        long long18 = atomikosProperties11.getDefaultJtaTimeout();
        long long19 = atomikosProperties11.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery20 = atomikosProperties11.getRecovery();
        java.lang.String str21 = atomikosProperties11.outputDir;
        atomikosProperties11.setSerialJtaTransactions(true);
        atomikosProperties11.serialJtaTransactions = true;
        java.lang.String str26 = atomikosProperties11.consoleFileName;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel27 = atomikosProperties11.consoleLogLevel;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel27);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10000L + "'", long18 == 10000L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 500L + "'", long19 == 500L);
        org.junit.Assert.assertNotNull(recovery20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "tm.out" + "'", str26, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel27 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel27.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test10787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10787");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        int int8 = atomikosProperties0.maxActives;
        boolean boolean9 = atomikosProperties0.serialJtaTransactions;
        boolean boolean10 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir={={-1.0=100}, -1.0=100}, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir={1.0=-1, -1.0=100}, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=true, com.atomikos.icatch.default_jta_timeout=10000}");
        atomikosProperties0.setEnableLogging(true);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test10788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10788");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        long long8 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = atomikosProperties0.getRecovery();
        java.lang.String str10 = atomikosProperties0.outputDir;
        long long11 = atomikosProperties0.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel12 = atomikosProperties0.getConsoleLogLevel();
        atomikosProperties0.checkpointInterval = 18L;
        long long15 = atomikosProperties0.getCheckpointInterval();
        boolean boolean16 = atomikosProperties0.enableLogging;
        atomikosProperties0.setMaxTimeout(52L);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(recovery9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel12 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel12.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 18L + "'", long15 == 18L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test10789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10789");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        java.lang.Object obj14 = properties3.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj17 = properties3.setProperty("", "{-1.0=100}");
        boolean boolean18 = properties3.isEmpty();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        java.util.Properties properties21 = new java.util.Properties(properties19);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet22 = properties21.entrySet();
        java.util.Properties properties24 = new java.util.Properties();
        java.lang.Object obj26 = properties24.remove((java.lang.Object) (-1.0d));
        int int27 = properties24.size();
        boolean boolean28 = properties3.replace((java.lang.Object) properties21, (java.lang.Object) 100L, (java.lang.Object) properties24);
        boolean boolean29 = properties3.isEmpty();
        java.util.Set<java.lang.Object> objSet30 = properties3.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties32 = atomikosProperties31.asProperties();
        atomikosProperties31.service = "{-1.0=100}";
        long long35 = atomikosProperties31.getDefaultJtaTimeout();
        long long36 = atomikosProperties31.getMaxTimeout();
        int int37 = atomikosProperties31.consoleFileCount;
        java.lang.String str38 = atomikosProperties31.getOutputDir();
        boolean boolean39 = properties1.remove((java.lang.Object) properties3, (java.lang.Object) atomikosProperties31);
        boolean boolean40 = properties3.isEmpty();
        java.io.OutputStream outputStream41 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.save(outputStream41, "{0={100=100}, {}={}}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertNotNull(objEntrySet22);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objSet30);
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10000L + "'", long35 == 10000L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 300000L + "'", long36 == 300000L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test10790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10790");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.forgetOrphanedLogEntriesDelay = 'a';
        long long5 = recovery0.retryInterval;
        recovery0.forgetOrphanedLogEntriesDelay = 0L;
        long long8 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long9 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.retryInterval = 0L;
        long long12 = recovery0.retryInterval;
        int int13 = recovery0.maxRetries;
        recovery0.maxRetries = (short) 100;
        int int16 = recovery0.getMaxRetries();
        long long17 = recovery0.retryInterval;
        recovery0.setRetryInterval(5L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test10791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10791");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.lang.Object obj5 = properties0.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.Object obj8 = properties6.remove((java.lang.Object) (-1.0d));
        boolean boolean9 = properties6.isEmpty();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.lang.Object obj13 = properties10.remove((java.lang.Object) (short) 100);
        java.lang.Object obj16 = properties10.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean18 = properties10.containsKey((java.lang.Object) 0L);
        java.lang.Object obj21 = properties10.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj24 = properties10.setProperty("", "{-1.0=100}");
        java.lang.Object obj25 = properties10.clone();
        java.lang.Object obj26 = properties6.get((java.lang.Object) properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.setEnableLogging(true);
        atomikosProperties27.consoleFileCount = 0;
        int int32 = atomikosProperties27.getMaxActives();
        java.lang.String str33 = atomikosProperties27.getLogBaseDir();
        java.lang.String str34 = atomikosProperties27.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery35 = atomikosProperties27.getRecovery();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties37 = atomikosProperties36.asProperties();
        atomikosProperties36.service = "{-1.0=100}";
        long long40 = atomikosProperties36.getDefaultJtaTimeout();
        atomikosProperties36.setThreadedTwoPhaseCommit(true);
        boolean boolean43 = atomikosProperties36.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery44 = atomikosProperties36.recovery;
        atomikosProperties36.setLogBaseDir("");
        java.lang.Object obj47 = properties10.replace((java.lang.Object) recovery35, (java.lang.Object) "");
        java.util.Properties properties48 = new java.util.Properties();
        java.lang.Object obj50 = properties48.remove((java.lang.Object) (-1.0d));
        boolean boolean52 = properties48.contains((java.lang.Object) "{-1.0=100}");
        boolean boolean53 = properties10.equals((java.lang.Object) "{-1.0=100}");
        properties10.clear();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties56 = new java.util.Properties();
        java.lang.Object obj59 = properties56.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration60 = properties56.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration61 = properties56.elements();
        java.util.Properties properties62 = new java.util.Properties(properties56);
        java.util.Set<java.lang.Object> objSet63 = properties56.keySet();
        java.util.Set<java.lang.String> strSet64 = properties56.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery65 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery65.retryInterval = (short) 100;
        recovery65.forgetOrphanedLogEntriesDelay = 'a';
        long long70 = recovery65.getDelay();
        long long71 = recovery65.getRetryInterval();
        recovery65.setRetryInterval((long) 'a');
        long long74 = recovery65.getRetryInterval();
        int int75 = recovery65.maxRetries;
        java.lang.Object obj76 = properties0.put((java.lang.Object) properties56, (java.lang.Object) recovery65);
        int int77 = properties56.size();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(obj25);
// flaky:         org.junit.Assert.assertEquals(obj25.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(recovery35);
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10000L + "'", long40 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(recovery44);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNotNull(objEnumeration60);
        org.junit.Assert.assertNotNull(objEnumeration61);
        org.junit.Assert.assertNotNull(objSet63);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 10000L + "'", long70 == 10000L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 100L + "'", long71 == 100L);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 97L + "'", long74 == 97L);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 5 + "'", int75 == 5);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
    }

    @Test
    public void test10792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10792");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        java.lang.Object obj14 = properties3.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj17 = properties3.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties3.keys();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        boolean boolean21 = properties19.isEmpty();
        java.lang.Object obj24 = properties19.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties19.elements();
        java.lang.Object obj26 = properties2.replace((java.lang.Object) objEnumeration18, (java.lang.Object) properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties19.elements();
        java.lang.String str29 = properties19.getProperty("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        java.util.Set<java.lang.String> strSet30 = properties19.stringPropertyNames();
        java.util.Properties properties31 = new java.util.Properties(properties19);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(strSet30);
    }

    @Test
    public void test10793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10793");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        long long8 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = atomikosProperties0.getRecovery();
        long long10 = atomikosProperties0.getCheckpointInterval();
        boolean boolean11 = atomikosProperties0.isEnableLogging();
        boolean boolean12 = atomikosProperties0.forceShutdownOnVmExit;
        int int13 = atomikosProperties0.getMaxActives();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(recovery9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 500L + "'", long10 == 500L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
    }

    @Test
    public void test10794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10794");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties();
        java.lang.String str2 = properties1.toString();
        java.lang.Object obj4 = properties1.remove((java.lang.Object) (short) 100);
        java.lang.Object obj7 = properties1.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int8 = properties1.size();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.Object obj11 = properties9.remove((java.lang.Object) (-1.0d));
        boolean boolean12 = properties9.isEmpty();
        java.lang.Object obj15 = properties9.setProperty("hi!", "{}");
        boolean boolean16 = properties0.remove((java.lang.Object) int8, (java.lang.Object) properties9);
        java.util.Properties properties17 = new java.util.Properties();
        java.lang.String str18 = properties17.toString();
        java.lang.Object obj20 = properties17.remove((java.lang.Object) (short) 100);
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        boolean boolean23 = properties21.isEmpty();
        java.lang.Object obj26 = properties21.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties21.elements();
        boolean boolean28 = properties17.containsKey((java.lang.Object) properties21);
        boolean boolean29 = properties9.contains((java.lang.Object) boolean28);
        java.util.Set<java.lang.String> strSet30 = properties9.stringPropertyNames();
        java.util.Properties properties31 = new java.util.Properties(properties9);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = properties9.entrySet();
        java.lang.String str34 = properties9.getProperty("{{}={}}");
        java.io.Reader reader35 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties9.load(reader35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{}" + "'", str18, "{}");
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertNull(str34);
    }

    @Test
    public void test10795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10795");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setTransactionManagerUniqueName("{}");
        atomikosProperties0.consoleFileName = "hi!";
        int int9 = atomikosProperties0.getConsoleFileCount();
        boolean boolean10 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.maxTimeout = 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean14 = atomikosProperties13.isSerialJtaTransactions();
        atomikosProperties13.logBaseName = "{-1.0=100}";
        int int17 = atomikosProperties13.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = atomikosProperties13.getRecovery();
        atomikosProperties13.setConsoleFileCount((int) (byte) 100);
        atomikosProperties13.setAllowSubTransactions(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean24 = atomikosProperties23.isThreadedTwoPhaseCommit();
        long long25 = atomikosProperties23.getCheckpointInterval();
        atomikosProperties23.setCheckpointInterval((long) 5);
        java.util.Properties properties28 = new java.util.Properties();
        java.lang.String str29 = properties28.toString();
        java.lang.Object obj31 = properties28.remove((java.lang.Object) (short) 100);
        java.lang.Object obj34 = properties28.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean36 = properties28.containsKey((java.lang.Object) 0L);
        java.lang.String str37 = properties28.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties39 = atomikosProperties38.asProperties();
        atomikosProperties38.service = "{-1.0=100}";
        long long42 = atomikosProperties38.getDefaultJtaTimeout();
        atomikosProperties38.setMaxActives(0);
        atomikosProperties38.maxActives = 'a';
        boolean boolean47 = atomikosProperties38.isThreadedTwoPhaseCommit();
        boolean boolean48 = atomikosProperties38.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel49 = atomikosProperties38.consoleLogLevel;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties51 = atomikosProperties50.asProperties();
        atomikosProperties50.service = "{-1.0=100}";
        long long54 = atomikosProperties50.getDefaultJtaTimeout();
        atomikosProperties50.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties50.setMaxActives(100);
        java.lang.String str59 = atomikosProperties50.logBaseDir;
        java.lang.String str60 = atomikosProperties50.outputDir;
        java.lang.Object obj61 = properties28.replace((java.lang.Object) atomikosLoggingLevel49, (java.lang.Object) atomikosProperties50);
        atomikosProperties23.consoleLogLevel = atomikosLoggingLevel49;
        atomikosProperties13.setConsoleLogLevel(atomikosLoggingLevel49);
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel49;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery65 = atomikosProperties0.recovery;
        int int66 = atomikosProperties0.getConsoleFileCount();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties67 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties68 = atomikosProperties67.asProperties();
        atomikosProperties67.service = "{-1.0=100}";
        long long71 = atomikosProperties67.getDefaultJtaTimeout();
        atomikosProperties67.serialJtaTransactions = true;
        atomikosProperties67.maxActives = ' ';
        int int76 = atomikosProperties67.getConsoleFileCount();
        long long77 = atomikosProperties67.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties78 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties79 = atomikosProperties78.asProperties();
        atomikosProperties78.service = "{-1.0=100}";
        java.lang.String str82 = atomikosProperties78.getTransactionManagerUniqueName();
        boolean boolean83 = atomikosProperties78.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel84 = atomikosProperties78.getConsoleLogLevel();
        atomikosProperties67.setConsoleLogLevel(atomikosLoggingLevel84);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel86 = atomikosProperties67.getConsoleLogLevel();
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel86;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
        org.junit.Assert.assertNotNull(recovery18);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{}" + "'", str29, "{}");
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{-1.0=100}" + "'", str37, "{-1.0=100}");
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 10000L + "'", long42 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel49 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel49.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 10000L + "'", long54 == 10000L);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str60, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNotNull(recovery65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(properties68);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 10000L + "'", long71 == 10000L);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 10000L + "'", long77 == 10000L);
        org.junit.Assert.assertNotNull(properties79);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel84 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel84.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel86 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel86.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test10796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10796");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        boolean boolean15 = properties0.isEmpty();
        java.util.Properties properties16 = new java.util.Properties();
        java.lang.String str17 = properties16.toString();
        java.util.Properties properties18 = new java.util.Properties(properties16);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet19 = properties18.entrySet();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.Object obj23 = properties21.remove((java.lang.Object) (-1.0d));
        int int24 = properties21.size();
        boolean boolean25 = properties0.replace((java.lang.Object) properties18, (java.lang.Object) 100L, (java.lang.Object) properties21);
        boolean boolean26 = properties0.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties0.elements();
        boolean boolean28 = properties0.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties30 = atomikosProperties29.asProperties();
        atomikosProperties29.service = "{-1.0=100}";
        java.lang.String str33 = atomikosProperties29.getTransactionManagerUniqueName();
        atomikosProperties29.consoleFileLimit = (byte) 10;
        long long36 = atomikosProperties29.getMaxTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel37 = null;
        atomikosProperties29.consoleLogLevel = atomikosLoggingLevel37;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery39 = atomikosProperties29.getRecovery();
        boolean boolean40 = atomikosProperties29.isForceShutdownOnVmExit();
        java.lang.String str41 = atomikosProperties29.getLogBaseName();
        boolean boolean42 = atomikosProperties29.forceShutdownOnVmExit;
        atomikosProperties29.setThreadedTwoPhaseCommit(false);
        boolean boolean45 = atomikosProperties29.isAllowSubTransactions();
        java.util.Properties properties46 = new java.util.Properties();
        java.lang.String str47 = properties46.toString();
        java.lang.Object obj49 = properties46.remove((java.lang.Object) (short) 100);
        boolean boolean51 = properties46.containsKey((java.lang.Object) 0L);
        properties46.clear();
        java.util.Set<java.lang.Object> objSet53 = properties46.keySet();
        java.util.Enumeration<java.lang.Object> objEnumeration54 = properties46.elements();
        java.lang.String str56 = properties46.getProperty("{}");
        java.util.Properties properties57 = new java.util.Properties(properties46);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties59 = atomikosProperties58.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties61 = atomikosProperties60.asProperties();
        atomikosProperties60.service = "{-1.0=100}";
        long long64 = atomikosProperties60.getDefaultJtaTimeout();
        atomikosProperties60.consoleFileLimit = '#';
        java.lang.Object obj67 = properties59.get((java.lang.Object) atomikosProperties60);
        boolean boolean68 = atomikosProperties60.forceShutdownOnVmExit;
        atomikosProperties60.setOutputDir("");
        long long71 = atomikosProperties60.defaultJtaTimeout;
        atomikosProperties60.setConsoleFileLimit((int) (short) -1);
        boolean boolean74 = atomikosProperties60.serialJtaTransactions;
        long long75 = atomikosProperties60.getDefaultJtaTimeout();
        atomikosProperties60.checkpointInterval = (short) 10;
        atomikosProperties60.setConsoleFileLimit((int) '4');
        boolean boolean80 = properties0.replace((java.lang.Object) atomikosProperties29, (java.lang.Object) properties46, (java.lang.Object) '4');
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
        org.junit.Assert.assertNotNull(objEntrySet19);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 300000L + "'", long36 == 300000L);
        org.junit.Assert.assertNotNull(recovery39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "tmlog" + "'", str41, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "{}" + "'", str47, "{}");
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objSet53);
        org.junit.Assert.assertNotNull(objEnumeration54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(properties59);
        org.junit.Assert.assertNotNull(properties61);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 10000L + "'", long64 == 10000L);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 10000L + "'", long71 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 10000L + "'", long75 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test10797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10797");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.String str9 = properties8.toString();
        java.lang.Object obj11 = properties8.remove((java.lang.Object) (short) 100);
        java.lang.Object obj14 = properties8.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj15 = properties8.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties8.elements();
        java.lang.Object obj17 = properties0.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration16);
        java.util.Set<java.lang.String> strSet18 = properties0.stringPropertyNames();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet19 = properties0.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties21 = atomikosProperties20.asProperties();
        atomikosProperties20.service = "{-1.0=100}";
        java.lang.String str24 = atomikosProperties20.getTransactionManagerUniqueName();
        atomikosProperties20.consoleFileName = "hi!";
        atomikosProperties20.setCheckpointInterval((long) 5);
        atomikosProperties20.setConsoleFileCount(0);
        atomikosProperties20.setService("{-1.0=100}");
        atomikosProperties20.setDefaultJtaTimeout((long) 100);
        atomikosProperties20.defaultJtaTimeout = 32;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties38 = atomikosProperties37.asProperties();
        atomikosProperties37.service = "{-1.0=100}";
        long long41 = atomikosProperties37.getDefaultJtaTimeout();
        atomikosProperties37.enableLogging = false;
        atomikosProperties37.setMaxActives((int) ' ');
        atomikosProperties37.maxActives = (short) -1;
        atomikosProperties37.setService("hi!");
        atomikosProperties37.consoleFileLimit = (byte) 0;
        int int52 = atomikosProperties37.maxActives;
        boolean boolean53 = atomikosProperties37.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery54 = atomikosProperties37.recovery;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties55.setEnableLogging(true);
        atomikosProperties55.setConsoleFileLimit((int) (short) 0);
        atomikosProperties55.outputDir = "tmlog";
        atomikosProperties55.setConsoleFileLimit(1);
        boolean boolean64 = properties0.replace((java.lang.Object) 32, (java.lang.Object) recovery54, (java.lang.Object) 1);
        recovery54.setDelay((long) 3);
        int int67 = recovery54.getMaxRetries();
        long long68 = recovery54.forgetOrphanedLogEntriesDelay;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(objEntrySet19);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10000L + "'", long41 == 10000L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(recovery54);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 5 + "'", int67 == 5);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 86400000L + "'", long68 == 86400000L);
    }

    @Test
    public void test10798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10798");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        atomikosProperties0.consoleFileLimit = 32;
        java.lang.String str7 = atomikosProperties0.getConsoleFileName();
        int int8 = atomikosProperties0.getConsoleFileCount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tm.out" + "'", str7, "tm.out");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test10799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10799");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        java.lang.String str6 = atomikosProperties0.getOutputDir();
        atomikosProperties0.consoleFileCount = (byte) 100;
        atomikosProperties0.transactionManagerUniqueName = "hi!";
        atomikosProperties0.setConsoleFileCount(0);
        int int13 = atomikosProperties0.consoleFileLimit;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test10800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10800");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean5 = atomikosProperties4.isSerialJtaTransactions();
        atomikosProperties4.logBaseName = "{-1.0=100}";
        int int8 = atomikosProperties4.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = atomikosProperties4.getRecovery();
        atomikosProperties4.setConsoleFileCount((int) (byte) 100);
        java.lang.String str12 = atomikosProperties4.logBaseName;
        atomikosProperties4.setCheckpointInterval((long) 18);
        long long15 = atomikosProperties4.defaultJtaTimeout;
        java.util.Properties properties16 = atomikosProperties4.asProperties();
        boolean boolean17 = properties0.contains((java.lang.Object) atomikosProperties4);
        java.lang.String str18 = atomikosProperties4.outputDir;
        atomikosProperties4.checkpointInterval = (short) 10;
        java.util.Properties properties21 = atomikosProperties4.asProperties();
        java.util.Set<java.lang.String> strSet22 = properties21.stringPropertyNames();
        java.io.InputStream inputStream23 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties21.loadFromXML(inputStream23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertNotNull(recovery9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{-1.0=100}" + "'", str12, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertNotNull(strSet22);
    }

    @Test
    public void test10801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10801");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.outputDir = "hi!";
        java.lang.String str13 = atomikosProperties0.service;
        atomikosProperties0.threadedTwoPhaseCommit = true;
        atomikosProperties0.threadedTwoPhaseCommit = true;
        atomikosProperties0.setMaxTimeout(5L);
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{-1.0=100}" + "'", str13, "{-1.0=100}");
    }

    @Test
    public void test10802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10802");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.forceShutdownOnVmExit = false;
        java.util.Properties properties13 = atomikosProperties0.asProperties();
        java.lang.String str14 = atomikosProperties0.getService();
        int int15 = atomikosProperties0.getConsoleFileCount();
        boolean boolean16 = atomikosProperties0.serialJtaTransactions;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{-1.0=100}" + "'", str14, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test10803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10803");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties8 = atomikosProperties7.asProperties();
        java.lang.Object obj9 = properties0.remove((java.lang.Object) properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        atomikosProperties10.service = "{-1.0=100}";
        long long14 = atomikosProperties10.getDefaultJtaTimeout();
        atomikosProperties10.setThreadedTwoPhaseCommit(true);
        boolean boolean17 = atomikosProperties10.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = atomikosProperties10.recovery;
        atomikosProperties10.setLogBaseDir("");
        long long21 = atomikosProperties10.maxTimeout;
        boolean boolean22 = atomikosProperties10.forceShutdownOnVmExit;
        boolean boolean23 = properties8.containsValue((java.lang.Object) atomikosProperties10);
        boolean boolean24 = atomikosProperties10.enableLogging;
        atomikosProperties10.logBaseName = "{0={100=100}, {}={}}";
        atomikosProperties10.setAllowSubTransactions(true);
        atomikosProperties10.setSerialJtaTransactions(true);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(recovery18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 300000L + "'", long21 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test10804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10804");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.lang.Object obj5 = properties0.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.Object obj8 = properties6.remove((java.lang.Object) (-1.0d));
        boolean boolean9 = properties6.isEmpty();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.lang.Object obj13 = properties10.remove((java.lang.Object) (short) 100);
        java.lang.Object obj16 = properties10.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean18 = properties10.containsKey((java.lang.Object) 0L);
        java.lang.Object obj21 = properties10.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj24 = properties10.setProperty("", "{-1.0=100}");
        java.lang.Object obj25 = properties10.clone();
        java.lang.Object obj26 = properties6.get((java.lang.Object) properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.setEnableLogging(true);
        atomikosProperties27.consoleFileCount = 0;
        int int32 = atomikosProperties27.getMaxActives();
        java.lang.String str33 = atomikosProperties27.getLogBaseDir();
        java.lang.String str34 = atomikosProperties27.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery35 = atomikosProperties27.getRecovery();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties37 = atomikosProperties36.asProperties();
        atomikosProperties36.service = "{-1.0=100}";
        long long40 = atomikosProperties36.getDefaultJtaTimeout();
        atomikosProperties36.setThreadedTwoPhaseCommit(true);
        boolean boolean43 = atomikosProperties36.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery44 = atomikosProperties36.recovery;
        atomikosProperties36.setLogBaseDir("");
        java.lang.Object obj47 = properties10.replace((java.lang.Object) recovery35, (java.lang.Object) "");
        java.util.Properties properties48 = new java.util.Properties();
        java.lang.Object obj50 = properties48.remove((java.lang.Object) (-1.0d));
        boolean boolean52 = properties48.contains((java.lang.Object) "{-1.0=100}");
        boolean boolean53 = properties10.equals((java.lang.Object) "{-1.0=100}");
        properties10.clear();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties57 = atomikosProperties56.asProperties();
        atomikosProperties56.service = "{-1.0=100}";
        long long60 = atomikosProperties56.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel61 = null;
        atomikosProperties56.setConsoleLogLevel(atomikosLoggingLevel61);
        int int63 = atomikosProperties56.maxActives;
        atomikosProperties56.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery66 = atomikosProperties56.getRecovery();
        atomikosProperties56.consoleFileName = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel69 = null;
        atomikosProperties56.setConsoleLogLevel(atomikosLoggingLevel69);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel71 = atomikosProperties56.getConsoleLogLevel();
        boolean boolean72 = atomikosProperties56.enableLogging;
        long long73 = atomikosProperties56.getMaxTimeout();
        atomikosProperties56.maxActives = 21;
        java.lang.Object obj76 = properties10.get((java.lang.Object) atomikosProperties56);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties77 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties78 = atomikosProperties77.asProperties();
        atomikosProperties77.service = "{-1.0=100}";
        long long81 = atomikosProperties77.getDefaultJtaTimeout();
        atomikosProperties77.serialJtaTransactions = true;
        long long84 = atomikosProperties77.maxTimeout;
        boolean boolean85 = atomikosProperties77.isThreadedTwoPhaseCommit();
        atomikosProperties77.setCheckpointInterval(1L);
        atomikosProperties77.setOutputDir("{}");
        boolean boolean90 = atomikosProperties77.isSerialJtaTransactions();
        atomikosProperties77.outputDir = "tm.out";
        java.lang.String str93 = atomikosProperties77.getConsoleFileName();
        int int94 = atomikosProperties77.consoleFileLimit;
        boolean boolean95 = properties10.contains((java.lang.Object) atomikosProperties77);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(obj25);
// flaky:         org.junit.Assert.assertEquals(obj25.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(recovery35);
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10000L + "'", long40 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(recovery44);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(properties57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 10000L + "'", long60 == 10000L);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 50 + "'", int63 == 50);
        org.junit.Assert.assertNotNull(recovery66);
        org.junit.Assert.assertNull(atomikosLoggingLevel71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 300000L + "'", long73 == 300000L);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNotNull(properties78);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 10000L + "'", long81 == 10000L);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 300000L + "'", long84 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "tm.out" + "'", str93, "tm.out");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test10805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10805");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.forgetOrphanedLogEntriesDelay = 'a';
        long long5 = recovery0.getDelay();
        int int6 = recovery0.maxRetries;
        int int7 = recovery0.maxRetries;
        long long8 = recovery0.getRetryInterval();
        recovery0.retryInterval = 10L;
        long long11 = recovery0.getForgetOrphanedLogEntriesDelay();
        int int12 = recovery0.getMaxRetries();
        long long13 = recovery0.forgetOrphanedLogEntriesDelay;
        recovery0.setMaxRetries(50);
        long long16 = recovery0.getRetryInterval();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 97L + "'", long11 == 97L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 97L + "'", long13 == 97L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
    }

    @Test
    public void test10806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10806");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        boolean boolean10 = atomikosProperties2.forceShutdownOnVmExit;
        java.util.Properties properties11 = new java.util.Properties();
        java.lang.String str12 = properties11.toString();
        java.lang.Object obj14 = properties11.remove((java.lang.Object) (short) 100);
        java.lang.Object obj17 = properties11.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj18 = properties11.clone();
        java.lang.String str20 = properties11.getProperty("{}");
        java.lang.Object obj23 = properties11.put((java.lang.Object) 86400000L, (java.lang.Object) "{-1.0=100}");
        atomikosProperties2.set(properties11, "tmlog", (java.lang.Object) 5L);
        long long27 = atomikosProperties2.defaultJtaTimeout;
        java.lang.String str28 = atomikosProperties2.outputDir;
        boolean boolean29 = atomikosProperties2.serialJtaTransactions;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{}" + "'", str12, "{}");
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{1.0=-1}");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10000L + "'", long27 == 10000L);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test10807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10807");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties8 = atomikosProperties7.asProperties();
        java.lang.Object obj9 = properties0.remove((java.lang.Object) properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean11 = atomikosProperties10.isSerialJtaTransactions();
        atomikosProperties10.logBaseName = "{-1.0=100}";
        int int14 = atomikosProperties10.maxActives;
        atomikosProperties10.setAllowSubTransactions(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery17 = atomikosProperties10.getRecovery();
        atomikosProperties10.setLogBaseName("tmlog");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties21 = atomikosProperties20.asProperties();
        atomikosProperties20.service = "{-1.0=100}";
        long long24 = atomikosProperties20.getDefaultJtaTimeout();
        atomikosProperties20.setThreadedTwoPhaseCommit(true);
        boolean boolean27 = atomikosProperties20.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery28 = atomikosProperties20.recovery;
        atomikosProperties20.setLogBaseDir("");
        long long31 = atomikosProperties20.maxTimeout;
        boolean boolean32 = atomikosProperties20.forceShutdownOnVmExit;
        atomikosProperties20.enableLogging = false;
        java.lang.Object obj35 = properties0.putIfAbsent((java.lang.Object) atomikosProperties10, (java.lang.Object) atomikosProperties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties36.setAllowSubTransactions(true);
        boolean boolean39 = atomikosProperties36.enableLogging;
        atomikosProperties36.consoleFileLimit = (byte) 100;
        java.util.Properties properties42 = new java.util.Properties();
        java.lang.String str43 = properties42.toString();
        java.util.Properties properties44 = new java.util.Properties(properties42);
        java.util.Properties properties46 = new java.util.Properties();
        java.lang.String str47 = properties46.toString();
        java.lang.Object obj49 = properties46.remove((java.lang.Object) (short) 100);
        java.lang.Object obj52 = properties46.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean54 = properties46.containsKey((java.lang.Object) 0L);
        java.lang.Object obj57 = properties46.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties58 = new java.util.Properties(properties46);
        java.util.Enumeration<java.lang.Object> objEnumeration59 = properties58.elements();
        atomikosProperties36.set(properties44, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties58);
        atomikosProperties36.setOutputDir("hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery63 = atomikosProperties36.getRecovery();
        atomikosProperties36.setOutputDir("{={-1.0=100}, -1.0=100}");
        boolean boolean66 = atomikosProperties36.isForceShutdownOnVmExit();
        atomikosProperties36.setOutputDir("hi!");
        java.lang.String str69 = atomikosProperties36.logBaseDir;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery70 = atomikosProperties36.recovery;
        recovery70.forgetOrphanedLogEntriesDelay = (short) 1;
        boolean boolean73 = properties0.containsKey((java.lang.Object) (short) 1);
        java.util.Properties properties74 = new java.util.Properties(properties0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 50 + "'", int14 == 50);
        org.junit.Assert.assertNotNull(recovery17);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10000L + "'", long24 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(recovery28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 300000L + "'", long31 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "{}" + "'", str43, "{}");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "{}" + "'", str47, "{}");
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNotNull(objEnumeration59);
        org.junit.Assert.assertNotNull(recovery63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(recovery70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test10808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10808");
        java.util.Properties properties0 = new java.util.Properties();
        properties0.clear();
        java.lang.String str2 = properties0.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery3.retryInterval = (short) 100;
        recovery3.setForgetOrphanedLogEntriesDelay((long) 5);
        recovery3.setRetryInterval((long) (-1));
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery10.retryInterval = (short) 100;
        recovery10.forgetOrphanedLogEntriesDelay = 'a';
        long long15 = recovery10.retryInterval;
        recovery10.forgetOrphanedLogEntriesDelay = 0L;
        java.lang.Object obj18 = properties0.put((java.lang.Object) (-1), (java.lang.Object) recovery10);
        recovery10.setDelay((long) (byte) 1);
        long long21 = recovery10.getDelay();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
    }

    @Test
    public void test10809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10809");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.setService("tm.out");
        boolean boolean12 = atomikosProperties0.isForceShutdownOnVmExit();
        boolean boolean13 = atomikosProperties0.isAllowSubTransactions();
        atomikosProperties0.setLogBaseName("");
        atomikosProperties0.forceShutdownOnVmExit = true;
        long long18 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery19 = atomikosProperties0.recovery;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertNotNull(recovery19);
    }

    @Test
    public void test10810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10810");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties0.setMaxActives(100);
        java.lang.String str9 = atomikosProperties0.logBaseDir;
        atomikosProperties0.consoleFileCount = (short) 0;
        atomikosProperties0.defaultJtaTimeout = 10000L;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = atomikosProperties0.consoleLogLevel;
        long long15 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.setConsoleFileCount(0);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel18 = atomikosProperties0.getConsoleLogLevel();
        atomikosProperties0.consoleFileCount = 0;
        atomikosProperties0.maxActives = 19;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel14 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel14.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel18 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel18.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test10811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10811");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        boolean boolean3 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.consoleFileLimit = 2;
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        boolean boolean7 = atomikosProperties0.isEnableLogging();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test10812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10812");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        long long8 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = atomikosProperties0.getRecovery();
        long long10 = recovery9.delay;
        int int11 = recovery9.maxRetries;
        recovery9.setMaxRetries((int) '#');
        int int14 = recovery9.getMaxRetries();
        int int15 = recovery9.getMaxRetries();
        recovery9.setMaxRetries(0);
        recovery9.setForgetOrphanedLogEntriesDelay((long) 97);
        recovery9.setDelay(19L);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(recovery9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
    }

    @Test
    public void test10813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10813");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        java.lang.String str8 = atomikosProperties0.logBaseDir;
        atomikosProperties0.forceShutdownOnVmExit = true;
        java.lang.String str11 = atomikosProperties0.getOutputDir();
        java.lang.String str12 = atomikosProperties0.outputDir;
        boolean boolean13 = atomikosProperties0.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = atomikosProperties0.consoleLogLevel;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(atomikosLoggingLevel14);
    }

    @Test
    public void test10814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10814");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = (byte) 10;
        long long7 = atomikosProperties0.getMaxTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        atomikosProperties0.setService("");
        atomikosProperties0.setMaxTimeout((long) (short) -1);
        boolean boolean14 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setConsoleFileLimit(18);
        long long17 = atomikosProperties0.getCheckpointInterval();
        boolean boolean18 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.transactionManagerUniqueName = "{}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test10815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10815");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.delay = (-1L);
        long long5 = recovery0.delay;
        int int6 = recovery0.maxRetries;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
    }

    @Test
    public void test10816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10816");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        int int10 = atomikosProperties0.getMaxActives();
        boolean boolean11 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.setOutputDir("");
        java.lang.String str14 = atomikosProperties0.getTransactionManagerUniqueName();
        java.lang.String str15 = atomikosProperties0.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel16 = atomikosProperties0.consoleLogLevel;
        java.util.Properties properties17 = atomikosProperties0.asProperties();
        atomikosProperties0.setMaxTimeout((long) (short) 0);
        int int20 = atomikosProperties0.consoleFileCount;
        int int21 = atomikosProperties0.getMaxActives();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel16 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel16.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 50 + "'", int21 == 50);
    }

    @Test
    public void test10817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10817");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        long long5 = atomikosProperties0.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel6 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel6);
        atomikosProperties0.service = "";
        atomikosProperties0.serialJtaTransactions = true;
        java.lang.String str12 = atomikosProperties0.getOutputDir();
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}";
        atomikosProperties0.setService("{}");
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name={}, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test10818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10818");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean3 = atomikosProperties0.enableLogging;
        java.lang.String str4 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setConsoleFileLimit(0);
        boolean boolean7 = atomikosProperties0.forceShutdownOnVmExit;
        int int8 = atomikosProperties0.consoleFileCount;
        long long9 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.enableLogging = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
    }

    @Test
    public void test10819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10819");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setEnableLogging(true);
        atomikosProperties12.setConsoleFileLimit((int) (short) 0);
        boolean boolean17 = properties0.contains((java.lang.Object) atomikosProperties12);
        java.util.Properties properties18 = new java.util.Properties();
        java.lang.String str19 = properties18.toString();
        java.util.Properties properties20 = new java.util.Properties(properties18);
        java.util.Set<java.lang.String> strSet21 = properties20.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties23 = atomikosProperties22.asProperties();
        atomikosProperties22.service = "{-1.0=100}";
        long long26 = atomikosProperties22.getDefaultJtaTimeout();
        atomikosProperties22.enableLogging = false;
        atomikosProperties22.setMaxTimeout((long) (byte) 0);
        atomikosProperties22.setAllowSubTransactions(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties34 = atomikosProperties33.asProperties();
        atomikosProperties33.service = "{-1.0=100}";
        java.lang.String str37 = atomikosProperties33.getTransactionManagerUniqueName();
        boolean boolean38 = atomikosProperties33.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel39 = atomikosProperties33.getConsoleLogLevel();
        atomikosProperties22.consoleLogLevel = atomikosLoggingLevel39;
        long long41 = atomikosProperties22.checkpointInterval;
        atomikosProperties22.service = "tm.out";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties45 = atomikosProperties44.asProperties();
        atomikosProperties44.service = "{-1.0=100}";
        java.lang.String str48 = atomikosProperties44.getLogBaseName();
        long long49 = atomikosProperties44.defaultJtaTimeout;
        long long50 = atomikosProperties44.getMaxTimeout();
        boolean boolean51 = atomikosProperties44.forceShutdownOnVmExit;
        atomikosProperties44.setService("{-1.0=100}");
        atomikosProperties44.setOutputDir("{}");
        boolean boolean56 = properties0.replace((java.lang.Object) properties20, (java.lang.Object) "tm.out", (java.lang.Object) atomikosProperties44);
        java.util.Properties properties57 = new java.util.Properties(properties0);
        java.util.Properties properties58 = new java.util.Properties();
        java.lang.Object obj60 = properties58.remove((java.lang.Object) (-1.0d));
        boolean boolean62 = properties58.contains((java.lang.Object) "{-1.0=100}");
        java.lang.Object obj65 = properties58.setProperty("{={-1.0=100}, -1.0=100}", "");
        java.lang.Object obj68 = properties58.setProperty("tm.out", "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties69 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties70 = atomikosProperties69.asProperties();
        atomikosProperties69.service = "{-1.0=100}";
        long long73 = atomikosProperties69.getDefaultJtaTimeout();
        atomikosProperties69.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties69.setMaxActives(100);
        boolean boolean78 = atomikosProperties69.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery79 = atomikosProperties69.recovery;
        atomikosProperties69.setConsoleFileLimit(100);
        boolean boolean82 = atomikosProperties69.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery83 = atomikosProperties69.getRecovery();
        java.lang.Object obj84 = properties57.putIfAbsent((java.lang.Object) properties58, (java.lang.Object) recovery83);
        recovery83.setDelay((long) 1);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{}" + "'", str19, "{}");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10000L + "'", long26 == 10000L);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel39 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel39.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 500L + "'", long41 == 500L);
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "tmlog" + "'", str48, "tmlog");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10000L + "'", long49 == 10000L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 300000L + "'", long50 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertNotNull(properties70);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 10000L + "'", long73 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(recovery79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(recovery83);
        org.junit.Assert.assertNull(obj84);
    }

    @Test
    public void test10820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10820");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        java.util.Collection<java.lang.Object> objCollection4 = properties0.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties6 = atomikosProperties5.asProperties();
        atomikosProperties5.service = "{-1.0=100}";
        long long9 = atomikosProperties5.getDefaultJtaTimeout();
        atomikosProperties5.serialJtaTransactions = true;
        long long12 = atomikosProperties5.getDefaultJtaTimeout();
        long long13 = atomikosProperties5.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery14 = atomikosProperties5.getRecovery();
        long long15 = recovery14.delay;
        int int16 = recovery14.maxRetries;
        java.lang.Object obj17 = properties0.get((java.lang.Object) int16);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery18.retryInterval = (short) 100;
        recovery18.forgetOrphanedLogEntriesDelay = 'a';
        long long23 = recovery18.getDelay();
        int int24 = recovery18.maxRetries;
        int int25 = recovery18.maxRetries;
        recovery18.setDelay((long) (-1));
        long long28 = recovery18.forgetOrphanedLogEntriesDelay;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.getOutputDir();
        atomikosProperties29.threadedTwoPhaseCommit = false;
        java.lang.Object obj33 = properties0.getOrDefault((java.lang.Object) recovery18, (java.lang.Object) atomikosProperties29);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel34 = atomikosProperties29.getConsoleLogLevel();
        atomikosProperties29.setService("tmlog");
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertNotNull(recovery14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 10000L + "'", long23 == 10000L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 97L + "'", long28 == 97L);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel34 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel34.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test10821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10821");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.setService("tm.out");
        atomikosProperties0.setSerialJtaTransactions(true);
        java.util.Properties properties14 = atomikosProperties0.asProperties();
        atomikosProperties0.outputDir = "tm.out";
        boolean boolean17 = atomikosProperties0.threadedTwoPhaseCommit;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test10822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10822");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        boolean boolean5 = properties0.containsKey((java.lang.Object) 0L);
        properties0.clear();
        java.util.Set<java.lang.Object> objSet7 = properties0.keySet();
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties0.elements();
        java.lang.String str10 = properties0.getProperty("{}");
        java.util.Properties properties11 = new java.util.Properties(properties0);
        java.util.Properties properties12 = new java.util.Properties(properties11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean14 = atomikosProperties13.isThreadedTwoPhaseCommit();
        long long15 = atomikosProperties13.getCheckpointInterval();
        boolean boolean16 = atomikosProperties13.serialJtaTransactions;
        atomikosProperties13.forceShutdownOnVmExit = true;
        boolean boolean19 = atomikosProperties13.isForceShutdownOnVmExit();
        boolean boolean20 = atomikosProperties13.isEnableLogging();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        java.lang.Object obj24 = properties21.remove((java.lang.Object) (short) 100);
        java.lang.Object obj27 = properties21.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.util.Properties properties28 = new java.util.Properties();
        java.lang.String str29 = properties28.toString();
        java.lang.Object obj31 = properties28.remove((java.lang.Object) (short) 100);
        java.lang.Object obj34 = properties28.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int35 = properties28.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery36 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery36.retryInterval = (short) 100;
        recovery36.forgetOrphanedLogEntriesDelay = 'a';
        long long41 = recovery36.retryInterval;
        recovery36.setForgetOrphanedLogEntriesDelay((long) 0);
        java.lang.Object obj44 = properties21.replace((java.lang.Object) int35, (java.lang.Object) recovery36);
        java.lang.Object obj47 = properties21.setProperty("{}", "{}");
        java.util.Properties properties48 = new java.util.Properties();
        java.lang.String str49 = properties48.toString();
        java.lang.Object obj51 = properties48.remove((java.lang.Object) (short) 100);
        java.lang.Object obj54 = properties48.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj55 = properties48.clone();
        java.util.Set<java.lang.String> strSet56 = properties48.stringPropertyNames();
        java.util.Properties properties57 = new java.util.Properties(properties48);
        java.lang.String str59 = properties57.getProperty("hi!");
        java.lang.String str61 = properties57.getProperty("{1.0=-1}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties62 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties63 = atomikosProperties62.asProperties();
        atomikosProperties62.service = "{-1.0=100}";
        long long66 = atomikosProperties62.getDefaultJtaTimeout();
        atomikosProperties62.serialJtaTransactions = true;
        long long69 = atomikosProperties62.maxTimeout;
        atomikosProperties62.setLogBaseDir("{-1.0=100}");
        int int72 = atomikosProperties62.getConsoleFileCount();
        atomikosProperties62.maxTimeout = (short) 100;
        boolean boolean75 = properties57.equals((java.lang.Object) atomikosProperties62);
        atomikosProperties62.setLogBaseName("{{1.0=-1, -1.0=100}={1.0=-1}, 1.0=-1}");
        boolean boolean78 = properties21.containsValue((java.lang.Object) atomikosProperties62);
        java.lang.Object obj79 = properties12.getOrDefault((java.lang.Object) atomikosProperties13, (java.lang.Object) properties21);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{}" + "'", str29, "{}");
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 100L + "'", long41 == 100L);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "{}" + "'", str49, "{}");
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(properties63);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 10000L + "'", long66 == 10000L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 300000L + "'", long69 == 300000L);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(obj79);
        org.junit.Assert.assertEquals(obj79.toString(), "{1.0=-1, {}={}}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj79), "{1.0=-1, {}={}}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj79), "{1.0=-1, {}={}}");
    }

    @Test
    public void test10823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10823");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        java.lang.String str10 = atomikosProperties0.logBaseDir;
        java.lang.String str11 = atomikosProperties0.consoleFileName;
        int int12 = atomikosProperties0.getConsoleFileCount();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.setAllowSubTransactions(true);
        boolean boolean16 = atomikosProperties13.enableLogging;
        boolean boolean17 = atomikosProperties13.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel18 = atomikosProperties13.consoleLogLevel;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel18);
        java.lang.String str20 = atomikosProperties0.getService();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties22 = atomikosProperties21.asProperties();
        atomikosProperties21.service = "{-1.0=100}";
        long long25 = atomikosProperties21.getDefaultJtaTimeout();
        boolean boolean26 = atomikosProperties21.enableLogging;
        boolean boolean27 = atomikosProperties21.isForceShutdownOnVmExit();
        atomikosProperties21.consoleFileLimit = (byte) -1;
        java.lang.String str30 = atomikosProperties21.getService();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel31 = atomikosProperties21.consoleLogLevel;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties33 = atomikosProperties32.asProperties();
        atomikosProperties32.service = "{-1.0=100}";
        long long36 = atomikosProperties32.getDefaultJtaTimeout();
        atomikosProperties32.serialJtaTransactions = true;
        long long39 = atomikosProperties32.maxTimeout;
        atomikosProperties32.setLogBaseDir("{-1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties42.setAllowSubTransactions(true);
        atomikosProperties42.maxActives = (short) -1;
        atomikosProperties42.setService("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties49.setAllowSubTransactions(true);
        boolean boolean52 = atomikosProperties49.enableLogging;
        boolean boolean53 = atomikosProperties49.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel54 = atomikosProperties49.consoleLogLevel;
        atomikosProperties42.setConsoleLogLevel(atomikosLoggingLevel54);
        atomikosProperties32.consoleLogLevel = atomikosLoggingLevel54;
        atomikosProperties21.consoleLogLevel = atomikosLoggingLevel54;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel54);
        atomikosProperties0.setOutputDir("{={-1.0=100}, -1.0=100}");
        atomikosProperties0.setConsoleFileName("{0={100=100}, {}={}}");
        java.lang.String str63 = atomikosProperties0.getOutputDir();
        atomikosProperties0.consoleFileName = "{{1.0=-1}=hi!}";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tm.out" + "'", str11, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel18 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel18.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10000L + "'", long25 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{-1.0=100}" + "'", str30, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel31 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel31.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10000L + "'", long36 == 10000L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 300000L + "'", long39 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel54 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel54.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str63, "{={-1.0=100}, -1.0=100}");
    }

    @Test
    public void test10824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10824");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxTimeout((long) (byte) 0);
        atomikosProperties0.setService("tm.out");
        java.lang.String str11 = atomikosProperties0.getTransactionManagerUniqueName();
        boolean boolean12 = atomikosProperties0.isForceShutdownOnVmExit();
        java.util.Properties properties13 = new java.util.Properties();
        java.lang.Object obj15 = properties13.remove((java.lang.Object) (-1.0d));
        boolean boolean16 = properties13.isEmpty();
        java.util.Properties properties17 = new java.util.Properties();
        java.lang.String str18 = properties17.toString();
        java.lang.Object obj20 = properties17.remove((java.lang.Object) (short) 100);
        java.lang.Object obj23 = properties17.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean25 = properties17.containsKey((java.lang.Object) 0L);
        java.lang.Object obj28 = properties17.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj31 = properties17.setProperty("", "{-1.0=100}");
        java.lang.Object obj32 = properties17.clone();
        java.lang.Object obj33 = properties13.get((java.lang.Object) properties17);
        java.lang.Object obj34 = properties17.clone();
        int int35 = properties17.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties36.setAllowSubTransactions(true);
        atomikosProperties36.maxActives = (short) -1;
        atomikosProperties36.setCheckpointInterval((long) 0);
        atomikosProperties36.setMaxTimeout(100L);
        boolean boolean45 = properties17.contains((java.lang.Object) atomikosProperties36);
        java.lang.String str46 = properties17.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties49 = atomikosProperties48.asProperties();
        atomikosProperties48.service = "{-1.0=100}";
        long long52 = atomikosProperties48.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel53 = null;
        atomikosProperties48.setConsoleLogLevel(atomikosLoggingLevel53);
        int int55 = atomikosProperties48.maxActives;
        atomikosProperties48.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery58 = atomikosProperties48.getRecovery();
        atomikosProperties48.forceShutdownOnVmExit = false;
        java.lang.String str61 = atomikosProperties48.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties62 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties63 = atomikosProperties62.asProperties();
        atomikosProperties62.service = "{-1.0=100}";
        long long66 = atomikosProperties62.getDefaultJtaTimeout();
        atomikosProperties62.enableLogging = false;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties69 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties69.setEnableLogging(true);
        atomikosProperties69.consoleFileCount = 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties74 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties75 = atomikosProperties74.asProperties();
        atomikosProperties74.service = "{-1.0=100}";
        long long78 = atomikosProperties74.getDefaultJtaTimeout();
        boolean boolean79 = atomikosProperties74.enableLogging;
        boolean boolean80 = atomikosProperties74.isForceShutdownOnVmExit();
        atomikosProperties74.consoleFileLimit = (byte) -1;
        java.lang.String str83 = atomikosProperties74.getService();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel84 = atomikosProperties74.consoleLogLevel;
        atomikosProperties69.consoleLogLevel = atomikosLoggingLevel84;
        atomikosProperties62.setConsoleLogLevel(atomikosLoggingLevel84);
        atomikosProperties48.setConsoleLogLevel(atomikosLoggingLevel84);
        atomikosProperties0.set(properties17, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=true, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=35, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=10, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", (java.lang.Object) atomikosLoggingLevel84);
        java.io.PrintStream printStream89 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties17.list(printStream89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{}" + "'", str18, "{}");
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(obj32);
// flaky:         org.junit.Assert.assertEquals(obj32.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(obj34);
// flaky:         org.junit.Assert.assertEquals(obj34.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str46, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(properties49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 10000L + "'", long52 == 10000L);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 50 + "'", int55 == 50);
        org.junit.Assert.assertNotNull(recovery58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "tm.out" + "'", str61, "tm.out");
        org.junit.Assert.assertNotNull(properties63);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 10000L + "'", long66 == 10000L);
        org.junit.Assert.assertNotNull(properties75);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 10000L + "'", long78 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "{-1.0=100}" + "'", str83, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel84 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel84.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test10825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10825");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        int int5 = atomikosProperties0.getMaxActives();
        java.lang.String str6 = atomikosProperties0.getLogBaseDir();
        java.lang.String str7 = atomikosProperties0.service;
        atomikosProperties0.setConsoleFileCount((int) (byte) 1);
        atomikosProperties0.setMaxActives((-1));
        atomikosProperties0.maxTimeout = (short) 1;
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        atomikosProperties0.transactionManagerUniqueName = "{1.0=-1}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = atomikosProperties0.getRecovery();
        long long19 = recovery18.getForgetOrphanedLogEntriesDelay();
        long long20 = recovery18.getRetryInterval();
        long long21 = recovery18.retryInterval;
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(recovery18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 86400000L + "'", long19 == 86400000L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10000L + "'", long20 == 10000L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
    }

    @Test
    public void test10826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10826");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        java.lang.String str7 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setLogBaseName("");
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setConsoleFileCount((-1));
        java.lang.String str14 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setAllowSubTransactions(true);
        java.lang.String str17 = atomikosProperties0.logBaseName;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test10827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10827");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        int int5 = atomikosProperties0.getMaxActives();
        java.lang.String str6 = atomikosProperties0.getLogBaseDir();
        java.lang.String str7 = atomikosProperties0.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.getRecovery();
        boolean boolean9 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.enableLogging = false;
        java.lang.String str12 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setDefaultJtaTimeout((long) '#');
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test10828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10828");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxActives((int) ' ');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties9.setAllowSubTransactions(true);
        boolean boolean12 = atomikosProperties9.enableLogging;
        boolean boolean13 = atomikosProperties9.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = atomikosProperties9.consoleLogLevel;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel14);
        java.util.Properties properties16 = new java.util.Properties();
        properties16.clear();
        java.lang.String str18 = properties16.toString();
        java.lang.Object obj19 = properties16.clone();
        java.util.Properties properties20 = new java.util.Properties();
        java.lang.Object obj22 = properties20.remove((java.lang.Object) (-1.0d));
        boolean boolean23 = properties20.isEmpty();
        int int24 = properties20.size();
        java.lang.String str26 = properties20.getProperty("{}");
        java.util.Set<java.lang.Object> objSet27 = properties20.keySet();
        boolean boolean29 = properties20.containsKey((java.lang.Object) (short) 1);
        int int30 = properties20.size();
        properties16.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties20);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = properties20.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties34 = atomikosProperties33.asProperties();
        atomikosProperties33.service = "{-1.0=100}";
        long long37 = atomikosProperties33.getDefaultJtaTimeout();
        atomikosProperties33.setMaxActives(0);
        atomikosProperties33.maxActives = 'a';
        boolean boolean42 = atomikosProperties33.isThreadedTwoPhaseCommit();
        boolean boolean43 = atomikosProperties33.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel44 = atomikosProperties33.getConsoleLogLevel();
        java.lang.Object obj45 = properties20.get((java.lang.Object) atomikosProperties33);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties48 = atomikosProperties47.asProperties();
        atomikosProperties47.service = "{-1.0=100}";
        long long51 = atomikosProperties47.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel52 = null;
        atomikosProperties47.setConsoleLogLevel(atomikosLoggingLevel52);
        int int54 = atomikosProperties47.maxActives;
        atomikosProperties47.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery57 = atomikosProperties47.getRecovery();
        atomikosProperties47.consoleFileName = "{-1.0=100}";
        atomikosProperties47.setSerialJtaTransactions(false);
        atomikosProperties47.consoleFileName = "{={-1.0=100}, -1.0=100}";
        atomikosProperties47.defaultJtaTimeout = 50;
        long long66 = atomikosProperties47.getCheckpointInterval();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery67 = atomikosProperties47.recovery;
        recovery67.setRetryInterval(50L);
        recovery67.setForgetOrphanedLogEntriesDelay(0L);
        atomikosProperties0.set(properties20, "{{}={}}", (java.lang.Object) recovery67);
        recovery67.delay = 0;
        recovery67.setDelay(52L);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel14 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel14.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{}" + "'", str18, "{}");
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{}");
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(objSet27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 10000L + "'", long37 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel44 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel44.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNotNull(properties48);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10000L + "'", long51 == 10000L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 50 + "'", int54 == 50);
        org.junit.Assert.assertNotNull(recovery57);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 500L + "'", long66 == 500L);
        org.junit.Assert.assertNotNull(recovery67);
    }

    @Test
    public void test10829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10829");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties0.setMaxActives(100);
        atomikosProperties0.logBaseDir = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties11.setAllowSubTransactions(true);
        java.lang.String str14 = atomikosProperties11.transactionManagerUniqueName;
        int int15 = atomikosProperties11.getConsoleFileLimit();
        atomikosProperties11.setDefaultJtaTimeout((long) 'a');
        atomikosProperties11.allowSubTransactions = false;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel20 = atomikosProperties11.getConsoleLogLevel();
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel20);
        long long22 = atomikosProperties0.defaultJtaTimeout;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel20 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel20.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10000L + "'", long22 == 10000L);
    }

    @Test
    public void test10830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10830");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        int int5 = atomikosProperties0.getConsoleFileCount();
        java.lang.String str6 = atomikosProperties0.service;
        java.lang.String str7 = atomikosProperties0.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.recovery;
        java.lang.String str9 = atomikosProperties0.getLogBaseDir();
        long long10 = atomikosProperties0.maxTimeout;
        int int11 = atomikosProperties0.getConsoleFileLimit();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 300000L + "'", long10 == 300000L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test10831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10831");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        java.lang.Object obj14 = properties3.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.String str16 = properties15.toString();
        java.lang.Object obj18 = properties15.remove((java.lang.Object) (short) 100);
        java.lang.Object obj21 = properties15.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj22 = properties15.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties15.elements();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.lang.Object obj25 = properties15.clone();
        properties15.clear();
        int int27 = properties15.size();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.util.Properties properties29 = new java.util.Properties();
        java.lang.String str30 = properties29.toString();
        java.lang.Object obj32 = properties29.remove((java.lang.Object) (short) 100);
        java.lang.Object obj35 = properties29.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj36 = properties29.clone();
        java.util.Set<java.lang.String> strSet37 = properties29.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery38 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery38.retryInterval = (short) 100;
        recovery38.delay = (-1L);
        long long43 = recovery38.delay;
        recovery38.delay = (short) 1;
        long long46 = recovery38.getRetryInterval();
        int int47 = recovery38.maxRetries;
        int int48 = recovery38.maxRetries;
        long long49 = recovery38.forgetOrphanedLogEntriesDelay;
        java.util.Properties properties50 = new java.util.Properties();
        java.lang.Object obj52 = properties50.remove((java.lang.Object) (-1.0d));
        boolean boolean53 = properties50.isEmpty();
        int int54 = properties50.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery55 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery55.retryInterval = (short) 100;
        recovery55.forgetOrphanedLogEntriesDelay = 'a';
        java.util.Properties properties60 = new java.util.Properties();
        java.lang.Object obj62 = properties60.remove((java.lang.Object) (-1.0d));
        boolean boolean63 = properties60.isEmpty();
        int int64 = properties60.size();
        java.lang.String str66 = properties60.getProperty("{}");
        boolean boolean67 = properties50.remove((java.lang.Object) recovery55, (java.lang.Object) properties60);
        java.lang.Object obj68 = properties29.putIfAbsent((java.lang.Object) long49, (java.lang.Object) properties50);
        java.util.Enumeration<java.lang.Object> objEnumeration69 = properties29.keys();
        properties15.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        java.io.OutputStream outputStream71 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties15.store(outputStream71, "{{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}=, ={-1.0=100}, -1.0=100}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{1.0=-1}");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{}" + "'", str30, "{}");
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 100L + "'", long46 == 100L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 86400000L + "'", long49 == 86400000L);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertNotNull(objEnumeration69);
    }

    @Test
    public void test10832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10832");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel7 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel7);
        atomikosProperties0.setLogBaseName("{={-1.0=100}, -1.0=100}");
        atomikosProperties0.setDefaultJtaTimeout(100L);
        boolean boolean13 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.consoleFileLimit = ' ';
        boolean boolean16 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.checkpointInterval = 100;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test10833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10833");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getRetryInterval();
        long long2 = recovery0.retryInterval;
        recovery0.forgetOrphanedLogEntriesDelay = 0;
        long long5 = recovery0.forgetOrphanedLogEntriesDelay;
        recovery0.setMaxRetries(35);
        recovery0.setRetryInterval((long) 32);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test10834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10834");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        java.lang.String str10 = atomikosProperties0.logBaseDir;
        java.lang.String str11 = atomikosProperties0.consoleFileName;
        int int12 = atomikosProperties0.getConsoleFileCount();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.setAllowSubTransactions(true);
        boolean boolean16 = atomikosProperties13.enableLogging;
        boolean boolean17 = atomikosProperties13.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel18 = atomikosProperties13.consoleLogLevel;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel18);
        java.lang.String str20 = atomikosProperties0.getService();
        int int21 = atomikosProperties0.consoleFileCount;
        long long22 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setForceShutdownOnVmExit(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tm.out" + "'", str11, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel18 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel18.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10000L + "'", long22 == 10000L);
    }

    @Test
    public void test10835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10835");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setTransactionManagerUniqueName("{}");
        atomikosProperties0.consoleFileName = "hi!";
        java.lang.String str9 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setConsoleFileName("{1.0=-1, -1.0=100}");
        java.lang.String str12 = atomikosProperties0.getLogBaseName();
        long long13 = atomikosProperties0.getDefaultJtaTimeout();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
    }

    @Test
    public void test10836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10836");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        boolean boolean15 = properties0.isEmpty();
        java.util.Properties properties16 = new java.util.Properties();
        java.lang.String str17 = properties16.toString();
        java.util.Properties properties18 = new java.util.Properties(properties16);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet19 = properties18.entrySet();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.Object obj23 = properties21.remove((java.lang.Object) (-1.0d));
        int int24 = properties21.size();
        boolean boolean25 = properties0.replace((java.lang.Object) properties18, (java.lang.Object) 100L, (java.lang.Object) properties21);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet26 = properties0.entrySet();
        java.io.OutputStream outputStream27 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream27, "{100=100}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
        org.junit.Assert.assertNotNull(objEntrySet19);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objEntrySet26);
    }

    @Test
    public void test10837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10837");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.maxTimeout;
        boolean boolean8 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.setCheckpointInterval(1L);
        atomikosProperties0.setOutputDir("{}");
        atomikosProperties0.consoleFileLimit = (-1);
        boolean boolean15 = atomikosProperties0.isAllowSubTransactions();
        java.lang.String str16 = atomikosProperties0.getService();
        long long17 = atomikosProperties0.getMaxTimeout();
        java.lang.String str18 = atomikosProperties0.getLogBaseName();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{-1.0=100}" + "'", str16, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 300000L + "'", long17 == 300000L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
    }

    @Test
    public void test10838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10838");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.threadedTwoPhaseCommit = true;
        long long8 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setConsoleFileCount((int) (byte) -1);
        long long11 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.serialJtaTransactions = false;
        boolean boolean14 = atomikosProperties0.enableLogging;
        boolean boolean15 = atomikosProperties0.isSerialJtaTransactions();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test10839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10839");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        java.lang.String str15 = properties0.toString();
        java.util.Set<java.lang.String> strSet16 = properties0.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties18 = atomikosProperties17.asProperties();
        atomikosProperties17.service = "{-1.0=100}";
        long long21 = atomikosProperties17.getDefaultJtaTimeout();
        atomikosProperties17.enableLogging = false;
        atomikosProperties17.setMaxTimeout((long) (byte) 0);
        atomikosProperties17.setAllowSubTransactions(true);
        java.util.Properties properties28 = new java.util.Properties();
        java.lang.Object obj30 = properties28.remove((java.lang.Object) (-1.0d));
        boolean boolean31 = properties28.isEmpty();
        java.util.Collection<java.lang.Object> objCollection32 = properties28.values();
        java.lang.Object obj33 = properties0.put((java.lang.Object) true, (java.lang.Object) properties28);
        java.util.Collection<java.lang.Object> objCollection34 = properties28.values();
        java.lang.Object obj37 = properties28.setProperty("", "{1.0=-1}");
        java.util.Properties properties38 = new java.util.Properties();
        java.lang.String str39 = properties38.toString();
        java.lang.Object obj41 = properties38.remove((java.lang.Object) (short) 100);
        java.lang.Object obj44 = properties38.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean46 = properties38.containsKey((java.lang.Object) 0L);
        java.lang.Object obj49 = properties38.replace((java.lang.Object) false, (java.lang.Object) ' ');
        boolean boolean50 = properties38.isEmpty();
        boolean boolean51 = properties38.isEmpty();
        properties28.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties38);
        java.util.Set<java.lang.Object> objSet53 = properties28.keySet();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str15, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objCollection32);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(objCollection34);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "{}" + "'", str39, "{}");
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objSet53);
    }

    @Test
    public void test10840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10840");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setTransactionManagerUniqueName("{}");
        atomikosProperties0.consoleFileName = "hi!";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel9 = atomikosProperties0.getConsoleLogLevel();
        int int10 = atomikosProperties0.getConsoleFileCount();
        java.lang.String str11 = atomikosProperties0.logBaseName;
        atomikosProperties0.checkpointInterval = 500L;
        atomikosProperties0.setCheckpointInterval((-1L));
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel9 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel9.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tmlog" + "'", str11, "tmlog");
    }

    @Test
    public void test10841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10841");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        java.util.Collection<java.lang.Object> objCollection4 = properties0.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery5.retryInterval = (short) 100;
        recovery5.forgetOrphanedLogEntriesDelay = 'a';
        long long10 = recovery5.retryInterval;
        recovery5.forgetOrphanedLogEntriesDelay = 0L;
        long long13 = recovery5.getForgetOrphanedLogEntriesDelay();
        long long14 = recovery5.getForgetOrphanedLogEntriesDelay();
        recovery5.retryInterval = 0L;
        boolean boolean17 = properties0.containsValue((java.lang.Object) recovery5);
        java.util.Properties properties18 = new java.util.Properties(properties0);
        java.lang.Object obj21 = properties18.setProperty("{{1.0=-1, -1.0=100}={1.0=-1}, 1.0=-1}", "");
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L + "'", long10 == 100L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj21);
    }

    @Test
    public void test10842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10842");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.consoleFileName = "{-1.0=100}";
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.consoleFileName = "{={-1.0=100}, -1.0=100}";
        atomikosProperties0.defaultJtaTimeout = 50;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel19 = atomikosProperties0.getConsoleLogLevel();
        java.lang.String str20 = atomikosProperties0.service;
        atomikosProperties0.setMaxTimeout((long) 0);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertNull(atomikosLoggingLevel19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{-1.0=100}" + "'", str20, "{-1.0=100}");
    }

    @Test
    public void test10843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10843");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.service = "tm.out";
        atomikosProperties0.logBaseName = "tm.out";
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        boolean boolean15 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setService("{100=100}");
        boolean boolean18 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.enableLogging = true;
        boolean boolean21 = atomikosProperties0.serialJtaTransactions;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery22 = atomikosProperties0.recovery;
        atomikosProperties0.setTransactionManagerUniqueName("hi!");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(recovery22);
    }

    @Test
    public void test10844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10844");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        int int5 = atomikosProperties0.getMaxActives();
        java.lang.String str6 = atomikosProperties0.getLogBaseDir();
        java.lang.String str7 = atomikosProperties0.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.getRecovery();
        long long9 = atomikosProperties0.getDefaultJtaTimeout();
        int int10 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.setForceShutdownOnVmExit(false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test10845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10845");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel7 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel7);
        boolean boolean9 = atomikosProperties0.enableLogging;
        int int10 = atomikosProperties0.getConsoleFileLimit();
        atomikosProperties0.serialJtaTransactions = false;
        java.lang.String str13 = atomikosProperties0.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = atomikosProperties0.getConsoleLogLevel();
        java.lang.String str15 = atomikosProperties0.getService();
        java.lang.String str16 = atomikosProperties0.getConsoleFileName();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(atomikosLoggingLevel14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{-1.0=100}" + "'", str15, "{-1.0=100}");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tm.out" + "'", str16, "tm.out");
    }

    @Test
    public void test10846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10846");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties12 = new java.util.Properties(properties0);
        java.lang.String str14 = properties12.getProperty("hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties16 = atomikosProperties15.asProperties();
        atomikosProperties15.service = "{-1.0=100}";
        java.lang.String str19 = atomikosProperties15.getTransactionManagerUniqueName();
        atomikosProperties15.consoleFileName = "hi!";
        atomikosProperties15.setCheckpointInterval((long) 5);
        atomikosProperties15.setLogBaseDir("{-1.0=100}");
        java.lang.String str26 = atomikosProperties15.getOutputDir();
        boolean boolean27 = atomikosProperties15.isSerialJtaTransactions();
        java.lang.String str28 = atomikosProperties15.transactionManagerUniqueName;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery29 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long30 = recovery29.getRetryInterval();
        long long31 = recovery29.getDelay();
        long long32 = recovery29.getDelay();
        recovery29.setForgetOrphanedLogEntriesDelay(10000L);
        recovery29.retryInterval = '4';
        recovery29.setRetryInterval((long) (short) 0);
        long long39 = recovery29.getForgetOrphanedLogEntriesDelay();
        long long40 = recovery29.getDelay();
        recovery29.setMaxRetries((int) (byte) 0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties44 = atomikosProperties43.asProperties();
        atomikosProperties43.service = "{-1.0=100}";
        long long47 = atomikosProperties43.getDefaultJtaTimeout();
        atomikosProperties43.setTransactionManagerUniqueName("{}");
        atomikosProperties43.consoleFileName = "hi!";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel52 = atomikosProperties43.getConsoleLogLevel();
        int int53 = atomikosProperties43.getConsoleFileCount();
        atomikosProperties43.setMaxActives((int) (short) 1);
        boolean boolean56 = properties12.replace((java.lang.Object) atomikosProperties15, (java.lang.Object) (byte) 0, (java.lang.Object) (short) 1);
        atomikosProperties15.serialJtaTransactions = true;
        java.lang.String str59 = atomikosProperties15.getService();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10000L + "'", long30 == 10000L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10000L + "'", long31 == 10000L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10000L + "'", long32 == 10000L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10000L + "'", long39 == 10000L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10000L + "'", long40 == 10000L);
        org.junit.Assert.assertNotNull(properties44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10000L + "'", long47 == 10000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel52 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel52.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "{-1.0=100}" + "'", str59, "{-1.0=100}");
    }

    @Test
    public void test10847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10847");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.setService("tm.out");
        int int12 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.setDefaultJtaTimeout((long) 'a');
        boolean boolean15 = atomikosProperties0.isAllowSubTransactions();
        boolean boolean16 = atomikosProperties0.forceShutdownOnVmExit;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel17 = atomikosProperties0.getConsoleLogLevel();
        long long18 = atomikosProperties0.maxTimeout;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel17 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel17.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 300000L + "'", long18 == 300000L);
    }

    @Test
    public void test10848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10848");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        boolean boolean6 = properties4.isEmpty();
        java.lang.Object obj9 = properties4.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties4.elements();
        boolean boolean11 = properties0.containsKey((java.lang.Object) properties4);
        java.util.Enumeration<?> wildcardEnumeration12 = properties0.propertyNames();
        java.util.Properties properties13 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties15 = atomikosProperties14.asProperties();
        atomikosProperties14.service = "{-1.0=100}";
        long long18 = atomikosProperties14.getDefaultJtaTimeout();
        boolean boolean19 = atomikosProperties14.enableLogging;
        boolean boolean20 = atomikosProperties14.isForceShutdownOnVmExit();
        atomikosProperties14.consoleFileLimit = (byte) -1;
        java.lang.String str23 = atomikosProperties14.getService();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel24 = atomikosProperties14.consoleLogLevel;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties26 = atomikosProperties25.asProperties();
        atomikosProperties25.service = "{-1.0=100}";
        long long29 = atomikosProperties25.getDefaultJtaTimeout();
        atomikosProperties25.serialJtaTransactions = true;
        long long32 = atomikosProperties25.maxTimeout;
        atomikosProperties25.setLogBaseDir("{-1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setAllowSubTransactions(true);
        atomikosProperties35.maxActives = (short) -1;
        atomikosProperties35.setService("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties42.setAllowSubTransactions(true);
        boolean boolean45 = atomikosProperties42.enableLogging;
        boolean boolean46 = atomikosProperties42.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel47 = atomikosProperties42.consoleLogLevel;
        atomikosProperties35.setConsoleLogLevel(atomikosLoggingLevel47);
        atomikosProperties25.consoleLogLevel = atomikosLoggingLevel47;
        atomikosProperties14.consoleLogLevel = atomikosLoggingLevel47;
        boolean boolean51 = properties13.containsValue((java.lang.Object) atomikosLoggingLevel47);
        boolean boolean52 = properties13.isEmpty();
        int int53 = properties13.size();
        java.util.Collection<java.lang.Object> objCollection54 = properties13.values();
        java.lang.String str55 = properties13.toString();
        java.util.Collection<java.lang.Object> objCollection56 = properties13.values();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration12);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10000L + "'", long18 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{-1.0=100}" + "'", str23, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel24 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel24.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10000L + "'", long29 == 10000L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 300000L + "'", long32 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel47 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel47.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objCollection54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{}" + "'", str55, "{}");
        org.junit.Assert.assertNotNull(objCollection56);
    }

    @Test
    public void test10849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10849");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean3 = properties0.containsValue((java.lang.Object) (-1L));
        java.lang.Object obj5 = properties0.get((java.lang.Object) 97L);
        properties0.clear();
        java.lang.String str8 = properties0.getProperty("{1.0=-1}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery9.retryInterval = (short) 100;
        recovery9.setForgetOrphanedLogEntriesDelay((long) 5);
        recovery9.setForgetOrphanedLogEntriesDelay((long) (short) 0);
        boolean boolean16 = properties0.containsValue((java.lang.Object) recovery9);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery17 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery17.retryInterval = (byte) 0;
        int int20 = recovery17.maxRetries;
        recovery17.setForgetOrphanedLogEntriesDelay(86400000L);
        java.lang.Object obj23 = properties0.get((java.lang.Object) recovery17);
        java.util.Properties properties24 = new java.util.Properties();
        java.lang.Object obj26 = properties24.remove((java.lang.Object) (-1.0d));
        boolean boolean27 = properties24.isEmpty();
        int int28 = properties24.size();
        java.util.Properties properties29 = new java.util.Properties();
        properties29.clear();
        java.lang.String str31 = properties29.toString();
        java.lang.Object obj32 = properties29.clone();
        java.util.Properties properties33 = new java.util.Properties();
        java.lang.Object obj35 = properties33.remove((java.lang.Object) (-1.0d));
        boolean boolean36 = properties33.isEmpty();
        int int37 = properties33.size();
        java.lang.String str39 = properties33.getProperty("{}");
        java.util.Set<java.lang.Object> objSet40 = properties33.keySet();
        boolean boolean42 = properties33.containsKey((java.lang.Object) (short) 1);
        int int43 = properties33.size();
        properties29.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties33);
        properties24.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties47 = atomikosProperties46.asProperties();
        atomikosProperties46.service = "{-1.0=100}";
        long long50 = atomikosProperties46.getDefaultJtaTimeout();
        atomikosProperties46.setThreadedTwoPhaseCommit(true);
        boolean boolean53 = atomikosProperties46.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery54 = atomikosProperties46.recovery;
        atomikosProperties46.setLogBaseDir("");
        long long57 = atomikosProperties46.maxTimeout;
        atomikosProperties46.setConsoleFileLimit(0);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel60 = atomikosProperties46.getConsoleLogLevel();
        java.lang.Object obj61 = properties29.remove((java.lang.Object) atomikosProperties46);
        atomikosProperties46.setConsoleFileCount((-1));
        atomikosProperties46.setMaxActives((int) (short) -1);
        boolean boolean66 = properties0.equals((java.lang.Object) (short) -1);
        java.io.PrintWriter printWriter67 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.list(printWriter67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{}" + "'", str31, "{}");
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "{}");
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(objSet40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(properties47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10000L + "'", long50 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(recovery54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 300000L + "'", long57 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel60 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel60.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test10850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10850");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.outputDir = "hi!";
        java.lang.String str13 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setService("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        boolean boolean16 = atomikosProperties0.isSerialJtaTransactions();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test10851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10851");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties5 = atomikosProperties4.asProperties();
        atomikosProperties4.service = "{-1.0=100}";
        long long8 = atomikosProperties4.getDefaultJtaTimeout();
        atomikosProperties4.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties4.setMaxActives(100);
        atomikosProperties4.defaultJtaTimeout = ' ';
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties16 = atomikosProperties15.asProperties();
        atomikosProperties15.service = "{-1.0=100}";
        long long19 = atomikosProperties15.getDefaultJtaTimeout();
        atomikosProperties15.outputDir = "{={-1.0=100}, -1.0=100}";
        long long22 = atomikosProperties15.getCheckpointInterval();
        atomikosProperties15.setConsoleFileCount((int) (byte) 1);
        boolean boolean25 = atomikosProperties15.threadedTwoPhaseCommit;
        java.lang.String str26 = atomikosProperties15.getTransactionManagerUniqueName();
        java.lang.Object obj27 = properties0.put((java.lang.Object) ' ', (java.lang.Object) atomikosProperties15);
        java.util.Set<java.lang.Object> objSet28 = properties0.keySet();
        java.io.PrintStream printStream29 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.list(printStream29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10000L + "'", long8 == 10000L);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10000L + "'", long19 == 10000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(objSet28);
    }

    @Test
    public void test10852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10852");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.outputDir = "tm.out";
        int int11 = atomikosProperties0.getConsoleFileLimit();
        int int12 = atomikosProperties0.getConsoleFileLimit();
        boolean boolean13 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.maxActives = (byte) 1;
        boolean boolean16 = atomikosProperties0.isAllowSubTransactions();
        atomikosProperties0.forceShutdownOnVmExit = false;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test10853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10853");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet2 = properties1.entrySet();
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.Object obj6 = properties3.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration7 = properties3.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet8 = properties3.entrySet();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery10.retryInterval = (short) 100;
        recovery10.delay = (-1L);
        long long15 = recovery10.delay;
        recovery10.delay = (short) 1;
        long long18 = recovery10.getRetryInterval();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        properties19.clear();
        java.lang.Object obj22 = properties1.getOrDefault((java.lang.Object) recovery10, (java.lang.Object) properties19);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery23 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery23.retryInterval = (short) 100;
        recovery23.forgetOrphanedLogEntriesDelay = 'a';
        long long28 = recovery23.retryInterval;
        recovery23.forgetOrphanedLogEntriesDelay = 0L;
        long long31 = recovery23.getForgetOrphanedLogEntriesDelay();
        long long32 = recovery23.getForgetOrphanedLogEntriesDelay();
        recovery23.retryInterval = 0L;
        long long35 = recovery23.retryInterval;
        boolean boolean36 = properties1.containsKey((java.lang.Object) recovery23);
        java.io.InputStream inputStream37 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.loadFromXML(inputStream37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEntrySet2);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(objEnumeration7);
        org.junit.Assert.assertNotNull(objEntrySet8);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L + "'", long18 == 100L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{}");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 100L + "'", long28 == 100L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test10854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10854");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.setLogBaseName("");
        java.lang.String str13 = atomikosProperties0.logBaseName;
        boolean boolean14 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.logBaseDir = "{1.0=-1, -1.0=100}";
        atomikosProperties0.enableLogging = false;
        boolean boolean19 = atomikosProperties0.isSerialJtaTransactions();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test10855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10855");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean4 = properties0.contains((java.lang.Object) "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.keys();
        java.lang.Object obj6 = null;
        boolean boolean7 = properties0.equals(obj6);
        properties0.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties9.setEnableLogging(true);
        atomikosProperties9.consoleFileCount = 0;
        int int14 = atomikosProperties9.getMaxActives();
        java.lang.String str15 = atomikosProperties9.getLogBaseDir();
        java.lang.String str16 = atomikosProperties9.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery17 = atomikosProperties9.getRecovery();
        boolean boolean18 = atomikosProperties9.serialJtaTransactions;
        atomikosProperties9.setLogBaseName("{={-1.0=100}, -1.0=100}");
        boolean boolean21 = atomikosProperties9.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel22 = atomikosProperties9.getConsoleLogLevel();
        atomikosProperties9.setMaxTimeout(35L);
        java.lang.Object obj25 = properties0.get((java.lang.Object) 35L);
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 50 + "'", int14 == 50);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(recovery17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel22 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel22.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj25);
    }

    @Test
    public void test10856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10856");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        boolean boolean6 = properties4.isEmpty();
        java.lang.Object obj9 = properties4.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties4.elements();
        boolean boolean11 = properties0.containsKey((java.lang.Object) properties4);
        java.util.Enumeration<?> wildcardEnumeration12 = properties0.propertyNames();
        java.util.Properties properties13 = new java.util.Properties();
        java.lang.Object obj15 = properties13.remove((java.lang.Object) (-1.0d));
        boolean boolean16 = properties13.isEmpty();
        java.lang.Object obj19 = properties13.setProperty("hi!", "{}");
        java.util.Set<java.lang.String> strSet20 = properties13.stringPropertyNames();
        java.lang.Object obj21 = properties0.get((java.lang.Object) properties13);
        java.util.Properties properties22 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration23 = properties22.propertyNames();
        java.lang.Object obj26 = properties22.setProperty("{={-1.0=100}, -1.0=100}", "{={-1.0=100}, -1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery27 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long28 = recovery27.getRetryInterval();
        long long29 = recovery27.getDelay();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties31 = atomikosProperties30.asProperties();
        atomikosProperties30.service = "{-1.0=100}";
        java.lang.String str34 = atomikosProperties30.getTransactionManagerUniqueName();
        atomikosProperties30.consoleFileName = "hi!";
        atomikosProperties30.serialJtaTransactions = true;
        atomikosProperties30.outputDir = "tm.out";
        boolean boolean41 = atomikosProperties30.isAllowSubTransactions();
        atomikosProperties30.consoleFileName = "";
        atomikosProperties30.transactionManagerUniqueName = "";
        java.lang.Object obj46 = properties22.replace((java.lang.Object) long29, (java.lang.Object) atomikosProperties30);
        boolean boolean47 = properties22.isEmpty();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties22);
        properties0.clear();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(wildcardEnumeration23);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10000L + "'", long28 == 10000L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10000L + "'", long29 == 10000L);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test10857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10857");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.consoleFileName = "{-1.0=100}";
        boolean boolean13 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.logBaseName = "{{={-1.0=100}, -1.0=100}=}";
        boolean boolean16 = atomikosProperties0.isEnableLogging();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test10858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10858");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        java.lang.String str15 = properties0.toString();
        java.util.Set<java.lang.String> strSet16 = properties0.stringPropertyNames();
        java.util.Properties properties17 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties19 = atomikosProperties18.asProperties();
        atomikosProperties18.service = "{-1.0=100}";
        long long22 = atomikosProperties18.getDefaultJtaTimeout();
        atomikosProperties18.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties18.logBaseName = "hi!";
        java.lang.String str27 = atomikosProperties18.transactionManagerUniqueName;
        atomikosProperties18.setLogBaseDir("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel30 = atomikosProperties18.getConsoleLogLevel();
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.Object obj33 = properties31.remove((java.lang.Object) (-1.0d));
        boolean boolean34 = properties31.isEmpty();
        java.util.Properties properties35 = new java.util.Properties();
        java.lang.String str36 = properties35.toString();
        java.lang.Object obj38 = properties35.remove((java.lang.Object) (short) 100);
        java.lang.Object obj41 = properties35.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean43 = properties35.containsKey((java.lang.Object) 0L);
        java.lang.Object obj46 = properties35.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj49 = properties35.setProperty("", "{-1.0=100}");
        java.lang.Object obj50 = properties35.clone();
        java.lang.Object obj51 = properties31.get((java.lang.Object) properties35);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties52.setEnableLogging(true);
        atomikosProperties52.consoleFileCount = 0;
        int int57 = atomikosProperties52.getMaxActives();
        java.lang.String str58 = atomikosProperties52.getLogBaseDir();
        java.lang.String str59 = atomikosProperties52.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery60 = atomikosProperties52.getRecovery();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties62 = atomikosProperties61.asProperties();
        atomikosProperties61.service = "{-1.0=100}";
        long long65 = atomikosProperties61.getDefaultJtaTimeout();
        atomikosProperties61.setThreadedTwoPhaseCommit(true);
        boolean boolean68 = atomikosProperties61.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery69 = atomikosProperties61.recovery;
        atomikosProperties61.setLogBaseDir("");
        java.lang.Object obj72 = properties35.replace((java.lang.Object) recovery60, (java.lang.Object) "");
        java.util.Properties properties73 = new java.util.Properties();
        java.lang.Object obj75 = properties73.remove((java.lang.Object) (-1.0d));
        boolean boolean77 = properties73.contains((java.lang.Object) "{-1.0=100}");
        boolean boolean78 = properties35.equals((java.lang.Object) "{-1.0=100}");
        properties35.clear();
        java.lang.Object obj80 = properties0.getOrDefault((java.lang.Object) atomikosProperties18, (java.lang.Object) properties35);
        java.util.Enumeration<java.lang.Object> objEnumeration81 = properties0.keys();
        java.util.Set<java.lang.Object> objSet82 = properties0.keySet();
        java.util.Set<java.lang.Object> objSet83 = properties0.keySet();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str15, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10000L + "'", long22 == 10000L);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel30 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel30.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "{}" + "'", str36, "{}");
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(obj50);
// flaky:         org.junit.Assert.assertEquals(obj50.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 50 + "'", int57 == 50);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(recovery60);
        org.junit.Assert.assertNotNull(properties62);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 10000L + "'", long65 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(recovery69);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertEquals(obj80.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj80), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj80), "{}");
        org.junit.Assert.assertNotNull(objEnumeration81);
        org.junit.Assert.assertNotNull(objSet82);
        org.junit.Assert.assertNotNull(objSet83);
    }

    @Test
    public void test10859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10859");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties();
        java.lang.String str2 = properties1.toString();
        java.lang.Object obj4 = properties1.remove((java.lang.Object) (short) 100);
        java.lang.Object obj7 = properties1.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int8 = properties1.size();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.Object obj11 = properties9.remove((java.lang.Object) (-1.0d));
        boolean boolean12 = properties9.isEmpty();
        java.lang.Object obj15 = properties9.setProperty("hi!", "{}");
        boolean boolean16 = properties0.remove((java.lang.Object) int8, (java.lang.Object) properties9);
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties0.keys();
        java.lang.String str18 = properties0.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties20 = atomikosProperties19.asProperties();
        atomikosProperties19.service = "{-1.0=100}";
        long long23 = atomikosProperties19.getDefaultJtaTimeout();
        atomikosProperties19.serialJtaTransactions = true;
        long long26 = atomikosProperties19.getDefaultJtaTimeout();
        long long27 = atomikosProperties19.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery28 = atomikosProperties19.getRecovery();
        recovery28.delay = (-1L);
        long long31 = recovery28.getForgetOrphanedLogEntriesDelay();
        int int32 = recovery28.getMaxRetries();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean34 = atomikosProperties33.enableLogging;
        long long35 = atomikosProperties33.getDefaultJtaTimeout();
        atomikosProperties33.enableLogging = false;
        long long38 = atomikosProperties33.getDefaultJtaTimeout();
        boolean boolean39 = properties0.remove((java.lang.Object) recovery28, (java.lang.Object) long38);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{}" + "'", str18, "{}");
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 10000L + "'", long23 == 10000L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10000L + "'", long26 == 10000L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 500L + "'", long27 == 500L);
        org.junit.Assert.assertNotNull(recovery28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 86400000L + "'", long31 == 86400000L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10000L + "'", long35 == 10000L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10000L + "'", long38 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test10860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10860");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.maxActives = ' ';
        boolean boolean9 = atomikosProperties0.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.recovery;
        atomikosProperties0.setMaxTimeout((long) 'a');
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(recovery10);
    }

    @Test
    public void test10861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10861");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.delay = (-1L);
        long long5 = recovery0.delay;
        recovery0.maxRetries = 0;
        long long8 = recovery0.forgetOrphanedLogEntriesDelay;
        long long9 = recovery0.getDelay();
        long long10 = recovery0.getDelay();
        recovery0.setForgetOrphanedLogEntriesDelay((long) 2);
        long long13 = recovery0.delay;
        long long14 = recovery0.getDelay();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 86400000L + "'", long8 == 86400000L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    }

    @Test
    public void test10862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10862");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.getOutputDir();
        java.lang.String str2 = atomikosProperties0.outputDir;
        atomikosProperties0.setConsoleFileName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        atomikosProperties0.setCheckpointInterval((long) 18);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test10863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10863");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.lang.Object obj5 = properties0.setProperty("", "{={-1.0=100}, -1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties7 = atomikosProperties6.asProperties();
        atomikosProperties6.service = "{-1.0=100}";
        long long10 = atomikosProperties6.getDefaultJtaTimeout();
        atomikosProperties6.serialJtaTransactions = true;
        atomikosProperties6.maxActives = ' ';
        int int15 = atomikosProperties6.maxActives;
        java.util.Properties properties16 = new java.util.Properties();
        java.lang.String str17 = properties16.toString();
        java.lang.Object obj19 = properties16.remove((java.lang.Object) (short) 100);
        java.lang.Object obj22 = properties16.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties24 = new java.util.Properties();
        java.lang.String str25 = properties24.toString();
        java.lang.Object obj27 = properties24.remove((java.lang.Object) (short) 100);
        java.lang.Object obj30 = properties24.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj31 = properties24.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties24.elements();
        java.lang.Object obj33 = properties16.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration32);
        java.lang.String str34 = properties16.toString();
        boolean boolean35 = properties0.remove((java.lang.Object) atomikosProperties6, (java.lang.Object) properties16);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties36.setEnableLogging(true);
        atomikosProperties36.consoleFileCount = 0;
        int int41 = atomikosProperties36.getMaxActives();
        java.lang.String str42 = atomikosProperties36.getLogBaseDir();
        java.lang.String str43 = atomikosProperties36.service;
        atomikosProperties36.setConsoleFileCount((int) (byte) 1);
        atomikosProperties36.setMaxActives((-1));
        boolean boolean48 = properties16.containsValue((java.lang.Object) (-1));
        java.util.Properties properties49 = new java.util.Properties();
        java.lang.String str50 = properties49.toString();
        java.lang.Object obj52 = properties49.remove((java.lang.Object) (short) 100);
        java.util.Properties properties53 = new java.util.Properties();
        java.lang.String str54 = properties53.toString();
        boolean boolean55 = properties53.isEmpty();
        java.lang.Object obj58 = properties53.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration59 = properties53.elements();
        boolean boolean60 = properties49.containsKey((java.lang.Object) properties53);
        java.util.Set<java.lang.String> strSet61 = properties49.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties62 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean63 = atomikosProperties62.isSerialJtaTransactions();
        atomikosProperties62.logBaseName = "{-1.0=100}";
        int int66 = atomikosProperties62.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery67 = atomikosProperties62.getRecovery();
        atomikosProperties62.outputDir = "tm.out";
        java.lang.Object obj70 = properties49.get((java.lang.Object) atomikosProperties62);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties72 = atomikosProperties71.asProperties();
        atomikosProperties71.service = "{-1.0=100}";
        long long75 = atomikosProperties71.getDefaultJtaTimeout();
        atomikosProperties71.setTransactionManagerUniqueName("{}");
        atomikosProperties71.consoleFileName = "hi!";
        atomikosProperties71.transactionManagerUniqueName = "hi!";
        atomikosProperties71.setCheckpointInterval(50L);
        long long84 = atomikosProperties71.defaultJtaTimeout;
        java.lang.String str85 = atomikosProperties71.outputDir;
        atomikosProperties71.setForceShutdownOnVmExit(false);
        java.lang.Object obj88 = properties16.put((java.lang.Object) atomikosProperties62, (java.lang.Object) atomikosProperties71);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 32 + "'", int15 == 32);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{}" + "'", str25, "{}");
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration32);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 50 + "'", int41 == 50);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "{}" + "'", str50, "{}");
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "{}" + "'", str54, "{}");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNotNull(objEnumeration59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 50 + "'", int66 == 50);
        org.junit.Assert.assertNotNull(recovery67);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertNotNull(properties72);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 10000L + "'", long75 == 10000L);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 10000L + "'", long84 == 10000L);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNull(obj88);
    }

    @Test
    public void test10864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10864");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isThreadedTwoPhaseCommit();
        java.lang.String str2 = atomikosProperties0.logBaseDir;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = atomikosProperties0.recovery;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel4 = atomikosProperties0.getConsoleLogLevel();
        atomikosProperties0.allowSubTransactions = true;
        atomikosProperties0.enableLogging = true;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties10 = atomikosProperties9.asProperties();
        atomikosProperties9.service = "{-1.0=100}";
        long long13 = atomikosProperties9.getDefaultJtaTimeout();
        atomikosProperties9.serialJtaTransactions = true;
        long long16 = atomikosProperties9.getDefaultJtaTimeout();
        long long17 = atomikosProperties9.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = atomikosProperties9.getRecovery();
        java.lang.String str19 = atomikosProperties9.outputDir;
        atomikosProperties9.consoleFileCount = 32;
        atomikosProperties9.consoleFileLimit = (short) -1;
        boolean boolean24 = atomikosProperties9.threadedTwoPhaseCommit;
        java.lang.String str25 = atomikosProperties9.getService();
        atomikosProperties9.consoleFileName = "{1.0=-1}";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel28 = atomikosProperties9.getConsoleLogLevel();
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel28;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(recovery3);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel4 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel4.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10000L + "'", long16 == 10000L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertNotNull(recovery18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{-1.0=100}" + "'", str25, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel28 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel28.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test10865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10865");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        int int4 = properties0.size();
        java.lang.String str6 = properties0.getProperty("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties7.setEnableLogging(true);
        atomikosProperties7.consoleFileCount = 0;
        int int12 = atomikosProperties7.getMaxActives();
        java.lang.String str13 = atomikosProperties7.getLogBaseDir();
        java.lang.String str14 = atomikosProperties7.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery15 = atomikosProperties7.getRecovery();
        java.lang.String str16 = atomikosProperties7.getTransactionManagerUniqueName();
        boolean boolean17 = properties0.containsValue((java.lang.Object) atomikosProperties7);
        java.util.Properties properties18 = new java.util.Properties(properties0);
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.Object obj21 = properties19.remove((java.lang.Object) (-1.0d));
        boolean boolean22 = properties19.isEmpty();
        int int23 = properties19.size();
        java.lang.String str25 = properties19.getProperty("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean27 = atomikosProperties26.isSerialJtaTransactions();
        atomikosProperties26.logBaseName = "{-1.0=100}";
        int int30 = atomikosProperties26.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery31 = atomikosProperties26.getRecovery();
        atomikosProperties26.setConsoleFileCount((int) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel34 = null;
        atomikosProperties26.consoleLogLevel = atomikosLoggingLevel34;
        java.lang.String str36 = atomikosProperties26.logBaseDir;
        atomikosProperties26.checkpointInterval = (byte) 0;
        java.lang.String str39 = atomikosProperties26.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties41 = atomikosProperties40.asProperties();
        java.util.Properties properties42 = new java.util.Properties();
        java.lang.Object obj44 = properties42.remove((java.lang.Object) (-1.0d));
        boolean boolean45 = properties42.isEmpty();
        int int46 = properties42.size();
        java.lang.String str48 = properties42.getProperty("{}");
        java.lang.Object obj49 = properties41.remove((java.lang.Object) properties42);
        java.util.Properties properties50 = new java.util.Properties();
        java.lang.String str51 = properties50.toString();
        java.util.Properties properties52 = new java.util.Properties(properties50);
        properties41.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties50);
        java.lang.Object obj54 = properties19.getOrDefault((java.lang.Object) atomikosProperties26, (java.lang.Object) properties50);
        java.util.Properties properties55 = new java.util.Properties(properties19);
        boolean boolean56 = properties18.containsValue((java.lang.Object) properties55);
        java.io.InputStream inputStream57 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties55.loadFromXML(inputStream57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(recovery15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 50 + "'", int30 == 50);
        org.junit.Assert.assertNotNull(recovery31);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "{}" + "'", str51, "{}");
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "{}");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test10866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10866");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties8 = atomikosProperties7.asProperties();
        atomikosProperties7.service = "{-1.0=100}";
        long long11 = atomikosProperties7.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel12 = null;
        atomikosProperties7.setConsoleLogLevel(atomikosLoggingLevel12);
        atomikosProperties7.setTransactionManagerUniqueName("{-1.0=100}");
        atomikosProperties7.consoleFileCount = 0;
        long long18 = atomikosProperties7.getDefaultJtaTimeout();
        atomikosProperties7.consoleFileLimit = 100;
        atomikosProperties7.setAllowSubTransactions(true);
        boolean boolean23 = atomikosProperties7.serialJtaTransactions;
        java.lang.Object obj24 = properties0.get((java.lang.Object) boolean23);
        java.lang.String str27 = properties0.getProperty("{com.atomikos.icatch.tm.out={}}", "{{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}=hi!}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10000L + "'", long18 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}=hi!}" + "'", str27, "{{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}=hi!}");
    }

    @Test
    public void test10867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10867");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        int int6 = atomikosProperties0.consoleFileCount;
        long long7 = atomikosProperties0.maxTimeout;
        atomikosProperties0.defaultJtaTimeout = 10;
        atomikosProperties0.setAllowSubTransactions(false);
        java.lang.String str12 = atomikosProperties0.getService();
        boolean boolean13 = atomikosProperties0.enableLogging;
        atomikosProperties0.logBaseName = "{}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{-1.0=100}" + "'", str12, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test10868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10868");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.recovery;
        atomikosProperties0.setLogBaseDir("");
        long long11 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setService("{={-1.0=100}, -1.0=100}");
        boolean boolean14 = atomikosProperties0.enableLogging;
        java.lang.String str15 = atomikosProperties0.transactionManagerUniqueName;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery16 = atomikosProperties0.getRecovery();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(recovery16);
    }

    @Test
    public void test10869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10869");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        boolean boolean10 = atomikosProperties2.forceShutdownOnVmExit;
        atomikosProperties2.setOutputDir("");
        long long13 = atomikosProperties2.defaultJtaTimeout;
        atomikosProperties2.setConsoleFileLimit((int) (short) -1);
        boolean boolean16 = atomikosProperties2.serialJtaTransactions;
        atomikosProperties2.setOutputDir("tm.out");
        atomikosProperties2.serialJtaTransactions = false;
        atomikosProperties2.setService("{100=100}");
        atomikosProperties2.setLogBaseName("{{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}=hi!}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test10870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10870");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.consoleFileName = "{-1.0=100}";
        java.lang.String str13 = atomikosProperties0.service;
        boolean boolean14 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.checkpointInterval = 10000L;
        atomikosProperties0.setLogBaseName("{}");
        atomikosProperties0.outputDir = "{com.atomikos.icatch.tm.out=hi!}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{-1.0=100}" + "'", str13, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test10871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10871");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        int int8 = atomikosProperties0.getConsoleFileLimit();
        boolean boolean9 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setMaxTimeout(300000L);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery12 = atomikosProperties0.getRecovery();
        boolean boolean13 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.maxActives = 1;
        java.util.Properties properties16 = new java.util.Properties();
        java.lang.String str17 = properties16.toString();
        java.lang.Object obj19 = properties16.remove((java.lang.Object) (short) 100);
        java.lang.Object obj22 = properties16.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj23 = properties16.clone();
        java.lang.String str25 = properties16.getProperty("{}");
        java.lang.Object obj28 = properties16.put((java.lang.Object) 86400000L, (java.lang.Object) "{-1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties30 = atomikosProperties29.asProperties();
        atomikosProperties29.service = "{-1.0=100}";
        java.lang.String str33 = atomikosProperties29.getTransactionManagerUniqueName();
        boolean boolean34 = atomikosProperties29.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel35 = atomikosProperties29.getConsoleLogLevel();
        java.lang.Object obj36 = properties16.remove((java.lang.Object) atomikosProperties29);
        int int37 = atomikosProperties29.getConsoleFileCount();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel38 = atomikosProperties29.consoleLogLevel;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel38;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(recovery12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "{1.0=-1}");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel35 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel35.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel38 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel38.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test10872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10872");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getRetryInterval();
        long long2 = recovery0.retryInterval;
        recovery0.setDelay((long) (-1));
        long long5 = recovery0.forgetOrphanedLogEntriesDelay;
        long long6 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.setMaxRetries((int) ' ');
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 86400000L + "'", long5 == 86400000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 86400000L + "'", long6 == 86400000L);
    }

    @Test
    public void test10873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10873");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.delay = (-1L);
        long long5 = recovery0.delay;
        recovery0.delay = (short) 1;
        long long8 = recovery0.getRetryInterval();
        long long9 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.setMaxRetries(10);
        int int12 = recovery0.maxRetries;
        recovery0.setForgetOrphanedLogEntriesDelay((long) 32);
        long long15 = recovery0.delay;
        recovery0.setForgetOrphanedLogEntriesDelay((long) (byte) 10);
        int int18 = recovery0.maxRetries;
        long long19 = recovery0.retryInterval;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86400000L + "'", long9 == 86400000L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L + "'", long19 == 100L);
    }

    @Test
    public void test10874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10874");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.setService("tm.out");
        int int12 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.setDefaultJtaTimeout((long) 'a');
        boolean boolean15 = atomikosProperties0.enableLogging;
        java.lang.String str16 = atomikosProperties0.consoleFileName;
        java.lang.String str17 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean18 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.serialJtaTransactions = true;
        java.lang.String str21 = atomikosProperties0.consoleFileName;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel22 = atomikosProperties0.consoleLogLevel;
        atomikosProperties0.setDefaultJtaTimeout((long) 0);
        atomikosProperties0.transactionManagerUniqueName = "{={={-1.0=100}, -1.0=100}}";
        boolean boolean27 = atomikosProperties0.enableLogging;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tm.out" + "'", str16, "tm.out");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tm.out" + "'", str21, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel22 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel22.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test10875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10875");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj4 = properties0.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties6 = atomikosProperties5.asProperties();
        atomikosProperties5.service = "{-1.0=100}";
        long long9 = atomikosProperties5.getDefaultJtaTimeout();
        atomikosProperties5.setThreadedTwoPhaseCommit(true);
        boolean boolean12 = atomikosProperties5.isAllowSubTransactions();
        boolean boolean13 = atomikosProperties5.isEnableLogging();
        atomikosProperties5.allowSubTransactions = false;
        java.lang.Object obj16 = properties0.remove((java.lang.Object) false);
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties0.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties19 = atomikosProperties18.asProperties();
        atomikosProperties18.service = "{-1.0=100}";
        long long22 = atomikosProperties18.getDefaultJtaTimeout();
        atomikosProperties18.setTransactionManagerUniqueName("{}");
        atomikosProperties18.consoleFileName = "hi!";
        atomikosProperties18.logBaseDir = "tm.out";
        atomikosProperties18.consoleFileLimit = 97;
        atomikosProperties18.enableLogging = false;
        boolean boolean33 = properties0.containsValue((java.lang.Object) false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties34.setEnableLogging(true);
        atomikosProperties34.consoleFileCount = 0;
        int int39 = atomikosProperties34.getMaxActives();
        atomikosProperties34.setTransactionManagerUniqueName("tmlog");
        atomikosProperties34.setEnableLogging(true);
        boolean boolean44 = atomikosProperties34.threadedTwoPhaseCommit;
        atomikosProperties34.serialJtaTransactions = true;
        atomikosProperties34.transactionManagerUniqueName = "{tmlog=hi!, com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}";
        atomikosProperties34.consoleFileLimit = (byte) 100;
        boolean boolean51 = properties0.equals((java.lang.Object) atomikosProperties34);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "{}");
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10000L + "'", long22 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 50 + "'", int39 == 50);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test10876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10876");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.String str9 = properties0.toString();
        int int10 = properties0.size();
        java.util.Properties properties11 = new java.util.Properties();
        java.lang.Object obj13 = properties11.remove((java.lang.Object) (-1.0d));
        boolean boolean14 = properties11.isEmpty();
        int int15 = properties11.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery16 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery16.retryInterval = (short) 100;
        recovery16.forgetOrphanedLogEntriesDelay = 'a';
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.Object obj23 = properties21.remove((java.lang.Object) (-1.0d));
        boolean boolean24 = properties21.isEmpty();
        int int25 = properties21.size();
        java.lang.String str27 = properties21.getProperty("{}");
        boolean boolean28 = properties11.remove((java.lang.Object) recovery16, (java.lang.Object) properties21);
        java.lang.Object obj29 = properties11.clone();
        boolean boolean30 = properties0.containsValue(obj29);
        java.lang.String str32 = properties0.getProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties34 = atomikosProperties33.asProperties();
        atomikosProperties33.service = "{-1.0=100}";
        long long37 = atomikosProperties33.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel38 = null;
        atomikosProperties33.setConsoleLogLevel(atomikosLoggingLevel38);
        int int40 = atomikosProperties33.maxActives;
        atomikosProperties33.setLogBaseDir("{}");
        java.lang.String str43 = atomikosProperties33.logBaseDir;
        atomikosProperties33.logBaseDir = "hi!";
        java.lang.String str46 = atomikosProperties33.getConsoleFileName();
        atomikosProperties33.logBaseDir = "{{={-1.0=100}, -1.0=100}=}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery49 = atomikosProperties33.recovery;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties51 = atomikosProperties50.asProperties();
        atomikosProperties50.service = "{-1.0=100}";
        java.lang.String str54 = atomikosProperties50.getTransactionManagerUniqueName();
        atomikosProperties50.consoleFileName = "hi!";
        atomikosProperties50.setCheckpointInterval((long) 5);
        atomikosProperties50.setConsoleFileCount(0);
        atomikosProperties50.setService("{-1.0=100}");
        atomikosProperties50.setDefaultJtaTimeout((long) 100);
        atomikosProperties50.setConsoleFileCount(18);
        atomikosProperties50.logBaseDir = "";
        long long69 = atomikosProperties50.maxTimeout;
        atomikosProperties50.setAllowSubTransactions(false);
        long long72 = atomikosProperties50.getMaxTimeout();
        long long73 = atomikosProperties50.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties74 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties75 = atomikosProperties74.asProperties();
        atomikosProperties74.service = "{-1.0=100}";
        long long78 = atomikosProperties74.getDefaultJtaTimeout();
        atomikosProperties74.serialJtaTransactions = true;
        long long81 = atomikosProperties74.getDefaultJtaTimeout();
        long long82 = atomikosProperties74.checkpointInterval;
        atomikosProperties74.setForceShutdownOnVmExit(true);
        boolean boolean85 = atomikosProperties74.forceShutdownOnVmExit;
        atomikosProperties74.setMaxTimeout((long) (byte) 0);
        atomikosProperties74.setConsoleFileCount((int) (short) 10);
        boolean boolean90 = properties0.replace((java.lang.Object) atomikosProperties33, (java.lang.Object) atomikosProperties50, (java.lang.Object) atomikosProperties74);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{-1.0=100}" + "'", str9, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{}");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 10000L + "'", long37 == 10000L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 50 + "'", int40 == 50);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "{}" + "'", str43, "{}");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "tm.out" + "'", str46, "tm.out");
        org.junit.Assert.assertNotNull(recovery49);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 300000L + "'", long69 == 300000L);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 300000L + "'", long72 == 300000L);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 100L + "'", long73 == 100L);
        org.junit.Assert.assertNotNull(properties75);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 10000L + "'", long78 == 10000L);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 10000L + "'", long81 == 10000L);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 500L + "'", long82 == 500L);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test10877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10877");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = (byte) 10;
        long long7 = atomikosProperties0.getMaxTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        boolean boolean10 = atomikosProperties0.isSerialJtaTransactions();
        int int11 = atomikosProperties0.maxActives;
        java.lang.String str12 = atomikosProperties0.outputDir;
        atomikosProperties0.logBaseName = "{1.0=-1}";
        int int15 = atomikosProperties0.consoleFileLimit;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery16 = atomikosProperties0.getRecovery();
        atomikosProperties0.consoleFileLimit = (short) 1;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 50 + "'", int11 == 50);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(recovery16);
    }

    @Test
    public void test10878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10878");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.recovery;
        boolean boolean9 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.setOutputDir("tmlog");
        atomikosProperties0.threadedTwoPhaseCommit = false;
        long long14 = atomikosProperties0.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel15 = atomikosProperties0.consoleLogLevel;
        boolean boolean16 = atomikosProperties0.isEnableLogging();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 300000L + "'", long14 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel15 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel15.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test10879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10879");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Set<java.lang.String> strSet8 = properties0.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery9.retryInterval = (short) 100;
        recovery9.delay = (-1L);
        long long14 = recovery9.delay;
        recovery9.delay = (short) 1;
        long long17 = recovery9.getRetryInterval();
        int int18 = recovery9.maxRetries;
        int int19 = recovery9.maxRetries;
        long long20 = recovery9.forgetOrphanedLogEntriesDelay;
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.Object obj23 = properties21.remove((java.lang.Object) (-1.0d));
        boolean boolean24 = properties21.isEmpty();
        int int25 = properties21.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery26 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery26.retryInterval = (short) 100;
        recovery26.forgetOrphanedLogEntriesDelay = 'a';
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.Object obj33 = properties31.remove((java.lang.Object) (-1.0d));
        boolean boolean34 = properties31.isEmpty();
        int int35 = properties31.size();
        java.lang.String str37 = properties31.getProperty("{}");
        boolean boolean38 = properties21.remove((java.lang.Object) recovery26, (java.lang.Object) properties31);
        java.lang.Object obj39 = properties0.putIfAbsent((java.lang.Object) long20, (java.lang.Object) properties21);
        java.util.Enumeration<java.lang.Object> objEnumeration40 = properties0.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties42 = atomikosProperties41.asProperties();
        atomikosProperties41.service = "{-1.0=100}";
        long long45 = atomikosProperties41.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel46 = null;
        atomikosProperties41.setConsoleLogLevel(atomikosLoggingLevel46);
        int int48 = atomikosProperties41.maxActives;
        atomikosProperties41.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery51 = atomikosProperties41.getRecovery();
        atomikosProperties41.consoleFileName = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel54 = null;
        atomikosProperties41.setConsoleLogLevel(atomikosLoggingLevel54);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel56 = atomikosProperties41.getConsoleLogLevel();
        int int57 = atomikosProperties41.consoleFileLimit;
        atomikosProperties41.setDefaultJtaTimeout((long) 'a');
        java.lang.String str60 = atomikosProperties41.getConsoleFileName();
        boolean boolean61 = properties0.equals((java.lang.Object) atomikosProperties41);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties62 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean63 = atomikosProperties62.isThreadedTwoPhaseCommit();
        atomikosProperties62.transactionManagerUniqueName = "{}";
        boolean boolean66 = properties0.contains((java.lang.Object) atomikosProperties62);
        java.util.Set<java.lang.String> strSet67 = properties0.stringPropertyNames();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 86400000L + "'", long20 == 86400000L);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(objEnumeration40);
        org.junit.Assert.assertNotNull(properties42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 10000L + "'", long45 == 10000L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 50 + "'", int48 == 50);
        org.junit.Assert.assertNotNull(recovery51);
        org.junit.Assert.assertNull(atomikosLoggingLevel56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "{-1.0=100}" + "'", str60, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strSet67);
    }

    @Test
    public void test10880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10880");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.recovery;
        atomikosProperties0.setLogBaseDir("");
        long long11 = atomikosProperties0.maxTimeout;
        boolean boolean12 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.enableLogging = false;
        int int15 = atomikosProperties0.getConsoleFileCount();
        java.lang.String str16 = atomikosProperties0.getOutputDir();
        java.util.Properties properties17 = new java.util.Properties();
        java.lang.String str18 = properties17.toString();
        java.lang.Object obj20 = properties17.remove((java.lang.Object) (short) 100);
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        boolean boolean23 = properties21.isEmpty();
        java.lang.Object obj26 = properties21.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties21.elements();
        boolean boolean28 = properties17.containsKey((java.lang.Object) properties21);
        java.util.Set<java.lang.String> strSet29 = properties17.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet30 = properties17.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties32 = atomikosProperties31.asProperties();
        atomikosProperties31.service = "{-1.0=100}";
        long long35 = atomikosProperties31.getDefaultJtaTimeout();
        atomikosProperties31.enableLogging = false;
        atomikosProperties31.setMaxTimeout((long) (byte) 0);
        atomikosProperties31.setAllowSubTransactions(true);
        java.util.Properties properties42 = new java.util.Properties();
        java.lang.Object obj44 = properties42.remove((java.lang.Object) (-1.0d));
        boolean boolean45 = properties42.isEmpty();
        java.util.Properties properties46 = new java.util.Properties();
        java.lang.String str47 = properties46.toString();
        java.lang.Object obj49 = properties46.remove((java.lang.Object) (short) 100);
        java.lang.Object obj52 = properties46.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean54 = properties46.containsKey((java.lang.Object) 0L);
        java.lang.Object obj57 = properties46.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj60 = properties46.setProperty("", "{-1.0=100}");
        java.lang.Object obj61 = properties46.clone();
        java.lang.Object obj62 = properties42.get((java.lang.Object) properties46);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery64 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery64.retryInterval = (short) 100;
        recovery64.forgetOrphanedLogEntriesDelay = 'a';
        long long69 = recovery64.getDelay();
        long long70 = recovery64.getRetryInterval();
        recovery64.forgetOrphanedLogEntriesDelay = 10000L;
        atomikosProperties31.set(properties46, "tmlog", (java.lang.Object) recovery64);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties74 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties75 = atomikosProperties74.asProperties();
        atomikosProperties74.service = "{-1.0=100}";
        long long78 = atomikosProperties74.getDefaultJtaTimeout();
        atomikosProperties74.serialJtaTransactions = true;
        java.lang.Object obj81 = properties17.put((java.lang.Object) "tmlog", (java.lang.Object) true);
        java.lang.Object obj83 = null;
        atomikosProperties0.set(properties17, "{-1.0=100}", obj83);
        atomikosProperties0.maxActives = 'a';
        java.util.Properties properties87 = atomikosProperties0.asProperties();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{}" + "'", str18, "{}");
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(objSet30);
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10000L + "'", long35 == 10000L);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "{}" + "'", str47, "{}");
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNotNull(obj61);
// flaky:         org.junit.Assert.assertEquals(obj61.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 10000L + "'", long69 == 10000L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 100L + "'", long70 == 100L);
        org.junit.Assert.assertNotNull(properties75);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 10000L + "'", long78 == 10000L);
        org.junit.Assert.assertNull(obj81);
        org.junit.Assert.assertNotNull(properties87);
    }

    @Test
    public void test10881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10881");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        int int10 = atomikosProperties0.getConsoleFileLimit();
        boolean boolean11 = atomikosProperties0.allowSubTransactions;
        java.util.Properties properties12 = atomikosProperties0.asProperties();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(properties12);
    }

    @Test
    public void test10882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10882");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        boolean boolean10 = atomikosProperties2.forceShutdownOnVmExit;
        atomikosProperties2.setOutputDir("");
        long long13 = atomikosProperties2.defaultJtaTimeout;
        int int14 = atomikosProperties2.maxActives;
        boolean boolean15 = atomikosProperties2.isThreadedTwoPhaseCommit();
        java.lang.String str16 = atomikosProperties2.logBaseDir;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 50 + "'", int14 == 50);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test10883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10883");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery4 = atomikosProperties0.recovery;
        atomikosProperties0.enableLogging = true;
        int int7 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setMaxTimeout((long) (byte) -1);
        atomikosProperties0.setSerialJtaTransactions(true);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel12 = atomikosProperties0.getConsoleLogLevel();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties14 = atomikosProperties13.asProperties();
        atomikosProperties13.service = "{-1.0=100}";
        long long17 = atomikosProperties13.getDefaultJtaTimeout();
        atomikosProperties13.serialJtaTransactions = true;
        long long20 = atomikosProperties13.maxTimeout;
        boolean boolean21 = atomikosProperties13.isThreadedTwoPhaseCommit();
        atomikosProperties13.setCheckpointInterval(1L);
        atomikosProperties13.setOutputDir("{}");
        atomikosProperties13.consoleFileLimit = (-1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean29 = atomikosProperties28.isThreadedTwoPhaseCommit();
        long long30 = atomikosProperties28.getCheckpointInterval();
        atomikosProperties28.setCheckpointInterval((long) 5);
        java.util.Properties properties33 = new java.util.Properties();
        java.lang.String str34 = properties33.toString();
        java.lang.Object obj36 = properties33.remove((java.lang.Object) (short) 100);
        java.lang.Object obj39 = properties33.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean41 = properties33.containsKey((java.lang.Object) 0L);
        java.lang.String str42 = properties33.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties44 = atomikosProperties43.asProperties();
        atomikosProperties43.service = "{-1.0=100}";
        long long47 = atomikosProperties43.getDefaultJtaTimeout();
        atomikosProperties43.setMaxActives(0);
        atomikosProperties43.maxActives = 'a';
        boolean boolean52 = atomikosProperties43.isThreadedTwoPhaseCommit();
        boolean boolean53 = atomikosProperties43.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel54 = atomikosProperties43.consoleLogLevel;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties56 = atomikosProperties55.asProperties();
        atomikosProperties55.service = "{-1.0=100}";
        long long59 = atomikosProperties55.getDefaultJtaTimeout();
        atomikosProperties55.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties55.setMaxActives(100);
        java.lang.String str64 = atomikosProperties55.logBaseDir;
        java.lang.String str65 = atomikosProperties55.outputDir;
        java.lang.Object obj66 = properties33.replace((java.lang.Object) atomikosLoggingLevel54, (java.lang.Object) atomikosProperties55);
        atomikosProperties28.consoleLogLevel = atomikosLoggingLevel54;
        atomikosProperties13.setConsoleLogLevel(atomikosLoggingLevel54);
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel54;
        java.lang.String str70 = atomikosProperties0.logBaseDir;
        java.lang.String str71 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean72 = atomikosProperties0.allowSubTransactions;
        java.lang.String str73 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setForceShutdownOnVmExit(false);
        java.lang.String str76 = atomikosProperties0.logBaseDir;
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(recovery4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel12 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel12.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10000L + "'", long17 == 10000L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 300000L + "'", long20 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 500L + "'", long30 == 500L);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{}" + "'", str34, "{}");
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{-1.0=100}" + "'", str42, "{-1.0=100}");
        org.junit.Assert.assertNotNull(properties44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10000L + "'", long47 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel54 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel54.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 10000L + "'", long59 == 10000L);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str65, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNull(str76);
    }

    @Test
    public void test10884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10884");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        atomikosProperties0.setDefaultJtaTimeout((long) (short) 0);
        atomikosProperties0.setTransactionManagerUniqueName("{-1.0=100}");
        java.lang.String str11 = atomikosProperties0.logBaseDir;
        atomikosProperties0.defaultJtaTimeout = 0;
        java.lang.String str14 = atomikosProperties0.logBaseDir;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test10885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10885");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        int int6 = atomikosProperties0.consoleFileCount;
        java.lang.String str7 = atomikosProperties0.getOutputDir();
        boolean boolean8 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setSerialJtaTransactions(true);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel11 = atomikosProperties0.consoleLogLevel;
        atomikosProperties0.transactionManagerUniqueName = "{-1.0=100}";
        atomikosProperties0.setForceShutdownOnVmExit(false);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel11 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel11.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test10886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10886");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        java.lang.Object obj14 = properties3.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj17 = properties3.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties3.keys();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        boolean boolean21 = properties19.isEmpty();
        java.lang.Object obj24 = properties19.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties19.elements();
        java.lang.Object obj26 = properties2.replace((java.lang.Object) objEnumeration18, (java.lang.Object) properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties19.elements();
        int int28 = properties19.size();
        java.lang.Object obj31 = properties19.setProperty("{}", "");
        boolean boolean32 = properties19.isEmpty();
        java.lang.String str33 = properties19.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "{100=100, {}=}" + "'", str33, "{100=100, {}=}");
    }

    @Test
    public void test10887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10887");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.setCheckpointInterval((long) 5);
        atomikosProperties0.setConsoleFileCount(0);
        atomikosProperties0.setService("{-1.0=100}");
        long long13 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.consoleFileLimit = 'a';
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel16 = atomikosProperties0.consoleLogLevel;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 5L + "'", long13 == 5L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel16 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel16.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test10888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10888");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        atomikosProperties0.consoleFileLimit = 32;
        java.lang.String str7 = atomikosProperties0.transactionManagerUniqueName;
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.Object obj10 = properties8.remove((java.lang.Object) (-1.0d));
        boolean boolean11 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection12 = properties8.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery13 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery13.retryInterval = (short) 100;
        recovery13.forgetOrphanedLogEntriesDelay = 'a';
        long long18 = recovery13.retryInterval;
        recovery13.forgetOrphanedLogEntriesDelay = 0L;
        long long21 = recovery13.getForgetOrphanedLogEntriesDelay();
        long long22 = recovery13.getForgetOrphanedLogEntriesDelay();
        recovery13.retryInterval = 0L;
        boolean boolean25 = properties8.containsValue((java.lang.Object) recovery13);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties28 = atomikosProperties27.asProperties();
        atomikosProperties27.service = "{-1.0=100}";
        long long31 = atomikosProperties27.getDefaultJtaTimeout();
        atomikosProperties27.setThreadedTwoPhaseCommit(true);
        boolean boolean34 = atomikosProperties27.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery35 = atomikosProperties27.recovery;
        boolean boolean36 = atomikosProperties27.threadedTwoPhaseCommit;
        atomikosProperties27.service = "{-1.0=100}";
        atomikosProperties27.setConsoleFileCount((int) (short) 10);
        atomikosProperties27.setEnableLogging(false);
        atomikosProperties27.setMaxTimeout((-1L));
        atomikosProperties0.set(properties8, "{com.atomikos.icatch.console_file_name=hi!, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=tm.out, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", (java.lang.Object) atomikosProperties27);
        java.lang.Object obj48 = properties8.setProperty("", "{{1.0=-1, -1.0=100}={1.0=-1}, 1.0=-1}");
        java.util.Enumeration<?> wildcardEnumeration49 = properties8.propertyNames();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objCollection12);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L + "'", long18 == 100L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10000L + "'", long31 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(recovery35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(wildcardEnumeration49);
    }

    @Test
    public void test10889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10889");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.forgetOrphanedLogEntriesDelay = 'a';
        int int5 = recovery0.getMaxRetries();
        long long6 = recovery0.retryInterval;
        long long7 = recovery0.retryInterval;
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L + "'", long7 == 100L);
    }

    @Test
    public void test10890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10890");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int7 = properties0.size();
        int int8 = properties0.size();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.String str10 = properties9.toString();
        java.lang.Object obj12 = properties9.remove((java.lang.Object) (short) 100);
        java.lang.Object obj15 = properties9.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean17 = properties9.containsKey((java.lang.Object) 0L);
        java.lang.Object obj20 = properties9.replace((java.lang.Object) false, (java.lang.Object) ' ');
        boolean boolean21 = properties9.isEmpty();
        boolean boolean22 = properties9.isEmpty();
        java.lang.Object obj23 = properties0.remove((java.lang.Object) properties9);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties25 = atomikosProperties24.asProperties();
        atomikosProperties24.service = "{-1.0=100}";
        long long28 = atomikosProperties24.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel29 = null;
        atomikosProperties24.setConsoleLogLevel(atomikosLoggingLevel29);
        int int31 = atomikosProperties24.maxActives;
        atomikosProperties24.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery34 = atomikosProperties24.getRecovery();
        atomikosProperties24.forceShutdownOnVmExit = false;
        java.lang.String str37 = atomikosProperties24.service;
        atomikosProperties24.allowSubTransactions = false;
        atomikosProperties24.forceShutdownOnVmExit = false;
        atomikosProperties24.setConsoleFileLimit(32);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties45 = atomikosProperties44.asProperties();
        atomikosProperties44.service = "{-1.0=100}";
        long long48 = atomikosProperties44.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel49 = null;
        atomikosProperties44.setConsoleLogLevel(atomikosLoggingLevel49);
        int int51 = atomikosProperties44.maxActives;
        atomikosProperties44.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery54 = atomikosProperties44.getRecovery();
        atomikosProperties44.consoleFileName = "{-1.0=100}";
        atomikosProperties44.setSerialJtaTransactions(false);
        atomikosProperties44.consoleFileName = "{={-1.0=100}, -1.0=100}";
        atomikosProperties44.defaultJtaTimeout = 50;
        long long63 = atomikosProperties44.getCheckpointInterval();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery64 = atomikosProperties44.recovery;
        recovery64.setRetryInterval(50L);
        java.util.Properties properties67 = new java.util.Properties();
        properties67.clear();
        java.lang.String str69 = properties67.toString();
        java.lang.Object obj70 = properties67.clone();
        boolean boolean71 = properties0.replace((java.lang.Object) 32, (java.lang.Object) recovery64, (java.lang.Object) properties67);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties72 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties73 = atomikosProperties72.asProperties();
        atomikosProperties72.service = "{-1.0=100}";
        java.lang.String str76 = atomikosProperties72.getLogBaseName();
        long long77 = atomikosProperties72.defaultJtaTimeout;
        long long78 = atomikosProperties72.getMaxTimeout();
        boolean boolean79 = atomikosProperties72.forceShutdownOnVmExit;
        long long80 = atomikosProperties72.maxTimeout;
        atomikosProperties72.consoleFileCount = ' ';
        java.lang.String str83 = atomikosProperties72.consoleFileName;
        atomikosProperties72.service = "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}";
        atomikosProperties72.setConsoleFileCount((int) '4');
        atomikosProperties72.setMaxActives((int) (byte) 1);
        java.lang.Object obj90 = properties0.get((java.lang.Object) (byte) 1);
        java.util.Enumeration<java.lang.Object> objEnumeration91 = properties0.elements();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10000L + "'", long28 == 10000L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 50 + "'", int31 == 50);
        org.junit.Assert.assertNotNull(recovery34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{-1.0=100}" + "'", str37, "{-1.0=100}");
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10000L + "'", long48 == 10000L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 50 + "'", int51 == 50);
        org.junit.Assert.assertNotNull(recovery54);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 500L + "'", long63 == 500L);
        org.junit.Assert.assertNotNull(recovery64);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "{}" + "'", str69, "{}");
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "{}");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(properties73);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "tmlog" + "'", str76, "tmlog");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 10000L + "'", long77 == 10000L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 300000L + "'", long78 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 300000L + "'", long80 == 300000L);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "tm.out" + "'", str83, "tm.out");
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertNotNull(objEnumeration91);
    }

    @Test
    public void test10891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10891");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        int int4 = properties0.size();
        java.lang.String str6 = properties0.getProperty("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean8 = atomikosProperties7.isSerialJtaTransactions();
        atomikosProperties7.logBaseName = "{-1.0=100}";
        int int11 = atomikosProperties7.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery12 = atomikosProperties7.getRecovery();
        atomikosProperties7.setConsoleFileCount((int) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel15 = null;
        atomikosProperties7.consoleLogLevel = atomikosLoggingLevel15;
        java.lang.String str17 = atomikosProperties7.logBaseDir;
        atomikosProperties7.checkpointInterval = (byte) 0;
        java.lang.String str20 = atomikosProperties7.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties22 = atomikosProperties21.asProperties();
        java.util.Properties properties23 = new java.util.Properties();
        java.lang.Object obj25 = properties23.remove((java.lang.Object) (-1.0d));
        boolean boolean26 = properties23.isEmpty();
        int int27 = properties23.size();
        java.lang.String str29 = properties23.getProperty("{}");
        java.lang.Object obj30 = properties22.remove((java.lang.Object) properties23);
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.String str32 = properties31.toString();
        java.util.Properties properties33 = new java.util.Properties(properties31);
        properties22.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties31);
        java.lang.Object obj35 = properties0.getOrDefault((java.lang.Object) atomikosProperties7, (java.lang.Object) properties31);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties37 = atomikosProperties36.asProperties();
        atomikosProperties36.service = "{-1.0=100}";
        java.lang.String str40 = atomikosProperties36.getTransactionManagerUniqueName();
        atomikosProperties36.consoleFileLimit = (byte) 10;
        long long43 = atomikosProperties36.getMaxTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel44 = null;
        atomikosProperties36.consoleLogLevel = atomikosLoggingLevel44;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery46 = atomikosProperties36.recovery;
        java.lang.Object obj47 = properties0.remove((java.lang.Object) recovery46);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties49 = atomikosProperties48.asProperties();
        atomikosProperties48.service = "{-1.0=100}";
        java.lang.String str52 = atomikosProperties48.getTransactionManagerUniqueName();
        atomikosProperties48.consoleFileName = "hi!";
        atomikosProperties48.setCheckpointInterval((long) 5);
        atomikosProperties48.setConsoleFileCount(0);
        boolean boolean59 = atomikosProperties48.isThreadedTwoPhaseCommit();
        int int60 = atomikosProperties48.maxActives;
        atomikosProperties48.setConsoleFileName("{={-1.0=100}, -1.0=100}");
        atomikosProperties48.setConsoleFileCount(50);
        java.lang.String str65 = atomikosProperties48.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel66 = atomikosProperties48.getConsoleLogLevel();
        atomikosProperties48.setConsoleFileLimit(10);
        java.lang.String str69 = atomikosProperties48.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery70 = atomikosProperties48.getRecovery();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery71 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery71.retryInterval = (short) 100;
        recovery71.delay = (-1L);
        long long76 = recovery71.delay;
        recovery71.delay = (short) 1;
        long long79 = recovery71.getRetryInterval();
        int int80 = recovery71.maxRetries;
        long long81 = recovery71.getForgetOrphanedLogEntriesDelay();
        recovery71.setRetryInterval((long) 10);
        recovery71.delay = '4';
        long long86 = recovery71.retryInterval;
        int int87 = recovery71.getMaxRetries();
        long long88 = recovery71.getDelay();
        recovery71.delay = 3;
        java.lang.Object obj91 = properties0.getOrDefault((java.lang.Object) atomikosProperties48, (java.lang.Object) recovery71);
        java.io.PrintStream printStream92 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.list(printStream92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 50 + "'", int11 == 50);
        org.junit.Assert.assertNotNull(recovery12);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{}" + "'", str32, "{}");
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "{}");
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 300000L + "'", long43 == 300000L);
        org.junit.Assert.assertNotNull(recovery46);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(properties49);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 50 + "'", int60 == 50);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel66 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel66.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "tmlog" + "'", str69, "tmlog");
        org.junit.Assert.assertNotNull(recovery70);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-1L) + "'", long76 == (-1L));
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 100L + "'", long79 == 100L);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 5 + "'", int80 == 5);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 86400000L + "'", long81 == 86400000L);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 10L + "'", long86 == 10L);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 5 + "'", int87 == 5);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 52L + "'", long88 == 52L);
        org.junit.Assert.assertNotNull(obj91);
    }

    @Test
    public void test10892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10892");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isThreadedTwoPhaseCommit();
        java.lang.String str2 = atomikosProperties0.logBaseDir;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = atomikosProperties0.recovery;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel4 = atomikosProperties0.getConsoleLogLevel();
        atomikosProperties0.allowSubTransactions = true;
        atomikosProperties0.consoleFileLimit = 100;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean10 = atomikosProperties9.isSerialJtaTransactions();
        atomikosProperties9.logBaseName = "{-1.0=100}";
        int int13 = atomikosProperties9.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery14 = atomikosProperties9.getRecovery();
        atomikosProperties9.setConsoleFileCount((int) (byte) 100);
        atomikosProperties9.setAllowSubTransactions(true);
        int int19 = atomikosProperties9.getMaxActives();
        boolean boolean20 = atomikosProperties9.isEnableLogging();
        atomikosProperties9.setOutputDir("");
        java.lang.String str23 = atomikosProperties9.getTransactionManagerUniqueName();
        java.lang.String str24 = atomikosProperties9.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel25 = atomikosProperties9.consoleLogLevel;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel25;
        atomikosProperties0.forceShutdownOnVmExit = false;
        boolean boolean29 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.maxActives = 0;
        atomikosProperties0.setAllowSubTransactions(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(recovery3);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel4 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel4.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
        org.junit.Assert.assertNotNull(recovery14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 50 + "'", int19 == 50);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel25 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel25.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test10893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10893");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties0.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.elements();
        java.util.Properties properties6 = new java.util.Properties(properties0);
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.String str9 = properties8.toString();
        java.lang.Object obj11 = properties8.remove((java.lang.Object) (short) 100);
        java.lang.Object obj14 = properties8.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.String str16 = properties15.toString();
        java.lang.Object obj18 = properties15.remove((java.lang.Object) (short) 100);
        java.lang.Object obj21 = properties15.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int22 = properties15.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery23 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery23.retryInterval = (short) 100;
        recovery23.forgetOrphanedLogEntriesDelay = 'a';
        long long28 = recovery23.retryInterval;
        recovery23.setForgetOrphanedLogEntriesDelay((long) 0);
        java.lang.Object obj31 = properties8.replace((java.lang.Object) int22, (java.lang.Object) recovery23);
        recovery23.forgetOrphanedLogEntriesDelay = (byte) 0;
        long long34 = recovery23.retryInterval;
        long long35 = recovery23.delay;
        long long36 = recovery23.getDelay();
        long long37 = recovery23.getForgetOrphanedLogEntriesDelay();
        java.lang.Object obj38 = properties7.get((java.lang.Object) long37);
        int int39 = properties7.size();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 100L + "'", long28 == 100L);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 100L + "'", long34 == 100L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10000L + "'", long35 == 10000L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10000L + "'", long36 == 10000L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test10894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10894");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        boolean boolean5 = properties0.containsKey((java.lang.Object) 0L);
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.util.Properties properties8 = new java.util.Properties(properties6);
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.String str10 = properties9.toString();
        java.lang.Object obj12 = properties9.remove((java.lang.Object) (short) 100);
        java.lang.Object obj15 = properties9.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean17 = properties9.containsKey((java.lang.Object) 0L);
        java.lang.Object obj20 = properties9.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj23 = properties9.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties9.keys();
        java.util.Properties properties25 = new java.util.Properties();
        java.lang.String str26 = properties25.toString();
        boolean boolean27 = properties25.isEmpty();
        java.lang.Object obj30 = properties25.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties25.elements();
        java.lang.Object obj32 = properties8.replace((java.lang.Object) objEnumeration24, (java.lang.Object) properties25);
        java.util.Enumeration<java.lang.Object> objEnumeration33 = properties25.elements();
        java.util.Properties properties34 = new java.util.Properties();
        java.lang.String str35 = properties34.toString();
        boolean boolean36 = properties34.isEmpty();
        java.lang.Object obj39 = properties34.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Properties properties40 = new java.util.Properties();
        java.lang.String str41 = properties40.toString();
        java.lang.Object obj43 = properties40.remove((java.lang.Object) (short) 100);
        java.lang.Object obj46 = properties40.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean48 = properties40.containsKey((java.lang.Object) 0L);
        java.lang.Object obj51 = properties40.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties52 = new java.util.Properties(properties40);
        boolean boolean53 = properties34.containsValue((java.lang.Object) properties40);
        java.util.Properties properties54 = new java.util.Properties();
        java.lang.String str55 = properties54.toString();
        java.lang.Object obj57 = properties54.remove((java.lang.Object) (short) 100);
        java.lang.Object obj60 = properties54.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean62 = properties54.containsKey((java.lang.Object) 0L);
        java.lang.Object obj65 = properties54.replace((java.lang.Object) false, (java.lang.Object) ' ');
        boolean boolean66 = properties54.isEmpty();
        boolean boolean67 = properties0.replace((java.lang.Object) properties25, (java.lang.Object) properties34, (java.lang.Object) properties54);
        java.util.Properties properties68 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties69 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties70 = atomikosProperties69.asProperties();
        atomikosProperties69.service = "{-1.0=100}";
        long long73 = atomikosProperties69.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel74 = null;
        atomikosProperties69.setConsoleLogLevel(atomikosLoggingLevel74);
        int int76 = atomikosProperties69.maxActives;
        int int77 = atomikosProperties69.maxActives;
        java.lang.Object obj78 = properties68.remove((java.lang.Object) atomikosProperties69);
        java.io.OutputStream outputStream79 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties68.storeToXML(outputStream79, "{100=100, {}=}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{}" + "'", str26, "{}");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(objEnumeration31);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(objEnumeration33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "{}" + "'", str35, "{}");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "{}" + "'", str41, "{}");
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{}" + "'", str55, "{}");
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(properties70);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 10000L + "'", long73 == 10000L);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 50 + "'", int76 == 50);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 50 + "'", int77 == 50);
        org.junit.Assert.assertNull(obj78);
    }

    @Test
    public void test10895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10895");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.outputDir = "hi!";
        atomikosProperties0.setDefaultJtaTimeout((long) 10);
        java.lang.String str15 = atomikosProperties0.getTransactionManagerUniqueName();
        java.lang.String str16 = atomikosProperties0.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties18 = atomikosProperties17.asProperties();
        atomikosProperties17.service = "{-1.0=100}";
        long long21 = atomikosProperties17.getDefaultJtaTimeout();
        long long22 = atomikosProperties17.getMaxTimeout();
        int int23 = atomikosProperties17.consoleFileCount;
        long long24 = atomikosProperties17.getCheckpointInterval();
        java.lang.String str25 = atomikosProperties17.outputDir;
        long long26 = atomikosProperties17.getCheckpointInterval();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel27 = atomikosProperties17.getConsoleLogLevel();
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel27);
        boolean boolean29 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.setEnableLogging(false);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 300000L + "'", long22 == 300000L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 500L + "'", long26 == 500L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel27 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel27.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test10896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10896");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.service = "tm.out";
        atomikosProperties0.logBaseName = "tm.out";
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties0.consoleLogLevel;
        atomikosProperties0.logBaseDir = "";
        boolean boolean16 = atomikosProperties0.threadedTwoPhaseCommit;
        int int17 = atomikosProperties0.getConsoleFileLimit();
        boolean boolean18 = atomikosProperties0.isThreadedTwoPhaseCommit();
        boolean boolean19 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.forceShutdownOnVmExit = true;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test10897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10897");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setLogBaseDir("{-1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setAllowSubTransactions(true);
        atomikosProperties10.maxActives = (short) -1;
        atomikosProperties10.setService("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setAllowSubTransactions(true);
        boolean boolean20 = atomikosProperties17.enableLogging;
        boolean boolean21 = atomikosProperties17.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel22 = atomikosProperties17.consoleLogLevel;
        atomikosProperties10.setConsoleLogLevel(atomikosLoggingLevel22);
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel22;
        atomikosProperties0.setConsoleFileCount((int) (byte) 0);
        atomikosProperties0.logBaseName = "{com.atomikos.icatch.console_file_name=hi!, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=tm.out, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        boolean boolean29 = atomikosProperties0.enableLogging;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel22 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel22.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test10898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10898");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        java.lang.String str9 = atomikosProperties0.logBaseDir;
        atomikosProperties0.consoleFileName = "{={-1.0=100}, -1.0=100}";
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        atomikosProperties0.setConsoleFileName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=true, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=35, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=10, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test10899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10899");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.consoleFileName = "{-1.0=100}";
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.consoleFileName = "{={-1.0=100}, -1.0=100}";
        atomikosProperties0.defaultJtaTimeout = 50;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel19 = atomikosProperties0.getConsoleLogLevel();
        atomikosProperties0.enableLogging = true;
        atomikosProperties0.checkpointInterval = (-1L);
        atomikosProperties0.setConsoleFileCount((int) (byte) 0);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertNull(atomikosLoggingLevel19);
    }

    @Test
    public void test10900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10900");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setMaxActives(0);
        atomikosProperties0.maxActives = 'a';
        boolean boolean9 = atomikosProperties0.isThreadedTwoPhaseCommit();
        boolean boolean10 = atomikosProperties0.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel11 = atomikosProperties0.consoleLogLevel;
        atomikosProperties0.outputDir = "hi!";
        atomikosProperties0.maxActives = (short) 0;
        atomikosProperties0.defaultJtaTimeout = (short) -1;
        java.lang.String str18 = atomikosProperties0.getTransactionManagerUniqueName();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel11 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel11.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test10901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10901");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.enableLogging = true;
        atomikosProperties0.outputDir = "tmlog";
        long long10 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.logBaseDir = "{1.0=-1, -1.0=100}";
        long long13 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setForceShutdownOnVmExit(true);
        atomikosProperties0.enableLogging = true;
        java.lang.String str18 = atomikosProperties0.logBaseDir;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 300000L + "'", long10 == 300000L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{1.0=-1, -1.0=100}" + "'", str18, "{1.0=-1, -1.0=100}");
    }

    @Test
    public void test10902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10902");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.forgetOrphanedLogEntriesDelay = 'a';
        long long5 = recovery0.retryInterval;
        recovery0.forgetOrphanedLogEntriesDelay = 0L;
        long long8 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long9 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.retryInterval = 0L;
        long long12 = recovery0.retryInterval;
        int int13 = recovery0.maxRetries;
        long long14 = recovery0.getRetryInterval();
        long long15 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long16 = recovery0.delay;
        long long17 = recovery0.getDelay();
        recovery0.retryInterval = (short) 10;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10000L + "'", long16 == 10000L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10000L + "'", long17 == 10000L);
    }

    @Test
    public void test10903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10903");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setMaxActives(0);
        boolean boolean7 = atomikosProperties0.threadedTwoPhaseCommit;
        boolean boolean8 = atomikosProperties0.allowSubTransactions;
        atomikosProperties0.logBaseDir = "{}";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean12 = atomikosProperties11.isSerialJtaTransactions();
        atomikosProperties11.logBaseName = "{-1.0=100}";
        int int15 = atomikosProperties11.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery16 = atomikosProperties11.getRecovery();
        atomikosProperties11.setConsoleFileCount((int) (byte) 100);
        atomikosProperties11.setAllowSubTransactions(true);
        atomikosProperties11.setService("tm.out");
        boolean boolean23 = atomikosProperties11.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel24 = atomikosProperties11.getConsoleLogLevel();
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel24);
        atomikosProperties0.setDefaultJtaTimeout((long) (byte) 100);
        atomikosProperties0.setConsoleFileCount((int) ' ');
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 50 + "'", int15 == 50);
        org.junit.Assert.assertNotNull(recovery16);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel24 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel24.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test10904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10904");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        int int5 = atomikosProperties0.getConsoleFileCount();
        int int6 = atomikosProperties0.maxActives;
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}";
        atomikosProperties0.serialJtaTransactions = true;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 50 + "'", int6 == 50);
    }

    @Test
    public void test10905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10905");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.delay = (-1L);
        long long5 = recovery0.delay;
        recovery0.delay = (short) 1;
        long long8 = recovery0.getRetryInterval();
        int int9 = recovery0.maxRetries;
        long long10 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.setRetryInterval((long) 10);
        recovery0.delay = '4';
        long long15 = recovery0.retryInterval;
        long long16 = recovery0.getDelay();
        long long17 = recovery0.getDelay();
        long long18 = recovery0.getForgetOrphanedLogEntriesDelay();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 86400000L + "'", long10 == 86400000L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 86400000L + "'", long18 == 86400000L);
    }

    @Test
    public void test10906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10906");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        boolean boolean10 = atomikosProperties2.forceShutdownOnVmExit;
        atomikosProperties2.setOutputDir("");
        long long13 = atomikosProperties2.defaultJtaTimeout;
        java.lang.String str14 = atomikosProperties2.getLogBaseName();
        atomikosProperties2.setEnableLogging(false);
        int int17 = atomikosProperties2.consoleFileCount;
        atomikosProperties2.outputDir = "tmlog";
        long long20 = atomikosProperties2.getMaxTimeout();
        int int21 = atomikosProperties2.consoleFileLimit;
        atomikosProperties2.setDefaultJtaTimeout(300000L);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tmlog" + "'", str14, "tmlog");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 300000L + "'", long20 == 300000L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
    }

    @Test
    public void test10907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10907");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean3 = atomikosProperties0.enableLogging;
        boolean boolean4 = atomikosProperties0.isForceShutdownOnVmExit();
        java.lang.String str5 = atomikosProperties0.getService();
        atomikosProperties0.setOutputDir("{1.0=-1, -1.0=100}");
        long long8 = atomikosProperties0.getMaxTimeout();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 300000L + "'", long8 == 300000L);
    }

    @Test
    public void test10908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10908");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties();
        java.lang.String str2 = properties1.toString();
        boolean boolean3 = properties1.isEmpty();
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean12 = properties4.containsKey((java.lang.Object) 0L);
        boolean boolean13 = properties1.containsValue((java.lang.Object) 0L);
        boolean boolean16 = properties0.replace((java.lang.Object) 0L, (java.lang.Object) 0.0f, (java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties0.elements();
        java.util.Set<java.lang.String> strSet18 = properties0.stringPropertyNames();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        java.lang.Object obj22 = properties19.remove((java.lang.Object) (short) 100);
        java.lang.Object obj25 = properties19.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.util.Properties properties26 = new java.util.Properties();
        java.lang.String str27 = properties26.toString();
        java.lang.Object obj29 = properties26.remove((java.lang.Object) (short) 100);
        java.lang.Object obj32 = properties26.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int33 = properties26.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery34 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery34.retryInterval = (short) 100;
        recovery34.forgetOrphanedLogEntriesDelay = 'a';
        long long39 = recovery34.retryInterval;
        recovery34.setForgetOrphanedLogEntriesDelay((long) 0);
        java.lang.Object obj42 = properties19.replace((java.lang.Object) int33, (java.lang.Object) recovery34);
        boolean boolean43 = properties0.containsValue((java.lang.Object) properties19);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties45 = atomikosProperties44.asProperties();
        atomikosProperties44.service = "{-1.0=100}";
        long long48 = atomikosProperties44.getDefaultJtaTimeout();
        atomikosProperties44.setThreadedTwoPhaseCommit(true);
        boolean boolean51 = atomikosProperties44.isAllowSubTransactions();
        boolean boolean52 = atomikosProperties44.isEnableLogging();
        atomikosProperties44.allowSubTransactions = false;
        atomikosProperties44.threadedTwoPhaseCommit = true;
        atomikosProperties44.setLogBaseName("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties60 = atomikosProperties59.asProperties();
        atomikosProperties59.service = "{-1.0=100}";
        long long63 = atomikosProperties59.getDefaultJtaTimeout();
        atomikosProperties59.enableLogging = false;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties66.setEnableLogging(true);
        atomikosProperties66.consoleFileCount = 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties72 = atomikosProperties71.asProperties();
        atomikosProperties71.service = "{-1.0=100}";
        long long75 = atomikosProperties71.getDefaultJtaTimeout();
        boolean boolean76 = atomikosProperties71.enableLogging;
        boolean boolean77 = atomikosProperties71.isForceShutdownOnVmExit();
        atomikosProperties71.consoleFileLimit = (byte) -1;
        java.lang.String str80 = atomikosProperties71.getService();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel81 = atomikosProperties71.consoleLogLevel;
        atomikosProperties66.consoleLogLevel = atomikosLoggingLevel81;
        atomikosProperties59.setConsoleLogLevel(atomikosLoggingLevel81);
        java.lang.Object obj84 = properties0.replace((java.lang.Object) "tm.out", (java.lang.Object) atomikosProperties59);
        java.io.InputStream inputStream85 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.loadFromXML(inputStream85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{}" + "'", str27, "{}");
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 100L + "'", long39 == 100L);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10000L + "'", long48 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(properties60);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 10000L + "'", long63 == 10000L);
        org.junit.Assert.assertNotNull(properties72);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 10000L + "'", long75 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "{-1.0=100}" + "'", str80, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel81 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel81.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj84);
    }

    @Test
    public void test10909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10909");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        java.lang.String str15 = properties0.toString();
        java.util.Set<java.lang.String> strSet16 = properties0.stringPropertyNames();
        java.util.Properties properties17 = new java.util.Properties(properties0);
        java.util.Set<java.lang.Object> objSet18 = properties17.keySet();
        java.util.Set<java.lang.String> strSet19 = properties17.stringPropertyNames();
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties17.keys();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str15, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(objSet18);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(objEnumeration20);
    }

    @Test
    public void test10910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10910");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean3 = atomikosProperties0.enableLogging;
        atomikosProperties0.consoleFileLimit = (byte) 100;
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.util.Properties properties8 = new java.util.Properties(properties6);
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.lang.Object obj13 = properties10.remove((java.lang.Object) (short) 100);
        java.lang.Object obj16 = properties10.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean18 = properties10.containsKey((java.lang.Object) 0L);
        java.lang.Object obj21 = properties10.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties22 = new java.util.Properties(properties10);
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties22.elements();
        atomikosProperties0.set(properties8, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties22);
        int int25 = properties8.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet26 = properties8.entrySet();
        java.lang.String str27 = properties8.toString();
        int int28 = properties8.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties30 = atomikosProperties29.asProperties();
        atomikosProperties29.service = "{-1.0=100}";
        long long33 = atomikosProperties29.getDefaultJtaTimeout();
        atomikosProperties29.setThreadedTwoPhaseCommit(true);
        boolean boolean36 = atomikosProperties29.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery37 = atomikosProperties29.recovery;
        long long38 = recovery37.getForgetOrphanedLogEntriesDelay();
        long long39 = recovery37.forgetOrphanedLogEntriesDelay;
        int int40 = recovery37.getMaxRetries();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties42 = atomikosProperties41.asProperties();
        atomikosProperties41.service = "{-1.0=100}";
        long long45 = atomikosProperties41.getDefaultJtaTimeout();
        atomikosProperties41.serialJtaTransactions = true;
        atomikosProperties41.setDefaultJtaTimeout(500L);
        java.util.Properties properties50 = atomikosProperties41.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties52 = atomikosProperties51.asProperties();
        atomikosProperties51.service = "{-1.0=100}";
        long long55 = atomikosProperties51.getDefaultJtaTimeout();
        atomikosProperties51.serialJtaTransactions = true;
        long long58 = atomikosProperties51.maxTimeout;
        atomikosProperties51.setLogBaseDir("{-1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties61.setAllowSubTransactions(true);
        atomikosProperties61.maxActives = (short) -1;
        atomikosProperties61.setService("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties68.setAllowSubTransactions(true);
        boolean boolean71 = atomikosProperties68.enableLogging;
        boolean boolean72 = atomikosProperties68.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel73 = atomikosProperties68.consoleLogLevel;
        atomikosProperties61.setConsoleLogLevel(atomikosLoggingLevel73);
        atomikosProperties51.consoleLogLevel = atomikosLoggingLevel73;
        atomikosProperties51.setConsoleFileCount((int) (byte) 0);
        atomikosProperties51.setForceShutdownOnVmExit(true);
        boolean boolean80 = properties8.replace((java.lang.Object) recovery37, (java.lang.Object) atomikosProperties41, (java.lang.Object) true);
        atomikosProperties41.consoleFileCount = 100;
        java.lang.String str83 = atomikosProperties41.transactionManagerUniqueName;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objEntrySet26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}" + "'", str27, "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10000L + "'", long33 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(recovery37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 86400000L + "'", long38 == 86400000L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 86400000L + "'", long39 == 86400000L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(properties42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 10000L + "'", long45 == 10000L);
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertNotNull(properties52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 10000L + "'", long55 == 10000L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 300000L + "'", long58 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel73 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel73.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(str83);
    }

    @Test
    public void test10911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10911");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        boolean boolean6 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.setConsoleFileLimit((int) (short) -1);
        int int9 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.forceShutdownOnVmExit = true;
        atomikosProperties0.maxTimeout = (short) 0;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test10912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10912");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.forceShutdownOnVmExit = false;
        java.util.Properties properties13 = atomikosProperties0.asProperties();
        java.lang.String str14 = atomikosProperties0.getService();
        long long15 = atomikosProperties0.getCheckpointInterval();
        java.util.Properties properties16 = atomikosProperties0.asProperties();
        java.lang.Object obj18 = properties16.remove((java.lang.Object) (byte) 10);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{-1.0=100}" + "'", str14, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertNull(obj18);
    }

    @Test
    public void test10913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10913");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.maxTimeout;
        boolean boolean8 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.setCheckpointInterval(1L);
        atomikosProperties0.setOutputDir("{}");
        boolean boolean13 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.outputDir = "tm.out";
        atomikosProperties0.setAllowSubTransactions(false);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test10914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10914");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties0.setMaxActives(100);
        java.lang.String str9 = atomikosProperties0.logBaseDir;
        atomikosProperties0.consoleFileCount = (short) 0;
        atomikosProperties0.defaultJtaTimeout = 10000L;
        long long14 = atomikosProperties0.defaultJtaTimeout;
        boolean boolean15 = atomikosProperties0.forceShutdownOnVmExit;
        java.lang.String str16 = atomikosProperties0.getConsoleFileName();
        java.lang.String str17 = atomikosProperties0.getService();
        atomikosProperties0.maxTimeout = 21;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tm.out" + "'", str16, "tm.out");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{-1.0=100}" + "'", str17, "{-1.0=100}");
    }

    @Test
    public void test10915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10915");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties7.setEnableLogging(true);
        atomikosProperties7.consoleFileCount = 0;
        atomikosProperties7.setSerialJtaTransactions(false);
        java.lang.String str14 = atomikosProperties7.getOutputDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties16 = atomikosProperties15.asProperties();
        atomikosProperties15.service = "{-1.0=100}";
        long long19 = atomikosProperties15.getDefaultJtaTimeout();
        atomikosProperties15.serialJtaTransactions = true;
        long long22 = atomikosProperties15.getDefaultJtaTimeout();
        long long23 = atomikosProperties15.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery24 = atomikosProperties15.getRecovery();
        recovery24.setRetryInterval((long) (byte) 0);
        java.lang.Object obj27 = properties0.replace((java.lang.Object) atomikosProperties7, (java.lang.Object) (byte) 0);
        int int28 = properties0.size();
        java.util.Properties properties29 = new java.util.Properties();
        java.lang.String str30 = properties29.toString();
        java.lang.Object obj32 = properties29.remove((java.lang.Object) (short) 100);
        java.lang.Object obj35 = properties29.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj36 = properties29.clone();
        java.util.Set<java.lang.String> strSet37 = properties29.stringPropertyNames();
        java.util.Properties properties38 = new java.util.Properties();
        java.lang.String str39 = properties38.toString();
        java.lang.Object obj41 = properties38.remove((java.lang.Object) (short) 100);
        java.lang.Object obj44 = properties38.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean46 = properties38.containsKey((java.lang.Object) 0L);
        java.lang.Object obj49 = properties38.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties50 = new java.util.Properties();
        java.lang.String str51 = properties50.toString();
        java.lang.Object obj53 = properties50.remove((java.lang.Object) (short) 100);
        java.lang.Object obj56 = properties50.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj57 = properties50.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration58 = properties50.elements();
        properties38.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties50);
        java.util.Properties properties60 = new java.util.Properties();
        java.lang.String str61 = properties60.toString();
        java.lang.Object obj63 = properties60.remove((java.lang.Object) (short) 100);
        java.lang.Object obj66 = properties60.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean68 = properties60.containsKey((java.lang.Object) 0L);
        java.lang.Object obj71 = properties60.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties72 = new java.util.Properties();
        java.lang.String str73 = properties72.toString();
        java.lang.Object obj75 = properties72.remove((java.lang.Object) (short) 100);
        java.lang.Object obj78 = properties72.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj79 = properties72.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration80 = properties72.elements();
        properties60.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties72);
        java.lang.Object obj82 = properties29.putIfAbsent((java.lang.Object) properties38, (java.lang.Object) properties72);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties38);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10000L + "'", long19 == 10000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10000L + "'", long22 == 10000L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
        org.junit.Assert.assertNotNull(recovery24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{}" + "'", str30, "{}");
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "{}" + "'", str39, "{}");
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "{}" + "'", str51, "{}");
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "{}" + "'", str61, "{}");
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "{}" + "'", str73, "{}");
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertNotNull(obj79);
        org.junit.Assert.assertEquals(obj79.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj79), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj79), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration80);
        org.junit.Assert.assertNull(obj82);
    }

    @Test
    public void test10916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10916");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.enableLogging = true;
        atomikosProperties0.outputDir = "tmlog";
        long long10 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.logBaseDir = "{1.0=-1, -1.0=100}";
        int int13 = atomikosProperties0.getMaxActives();
        atomikosProperties0.allowSubTransactions = false;
        long long16 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setAllowSubTransactions(true);
        boolean boolean20 = atomikosProperties17.enableLogging;
        atomikosProperties17.consoleFileLimit = (byte) 100;
        java.util.Properties properties23 = new java.util.Properties();
        java.lang.String str24 = properties23.toString();
        java.util.Properties properties25 = new java.util.Properties(properties23);
        java.util.Properties properties27 = new java.util.Properties();
        java.lang.String str28 = properties27.toString();
        java.lang.Object obj30 = properties27.remove((java.lang.Object) (short) 100);
        java.lang.Object obj33 = properties27.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean35 = properties27.containsKey((java.lang.Object) 0L);
        java.lang.Object obj38 = properties27.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties39 = new java.util.Properties(properties27);
        java.util.Enumeration<java.lang.Object> objEnumeration40 = properties39.elements();
        atomikosProperties17.set(properties25, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties39);
        int int42 = properties25.size();
        java.lang.Object obj45 = properties25.setProperty("tmlog", "hi!");
        int int46 = properties25.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean48 = atomikosProperties47.isSerialJtaTransactions();
        atomikosProperties47.logBaseName = "{-1.0=100}";
        int int51 = atomikosProperties47.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery52 = atomikosProperties47.getRecovery();
        atomikosProperties47.setConsoleFileCount((int) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel55 = null;
        atomikosProperties47.consoleLogLevel = atomikosLoggingLevel55;
        atomikosProperties47.logBaseName = "tmlog";
        long long59 = atomikosProperties47.getCheckpointInterval();
        java.lang.Object obj60 = properties25.remove((java.lang.Object) atomikosProperties47);
        java.lang.Object obj61 = properties25.clone();
        java.util.Properties properties63 = new java.util.Properties();
        java.lang.String str64 = properties63.toString();
        java.lang.Object obj66 = properties63.remove((java.lang.Object) (short) 100);
        java.lang.Object obj69 = properties63.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj70 = properties63.clone();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet71 = properties63.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet72 = properties63.entrySet();
        atomikosProperties0.set(properties25, "tmlog", (java.lang.Object) properties63);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 300000L + "'", long10 == 300000L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{}" + "'", str24, "{}");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{}" + "'", str28, "{}");
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(objEnumeration40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 50 + "'", int51 == 50);
        org.junit.Assert.assertNotNull(recovery52);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 500L + "'", long59 == 500L);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNotNull(obj61);
// flaky:         org.junit.Assert.assertEquals(obj61.toString(), "{tmlog=hi!, com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "{tmlog=hi!, com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "{tmlog=hi!, com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "{}" + "'", str64, "{}");
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEntrySet71);
        org.junit.Assert.assertNotNull(objEntrySet72);
    }

    @Test
    public void test10917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10917");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel7 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel7);
        atomikosProperties0.setLogBaseName("{={-1.0=100}, -1.0=100}");
        boolean boolean11 = atomikosProperties0.enableLogging;
        atomikosProperties0.setOutputDir("");
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = atomikosProperties0.consoleLogLevel;
        atomikosProperties0.checkpointInterval = 0L;
        long long17 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties19 = atomikosProperties18.asProperties();
        atomikosProperties18.service = "{-1.0=100}";
        long long22 = atomikosProperties18.getDefaultJtaTimeout();
        atomikosProperties18.setTransactionManagerUniqueName("{}");
        java.lang.String str25 = atomikosProperties18.getService();
        java.util.Properties properties26 = atomikosProperties18.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery27 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery27.retryInterval = (short) 100;
        recovery27.forgetOrphanedLogEntriesDelay = 'a';
        long long32 = recovery27.getDelay();
        int int33 = recovery27.maxRetries;
        int int34 = recovery27.maxRetries;
        long long35 = recovery27.getRetryInterval();
        recovery27.retryInterval = 10L;
        long long38 = recovery27.getForgetOrphanedLogEntriesDelay();
        boolean boolean39 = properties26.contains((java.lang.Object) long38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean42 = atomikosProperties41.isSerialJtaTransactions();
        atomikosProperties41.logBaseName = "{-1.0=100}";
        int int45 = atomikosProperties41.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery46 = atomikosProperties41.getRecovery();
        atomikosProperties41.setConsoleFileCount((int) (byte) 100);
        atomikosProperties41.setAllowSubTransactions(true);
        int int51 = atomikosProperties41.getMaxActives();
        boolean boolean52 = atomikosProperties41.isEnableLogging();
        atomikosProperties41.setOutputDir("");
        atomikosProperties41.maxTimeout = 1;
        atomikosProperties0.set(properties26, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", (java.lang.Object) atomikosProperties41);
        atomikosProperties41.logBaseDir = "{com.atomikos.icatch.={}, 100=100}";
        java.lang.String str60 = atomikosProperties41.outputDir;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery61 = atomikosProperties41.recovery;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(atomikosLoggingLevel14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10000L + "'", long22 == 10000L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{-1.0=100}" + "'", str25, "{-1.0=100}");
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10000L + "'", long32 == 10000L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5 + "'", int34 == 5);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 100L + "'", long35 == 100L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 97L + "'", long38 == 97L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 50 + "'", int45 == 50);
        org.junit.Assert.assertNotNull(recovery46);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 50 + "'", int51 == 50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(recovery61);
    }

    @Test
    public void test10918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10918");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties();
        java.lang.String str2 = properties1.toString();
        boolean boolean3 = properties1.isEmpty();
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean12 = properties4.containsKey((java.lang.Object) 0L);
        boolean boolean13 = properties1.containsValue((java.lang.Object) 0L);
        boolean boolean16 = properties0.replace((java.lang.Object) 0L, (java.lang.Object) 0.0f, (java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties0.elements();
        java.util.Set<java.lang.String> strSet18 = properties0.stringPropertyNames();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        java.lang.Object obj22 = properties19.remove((java.lang.Object) (short) 100);
        java.lang.Object obj25 = properties19.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.util.Properties properties26 = new java.util.Properties();
        java.lang.String str27 = properties26.toString();
        java.lang.Object obj29 = properties26.remove((java.lang.Object) (short) 100);
        java.lang.Object obj32 = properties26.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int33 = properties26.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery34 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery34.retryInterval = (short) 100;
        recovery34.forgetOrphanedLogEntriesDelay = 'a';
        long long39 = recovery34.retryInterval;
        recovery34.setForgetOrphanedLogEntriesDelay((long) 0);
        java.lang.Object obj42 = properties19.replace((java.lang.Object) int33, (java.lang.Object) recovery34);
        boolean boolean43 = properties0.containsValue((java.lang.Object) properties19);
        java.util.Properties properties44 = new java.util.Properties();
        java.lang.String str45 = properties44.toString();
        java.lang.Object obj47 = properties44.remove((java.lang.Object) (short) 100);
        java.lang.Object obj50 = properties44.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean52 = properties44.containsKey((java.lang.Object) 0L);
        java.lang.Object obj55 = properties44.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj58 = properties44.setProperty("", "{-1.0=100}");
        java.lang.Object obj59 = properties44.clone();
        java.util.Collection<java.lang.Object> objCollection60 = properties44.values();
        properties19.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties44);
        java.io.Writer writer62 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties44.store(writer62, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{}" + "'", str27, "{}");
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 100L + "'", long39 == 100L);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "{}" + "'", str45, "{}");
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNotNull(obj59);
// flaky:         org.junit.Assert.assertEquals(obj59.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(objCollection60);
    }

    @Test
    public void test10919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10919");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.consoleFileName = "";
        atomikosProperties0.forceShutdownOnVmExit = false;
        boolean boolean10 = atomikosProperties0.isAllowSubTransactions();
        atomikosProperties0.setDefaultJtaTimeout(86400000L);
        long long13 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setForceShutdownOnVmExit(true);
        java.lang.String str16 = atomikosProperties0.consoleFileName;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 300000L + "'", long13 == 300000L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test10920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10920");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        int int5 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setTransactionManagerUniqueName("tmlog");
        atomikosProperties0.setEnableLogging(true);
        boolean boolean10 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.serialJtaTransactions = true;
        java.lang.String str13 = atomikosProperties0.logBaseName;
        java.lang.String str14 = atomikosProperties0.getLogBaseName();
        java.lang.String str15 = atomikosProperties0.getTransactionManagerUniqueName();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tmlog" + "'", str14, "tmlog");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tmlog" + "'", str15, "tmlog");
    }

    @Test
    public void test10921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10921");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = (byte) 10;
        long long7 = atomikosProperties0.maxTimeout;
        boolean boolean8 = atomikosProperties0.isAllowSubTransactions();
        boolean boolean9 = atomikosProperties0.threadedTwoPhaseCommit;
        boolean boolean10 = atomikosProperties0.serialJtaTransactions;
        java.lang.String str11 = atomikosProperties0.consoleFileName;
        atomikosProperties0.forceShutdownOnVmExit = false;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = atomikosProperties0.getConsoleLogLevel();
        boolean boolean15 = atomikosProperties0.isAllowSubTransactions();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tm.out" + "'", str11, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel14 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel14.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test10922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10922");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean3 = atomikosProperties0.enableLogging;
        boolean boolean4 = atomikosProperties0.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = atomikosProperties0.consoleLogLevel;
        boolean boolean6 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.threadedTwoPhaseCommit = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel5 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel5.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test10923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10923");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setMaxActives(0);
        boolean boolean7 = atomikosProperties0.threadedTwoPhaseCommit;
        boolean boolean8 = atomikosProperties0.allowSubTransactions;
        atomikosProperties0.setConsoleFileCount(0);
        int int11 = atomikosProperties0.getConsoleFileLimit();
        atomikosProperties0.setConsoleFileCount((int) (short) 1);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test10924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10924");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean12 = properties4.containsKey((java.lang.Object) 0L);
        java.lang.Object obj15 = properties4.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties16 = new java.util.Properties();
        java.lang.String str17 = properties16.toString();
        java.lang.Object obj19 = properties16.remove((java.lang.Object) (short) 100);
        java.lang.Object obj22 = properties16.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj23 = properties16.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties16.elements();
        properties4.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties16);
        java.lang.Object obj26 = properties16.clone();
        properties16.clear();
        int int28 = properties16.size();
        java.util.Properties properties29 = new java.util.Properties();
        java.lang.String str30 = properties29.toString();
        java.lang.Object obj32 = properties29.remove((java.lang.Object) (short) 100);
        java.lang.Object obj35 = properties29.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj36 = properties29.clone();
        java.util.Set<java.lang.String> strSet37 = properties29.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery38 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery38.retryInterval = (short) 100;
        recovery38.delay = (-1L);
        long long43 = recovery38.delay;
        recovery38.delay = (short) 1;
        long long46 = recovery38.getRetryInterval();
        int int47 = recovery38.maxRetries;
        int int48 = recovery38.maxRetries;
        long long49 = recovery38.forgetOrphanedLogEntriesDelay;
        java.util.Properties properties50 = new java.util.Properties();
        java.lang.Object obj52 = properties50.remove((java.lang.Object) (-1.0d));
        boolean boolean53 = properties50.isEmpty();
        int int54 = properties50.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery55 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery55.retryInterval = (short) 100;
        recovery55.forgetOrphanedLogEntriesDelay = 'a';
        java.util.Properties properties60 = new java.util.Properties();
        java.lang.Object obj62 = properties60.remove((java.lang.Object) (-1.0d));
        boolean boolean63 = properties60.isEmpty();
        int int64 = properties60.size();
        java.lang.String str66 = properties60.getProperty("{}");
        boolean boolean67 = properties50.remove((java.lang.Object) recovery55, (java.lang.Object) properties60);
        java.lang.Object obj68 = properties29.putIfAbsent((java.lang.Object) long49, (java.lang.Object) properties50);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties69 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties69.setAllowSubTransactions(true);
        atomikosProperties69.maxActives = (short) -1;
        atomikosProperties69.setLogBaseDir("{-1.0=100}");
        boolean boolean76 = properties0.replace((java.lang.Object) properties16, (java.lang.Object) long49, (java.lang.Object) "{-1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties77 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties78 = atomikosProperties77.asProperties();
        atomikosProperties77.service = "{-1.0=100}";
        long long81 = atomikosProperties77.getDefaultJtaTimeout();
        atomikosProperties77.serialJtaTransactions = true;
        long long84 = atomikosProperties77.getDefaultJtaTimeout();
        long long85 = atomikosProperties77.checkpointInterval;
        atomikosProperties77.setForceShutdownOnVmExit(true);
        java.lang.String str88 = atomikosProperties77.consoleFileName;
        atomikosProperties77.maxTimeout = 0L;
        atomikosProperties77.setConsoleFileLimit((int) '#');
        boolean boolean93 = properties16.containsValue((java.lang.Object) atomikosProperties77);
        java.lang.String str94 = atomikosProperties77.getOutputDir();
        atomikosProperties77.setMaxTimeout(50L);
        atomikosProperties77.setConsoleFileName("{1.0=-1}");
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "{1.0=-1}");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{}" + "'", str30, "{}");
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 100L + "'", long46 == 100L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 86400000L + "'", long49 == 86400000L);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(properties78);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 10000L + "'", long81 == 10000L);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 10000L + "'", long84 == 10000L);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 500L + "'", long85 == 500L);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "tm.out" + "'", str88, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(str94);
    }

    @Test
    public void test10925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10925");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        boolean boolean10 = atomikosProperties2.forceShutdownOnVmExit;
        atomikosProperties2.setOutputDir("");
        atomikosProperties2.setThreadedTwoPhaseCommit(false);
        boolean boolean15 = atomikosProperties2.isEnableLogging();
        atomikosProperties2.setConsoleFileLimit((int) (short) 0);
        boolean boolean18 = atomikosProperties2.threadedTwoPhaseCommit;
        long long19 = atomikosProperties2.getMaxTimeout();
        java.lang.String str20 = atomikosProperties2.getConsoleFileName();
        int int21 = atomikosProperties2.getConsoleFileCount();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 300000L + "'", long19 == 300000L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tm.out" + "'", str20, "tm.out");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test10926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10926");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        int int5 = atomikosProperties0.getMaxActives();
        java.lang.String str6 = atomikosProperties0.getLogBaseDir();
        java.lang.String str7 = atomikosProperties0.service;
        atomikosProperties0.transactionManagerUniqueName = "tmlog";
        long long10 = atomikosProperties0.getMaxTimeout();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = atomikosProperties0.getRecovery();
        recovery11.retryInterval = (byte) 10;
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 300000L + "'", long10 == 300000L);
        org.junit.Assert.assertNotNull(recovery11);
    }

    @Test
    public void test10927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10927");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties13 = atomikosProperties12.asProperties();
        atomikosProperties12.service = "{-1.0=100}";
        java.lang.String str16 = atomikosProperties12.getLogBaseName();
        long long17 = atomikosProperties12.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel18 = null;
        atomikosProperties12.setConsoleLogLevel(atomikosLoggingLevel18);
        atomikosProperties12.service = "";
        atomikosProperties12.serialJtaTransactions = true;
        java.lang.Object obj24 = properties0.remove((java.lang.Object) atomikosProperties12);
        properties0.clear();
        java.lang.Object obj28 = properties0.setProperty("{}", "{1.0=-1}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10000L + "'", long17 == 10000L);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj28);
    }

    @Test
    public void test10928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10928");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        atomikosProperties0.setTransactionManagerUniqueName("{-1.0=100}");
        atomikosProperties0.consoleFileCount = 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = atomikosProperties0.getRecovery();
        int int12 = atomikosProperties0.getMaxActives();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNotNull(recovery11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
    }

    @Test
    public void test10929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10929");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel7 = null;
        atomikosProperties2.setConsoleLogLevel(atomikosLoggingLevel7);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel9 = null;
        atomikosProperties2.setConsoleLogLevel(atomikosLoggingLevel9);
        atomikosProperties2.setLogBaseName("{={-1.0=100}, -1.0=100}");
        boolean boolean13 = atomikosProperties2.enableLogging;
        atomikosProperties2.setOutputDir("");
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel16 = atomikosProperties2.consoleLogLevel;
        atomikosProperties2.checkpointInterval = 0L;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setAllowSubTransactions(true);
        atomikosProperties19.logBaseName = "{={-1.0=100}, -1.0=100}";
        atomikosProperties19.setTransactionManagerUniqueName("");
        java.lang.Object obj26 = properties1.putIfAbsent((java.lang.Object) atomikosProperties2, (java.lang.Object) atomikosProperties19);
        long long27 = atomikosProperties2.defaultJtaTimeout;
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(atomikosLoggingLevel16);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10000L + "'", long27 == 10000L);
    }

    @Test
    public void test10930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10930");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        int int5 = atomikosProperties0.getMaxActives();
        int int6 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.console_file_name=hi!, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=tm.out, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        java.lang.String str9 = atomikosProperties0.getService();
        java.lang.Class<?> wildcardClass10 = atomikosProperties0.getClass();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test10931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10931");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setLogBaseDir("{-1.0=100}");
        atomikosProperties0.setEnableLogging(true);
        boolean boolean12 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setMaxTimeout(50L);
        java.lang.String str15 = atomikosProperties0.logBaseName;
        int int16 = atomikosProperties0.getConsoleFileCount();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tmlog" + "'", str15, "tmlog");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test10932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10932");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.maxActives = ' ';
        atomikosProperties0.maxActives = (byte) 10;
        atomikosProperties0.setCheckpointInterval((long) '4');
        atomikosProperties0.setService("{={-1.0=100}, -1.0=100}");
        java.lang.String str15 = atomikosProperties0.getService();
        int int16 = atomikosProperties0.getConsoleFileCount();
        int int17 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.setMaxActives((int) (short) 100);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str15, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test10933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10933");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.setService("tm.out");
        atomikosProperties0.setSerialJtaTransactions(true);
        boolean boolean14 = atomikosProperties0.isThreadedTwoPhaseCommit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel15 = atomikosProperties0.consoleLogLevel;
        atomikosProperties0.setLogBaseDir("{={-1.0=100}, -1.0=100}");
        atomikosProperties0.forceShutdownOnVmExit = false;
        long long20 = atomikosProperties0.getMaxTimeout();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel15 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel15.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 300000L + "'", long20 == 300000L);
    }

    @Test
    public void test10934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10934");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean12 = properties4.containsKey((java.lang.Object) 0L);
        java.lang.Object obj15 = properties4.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj18 = properties4.setProperty("", "{-1.0=100}");
        java.lang.Object obj19 = properties4.clone();
        java.lang.Object obj20 = properties0.get((java.lang.Object) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.setEnableLogging(true);
        atomikosProperties21.consoleFileCount = 0;
        int int26 = atomikosProperties21.getMaxActives();
        java.lang.String str27 = atomikosProperties21.getLogBaseDir();
        java.lang.String str28 = atomikosProperties21.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery29 = atomikosProperties21.getRecovery();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties31 = atomikosProperties30.asProperties();
        atomikosProperties30.service = "{-1.0=100}";
        long long34 = atomikosProperties30.getDefaultJtaTimeout();
        atomikosProperties30.setThreadedTwoPhaseCommit(true);
        boolean boolean37 = atomikosProperties30.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery38 = atomikosProperties30.recovery;
        atomikosProperties30.setLogBaseDir("");
        java.lang.Object obj41 = properties4.replace((java.lang.Object) recovery29, (java.lang.Object) "");
        java.util.Properties properties42 = new java.util.Properties();
        java.lang.Object obj44 = properties42.remove((java.lang.Object) (-1.0d));
        boolean boolean46 = properties42.contains((java.lang.Object) "{-1.0=100}");
        boolean boolean47 = properties4.equals((java.lang.Object) "{-1.0=100}");
        properties4.clear();
        java.util.Set<java.lang.Object> objSet49 = properties4.keySet();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 50 + "'", int26 == 50);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(recovery29);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10000L + "'", long34 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(recovery38);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objSet49);
    }

    @Test
    public void test10935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10935");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        long long5 = atomikosProperties0.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel6 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel6);
        atomikosProperties0.setLogBaseDir("");
        java.util.Properties properties10 = atomikosProperties0.asProperties();
        atomikosProperties0.consoleFileName = "{100=100}";
        java.lang.String str13 = atomikosProperties0.getService();
        atomikosProperties0.outputDir = "{{1.0=-1, -1.0=100}={1.0=-1}, 1.0=-1}";
        atomikosProperties0.logBaseDir = "";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{-1.0=100}" + "'", str13, "{-1.0=100}");
    }

    @Test
    public void test10936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10936");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        java.lang.Object obj14 = properties3.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj17 = properties3.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties3.keys();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        boolean boolean21 = properties19.isEmpty();
        java.lang.Object obj24 = properties19.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties19.elements();
        java.lang.Object obj26 = properties2.replace((java.lang.Object) objEnumeration18, (java.lang.Object) properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties19.elements();
        int int28 = properties19.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet29 = properties19.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties31 = atomikosProperties30.asProperties();
        atomikosProperties30.service = "{-1.0=100}";
        java.lang.String str34 = atomikosProperties30.getLogBaseName();
        long long35 = atomikosProperties30.defaultJtaTimeout;
        long long36 = atomikosProperties30.getMaxTimeout();
        boolean boolean37 = atomikosProperties30.forceShutdownOnVmExit;
        java.util.Properties properties38 = atomikosProperties30.asProperties();
        int int39 = atomikosProperties30.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery40 = atomikosProperties30.recovery;
        long long41 = atomikosProperties30.getDefaultJtaTimeout();
        boolean boolean42 = properties19.contains((java.lang.Object) long41);
        java.lang.String str43 = properties19.toString();
        java.util.Set<java.lang.Object> objSet44 = properties19.keySet();
        java.io.OutputStream outputStream45 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties19.storeToXML(outputStream45, "{1.0=-1, -1.0=100}", "{hi!={{={-1.0=100}, -1.0=100}=}}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(objEntrySet29);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tmlog" + "'", str34, "tmlog");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10000L + "'", long35 == 10000L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 300000L + "'", long36 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 50 + "'", int39 == 50);
        org.junit.Assert.assertNotNull(recovery40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10000L + "'", long41 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "{100=100}" + "'", str43, "{100=100}");
        org.junit.Assert.assertNotNull(objSet44);
    }

    @Test
    public void test10937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10937");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        int int6 = atomikosProperties0.consoleFileCount;
        int int7 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean10 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.setSerialJtaTransactions(false);
        java.lang.String str13 = atomikosProperties0.getService();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{-1.0=100}" + "'", str13, "{-1.0=100}");
    }

    @Test
    public void test10938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10938");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.delay = (-1L);
        long long5 = recovery0.delay;
        recovery0.delay = (short) 1;
        long long8 = recovery0.getRetryInterval();
        int int9 = recovery0.maxRetries;
        long long10 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.setRetryInterval((long) 10);
        recovery0.delay = '4';
        recovery0.setDelay((long) (short) 100);
        recovery0.maxRetries = (short) 0;
        recovery0.setRetryInterval((long) (byte) 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 86400000L + "'", long10 == 86400000L);
    }

    @Test
    public void test10939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10939");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel7 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel7);
        boolean boolean9 = atomikosProperties0.enableLogging;
        int int10 = atomikosProperties0.getConsoleFileLimit();
        atomikosProperties0.serialJtaTransactions = false;
        atomikosProperties0.setLogBaseName("");
        atomikosProperties0.transactionManagerUniqueName = "tmlog";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery17 = atomikosProperties0.recovery;
        long long18 = recovery17.getDelay();
        int int19 = recovery17.maxRetries;
        long long20 = recovery17.getDelay();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(recovery17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10000L + "'", long18 == 10000L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10000L + "'", long20 == 10000L);
    }

    @Test
    public void test10940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10940");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.setCheckpointInterval((long) 5);
        atomikosProperties0.setService("");
        atomikosProperties0.setLogBaseDir("tm.out");
        atomikosProperties0.setLogBaseName("{1.0=-1}");
        int int15 = atomikosProperties0.maxActives;
        atomikosProperties0.transactionManagerUniqueName = "{{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}=, ={-1.0=100}, -1.0=100}";
        int int18 = atomikosProperties0.consoleFileCount;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 50 + "'", int15 == 50);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test10941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10941");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.String str9 = properties8.toString();
        java.lang.Object obj11 = properties8.remove((java.lang.Object) (short) 100);
        java.lang.Object obj14 = properties8.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj15 = properties8.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties8.elements();
        java.lang.Object obj17 = properties0.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration16);
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration19 = properties18.propertyNames();
        java.lang.Object obj20 = properties18.clone();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        boolean boolean23 = properties21.isEmpty();
        java.lang.Object obj26 = properties21.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties21.elements();
        java.lang.Object obj28 = properties0.put(obj20, (java.lang.Object) objEnumeration27);
        properties0.clear();
        java.util.Properties properties30 = new java.util.Properties();
        java.lang.Object obj32 = properties30.remove((java.lang.Object) (-1.0d));
        boolean boolean33 = properties30.isEmpty();
        int int34 = properties30.size();
        java.lang.String str36 = properties30.getProperty("{}");
        java.util.Properties properties37 = new java.util.Properties();
        java.lang.String str38 = properties37.toString();
        java.lang.Object obj40 = properties37.remove((java.lang.Object) (short) 100);
        java.lang.Object obj43 = properties37.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean45 = properties37.containsKey((java.lang.Object) 0L);
        java.lang.Object obj48 = properties37.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties49 = new java.util.Properties(properties37);
        java.util.Enumeration<java.lang.Object> objEnumeration50 = properties37.keys();
        java.lang.Object obj51 = properties0.replace((java.lang.Object) properties30, (java.lang.Object) properties37);
        boolean boolean52 = properties30.isEmpty();
        java.util.Properties properties53 = new java.util.Properties();
        java.lang.String str54 = properties53.toString();
        boolean boolean55 = properties53.isEmpty();
        java.util.Properties properties56 = new java.util.Properties();
        java.lang.String str57 = properties56.toString();
        java.lang.Object obj59 = properties56.remove((java.lang.Object) (short) 100);
        java.lang.Object obj62 = properties56.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean64 = properties56.containsKey((java.lang.Object) 0L);
        boolean boolean65 = properties53.containsValue((java.lang.Object) 0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery66 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        boolean boolean67 = properties53.contains((java.lang.Object) recovery66);
        java.util.Properties properties68 = new java.util.Properties();
        java.lang.String str69 = properties68.toString();
        java.lang.Object obj71 = properties68.remove((java.lang.Object) (short) 100);
        java.lang.Object obj74 = properties68.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj75 = properties68.clone();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet76 = properties68.entrySet();
        java.lang.Object obj77 = properties30.replace((java.lang.Object) properties53, (java.lang.Object) properties68);
        java.lang.Object obj80 = properties68.setProperty("{1.0=-1}", "");
        java.util.Properties properties81 = new java.util.Properties();
        java.lang.String str82 = properties81.toString();
        boolean boolean84 = properties81.containsValue((java.lang.Object) (-1L));
        java.lang.Object obj86 = properties81.get((java.lang.Object) 97L);
        properties81.clear();
        properties68.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties81);
        java.util.Properties properties89 = new java.util.Properties();
        properties89.clear();
        java.lang.String str91 = properties89.toString();
        java.lang.Object obj92 = properties89.clone();
        int int93 = properties89.size();
        java.lang.String str94 = properties89.toString();
        properties68.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties89);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(wildcardEnumeration19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{}" + "'", str38, "{}");
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(objEnumeration50);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "{}" + "'", str54, "{}");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "{}" + "'", str57, "{}");
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "{}" + "'", str69, "{}");
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEntrySet76);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertNull(obj80);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "{}" + "'", str82, "{}");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "{}" + "'", str91, "{}");
        org.junit.Assert.assertNotNull(obj92);
        org.junit.Assert.assertEquals(obj92.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj92), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj92), "{}");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "{}" + "'", str94, "{}");
    }

    @Test
    public void test10942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10942");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.setService("tm.out");
        int int12 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.setDefaultJtaTimeout((long) 'a');
        boolean boolean15 = atomikosProperties0.enableLogging;
        java.lang.String str16 = atomikosProperties0.consoleFileName;
        java.lang.String str17 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean18 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.serialJtaTransactions = true;
        java.lang.String str21 = atomikosProperties0.consoleFileName;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel22 = atomikosProperties0.consoleLogLevel;
        atomikosProperties0.setDefaultJtaTimeout((long) 0);
        atomikosProperties0.transactionManagerUniqueName = "{={={-1.0=100}, -1.0=100}}";
        atomikosProperties0.enableLogging = false;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tm.out" + "'", str16, "tm.out");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tm.out" + "'", str21, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel22 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel22.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test10943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10943");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean3 = atomikosProperties0.enableLogging;
        atomikosProperties0.consoleFileLimit = (byte) 100;
        java.lang.String str6 = atomikosProperties0.getService();
        atomikosProperties0.setConsoleFileLimit((int) (byte) 1);
        atomikosProperties0.consoleFileCount = (byte) 1;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test10944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10944");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        java.lang.String str3 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean4 = atomikosProperties0.serialJtaTransactions;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test10945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10945");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        int int8 = atomikosProperties0.getConsoleFileLimit();
        boolean boolean9 = atomikosProperties0.forceShutdownOnVmExit;
        long long10 = atomikosProperties0.getDefaultJtaTimeout();
        java.lang.String str11 = atomikosProperties0.consoleFileName;
        atomikosProperties0.consoleFileCount = 52;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tm.out" + "'", str11, "tm.out");
    }

    @Test
    public void test10946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10946");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        int int4 = properties0.size();
        java.lang.String str6 = properties0.getProperty("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean8 = atomikosProperties7.isSerialJtaTransactions();
        atomikosProperties7.logBaseName = "{-1.0=100}";
        int int11 = atomikosProperties7.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery12 = atomikosProperties7.getRecovery();
        atomikosProperties7.setConsoleFileCount((int) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel15 = null;
        atomikosProperties7.consoleLogLevel = atomikosLoggingLevel15;
        java.lang.String str17 = atomikosProperties7.logBaseDir;
        atomikosProperties7.checkpointInterval = (byte) 0;
        java.lang.String str20 = atomikosProperties7.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties22 = atomikosProperties21.asProperties();
        java.util.Properties properties23 = new java.util.Properties();
        java.lang.Object obj25 = properties23.remove((java.lang.Object) (-1.0d));
        boolean boolean26 = properties23.isEmpty();
        int int27 = properties23.size();
        java.lang.String str29 = properties23.getProperty("{}");
        java.lang.Object obj30 = properties22.remove((java.lang.Object) properties23);
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.String str32 = properties31.toString();
        java.util.Properties properties33 = new java.util.Properties(properties31);
        properties22.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties31);
        java.lang.Object obj35 = properties0.getOrDefault((java.lang.Object) atomikosProperties7, (java.lang.Object) properties31);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties37 = atomikosProperties36.asProperties();
        atomikosProperties36.service = "{-1.0=100}";
        java.lang.String str40 = atomikosProperties36.getTransactionManagerUniqueName();
        atomikosProperties36.consoleFileLimit = (byte) 10;
        long long43 = atomikosProperties36.getMaxTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel44 = null;
        atomikosProperties36.consoleLogLevel = atomikosLoggingLevel44;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery46 = atomikosProperties36.recovery;
        java.lang.Object obj47 = properties0.remove((java.lang.Object) recovery46);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties49 = atomikosProperties48.asProperties();
        atomikosProperties48.service = "{-1.0=100}";
        java.lang.String str52 = atomikosProperties48.getTransactionManagerUniqueName();
        atomikosProperties48.consoleFileName = "hi!";
        atomikosProperties48.setCheckpointInterval((long) 5);
        atomikosProperties48.setConsoleFileCount(0);
        boolean boolean59 = atomikosProperties48.isThreadedTwoPhaseCommit();
        int int60 = atomikosProperties48.maxActives;
        atomikosProperties48.setConsoleFileName("{={-1.0=100}, -1.0=100}");
        atomikosProperties48.setConsoleFileCount(50);
        java.lang.String str65 = atomikosProperties48.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel66 = atomikosProperties48.getConsoleLogLevel();
        atomikosProperties48.setConsoleFileLimit(10);
        java.lang.String str69 = atomikosProperties48.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery70 = atomikosProperties48.getRecovery();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery71 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery71.retryInterval = (short) 100;
        recovery71.delay = (-1L);
        long long76 = recovery71.delay;
        recovery71.delay = (short) 1;
        long long79 = recovery71.getRetryInterval();
        int int80 = recovery71.maxRetries;
        long long81 = recovery71.getForgetOrphanedLogEntriesDelay();
        recovery71.setRetryInterval((long) 10);
        recovery71.delay = '4';
        long long86 = recovery71.retryInterval;
        int int87 = recovery71.getMaxRetries();
        long long88 = recovery71.getDelay();
        recovery71.delay = 3;
        java.lang.Object obj91 = properties0.getOrDefault((java.lang.Object) atomikosProperties48, (java.lang.Object) recovery71);
        recovery71.setDelay((long) 100);
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 50 + "'", int11 == 50);
        org.junit.Assert.assertNotNull(recovery12);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{}" + "'", str32, "{}");
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "{}");
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 300000L + "'", long43 == 300000L);
        org.junit.Assert.assertNotNull(recovery46);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(properties49);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 50 + "'", int60 == 50);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel66 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel66.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "tmlog" + "'", str69, "tmlog");
        org.junit.Assert.assertNotNull(recovery70);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-1L) + "'", long76 == (-1L));
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 100L + "'", long79 == 100L);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 5 + "'", int80 == 5);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 86400000L + "'", long81 == 86400000L);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 10L + "'", long86 == 10L);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 5 + "'", int87 == 5);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 52L + "'", long88 == 52L);
        org.junit.Assert.assertNotNull(obj91);
    }

    @Test
    public void test10947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10947");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        atomikosProperties0.setTransactionManagerUniqueName("{}");
        int int6 = atomikosProperties0.getMaxActives();
        boolean boolean7 = atomikosProperties0.forceShutdownOnVmExit;
        int int8 = atomikosProperties0.getMaxActives();
        atomikosProperties0.maxActives = (-1);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 50 + "'", int6 == 50);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
    }

    @Test
    public void test10948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10948");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties7 = new java.util.Properties();
        java.lang.String str8 = properties7.toString();
        properties7.clear();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties7.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties12 = atomikosProperties11.asProperties();
        atomikosProperties11.service = "{-1.0=100}";
        long long15 = atomikosProperties11.getDefaultJtaTimeout();
        atomikosProperties11.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties11.setMaxActives(100);
        java.lang.String str20 = atomikosProperties11.logBaseDir;
        atomikosProperties11.consoleFileCount = (short) 0;
        atomikosProperties11.defaultJtaTimeout = 10000L;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel25 = atomikosProperties11.consoleLogLevel;
        java.lang.Object obj26 = properties0.putIfAbsent((java.lang.Object) properties7, (java.lang.Object) atomikosLoggingLevel25);
        java.lang.String str27 = properties7.toString();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet28 = properties7.entrySet();
        java.util.Properties properties29 = new java.util.Properties();
        properties29.clear();
        java.lang.String str31 = properties29.toString();
        java.lang.Object obj32 = properties29.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties34 = atomikosProperties33.asProperties();
        atomikosProperties33.service = "{-1.0=100}";
        long long37 = atomikosProperties33.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel38 = null;
        atomikosProperties33.setConsoleLogLevel(atomikosLoggingLevel38);
        atomikosProperties33.setTransactionManagerUniqueName("{-1.0=100}");
        atomikosProperties33.consoleFileCount = 0;
        atomikosProperties33.enableLogging = false;
        java.lang.Object obj46 = properties7.replace((java.lang.Object) properties29, (java.lang.Object) false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean48 = atomikosProperties47.isSerialJtaTransactions();
        atomikosProperties47.logBaseName = "{-1.0=100}";
        int int51 = atomikosProperties47.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery52 = atomikosProperties47.getRecovery();
        atomikosProperties47.setConsoleFileCount((int) (byte) 100);
        atomikosProperties47.setAllowSubTransactions(true);
        int int57 = atomikosProperties47.getMaxActives();
        boolean boolean58 = atomikosProperties47.isEnableLogging();
        atomikosProperties47.setOutputDir("");
        java.lang.String str61 = atomikosProperties47.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties62 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties63 = atomikosProperties62.asProperties();
        atomikosProperties62.service = "{-1.0=100}";
        long long66 = atomikosProperties62.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel67 = null;
        atomikosProperties62.setConsoleLogLevel(atomikosLoggingLevel67);
        atomikosProperties62.setTransactionManagerUniqueName("{-1.0=100}");
        atomikosProperties62.consoleFileCount = 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery73 = atomikosProperties62.getRecovery();
        atomikosProperties62.setForceShutdownOnVmExit(false);
        java.lang.String str76 = atomikosProperties62.outputDir;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery77 = atomikosProperties62.getRecovery();
        recovery77.setForgetOrphanedLogEntriesDelay((long) 1);
        int int80 = recovery77.getMaxRetries();
        java.lang.Object obj81 = properties7.putIfAbsent((java.lang.Object) atomikosProperties47, (java.lang.Object) recovery77);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNotNull(objEntrySet10);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel25 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel25.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{}" + "'", str27, "{}");
        org.junit.Assert.assertNotNull(objEntrySet28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{}" + "'", str31, "{}");
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "{}");
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 10000L + "'", long37 == 10000L);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 50 + "'", int51 == 50);
        org.junit.Assert.assertNotNull(recovery52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 50 + "'", int57 == 50);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(properties63);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 10000L + "'", long66 == 10000L);
        org.junit.Assert.assertNotNull(recovery73);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(recovery77);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 5 + "'", int80 == 5);
        org.junit.Assert.assertNull(obj81);
    }

    @Test
    public void test10949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10949");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties0.setMaxActives(100);
        boolean boolean9 = atomikosProperties0.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.recovery;
        atomikosProperties0.checkpointInterval = 300000L;
        atomikosProperties0.setConsoleFileLimit(50);
        atomikosProperties0.setOutputDir("{{}={}}");
        atomikosProperties0.outputDir = "{}";
        atomikosProperties0.setDefaultJtaTimeout((long) (short) 100);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(recovery10);
    }

    @Test
    public void test10950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10950");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.outputDir = "tm.out";
        int int11 = atomikosProperties0.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery12 = atomikosProperties0.recovery;
        long long13 = recovery12.getForgetOrphanedLogEntriesDelay();
        recovery12.setRetryInterval((long) 10);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(recovery12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 86400000L + "'", long13 == 86400000L);
    }

    @Test
    public void test10951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10951");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        atomikosProperties0.setTransactionManagerUniqueName("{-1.0=100}");
        boolean boolean9 = atomikosProperties0.enableLogging;
        java.lang.String str10 = atomikosProperties0.logBaseDir;
        long long11 = atomikosProperties0.maxTimeout;
        java.lang.String str12 = atomikosProperties0.outputDir;
        java.util.Properties properties13 = atomikosProperties0.asProperties();
        atomikosProperties0.setDefaultJtaTimeout(300000L);
        atomikosProperties0.setAllowSubTransactions(true);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(properties13);
    }

    @Test
    public void test10952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10952");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.threadedTwoPhaseCommit = true;
        atomikosProperties0.setSerialJtaTransactions(true);
        boolean boolean10 = atomikosProperties0.isForceShutdownOnVmExit();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test10953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10953");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        int int4 = properties0.size();
        java.lang.String str6 = properties0.getProperty("{}");
        java.util.Set<java.lang.Object> objSet7 = properties0.keySet();
        java.lang.String str9 = properties0.getProperty("hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        atomikosProperties10.service = "{-1.0=100}";
        long long14 = atomikosProperties10.getDefaultJtaTimeout();
        atomikosProperties10.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties10.setMaxActives(100);
        boolean boolean19 = atomikosProperties10.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery20 = atomikosProperties10.recovery;
        atomikosProperties10.checkpointInterval = 300000L;
        atomikosProperties10.consoleFileLimit = (byte) 1;
        atomikosProperties10.consoleFileLimit = 0;
        boolean boolean27 = properties0.contains((java.lang.Object) atomikosProperties10);
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(recovery20);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test10954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10954");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        java.lang.Object obj15 = properties0.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery16 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery16.retryInterval = (short) 100;
        recovery16.forgetOrphanedLogEntriesDelay = 'a';
        boolean boolean21 = properties0.equals((java.lang.Object) 'a');
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery22 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery22.retryInterval = (short) 100;
        recovery22.forgetOrphanedLogEntriesDelay = 'a';
        long long27 = recovery22.getDelay();
        int int28 = recovery22.maxRetries;
        int int29 = recovery22.maxRetries;
        long long30 = recovery22.getRetryInterval();
        java.util.Properties properties31 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration32 = properties31.propertyNames();
        java.lang.Object obj33 = properties0.put((java.lang.Object) long30, (java.lang.Object) wildcardEnumeration32);
        java.lang.String str35 = properties0.getProperty("hi!");
        java.util.Properties properties36 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties38 = atomikosProperties37.asProperties();
        atomikosProperties37.service = "{-1.0=100}";
        java.lang.String str41 = atomikosProperties37.getTransactionManagerUniqueName();
        atomikosProperties37.consoleFileName = "hi!";
        atomikosProperties37.setCheckpointInterval((long) 5);
        atomikosProperties37.setConsoleFileCount(0);
        atomikosProperties37.checkpointInterval = 52L;
        atomikosProperties37.maxTimeout = 5L;
        boolean boolean52 = properties0.containsValue((java.lang.Object) 5L);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10000L + "'", long27 == 10000L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 100L + "'", long30 == 100L);
        org.junit.Assert.assertNotNull(wildcardEnumeration32);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test10955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10955");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        java.lang.String str3 = atomikosProperties0.transactionManagerUniqueName;
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.lang.String str5 = atomikosProperties0.logBaseDir;
        atomikosProperties0.logBaseName = "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}";
        atomikosProperties0.threadedTwoPhaseCommit = true;
        atomikosProperties0.setLogBaseName("{{}={}}");
        atomikosProperties0.maxTimeout = 10;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test10956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10956");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        java.util.Properties properties2 = new java.util.Properties();
        java.lang.Object obj4 = properties2.remove((java.lang.Object) (-1.0d));
        boolean boolean5 = properties2.isEmpty();
        int int6 = properties2.size();
        java.lang.String str8 = properties2.getProperty("{}");
        java.lang.Object obj9 = properties1.remove((java.lang.Object) properties2);
        java.util.Collection<java.lang.Object> objCollection10 = properties2.values();
        java.util.Properties properties11 = new java.util.Properties();
        java.lang.String str12 = properties11.toString();
        java.lang.Object obj14 = properties11.remove((java.lang.Object) (short) 100);
        java.lang.Object obj17 = properties11.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean19 = properties11.containsKey((java.lang.Object) 0L);
        java.lang.Object obj22 = properties11.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj25 = properties11.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration26 = properties11.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet27 = properties11.entrySet();
        boolean boolean28 = properties2.contains((java.lang.Object) objEntrySet27);
        java.io.Reader reader29 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.load(reader29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(objCollection10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{}" + "'", str12, "{}");
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(objEnumeration26);
        org.junit.Assert.assertNotNull(objEntrySet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test10957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10957");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean3 = atomikosProperties0.enableLogging;
        atomikosProperties0.consoleFileLimit = (byte) 100;
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.util.Properties properties8 = new java.util.Properties(properties6);
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.lang.Object obj13 = properties10.remove((java.lang.Object) (short) 100);
        java.lang.Object obj16 = properties10.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean18 = properties10.containsKey((java.lang.Object) 0L);
        java.lang.Object obj21 = properties10.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties22 = new java.util.Properties(properties10);
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties22.elements();
        atomikosProperties0.set(properties8, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties22);
        int int25 = properties8.size();
        java.lang.Object obj28 = properties8.setProperty("tmlog", "hi!");
        int int29 = properties8.size();
        java.util.Properties properties30 = new java.util.Properties();
        java.lang.String str31 = properties30.toString();
        java.util.Properties properties32 = new java.util.Properties(properties30);
        java.util.Properties properties33 = new java.util.Properties();
        java.lang.String str34 = properties33.toString();
        java.lang.Object obj36 = properties33.remove((java.lang.Object) (short) 100);
        java.lang.Object obj39 = properties33.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean41 = properties33.containsKey((java.lang.Object) 0L);
        java.lang.Object obj44 = properties33.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj47 = properties33.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration48 = properties33.keys();
        java.util.Properties properties49 = new java.util.Properties();
        java.lang.String str50 = properties49.toString();
        boolean boolean51 = properties49.isEmpty();
        java.lang.Object obj54 = properties49.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration55 = properties49.elements();
        java.lang.Object obj56 = properties32.replace((java.lang.Object) objEnumeration48, (java.lang.Object) properties49);
        java.util.Enumeration<java.lang.Object> objEnumeration57 = properties49.elements();
        java.util.Enumeration<java.lang.Object> objEnumeration58 = properties49.keys();
        java.util.Properties properties59 = new java.util.Properties(properties49);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery60 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery60.retryInterval = (short) 100;
        recovery60.delay = (-1L);
        long long65 = recovery60.delay;
        recovery60.delay = (short) 1;
        long long68 = recovery60.getRetryInterval();
        long long69 = recovery60.getForgetOrphanedLogEntriesDelay();
        recovery60.setMaxRetries(10);
        int int72 = recovery60.maxRetries;
        long long73 = recovery60.getDelay();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties74 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties74.setEnableLogging(true);
        atomikosProperties74.transactionManagerUniqueName = "hi!";
        atomikosProperties74.logBaseName = "hi!";
        boolean boolean81 = properties8.replace((java.lang.Object) properties49, (java.lang.Object) long73, (java.lang.Object) "hi!");
        int int82 = properties49.size();
        java.util.Properties properties83 = new java.util.Properties();
        java.lang.String str84 = properties83.toString();
        java.lang.Object obj86 = properties83.remove((java.lang.Object) (short) 100);
        java.lang.Object obj89 = properties83.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean91 = properties83.containsKey((java.lang.Object) 0L);
        java.lang.Object obj94 = properties83.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj97 = properties83.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration98 = properties83.keys();
        properties49.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties83);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{}" + "'", str31, "{}");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{}" + "'", str34, "{}");
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(objEnumeration48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "{}" + "'", str50, "{}");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNotNull(objEnumeration55);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(objEnumeration57);
        org.junit.Assert.assertNotNull(objEnumeration58);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 100L + "'", long68 == 100L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 86400000L + "'", long69 == 86400000L);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1L + "'", long73 == 1L);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "{}" + "'", str84, "{}");
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(obj94);
        org.junit.Assert.assertNull(obj97);
        org.junit.Assert.assertNotNull(objEnumeration98);
    }

    @Test
    public void test10958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10958");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        java.lang.String str15 = properties0.toString();
        java.util.Set<java.lang.String> strSet16 = properties0.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties18 = atomikosProperties17.asProperties();
        atomikosProperties17.service = "{-1.0=100}";
        long long21 = atomikosProperties17.getDefaultJtaTimeout();
        atomikosProperties17.enableLogging = false;
        atomikosProperties17.setMaxTimeout((long) (byte) 0);
        atomikosProperties17.setAllowSubTransactions(true);
        java.util.Properties properties28 = new java.util.Properties();
        java.lang.Object obj30 = properties28.remove((java.lang.Object) (-1.0d));
        boolean boolean31 = properties28.isEmpty();
        java.util.Collection<java.lang.Object> objCollection32 = properties28.values();
        java.lang.Object obj33 = properties0.put((java.lang.Object) true, (java.lang.Object) properties28);
        java.util.Properties properties34 = new java.util.Properties(properties28);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties36 = atomikosProperties35.asProperties();
        atomikosProperties35.service = "{-1.0=100}";
        long long39 = atomikosProperties35.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel40 = null;
        atomikosProperties35.setConsoleLogLevel(atomikosLoggingLevel40);
        int int42 = atomikosProperties35.maxActives;
        java.util.Properties properties43 = new java.util.Properties();
        java.lang.Object obj45 = properties43.remove((java.lang.Object) (-1.0d));
        java.util.Enumeration<?> wildcardEnumeration46 = properties43.propertyNames();
        java.util.Set<java.lang.Object> objSet47 = properties43.keySet();
        java.util.Set<java.lang.String> strSet48 = properties43.stringPropertyNames();
        java.util.Properties properties50 = new java.util.Properties();
        atomikosProperties35.set(properties43, "tm.out", (java.lang.Object) properties50);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties53 = atomikosProperties52.asProperties();
        atomikosProperties52.service = "{-1.0=100}";
        long long56 = atomikosProperties52.getDefaultJtaTimeout();
        atomikosProperties52.setThreadedTwoPhaseCommit(true);
        boolean boolean59 = atomikosProperties52.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery60 = atomikosProperties52.recovery;
        atomikosProperties52.setLogBaseDir("");
        atomikosProperties52.setConsoleFileName("");
        atomikosProperties52.setThreadedTwoPhaseCommit(false);
        java.lang.Object obj67 = properties34.getOrDefault((java.lang.Object) "tm.out", (java.lang.Object) false);
        java.lang.String str68 = properties34.toString();
        java.lang.String str70 = properties34.getProperty("{-1.0=100}");
        java.lang.String str73 = properties34.getProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "{{={-1.0=100}, -1.0=100}=}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str15, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objCollection32);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10000L + "'", long39 == 10000L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 50 + "'", int42 == 50);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNotNull(wildcardEnumeration46);
        org.junit.Assert.assertNotNull(objSet47);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(properties53);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 10000L + "'", long56 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(recovery60);
        org.junit.Assert.assertEquals("'" + obj67 + "' != '" + false + "'", obj67, false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "{}" + "'", str68, "{}");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "{{={-1.0=100}, -1.0=100}=}" + "'", str73, "{{={-1.0=100}, -1.0=100}=}");
    }

    @Test
    public void test10959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10959");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        java.lang.String str10 = atomikosProperties0.logBaseDir;
        atomikosProperties0.transactionManagerUniqueName = "";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties14 = atomikosProperties13.asProperties();
        atomikosProperties13.service = "{-1.0=100}";
        long long17 = atomikosProperties13.getDefaultJtaTimeout();
        atomikosProperties13.setTransactionManagerUniqueName("{}");
        atomikosProperties13.consoleFileName = "hi!";
        int int22 = atomikosProperties13.getConsoleFileCount();
        boolean boolean23 = atomikosProperties13.isThreadedTwoPhaseCommit();
        atomikosProperties13.maxTimeout = 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean27 = atomikosProperties26.isSerialJtaTransactions();
        atomikosProperties26.logBaseName = "{-1.0=100}";
        int int30 = atomikosProperties26.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery31 = atomikosProperties26.getRecovery();
        atomikosProperties26.setConsoleFileCount((int) (byte) 100);
        atomikosProperties26.setAllowSubTransactions(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean37 = atomikosProperties36.isThreadedTwoPhaseCommit();
        long long38 = atomikosProperties36.getCheckpointInterval();
        atomikosProperties36.setCheckpointInterval((long) 5);
        java.util.Properties properties41 = new java.util.Properties();
        java.lang.String str42 = properties41.toString();
        java.lang.Object obj44 = properties41.remove((java.lang.Object) (short) 100);
        java.lang.Object obj47 = properties41.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean49 = properties41.containsKey((java.lang.Object) 0L);
        java.lang.String str50 = properties41.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties52 = atomikosProperties51.asProperties();
        atomikosProperties51.service = "{-1.0=100}";
        long long55 = atomikosProperties51.getDefaultJtaTimeout();
        atomikosProperties51.setMaxActives(0);
        atomikosProperties51.maxActives = 'a';
        boolean boolean60 = atomikosProperties51.isThreadedTwoPhaseCommit();
        boolean boolean61 = atomikosProperties51.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel62 = atomikosProperties51.consoleLogLevel;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties64 = atomikosProperties63.asProperties();
        atomikosProperties63.service = "{-1.0=100}";
        long long67 = atomikosProperties63.getDefaultJtaTimeout();
        atomikosProperties63.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties63.setMaxActives(100);
        java.lang.String str72 = atomikosProperties63.logBaseDir;
        java.lang.String str73 = atomikosProperties63.outputDir;
        java.lang.Object obj74 = properties41.replace((java.lang.Object) atomikosLoggingLevel62, (java.lang.Object) atomikosProperties63);
        atomikosProperties36.consoleLogLevel = atomikosLoggingLevel62;
        atomikosProperties26.setConsoleLogLevel(atomikosLoggingLevel62);
        atomikosProperties13.consoleLogLevel = atomikosLoggingLevel62;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel62);
        atomikosProperties0.maxTimeout = 0L;
        java.util.Properties properties81 = atomikosProperties0.asProperties();
        java.io.OutputStream outputStream82 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties81.store(outputStream82, "{com.atomikos.icatch.console_file_name=hi!, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=tm.out, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10000L + "'", long17 == 10000L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 50 + "'", int30 == 50);
        org.junit.Assert.assertNotNull(recovery31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{}" + "'", str42, "{}");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "{-1.0=100}" + "'", str50, "{-1.0=100}");
        org.junit.Assert.assertNotNull(properties52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 10000L + "'", long55 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel62 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel62.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties64);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 10000L + "'", long67 == 10000L);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str73, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNotNull(properties81);
    }

    @Test
    public void test10960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10960");
        java.util.Properties properties0 = new java.util.Properties();
        properties0.clear();
        java.lang.String str2 = properties0.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery3.retryInterval = (short) 100;
        recovery3.setForgetOrphanedLogEntriesDelay((long) 5);
        recovery3.setRetryInterval((long) (-1));
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery10.retryInterval = (short) 100;
        recovery10.forgetOrphanedLogEntriesDelay = 'a';
        long long15 = recovery10.retryInterval;
        recovery10.forgetOrphanedLogEntriesDelay = 0L;
        java.lang.Object obj18 = properties0.put((java.lang.Object) (-1), (java.lang.Object) recovery10);
        boolean boolean19 = properties0.isEmpty();
        java.util.Properties properties20 = new java.util.Properties();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        boolean boolean23 = properties21.isEmpty();
        java.util.Properties properties24 = new java.util.Properties();
        java.lang.String str25 = properties24.toString();
        java.lang.Object obj27 = properties24.remove((java.lang.Object) (short) 100);
        java.lang.Object obj30 = properties24.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean32 = properties24.containsKey((java.lang.Object) 0L);
        boolean boolean33 = properties21.containsValue((java.lang.Object) 0L);
        boolean boolean36 = properties20.replace((java.lang.Object) 0L, (java.lang.Object) 0.0f, (java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration37 = properties20.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties39 = atomikosProperties38.asProperties();
        atomikosProperties38.service = "{-1.0=100}";
        java.lang.String str42 = atomikosProperties38.getTransactionManagerUniqueName();
        boolean boolean43 = atomikosProperties38.isSerialJtaTransactions();
        java.lang.String str44 = atomikosProperties38.logBaseName;
        boolean boolean45 = properties0.remove((java.lang.Object) properties20, (java.lang.Object) str44);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties47 = atomikosProperties46.asProperties();
        atomikosProperties46.service = "{-1.0=100}";
        java.lang.String str50 = atomikosProperties46.getLogBaseName();
        java.lang.String str51 = atomikosProperties46.transactionManagerUniqueName;
        atomikosProperties46.consoleFileName = "";
        atomikosProperties46.forceShutdownOnVmExit = false;
        boolean boolean56 = atomikosProperties46.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties58 = atomikosProperties57.asProperties();
        atomikosProperties57.service = "{-1.0=100}";
        java.lang.String str61 = atomikosProperties57.getLogBaseName();
        long long62 = atomikosProperties57.defaultJtaTimeout;
        long long63 = atomikosProperties57.getMaxTimeout();
        boolean boolean64 = atomikosProperties57.forceShutdownOnVmExit;
        atomikosProperties57.setService("{-1.0=100}");
        atomikosProperties57.setOutputDir("{}");
        atomikosProperties57.setSerialJtaTransactions(true);
        java.lang.Object obj71 = properties0.replace((java.lang.Object) boolean56, (java.lang.Object) true);
        java.util.Collection<java.lang.Object> objCollection72 = properties0.values();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{}" + "'", str25, "{}");
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objEnumeration37);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "tmlog" + "'", str44, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(properties47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(properties58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "tmlog" + "'", str61, "tmlog");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 10000L + "'", long62 == 10000L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 300000L + "'", long63 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNotNull(objCollection72);
    }

    @Test
    public void test10961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10961");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setTransactionManagerUniqueName("{}");
        atomikosProperties0.consoleFileName = "hi!";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel9 = atomikosProperties0.getConsoleLogLevel();
        int int10 = atomikosProperties0.getConsoleFileCount();
        java.lang.String str11 = atomikosProperties0.logBaseName;
        atomikosProperties0.checkpointInterval = 500L;
        int int14 = atomikosProperties0.getConsoleFileLimit();
        atomikosProperties0.setMaxActives(1);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel9 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel9.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tmlog" + "'", str11, "tmlog");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test10962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10962");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isEnableLogging();
        long long8 = atomikosProperties0.defaultJtaTimeout;
        boolean boolean9 = atomikosProperties0.isAllowSubTransactions();
        atomikosProperties0.defaultJtaTimeout = 52L;
        long long12 = atomikosProperties0.getDefaultJtaTimeout();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10000L + "'", long8 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
    }

    @Test
    public void test10963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10963");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.String str9 = properties8.toString();
        java.lang.Object obj11 = properties8.remove((java.lang.Object) (short) 100);
        java.lang.Object obj14 = properties8.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj15 = properties8.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties8.elements();
        java.lang.Object obj17 = properties0.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration16);
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration19 = properties18.propertyNames();
        java.lang.Object obj20 = properties18.clone();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        boolean boolean23 = properties21.isEmpty();
        java.lang.Object obj26 = properties21.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties21.elements();
        java.lang.Object obj28 = properties0.put(obj20, (java.lang.Object) objEnumeration27);
        properties0.clear();
        java.util.Properties properties30 = new java.util.Properties();
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.Object obj33 = properties31.remove((java.lang.Object) (-1.0d));
        int int34 = properties31.size();
        java.util.Enumeration<java.lang.Object> objEnumeration35 = properties31.elements();
        java.util.Properties properties36 = new java.util.Properties();
        properties36.clear();
        java.lang.String str38 = properties36.toString();
        boolean boolean39 = properties0.replace((java.lang.Object) properties30, (java.lang.Object) properties31, (java.lang.Object) str38);
        java.util.Properties properties40 = new java.util.Properties();
        java.lang.String str41 = properties40.toString();
        java.lang.Object obj43 = properties40.remove((java.lang.Object) (short) 100);
        java.lang.Object obj46 = properties40.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj47 = properties40.clone();
        java.util.Set<java.lang.String> strSet48 = properties40.stringPropertyNames();
        java.util.Properties properties49 = new java.util.Properties(properties40);
        java.util.Properties properties50 = new java.util.Properties();
        java.lang.Object obj53 = properties50.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration54 = properties50.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration55 = properties50.elements();
        java.util.Properties properties56 = new java.util.Properties(properties50);
        java.util.Properties properties57 = new java.util.Properties(properties56);
        java.util.Properties properties58 = new java.util.Properties(properties56);
        java.lang.Object obj59 = properties31.put((java.lang.Object) properties49, (java.lang.Object) properties56);
        boolean boolean60 = properties56.isEmpty();
        java.lang.String str61 = properties56.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties62 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties63 = atomikosProperties62.asProperties();
        atomikosProperties62.service = "{-1.0=100}";
        long long66 = atomikosProperties62.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel67 = null;
        atomikosProperties62.setConsoleLogLevel(atomikosLoggingLevel67);
        int int69 = atomikosProperties62.maxActives;
        atomikosProperties62.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery72 = atomikosProperties62.getRecovery();
        atomikosProperties62.forceShutdownOnVmExit = false;
        java.util.Properties properties75 = atomikosProperties62.asProperties();
        java.util.Enumeration<java.lang.Object> objEnumeration76 = properties75.elements();
        properties56.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties75);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(wildcardEnumeration19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(objEnumeration35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{}" + "'", str38, "{}");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "{}" + "'", str41, "{}");
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNotNull(objEnumeration54);
        org.junit.Assert.assertNotNull(objEnumeration55);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "{}" + "'", str61, "{}");
        org.junit.Assert.assertNotNull(properties63);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 10000L + "'", long66 == 10000L);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 50 + "'", int69 == 50);
        org.junit.Assert.assertNotNull(recovery72);
        org.junit.Assert.assertNotNull(properties75);
        org.junit.Assert.assertNotNull(objEnumeration76);
    }

    @Test
    public void test10964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10964");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.Object> objSet6 = properties5.keySet();
        java.util.Set<java.lang.Object> objSet7 = properties5.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties9 = atomikosProperties8.asProperties();
        atomikosProperties8.service = "{-1.0=100}";
        java.lang.String str12 = atomikosProperties8.getTransactionManagerUniqueName();
        atomikosProperties8.consoleFileLimit = (byte) 10;
        long long15 = atomikosProperties8.getMaxTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel16 = null;
        atomikosProperties8.consoleLogLevel = atomikosLoggingLevel16;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = atomikosProperties8.getRecovery();
        boolean boolean19 = properties5.contains((java.lang.Object) recovery18);
        java.io.OutputStream outputStream20 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.storeToXML(outputStream20, "{WARN={}, 0={100=100}, {}={}}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(objSet6);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 300000L + "'", long15 == 300000L);
        org.junit.Assert.assertNotNull(recovery18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test10965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10965");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        int int6 = atomikosProperties0.consoleFileCount;
        int int7 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.transactionManagerUniqueName = "{={-1.0=100}, -1.0=100}";
        boolean boolean12 = atomikosProperties0.isAllowSubTransactions();
        boolean boolean13 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setService("{-1.0=100}");
        java.lang.String str16 = atomikosProperties0.logBaseName;
        long long17 = atomikosProperties0.maxTimeout;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 300000L + "'", long17 == 300000L);
    }

    @Test
    public void test10966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10966");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties0.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.elements();
        java.util.Properties properties6 = new java.util.Properties(properties0);
        java.util.Properties properties7 = new java.util.Properties(properties6);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties9 = atomikosProperties8.asProperties();
        atomikosProperties8.service = "{-1.0=100}";
        long long12 = atomikosProperties8.getDefaultJtaTimeout();
        atomikosProperties8.setThreadedTwoPhaseCommit(true);
        java.lang.String str15 = atomikosProperties8.getLogBaseName();
        atomikosProperties8.setLogBaseName("");
        boolean boolean18 = properties6.containsValue((java.lang.Object) "");
        java.util.Set<java.lang.String> strSet19 = properties6.stringPropertyNames();
        java.lang.String str20 = properties6.toString();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tmlog" + "'", str15, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
    }

    @Test
    public void test10967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10967");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        java.lang.Object obj14 = properties3.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj17 = properties3.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties3.keys();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        boolean boolean21 = properties19.isEmpty();
        java.lang.Object obj24 = properties19.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties19.elements();
        java.lang.Object obj26 = properties2.replace((java.lang.Object) objEnumeration18, (java.lang.Object) properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties19.elements();
        java.util.Properties properties28 = new java.util.Properties(properties19);
        java.util.Properties properties29 = new java.util.Properties();
        java.lang.String str30 = properties29.toString();
        java.lang.Object obj32 = properties29.remove((java.lang.Object) (short) 100);
        java.lang.Object obj35 = properties29.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean37 = properties29.containsKey((java.lang.Object) 0L);
        java.lang.Object obj40 = properties29.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties41 = new java.util.Properties();
        java.lang.String str42 = properties41.toString();
        java.lang.Object obj44 = properties41.remove((java.lang.Object) (short) 100);
        java.lang.Object obj47 = properties41.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj48 = properties41.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration49 = properties41.elements();
        properties29.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties41);
        java.lang.Object obj51 = properties41.clone();
        properties41.clear();
        java.util.Enumeration<?> wildcardEnumeration53 = properties41.propertyNames();
        boolean boolean54 = properties19.contains((java.lang.Object) wildcardEnumeration53);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties56 = atomikosProperties55.asProperties();
        atomikosProperties55.service = "{-1.0=100}";
        long long59 = atomikosProperties55.getDefaultJtaTimeout();
        atomikosProperties55.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties55.setMaxActives(100);
        java.lang.String str64 = atomikosProperties55.logBaseDir;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean66 = atomikosProperties65.isSerialJtaTransactions();
        boolean boolean67 = atomikosProperties65.allowSubTransactions;
        java.lang.Object obj68 = properties19.getOrDefault((java.lang.Object) atomikosProperties55, (java.lang.Object) atomikosProperties65);
        atomikosProperties65.setMaxTimeout(10000L);
        atomikosProperties65.transactionManagerUniqueName = "{com.atomikos.icatch.tm.out={}}";
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{}" + "'", str30, "{}");
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{}" + "'", str42, "{}");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration49);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "{1.0=-1}");
        org.junit.Assert.assertNotNull(wildcardEnumeration53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(properties56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 10000L + "'", long59 == 10000L);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(obj68);
    }

    @Test
    public void test10968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10968");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        int int4 = properties0.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery5.retryInterval = (short) 100;
        recovery5.forgetOrphanedLogEntriesDelay = 'a';
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.Object obj12 = properties10.remove((java.lang.Object) (-1.0d));
        boolean boolean13 = properties10.isEmpty();
        int int14 = properties10.size();
        java.lang.String str16 = properties10.getProperty("{}");
        boolean boolean17 = properties0.remove((java.lang.Object) recovery5, (java.lang.Object) properties10);
        long long18 = recovery5.retryInterval;
        recovery5.delay = (-1L);
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L + "'", long18 == 100L);
    }

    @Test
    public void test10969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10969");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.outputDir = "hi!";
        java.lang.String str13 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setService("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        atomikosProperties0.maxTimeout = 0L;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel18 = atomikosProperties0.getConsoleLogLevel();
        java.lang.String str19 = atomikosProperties0.getOutputDir();
        boolean boolean20 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.forceShutdownOnVmExit = true;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(atomikosLoggingLevel18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test10970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10970");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        long long7 = atomikosProperties0.getCheckpointInterval();
        boolean boolean8 = atomikosProperties0.isThreadedTwoPhaseCommit();
        java.lang.String str9 = atomikosProperties0.service;
        int int10 = atomikosProperties0.consoleFileCount;
        atomikosProperties0.logBaseName = "tm.out";
        java.lang.String str13 = atomikosProperties0.getService();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = atomikosProperties0.consoleLogLevel;
        boolean boolean15 = atomikosProperties0.isSerialJtaTransactions();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{-1.0=100}" + "'", str9, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{-1.0=100}" + "'", str13, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel14 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel14.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test10971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10971");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.recovery;
        atomikosProperties0.setLogBaseDir("");
        long long11 = atomikosProperties0.maxTimeout;
        java.lang.String str12 = atomikosProperties0.logBaseDir;
        java.lang.String str13 = atomikosProperties0.logBaseDir;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery14 = atomikosProperties0.getRecovery();
        long long15 = recovery14.getForgetOrphanedLogEntriesDelay();
        long long16 = recovery14.getDelay();
        recovery14.forgetOrphanedLogEntriesDelay = 0L;
        int int19 = recovery14.getMaxRetries();
        recovery14.delay = 10000L;
        recovery14.setMaxRetries(0);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(recovery14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 86400000L + "'", long15 == 86400000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10000L + "'", long16 == 10000L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
    }

    @Test
    public void test10972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10972");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        int int6 = atomikosProperties0.consoleFileCount;
        long long7 = atomikosProperties0.getCheckpointInterval();
        java.lang.String str8 = atomikosProperties0.outputDir;
        long long9 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, false={100=100}, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
    }

    @Test
    public void test10973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10973");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.outputDir = "hi!";
        atomikosProperties0.setDefaultJtaTimeout((long) 10);
        boolean boolean15 = atomikosProperties0.isAllowSubTransactions();
        int int16 = atomikosProperties0.getConsoleFileCount();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test10974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10974");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties();
        java.lang.String str2 = properties1.toString();
        boolean boolean3 = properties1.isEmpty();
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean12 = properties4.containsKey((java.lang.Object) 0L);
        boolean boolean13 = properties1.containsValue((java.lang.Object) 0L);
        boolean boolean16 = properties0.replace((java.lang.Object) 0L, (java.lang.Object) 0.0f, (java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties0.elements();
        java.util.Set<java.lang.String> strSet18 = properties0.stringPropertyNames();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        java.lang.Object obj22 = properties19.remove((java.lang.Object) (short) 100);
        java.lang.Object obj25 = properties19.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.util.Properties properties26 = new java.util.Properties();
        java.lang.String str27 = properties26.toString();
        java.lang.Object obj29 = properties26.remove((java.lang.Object) (short) 100);
        java.lang.Object obj32 = properties26.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int33 = properties26.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery34 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery34.retryInterval = (short) 100;
        recovery34.forgetOrphanedLogEntriesDelay = 'a';
        long long39 = recovery34.retryInterval;
        recovery34.setForgetOrphanedLogEntriesDelay((long) 0);
        java.lang.Object obj42 = properties19.replace((java.lang.Object) int33, (java.lang.Object) recovery34);
        boolean boolean43 = properties0.containsValue((java.lang.Object) properties19);
        java.lang.String str44 = properties19.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties45.setEnableLogging(true);
        atomikosProperties45.consoleFileCount = 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties51 = atomikosProperties50.asProperties();
        atomikosProperties50.service = "{-1.0=100}";
        long long54 = atomikosProperties50.getDefaultJtaTimeout();
        boolean boolean55 = atomikosProperties50.enableLogging;
        boolean boolean56 = atomikosProperties50.isForceShutdownOnVmExit();
        atomikosProperties50.consoleFileLimit = (byte) -1;
        java.lang.String str59 = atomikosProperties50.getService();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel60 = atomikosProperties50.consoleLogLevel;
        atomikosProperties45.consoleLogLevel = atomikosLoggingLevel60;
        int int62 = atomikosProperties45.getMaxActives();
        long long63 = atomikosProperties45.defaultJtaTimeout;
        boolean boolean64 = properties19.equals((java.lang.Object) long63);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{}" + "'", str27, "{}");
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 100L + "'", long39 == 100L);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{1.0=-1}" + "'", str44, "{1.0=-1}");
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 10000L + "'", long54 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "{-1.0=100}" + "'", str59, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel60 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel60.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 50 + "'", int62 == 50);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 10000L + "'", long63 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test10975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10975");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.maxActives = (short) -1;
        atomikosProperties0.setCheckpointInterval((long) 0);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery7 = atomikosProperties0.getRecovery();
        recovery7.setRetryInterval((long) 0);
        org.junit.Assert.assertNotNull(recovery7);
    }

    @Test
    public void test10976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10976");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel7 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel7);
        atomikosProperties0.setLogBaseName("{={-1.0=100}, -1.0=100}");
        atomikosProperties0.setConsoleFileLimit((-1));
        java.lang.String str13 = atomikosProperties0.logBaseDir;
        atomikosProperties0.enableLogging = true;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel16 = atomikosProperties0.getConsoleLogLevel();
        atomikosProperties0.setTransactionManagerUniqueName("{={-1.0=100}, -1.0=100}");
        boolean boolean19 = atomikosProperties0.isEnableLogging();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(atomikosLoggingLevel16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test10977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10977");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties0.elements();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.String str10 = properties9.toString();
        java.lang.Object obj12 = properties9.remove((java.lang.Object) (short) 100);
        java.lang.Object obj15 = properties9.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj16 = properties9.clone();
        java.util.Set<java.lang.String> strSet17 = properties9.stringPropertyNames();
        java.util.Properties properties18 = new java.util.Properties(properties9);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties20 = atomikosProperties19.asProperties();
        atomikosProperties19.service = "{-1.0=100}";
        java.lang.String str23 = atomikosProperties19.getTransactionManagerUniqueName();
        boolean boolean24 = atomikosProperties19.isSerialJtaTransactions();
        int int25 = atomikosProperties19.getConsoleFileLimit();
        java.util.Properties properties26 = new java.util.Properties();
        java.lang.String str27 = properties26.toString();
        java.lang.Object obj29 = properties26.remove((java.lang.Object) (short) 100);
        java.lang.Object obj32 = properties26.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean34 = properties26.containsKey((java.lang.Object) 0L);
        java.lang.Object obj37 = properties26.replace((java.lang.Object) false, (java.lang.Object) ' ');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties38.setEnableLogging(true);
        atomikosProperties38.setConsoleFileLimit((int) (short) 0);
        boolean boolean43 = properties26.contains((java.lang.Object) atomikosProperties38);
        java.lang.Object obj44 = properties18.putIfAbsent((java.lang.Object) int25, (java.lang.Object) atomikosProperties38);
        java.util.Properties properties45 = new java.util.Properties(properties18);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties18);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery47 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery47.retryInterval = (short) 100;
        recovery47.forgetOrphanedLogEntriesDelay = 'a';
        long long52 = recovery47.getDelay();
        int int53 = recovery47.maxRetries;
        int int54 = recovery47.maxRetries;
        recovery47.setDelay((long) (-1));
        boolean boolean57 = properties0.contains((java.lang.Object) recovery47);
        int int58 = recovery47.getMaxRetries();
        recovery47.maxRetries = 0;
        long long61 = recovery47.retryInterval;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{}" + "'", str27, "{}");
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 10000L + "'", long52 == 10000L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 5 + "'", int53 == 5);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5 + "'", int54 == 5);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 5 + "'", int58 == 5);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 100L + "'", long61 == 100L);
    }

    @Test
    public void test10978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10978");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties();
        java.lang.String str2 = properties1.toString();
        boolean boolean3 = properties1.isEmpty();
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean12 = properties4.containsKey((java.lang.Object) 0L);
        boolean boolean13 = properties1.containsValue((java.lang.Object) 0L);
        boolean boolean16 = properties0.replace((java.lang.Object) 0L, (java.lang.Object) 0.0f, (java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties0.elements();
        boolean boolean18 = properties0.isEmpty();
        java.lang.String str19 = properties0.toString();
        java.io.OutputStream outputStream20 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.save(outputStream20, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir={={-1.0=100}, -1.0=100}, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir={1.0=-1, -1.0=100}, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=true, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{}" + "'", str19, "{}");
    }

    @Test
    public void test10979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10979");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        boolean boolean12 = properties0.containsValue((java.lang.Object) 0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery13 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        boolean boolean14 = properties0.contains((java.lang.Object) recovery13);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean16 = atomikosProperties15.isSerialJtaTransactions();
        atomikosProperties15.logBaseName = "{-1.0=100}";
        int int19 = atomikosProperties15.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery20 = atomikosProperties15.getRecovery();
        atomikosProperties15.setConsoleFileCount((int) (byte) 100);
        atomikosProperties15.setAllowSubTransactions(true);
        atomikosProperties15.setService("tm.out");
        int int27 = atomikosProperties15.consoleFileLimit;
        atomikosProperties15.setDefaultJtaTimeout((long) 'a');
        boolean boolean30 = atomikosProperties15.enableLogging;
        java.lang.String str31 = atomikosProperties15.consoleFileName;
        java.lang.String str32 = atomikosProperties15.transactionManagerUniqueName;
        boolean boolean33 = atomikosProperties15.isSerialJtaTransactions();
        atomikosProperties15.serialJtaTransactions = true;
        boolean boolean36 = properties0.containsValue((java.lang.Object) atomikosProperties15);
        atomikosProperties15.consoleFileCount = (byte) -1;
        boolean boolean39 = atomikosProperties15.threadedTwoPhaseCommit;
        atomikosProperties15.setEnableLogging(true);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 50 + "'", int19 == 50);
        org.junit.Assert.assertNotNull(recovery20);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tm.out" + "'", str31, "tm.out");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test10980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10980");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.forceShutdownOnVmExit = false;
        java.util.Properties properties13 = atomikosProperties0.asProperties();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet14 = properties13.entrySet();
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.String str16 = properties15.toString();
        java.lang.Object obj18 = properties15.remove((java.lang.Object) (short) 100);
        java.lang.Object obj19 = properties15.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean21 = atomikosProperties20.enableLogging;
        long long22 = atomikosProperties20.getDefaultJtaTimeout();
        java.lang.Object obj23 = properties13.put(obj19, (java.lang.Object) atomikosProperties20);
        atomikosProperties20.consoleFileLimit = 32;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertNotNull(objEntrySet14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10000L + "'", long22 == 10000L);
        org.junit.Assert.assertNull(obj23);
    }

    @Test
    public void test10981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10981");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int7 = properties0.size();
        int int8 = properties0.size();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.String str10 = properties9.toString();
        java.lang.Object obj12 = properties9.remove((java.lang.Object) (short) 100);
        java.lang.Object obj15 = properties9.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean17 = properties9.containsKey((java.lang.Object) 0L);
        java.lang.Object obj20 = properties9.replace((java.lang.Object) false, (java.lang.Object) ' ');
        boolean boolean21 = properties9.isEmpty();
        boolean boolean22 = properties9.isEmpty();
        java.lang.Object obj23 = properties0.remove((java.lang.Object) properties9);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties25 = atomikosProperties24.asProperties();
        atomikosProperties24.service = "{-1.0=100}";
        long long28 = atomikosProperties24.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel29 = null;
        atomikosProperties24.setConsoleLogLevel(atomikosLoggingLevel29);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel31 = null;
        atomikosProperties24.setConsoleLogLevel(atomikosLoggingLevel31);
        boolean boolean33 = atomikosProperties24.enableLogging;
        int int34 = atomikosProperties24.getConsoleFileLimit();
        int int35 = atomikosProperties24.consoleFileLimit;
        long long36 = atomikosProperties24.defaultJtaTimeout;
        boolean boolean37 = atomikosProperties24.isSerialJtaTransactions();
        boolean boolean38 = properties9.contains((java.lang.Object) boolean37);
        java.lang.String str40 = properties9.getProperty("tm.out");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10000L + "'", long28 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10000L + "'", long36 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(str40);
    }

    @Test
    public void test10982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10982");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.lang.String str9 = properties0.getProperty("{}");
        java.lang.Object obj12 = properties0.put((java.lang.Object) 86400000L, (java.lang.Object) "{-1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties14 = atomikosProperties13.asProperties();
        atomikosProperties13.service = "{-1.0=100}";
        java.lang.String str17 = atomikosProperties13.getTransactionManagerUniqueName();
        boolean boolean18 = atomikosProperties13.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel19 = atomikosProperties13.getConsoleLogLevel();
        java.lang.Object obj20 = properties0.remove((java.lang.Object) atomikosProperties13);
        boolean boolean21 = atomikosProperties13.isAllowSubTransactions();
        atomikosProperties13.serialJtaTransactions = false;
        int int24 = atomikosProperties13.getConsoleFileLimit();
        int int25 = atomikosProperties13.maxActives;
        long long26 = atomikosProperties13.maxTimeout;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel19 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel19.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 300000L + "'", long26 == 300000L);
    }

    @Test
    public void test10983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10983");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean3 = atomikosProperties0.enableLogging;
        java.lang.String str4 = atomikosProperties0.logBaseDir;
        atomikosProperties0.defaultJtaTimeout = 50L;
        boolean boolean7 = atomikosProperties0.isSerialJtaTransactions();
        java.lang.String str8 = atomikosProperties0.getLogBaseDir();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test10984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10984");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        boolean boolean12 = properties0.containsValue((java.lang.Object) 0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery13 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        boolean boolean14 = properties0.contains((java.lang.Object) recovery13);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean16 = atomikosProperties15.isSerialJtaTransactions();
        atomikosProperties15.logBaseName = "{-1.0=100}";
        int int19 = atomikosProperties15.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery20 = atomikosProperties15.getRecovery();
        atomikosProperties15.setConsoleFileCount((int) (byte) 100);
        atomikosProperties15.setAllowSubTransactions(true);
        atomikosProperties15.setService("tm.out");
        int int27 = atomikosProperties15.consoleFileLimit;
        atomikosProperties15.setDefaultJtaTimeout((long) 'a');
        boolean boolean30 = atomikosProperties15.enableLogging;
        java.lang.String str31 = atomikosProperties15.consoleFileName;
        java.lang.String str32 = atomikosProperties15.transactionManagerUniqueName;
        boolean boolean33 = atomikosProperties15.isSerialJtaTransactions();
        atomikosProperties15.serialJtaTransactions = true;
        boolean boolean36 = properties0.containsValue((java.lang.Object) atomikosProperties15);
        atomikosProperties15.consoleFileCount = (byte) -1;
        long long39 = atomikosProperties15.maxTimeout;
        atomikosProperties15.setLogBaseName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name={}, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 50 + "'", int19 == 50);
        org.junit.Assert.assertNotNull(recovery20);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tm.out" + "'", str31, "tm.out");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 300000L + "'", long39 == 300000L);
    }

    @Test
    public void test10985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10985");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        java.lang.String str6 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseDir("{-1.0=100}");
        atomikosProperties0.setDefaultJtaTimeout((long) 50);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test10986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10986");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties();
        java.lang.String str2 = properties1.toString();
        java.lang.Object obj4 = properties1.remove((java.lang.Object) (short) 100);
        java.lang.Object obj7 = properties1.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int8 = properties1.size();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.Object obj11 = properties9.remove((java.lang.Object) (-1.0d));
        boolean boolean12 = properties9.isEmpty();
        java.lang.Object obj15 = properties9.setProperty("hi!", "{}");
        boolean boolean16 = properties0.remove((java.lang.Object) int8, (java.lang.Object) properties9);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setAllowSubTransactions(true);
        atomikosProperties17.maxActives = (short) -1;
        atomikosProperties17.setService("tm.out");
        boolean boolean24 = properties9.containsValue((java.lang.Object) atomikosProperties17);
        java.util.Properties properties25 = new java.util.Properties();
        java.lang.String str26 = properties25.toString();
        java.util.Properties properties27 = new java.util.Properties(properties25);
        java.util.Properties properties28 = new java.util.Properties();
        java.lang.String str29 = properties28.toString();
        java.lang.Object obj31 = properties28.remove((java.lang.Object) (short) 100);
        java.lang.Object obj34 = properties28.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean36 = properties28.containsKey((java.lang.Object) 0L);
        java.lang.Object obj39 = properties28.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj42 = properties28.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration43 = properties28.keys();
        java.util.Properties properties44 = new java.util.Properties();
        java.lang.String str45 = properties44.toString();
        boolean boolean46 = properties44.isEmpty();
        java.lang.Object obj49 = properties44.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration50 = properties44.elements();
        java.lang.Object obj51 = properties27.replace((java.lang.Object) objEnumeration43, (java.lang.Object) properties44);
        java.util.Enumeration<java.lang.Object> objEnumeration52 = properties44.elements();
        java.lang.String str54 = properties44.getProperty("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties44);
        java.util.Properties properties56 = new java.util.Properties(properties44);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{}" + "'", str26, "{}");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{}" + "'", str29, "{}");
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNotNull(objEnumeration43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "{}" + "'", str45, "{}");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(objEnumeration50);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(objEnumeration52);
        org.junit.Assert.assertNull(str54);
    }

    @Test
    public void test10987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10987");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.lang.String str9 = properties0.getProperty("{}");
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.Object obj12 = properties10.remove((java.lang.Object) (-1.0d));
        boolean boolean13 = properties10.isEmpty();
        java.util.Collection<java.lang.Object> objCollection14 = properties10.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties16 = atomikosProperties15.asProperties();
        atomikosProperties15.service = "{-1.0=100}";
        long long19 = atomikosProperties15.getDefaultJtaTimeout();
        atomikosProperties15.serialJtaTransactions = true;
        long long22 = atomikosProperties15.getDefaultJtaTimeout();
        long long23 = atomikosProperties15.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery24 = atomikosProperties15.getRecovery();
        long long25 = recovery24.delay;
        int int26 = recovery24.maxRetries;
        java.lang.Object obj27 = properties10.get((java.lang.Object) int26);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties30 = atomikosProperties29.asProperties();
        atomikosProperties29.service = "{-1.0=100}";
        long long33 = atomikosProperties29.getDefaultJtaTimeout();
        long long34 = atomikosProperties29.getMaxTimeout();
        int int35 = atomikosProperties29.consoleFileCount;
        int int36 = atomikosProperties29.getMaxActives();
        atomikosProperties29.setAllowSubTransactions(true);
        atomikosProperties29.setCheckpointInterval(300000L);
        boolean boolean41 = properties0.contains((java.lang.Object) atomikosProperties29);
        java.util.Properties properties42 = atomikosProperties29.asProperties();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objCollection14);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10000L + "'", long19 == 10000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10000L + "'", long22 == 10000L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
        org.junit.Assert.assertNotNull(recovery24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10000L + "'", long25 == 10000L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10000L + "'", long33 == 10000L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 300000L + "'", long34 == 300000L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 50 + "'", int36 == 50);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(properties42);
    }

    @Test
    public void test10988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10988");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean3 = atomikosProperties0.enableLogging;
        atomikosProperties0.consoleFileLimit = (byte) 100;
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.util.Properties properties8 = new java.util.Properties(properties6);
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.lang.Object obj13 = properties10.remove((java.lang.Object) (short) 100);
        java.lang.Object obj16 = properties10.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean18 = properties10.containsKey((java.lang.Object) 0L);
        java.lang.Object obj21 = properties10.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties22 = new java.util.Properties(properties10);
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties22.elements();
        atomikosProperties0.set(properties8, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties22);
        int int25 = properties8.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet26 = properties8.entrySet();
        java.util.Collection<java.lang.Object> objCollection27 = properties8.values();
        java.util.Set<java.lang.Object> objSet28 = properties8.keySet();
        java.lang.Object obj31 = properties8.setProperty("", "{{={-1.0=100}, -1.0=100}=}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objEntrySet26);
        org.junit.Assert.assertNotNull(objCollection27);
        org.junit.Assert.assertNotNull(objSet28);
        org.junit.Assert.assertNull(obj31);
    }

    @Test
    public void test10989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10989");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.setCheckpointInterval((long) 5);
        atomikosProperties0.setConsoleFileCount(0);
        boolean boolean11 = atomikosProperties0.isThreadedTwoPhaseCommit();
        int int12 = atomikosProperties0.maxActives;
        java.lang.String str13 = atomikosProperties0.getOutputDir();
        atomikosProperties0.defaultJtaTimeout = 35;
        java.lang.String str16 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties20 = atomikosProperties19.asProperties();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.Object obj23 = properties21.remove((java.lang.Object) (-1.0d));
        boolean boolean24 = properties21.isEmpty();
        int int25 = properties21.size();
        java.lang.String str27 = properties21.getProperty("{}");
        java.lang.Object obj28 = properties20.remove((java.lang.Object) properties21);
        java.lang.String str30 = properties21.getProperty("tmlog");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties31.setEnableLogging(true);
        atomikosProperties31.consoleFileCount = 0;
        int int36 = atomikosProperties31.getMaxActives();
        java.lang.String str37 = atomikosProperties31.getLogBaseDir();
        java.lang.String str38 = atomikosProperties31.service;
        atomikosProperties31.setConsoleFileCount((int) (byte) 1);
        java.lang.Object obj41 = properties21.get((java.lang.Object) atomikosProperties31);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet42 = properties21.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet43 = properties21.entrySet();
        int int44 = properties21.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean47 = atomikosProperties46.isSerialJtaTransactions();
        atomikosProperties46.logBaseName = "{-1.0=100}";
        int int50 = atomikosProperties46.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery51 = atomikosProperties46.getRecovery();
        atomikosProperties46.setConsoleFileCount((int) (byte) 100);
        java.lang.String str54 = atomikosProperties46.logBaseName;
        atomikosProperties46.setCheckpointInterval((long) 18);
        atomikosProperties46.checkpointInterval = 100;
        atomikosProperties46.setConsoleFileName("hi!");
        atomikosProperties46.setService("");
        boolean boolean63 = atomikosProperties46.threadedTwoPhaseCommit;
        java.lang.Class<?> wildcardClass64 = atomikosProperties46.getClass();
        atomikosProperties0.set(properties21, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", (java.lang.Object) wildcardClass64);
        java.lang.String str66 = atomikosProperties0.transactionManagerUniqueName;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 50 + "'", int36 == 50);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNotNull(objEntrySet42);
        org.junit.Assert.assertNotNull(objEntrySet43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 50 + "'", int50 == 50);
        org.junit.Assert.assertNotNull(recovery51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "{-1.0=100}" + "'", str54, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNull(str66);
    }

    @Test
    public void test10990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10990");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        int int5 = atomikosProperties0.getMaxActives();
        java.lang.String str6 = atomikosProperties0.getLogBaseDir();
        java.lang.String str7 = atomikosProperties0.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.getRecovery();
        java.lang.String str9 = atomikosProperties0.service;
        boolean boolean10 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setService("{100=100}");
        atomikosProperties0.forceShutdownOnVmExit = true;
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        long long17 = atomikosProperties0.getDefaultJtaTimeout();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10000L + "'", long17 == 10000L);
    }

    @Test
    public void test10991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10991");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (byte) 0;
        int int3 = recovery0.maxRetries;
        int int4 = recovery0.maxRetries;
        recovery0.forgetOrphanedLogEntriesDelay = (byte) 1;
        recovery0.setDelay((long) 1);
        recovery0.setDelay((long) 3);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
    }

    @Test
    public void test10992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10992");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = (byte) 10;
        long long7 = atomikosProperties0.getMaxTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties12 = atomikosProperties11.asProperties();
        atomikosProperties11.service = "{-1.0=100}";
        long long15 = atomikosProperties11.getDefaultJtaTimeout();
        atomikosProperties11.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties11.logBaseName = "hi!";
        java.lang.String str20 = atomikosProperties11.transactionManagerUniqueName;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel21 = atomikosProperties11.getConsoleLogLevel();
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel21);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel21 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel21.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test10993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10993");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean4 = properties0.contains((java.lang.Object) "{-1.0=100}");
        java.lang.String str5 = properties0.toString();
        boolean boolean6 = properties0.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties7.setAllowSubTransactions(true);
        boolean boolean10 = atomikosProperties7.enableLogging;
        atomikosProperties7.consoleFileLimit = (byte) 100;
        java.util.Properties properties13 = new java.util.Properties();
        java.lang.String str14 = properties13.toString();
        java.util.Properties properties15 = new java.util.Properties(properties13);
        java.util.Properties properties17 = new java.util.Properties();
        java.lang.String str18 = properties17.toString();
        java.lang.Object obj20 = properties17.remove((java.lang.Object) (short) 100);
        java.lang.Object obj23 = properties17.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean25 = properties17.containsKey((java.lang.Object) 0L);
        java.lang.Object obj28 = properties17.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties29 = new java.util.Properties(properties17);
        java.util.Enumeration<java.lang.Object> objEnumeration30 = properties29.elements();
        atomikosProperties7.set(properties15, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties29);
        int int32 = properties15.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet33 = properties15.entrySet();
        boolean boolean34 = properties15.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties36 = atomikosProperties35.asProperties();
        java.util.Properties properties37 = new java.util.Properties();
        java.lang.Object obj39 = properties37.remove((java.lang.Object) (-1.0d));
        boolean boolean40 = properties37.isEmpty();
        int int41 = properties37.size();
        java.lang.String str43 = properties37.getProperty("{}");
        java.lang.Object obj44 = properties36.remove((java.lang.Object) properties37);
        properties15.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties37);
        java.lang.Object obj46 = properties15.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties48 = atomikosProperties47.asProperties();
        atomikosProperties47.service = "{-1.0=100}";
        java.lang.String str51 = atomikosProperties47.getTransactionManagerUniqueName();
        atomikosProperties47.consoleFileName = "hi!";
        atomikosProperties47.setCheckpointInterval((long) 5);
        atomikosProperties47.setConsoleFileCount(0);
        atomikosProperties47.setService("{-1.0=100}");
        atomikosProperties47.setDefaultJtaTimeout((long) 100);
        java.lang.String str62 = atomikosProperties47.getOutputDir();
        boolean boolean63 = atomikosProperties47.isForceShutdownOnVmExit();
        boolean boolean64 = properties0.remove((java.lang.Object) properties15, (java.lang.Object) boolean63);
        java.util.Properties properties65 = new java.util.Properties();
        java.lang.Object obj67 = properties65.remove((java.lang.Object) (-1.0d));
        boolean boolean68 = properties65.isEmpty();
        int int69 = properties65.size();
        java.lang.String str71 = properties65.getProperty("{}");
        java.util.Set<java.lang.Object> objSet72 = properties65.keySet();
        java.util.Enumeration<java.lang.Object> objEnumeration73 = properties65.keys();
        java.lang.Object obj74 = properties65.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties75 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.Object obj76 = properties15.putIfAbsent((java.lang.Object) properties65, (java.lang.Object) atomikosProperties75);
        boolean boolean77 = properties65.isEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{}" + "'", str14, "{}");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{}" + "'", str18, "{}");
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(objEnumeration30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(objEntrySet33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        org.junit.Assert.assertNotNull(properties48);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(objSet72);
        org.junit.Assert.assertNotNull(objEnumeration73);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertEquals(obj74.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj74), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj74), "{}");
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test10994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10994");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.lang.String str6 = atomikosProperties0.outputDir;
        int int7 = atomikosProperties0.consoleFileCount;
        boolean boolean8 = atomikosProperties0.isForceShutdownOnVmExit();
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test10995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10995");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = (byte) 10;
        long long7 = atomikosProperties0.getMaxTimeout();
        boolean boolean8 = atomikosProperties0.allowSubTransactions;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        java.util.Properties properties11 = new java.util.Properties();
        java.util.Properties properties12 = new java.util.Properties();
        java.lang.String str13 = properties12.toString();
        boolean boolean14 = properties12.isEmpty();
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.String str16 = properties15.toString();
        java.lang.Object obj18 = properties15.remove((java.lang.Object) (short) 100);
        java.lang.Object obj21 = properties15.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean23 = properties15.containsKey((java.lang.Object) 0L);
        boolean boolean24 = properties12.containsValue((java.lang.Object) 0L);
        boolean boolean27 = properties11.replace((java.lang.Object) 0L, (java.lang.Object) 0.0f, (java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties11.elements();
        java.lang.String str29 = properties11.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean32 = atomikosProperties31.isSerialJtaTransactions();
        atomikosProperties31.logBaseName = "{-1.0=100}";
        int int35 = atomikosProperties31.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery36 = atomikosProperties31.getRecovery();
        atomikosProperties31.setConsoleFileCount((int) (byte) 100);
        atomikosProperties31.maxTimeout = 50;
        java.lang.String str41 = atomikosProperties31.getConsoleFileName();
        atomikosProperties31.setDefaultJtaTimeout((long) 'a');
        int int44 = atomikosProperties31.maxActives;
        atomikosProperties0.set(properties11, "tm.out", (java.lang.Object) atomikosProperties31);
        java.util.Collection<java.lang.Object> objCollection46 = properties11.values();
        java.util.Properties properties47 = new java.util.Properties();
        java.lang.Object obj49 = properties47.remove((java.lang.Object) (-1.0d));
        boolean boolean50 = properties47.isEmpty();
        java.util.Collection<java.lang.Object> objCollection51 = properties47.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet52 = properties47.entrySet();
        boolean boolean53 = properties11.contains((java.lang.Object) objEntrySet52);
        java.util.Properties properties54 = new java.util.Properties(properties11);
        int int55 = properties11.size();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{}" + "'", str13, "{}");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{}" + "'", str29, "{}");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 50 + "'", int35 == 50);
        org.junit.Assert.assertNotNull(recovery36);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "tm.out" + "'", str41, "tm.out");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 50 + "'", int44 == 50);
        org.junit.Assert.assertNotNull(objCollection46);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objCollection51);
        org.junit.Assert.assertNotNull(objEntrySet52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
    }

    @Test
    public void test10996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10996");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel7 = null;
        atomikosProperties2.setConsoleLogLevel(atomikosLoggingLevel7);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel9 = null;
        atomikosProperties2.setConsoleLogLevel(atomikosLoggingLevel9);
        atomikosProperties2.setLogBaseName("{={-1.0=100}, -1.0=100}");
        boolean boolean13 = atomikosProperties2.enableLogging;
        atomikosProperties2.setOutputDir("");
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel16 = atomikosProperties2.consoleLogLevel;
        atomikosProperties2.checkpointInterval = 0L;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setAllowSubTransactions(true);
        atomikosProperties19.logBaseName = "{={-1.0=100}, -1.0=100}";
        atomikosProperties19.setTransactionManagerUniqueName("");
        java.lang.Object obj26 = properties1.putIfAbsent((java.lang.Object) atomikosProperties2, (java.lang.Object) atomikosProperties19);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties28 = atomikosProperties27.asProperties();
        atomikosProperties27.service = "{-1.0=100}";
        long long31 = atomikosProperties27.getDefaultJtaTimeout();
        atomikosProperties27.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties27.setMaxActives(100);
        java.lang.String str36 = atomikosProperties27.logBaseDir;
        atomikosProperties27.consoleFileCount = (short) 0;
        atomikosProperties27.defaultJtaTimeout = 10000L;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel41 = atomikosProperties27.consoleLogLevel;
        atomikosProperties19.setConsoleLogLevel(atomikosLoggingLevel41);
        java.lang.String str43 = atomikosProperties19.getService();
        atomikosProperties19.setMaxTimeout(52L);
        java.lang.String str46 = atomikosProperties19.outputDir;
        atomikosProperties19.service = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=10, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={1.0=-1}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(atomikosLoggingLevel16);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10000L + "'", long31 == 10000L);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel41 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel41.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str46);
    }

    @Test
    public void test10997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10997");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean3 = properties0.containsValue((java.lang.Object) (-1L));
        java.lang.Object obj5 = properties0.get((java.lang.Object) 97L);
        properties0.clear();
        java.lang.String str8 = properties0.getProperty("{1.0=-1}");
        java.io.OutputStream outputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.save(outputStream9, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=true, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=35, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=10, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test10998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10998");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        java.lang.String str10 = atomikosProperties0.logBaseDir;
        java.lang.String str11 = atomikosProperties0.consoleFileName;
        int int12 = atomikosProperties0.getConsoleFileCount();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.setAllowSubTransactions(true);
        boolean boolean16 = atomikosProperties13.enableLogging;
        boolean boolean17 = atomikosProperties13.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel18 = atomikosProperties13.consoleLogLevel;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel18);
        java.lang.String str20 = atomikosProperties0.getService();
        int int21 = atomikosProperties0.consoleFileCount;
        atomikosProperties0.maxActives = ' ';
        atomikosProperties0.logBaseDir = "{1.0=-1}";
        atomikosProperties0.threadedTwoPhaseCommit = true;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tm.out" + "'", str11, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel18 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel18.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
    }

    @Test
    public void test10999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10999");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.setService("tm.out");
        atomikosProperties0.setSerialJtaTransactions(true);
        java.util.Properties properties14 = atomikosProperties0.asProperties();
        java.lang.String str15 = atomikosProperties0.logBaseName;
        java.lang.String str16 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setSerialJtaTransactions(true);
        java.util.Properties properties19 = atomikosProperties0.asProperties();
        java.util.Properties properties20 = new java.util.Properties();
        java.lang.String str21 = properties20.toString();
        java.util.Properties properties22 = new java.util.Properties(properties20);
        java.util.Properties properties23 = new java.util.Properties();
        java.lang.String str24 = properties23.toString();
        java.lang.Object obj26 = properties23.remove((java.lang.Object) (short) 100);
        java.lang.Object obj29 = properties23.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean31 = properties23.containsKey((java.lang.Object) 0L);
        java.lang.Object obj34 = properties23.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj37 = properties23.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration38 = properties23.keys();
        java.util.Properties properties39 = new java.util.Properties();
        java.lang.String str40 = properties39.toString();
        boolean boolean41 = properties39.isEmpty();
        java.lang.Object obj44 = properties39.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration45 = properties39.elements();
        java.lang.Object obj46 = properties22.replace((java.lang.Object) objEnumeration38, (java.lang.Object) properties39);
        java.util.Enumeration<java.lang.Object> objEnumeration47 = properties39.elements();
        java.util.Enumeration<java.lang.Object> objEnumeration48 = properties39.keys();
        java.lang.Object obj49 = properties39.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties51 = atomikosProperties50.asProperties();
        atomikosProperties50.service = "{-1.0=100}";
        long long54 = atomikosProperties50.getDefaultJtaTimeout();
        atomikosProperties50.setThreadedTwoPhaseCommit(true);
        boolean boolean57 = atomikosProperties50.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery58 = atomikosProperties50.recovery;
        atomikosProperties50.setLogBaseDir("");
        atomikosProperties50.setConsoleFileName("");
        atomikosProperties50.setTransactionManagerUniqueName("{100=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties65.setEnableLogging(true);
        atomikosProperties65.consoleFileCount = 0;
        atomikosProperties65.consoleFileCount = (byte) 0;
        atomikosProperties65.setDefaultJtaTimeout(0L);
        java.lang.Object obj74 = properties39.replace((java.lang.Object) atomikosProperties50, (java.lang.Object) 0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties75 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties76 = atomikosProperties75.asProperties();
        atomikosProperties75.service = "{-1.0=100}";
        long long79 = atomikosProperties75.getDefaultJtaTimeout();
        long long80 = atomikosProperties75.getMaxTimeout();
        int int81 = atomikosProperties75.consoleFileCount;
        long long82 = atomikosProperties75.getCheckpointInterval();
        java.lang.String str83 = atomikosProperties75.outputDir;
        long long84 = atomikosProperties75.getCheckpointInterval();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel85 = atomikosProperties75.getConsoleLogLevel();
        atomikosProperties50.setConsoleLogLevel(atomikosLoggingLevel85);
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel85);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{-1.0=100}" + "'", str15, "{-1.0=100}");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{-1.0=100}" + "'", str16, "{-1.0=100}");
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{}" + "'", str21, "{}");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{}" + "'", str24, "{}");
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(objEnumeration38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "{}" + "'", str40, "{}");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(objEnumeration45);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(objEnumeration47);
        org.junit.Assert.assertNotNull(objEnumeration48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "{100=100}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "{100=100}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "{100=100}");
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 10000L + "'", long54 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(recovery58);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNotNull(properties76);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 10000L + "'", long79 == 10000L);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 300000L + "'", long80 == 300000L);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 500L + "'", long82 == 500L);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 500L + "'", long84 == 500L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel85 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel85.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test11000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test11000");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.recovery;
        atomikosProperties0.setLogBaseDir("");
        long long11 = atomikosProperties0.maxTimeout;
        boolean boolean12 = atomikosProperties0.allowSubTransactions;
        int int13 = atomikosProperties0.consoleFileCount;
        java.lang.String str14 = atomikosProperties0.logBaseName;
        atomikosProperties0.setSerialJtaTransactions(false);
        java.lang.Class<?> wildcardClass17 = atomikosProperties0.getClass();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tmlog" + "'", str14, "tmlog");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }
}
